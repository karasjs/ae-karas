/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./es/enums.js":
/*!*********************!*\
  !*** ./es/enums.js ***!
  \*********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  ES_TYPE: {
    FOLDER_ITEM: 'FolderItem',
    FOOTAGE_ITEM: 'FootageItem',
    COMP_ITEM: 'CompItem',
    UNKNOWN: 'unknown'
  },
  EVENT: {
    INIT: 'ae2karas:init',
    LOG: 'ae2karas:log',
    WARN: 'ae2karas:warn',
    ERROR: 'ae2karas:error',
    FINISH: 'ae2karas:finish',
    CANCEL: 'ae2karas:cancel',
    ADD_TEMP: 'ae2karas:addTemp',
    DEL_TEMP: 'ae2karas:delTemp'
  }
});

/***/ }),

/***/ "./src/component/Alert/index.js":
/*!**************************************!*\
  !*** ./src/component/Alert/index.js ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");
/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! mobx-react */ "./node_modules/_mobx-react@7.2.0@mobx-react/dist/mobxreact.esm.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! classnames */ "./node_modules/_classnames@2.3.1@classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./index.less */ "./src/component/Alert/index.less");
/* harmony import */ var _store_global__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../store/global */ "./src/store/global.js");






var _dec, _class;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var Alert = (_dec = (0,mobx_react__WEBPACK_IMPORTED_MODULE_9__.inject)('global'), _dec(_class = (0,mobx_react__WEBPACK_IMPORTED_MODULE_9__.observer)(_class = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__["default"])(Alert, _React$Component);

  var _super = _createSuper(Alert);

  function Alert() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, Alert);

    return _super.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(Alert, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()('alert', {
          show: !!this.props.global.alert
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "bg"
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "panel"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "c"
      }, this.props.global.alert), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "btn",
        onClick: function onClick() {
          _store_global__WEBPACK_IMPORTED_MODULE_8__["default"].setAlert('');
        }
      }, "\u786E\u5B9A")));
    }
  }]);

  return Alert;
}(react__WEBPACK_IMPORTED_MODULE_5__.Component)) || _class) || _class);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Alert);

/***/ }),

/***/ "./src/component/Composition/index.js":
/*!********************************************!*\
  !*** ./src/component/Composition/index.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");
/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! mobx-react */ "./node_modules/_mobx-react@7.2.0@mobx-react/dist/mobxreact.esm.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! classnames */ "./node_modules/_classnames@2.3.1@classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../store */ "./src/store/index.js");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./index.less */ "./src/component/Composition/index.less");






var _dec, _class;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }






var Composition = (_dec = (0,mobx_react__WEBPACK_IMPORTED_MODULE_9__.inject)('composition'), _dec(_class = (0,mobx_react__WEBPACK_IMPORTED_MODULE_9__.observer)(_class = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__["default"])(Composition, _React$Component);

  var _super = _createSuper(Composition);

  function Composition() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, Composition);

    return _super.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(Composition, [{
    key: "click",
    value: function click(id) {
      _store__WEBPACK_IMPORTED_MODULE_7__["default"].composition.setCurrent(id);
    }
  }, {
    key: "render",
    value: function render() {
      var _this = this;

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "composition"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("table", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("thead", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("tr", null, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("th", {
        className: "checkbox"
      }, "\u9009\u4E2D"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("th", {
        className: "name"
      }, "\u5408\u6210\u540D\u79F0"))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("tbody", null, this.props.composition.list.map(function (item) {
        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("tr", {
          className: classnames__WEBPACK_IMPORTED_MODULE_6___default()({
            checked: item.id === _this.props.composition.currentId
          }),
          key: item.id
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("td", {
          className: "checkbox",
          onClick: function onClick() {
            return _this.click(item.id);
          }
        }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("td", {
          className: "name",
          onClick: function onClick() {
            return _this.click(item.id);
          }
        }, item.name));
      }))));
    }
  }]);

  return Composition;
}(react__WEBPACK_IMPORTED_MODULE_5__.Component)) || _class) || _class);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Composition);

/***/ }),

/***/ "./src/component/List/index.js":
/*!*************************************!*\
  !*** ./src/component/List/index.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");
/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! mobx-react */ "./node_modules/_mobx-react@7.2.0@mobx-react/dist/mobxreact.esm.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! classnames */ "./node_modules/_classnames@2.3.1@classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../store */ "./src/store/index.js");
/* harmony import */ var _Composition__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../Composition */ "./src/component/Composition/index.js");
/* harmony import */ var _util_CSInterface__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/CSInterface */ "./src/util/CSInterface.js");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./index.less */ "./src/component/List/index.less");






var _dec, _class;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }








var List = (_dec = (0,mobx_react__WEBPACK_IMPORTED_MODULE_11__.inject)('global'), _dec(_class = (0,mobx_react__WEBPACK_IMPORTED_MODULE_11__.observer)(_class = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__["default"])(List, _React$Component);

  var _super = _createSuper(List);

  function List() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, List);

    return _super.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(List, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()('list-panel', {
          show: !this.props.global.isPreview
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "btn"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "convert",
        onClick: function onClick() {
          if (_store__WEBPACK_IMPORTED_MODULE_7__["default"].composition.currentId) {
            _store__WEBPACK_IMPORTED_MODULE_7__["default"].global.setLoading(true);
            setTimeout(function () {
              _util_CSInterface__WEBPACK_IMPORTED_MODULE_9__.csInterface.evalScript("$.ae2karas.convert(".concat(_store__WEBPACK_IMPORTED_MODULE_7__["default"].composition.currentId, ")"));
            }, 100);
          } else {
            alert('请先选择合成');
          }
        }
      }, "\u8F6C\u6362"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "refresh",
        onClick: function onClick() {
          _store__WEBPACK_IMPORTED_MODULE_7__["default"].composition.setCurrent(null);
          _util_CSInterface__WEBPACK_IMPORTED_MODULE_9__.csInterface.evalScript('$.ae2karas.getCompositions();');
        }
      }, "\u5237\u65B0")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "choose"
      }, "\u8BF7\u9009\u62E9\u5408\u6210\uFF1A"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement(_Composition__WEBPACK_IMPORTED_MODULE_8__["default"], null));
    }
  }]);

  return List;
}(react__WEBPACK_IMPORTED_MODULE_5__.Component)) || _class) || _class);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (List);

/***/ }),

/***/ "./src/component/Loading/index.js":
/*!****************************************!*\
  !*** ./src/component/Loading/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");
/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! mobx-react */ "./node_modules/_mobx-react@7.2.0@mobx-react/dist/mobxreact.esm.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! classnames */ "./node_modules/_classnames@2.3.1@classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./index.less */ "./src/component/Loading/index.less");






var _dec, _class;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }





var Loading = (_dec = (0,mobx_react__WEBPACK_IMPORTED_MODULE_8__.inject)('global'), _dec(_class = (0,mobx_react__WEBPACK_IMPORTED_MODULE_8__.observer)(_class = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__["default"])(Loading, _React$Component);

  var _super = _createSuper(Loading);

  function Loading() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, Loading);

    return _super.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(Loading, [{
    key: "render",
    value: function render() {
      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()('loading', {
          show: this.props.global.isLoading
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("b", null));
    }
  }]);

  return Loading;
}(react__WEBPACK_IMPORTED_MODULE_5__.Component)) || _class) || _class);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Loading);

/***/ }),

/***/ "./src/component/Preview/index.js":
/*!****************************************!*\
  !*** ./src/component/Preview/index.js ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/inherits */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/inherits.js");
/* harmony import */ var _babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @babel/runtime/helpers/possibleConstructorReturn */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/possibleConstructorReturn.js");
/* harmony import */ var _babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @babel/runtime/helpers/getPrototypeOf */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/getPrototypeOf.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");
/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! mobx-react */ "./node_modules/_mobx-react@7.2.0@mobx-react/dist/mobxreact.esm.js");
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! classnames */ "./node_modules/_classnames@2.3.1@classnames/index.js");
/* harmony import */ var classnames__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(classnames__WEBPACK_IMPORTED_MODULE_6__);
/* harmony import */ var karas__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! karas */ "./node_modules/_karas@0.66.10@karas/index.js");
/* harmony import */ var karas__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(karas__WEBPACK_IMPORTED_MODULE_7__);
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../../store */ "./src/store/index.js");
/* harmony import */ var _util_CSInterface__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../../util/CSInterface */ "./src/util/CSInterface.js");
/* harmony import */ var _util_output__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../../util/output */ "./src/util/output.js");
/* harmony import */ var _util_img__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../../util/img */ "./src/util/img.js");
/* harmony import */ var _util_config__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../../util/config */ "./src/util/config.js");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./index.less */ "./src/component/Preview/index.less");
/* harmony import */ var _store_preview__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../store/preview */ "./src/store/preview.js");






var _dec, _dec2, _class;

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0,_babel_runtime_helpers_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0,_babel_runtime_helpers_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }














function formatTime(duration) {
  var str;

  if (duration >= 1000 * 60) {
    var m = Math.floor(duration / (1000 * 60));

    if (m < 10) {
      m = '0' + s;
    }

    str = m + ':';
    duration -= m * 1000 * 60;
  } else {
    str = '00:';
  }

  if (duration >= 1000) {
    var _s = Math.floor(duration / 1000);

    if (_s < 10) {
      _s = '0' + _s;
    }

    str += _s + '.';
    duration -= _s * 1000;
  } else {
    str += '00.';
  }

  if (duration > 0) {
    str += String(duration).slice(0, 1);
  } else {
    str += '0';
  }

  return str;
}

var root, uuid, type;
var isDrag, originX, W;
var Preview = (_dec = (0,mobx_react__WEBPACK_IMPORTED_MODULE_15__.inject)('global'), _dec2 = (0,mobx_react__WEBPACK_IMPORTED_MODULE_15__.inject)('preview'), _dec(_class = _dec2(_class = (0,mobx_react__WEBPACK_IMPORTED_MODULE_15__.observer)(_class = /*#__PURE__*/function (_React$Component) {
  (0,_babel_runtime_helpers_inherits__WEBPACK_IMPORTED_MODULE_2__["default"])(Preview, _React$Component);

  var _super = _createSuper(Preview);

  function Preview() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, Preview);

    return _super.apply(this, arguments);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(Preview, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this = this;

      var self = this;
      var timeout;
      document.addEventListener('mousemove', function (e) {
        if (isDrag) {
          clearTimeout(timeout);
          timeout = setTimeout(function () {
            var pageX = e.pageX;
            var percent = (pageX - originX) / W;
            var animateController = root.animateController;

            if (animateController.list.length || animateController.__list2.length) {
              var list = animateController.list.length ? animateController.list : animateController.__list2;
              var time = percent * list[0].options.duration;

              if (time < 0) {
                time = 0;
              } else if (time > self.props.preview.total) {
                time = self.props.preview.total;
              }

              _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setTime(time);
              animateController.gotoAndStop(time);
            }
          }, 10);
        }
      });
      document.addEventListener('mouseup', function (e) {
        isDrag = false;
        clearTimeout(timeout);
      });
      window.addEventListener('resize', function () {
        if (root) {
          var data = _this.props.preview.data;
          var _data$props$style = data.props.style,
              width = _data$props$style.width,
              height = _data$props$style.height;
          var stage = _this.stage;
          var canvas = _this.canvas;
          var clientWidth = stage.clientWidth,
              clientHeight = stage.clientHeight;
          var rw = width / clientWidth;
          var rh = height / clientHeight;
          var max = Math.max(rw, rh);

          if (max < 1) {
            max = 1;
          }

          canvas.style.width = width / max + 'px';
          canvas.style.height = height / max + 'px';
          root.resize(width, height);
        }
      });
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(nextProps, nextState, nextContext) {
      var data = this.props.preview.data; // 每次重新转换后新的才生成新的root

      if (data.uuid === uuid && this.props.preview.type === type) {
        return;
      }

      type = this.props.preview.type;
      uuid = data.uuid; // 缩放画布显示保持宽高比

      var _data$props$style2 = data.props.style,
          width = _data$props$style2.width,
          height = _data$props$style2.height;
      _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setVw(width);
      _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setVh(height);
      var stage = this.stage;
      var canvas = this.canvas;
      var clientWidth = stage.clientWidth,
          clientHeight = stage.clientHeight;
      var rw = width / clientWidth;
      var rh = height / clientHeight;
      var max = Math.max(rw, rh);

      if (max < 1) {
        max = 1;
      }

      canvas.style.width = width / max + 'px';
      canvas.style.height = height / max + 'px';

      if (root) {
        root.destroy();
        root = null;
        canvas.innerHTML = '';
      } // 不同类型type根节点


      root = karas__WEBPACK_IMPORTED_MODULE_7___default().parse({
        tagName: type,
        props: {
          width: width,
          height: height
        },
        children: [karas__WEBPACK_IMPORTED_MODULE_7___default().parse(data, {
          autoPlay: false
        })],
        abbr: false
      }, canvas); // 时间显示

      _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setTime(0);
      var animateController = root.animateController;

      if (animateController.list.length) {
        _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setTotal(animateController.list[0].options.duration);
      } else if (animateController.__list2.length) {
        _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setTotal(animateController.__list2[0].options.duration);
      } else {
        _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setTotal(0);
      } // 侦听root的refresh事件刷新时间和进度条


      animateController.on('frame', function () {
        _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setTime(animateController.list[0].currentTime);
      });
      animateController.on('finish', function () {
        _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setPlay(false);
      });
    }
  }, {
    key: "change",
    value: function change(v) {
      _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setType(v);
    }
  }, {
    key: "unit",
    value: function unit(v) {
      _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setUnit(v);
    }
  }, {
    key: "changeRem",
    value: function changeRem(rem) {
      _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setRem(rem);
    }
  }, {
    key: "changeVw",
    value: function changeVw(vw) {
      _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setVw(vw);
    }
  }, {
    key: "changeVh",
    value: function changeVh(vh) {
      _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setVh(vh);
    }
  }, {
    key: "changeIterations",
    value: function changeIterations(e) {
      var n = parseInt(e.target.value);

      if (!n) {
        n = 'Infinity';
      }

      _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setIterations(n);
    }
  }, {
    key: "changePrecision",
    value: function changePrecision(e) {
      var n = parseInt(e.target.value);

      if (!n) {
        n = 0;
      }

      _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setPrecision(n);
    }
  }, {
    key: "clickBg",
    value: function clickBg(v) {
      _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setBgBlack(v);
    }
  }, {
    key: "clickPlay",
    value: function clickPlay() {
      if (root) {
        _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setPlay(true);

        if (this.props.preview.time === this.props.preview.total) {
          root.animateController.gotoAndPlay(0);
        } else {
          root.animateController.play();
        }
      }
    }
  }, {
    key: "clickPause",
    value: function clickPause() {
      if (root) {
        _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setPlay(false);
        root.animateController.pause();
      }
    }
  }, {
    key: "mouseDown",
    value: function mouseDown(e) {
      isDrag = true;
      var target = e.target.parentNode;
      W = e.target.parentNode.clientWidth;
      originX = target.offsetLeft;

      while (target.parentNode) {
        target = target.parentNode;
        originX += target.offsetLeft || 0;
      }

      if (root) {
        var animateController = root.animateController;
        animateController.pause();
      }
    }
  }, {
    key: "clickProgress",
    value: function clickProgress(e) {
      var target = e.target;

      if (target.className === 'drag') {
        return;
      }

      if (target.className === 'bar') {
        target = target.parentNode;
      }

      var pageX = e.pageX;
      W = target.clientWidth;
      originX = target.offsetLeft;

      while (target.parentNode) {
        target = target.parentNode;
        originX += target.offsetLeft || 0;
      }

      var percent = (pageX - originX) / W;
      var animateController = root.animateController;

      if (animateController.list.length || animateController.__list2.length) {
        var list = animateController.list.length ? animateController.list : animateController.__list2;
        var time = percent * list[0].options.duration;

        if (time < 0) {
          time = 0;
        } else if (time > this.props.preview.total) {
          time = total;
        }

        _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setTime(time);
        animateController.gotoAndStop(time);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props$preview = this.props.preview,
          data = _this$props$preview.data,
          type = _this$props$preview.type,
          unit = _this$props$preview.unit,
          rem = _this$props$preview.rem,
          vw = _this$props$preview.vw,
          vh = _this$props$preview.vh,
          time = _this$props$preview.time,
          total = _this$props$preview.total,
          isPlaying = _this$props$preview.isPlaying,
          isBgBlack = _this$props$preview.isBgBlack;
      var iterations = this.props.preview.iterations;

      if (iterations === 'Infinity') {
        iterations = 0;
      }

      var list = [];

      if (data) {
        var library = data.library;

        for (var i = 0, len = library.length; i < len; i++) {
          var item = library[i];

          if (item.tagName === 'img') {
            list.push(item);
          }
        }
      }

      return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()('preview-panel', {
          show: _store__WEBPACK_IMPORTED_MODULE_8__["default"].global.isPreview
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "btn"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "return",
        onClick: function onClick() {
          if (root) {
            root.destroy();
            root = null;
          }

          (0,mobx__WEBPACK_IMPORTED_MODULE_16__.transaction)(function () {
            _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setPlay(false);
            _store__WEBPACK_IMPORTED_MODULE_8__["default"].preview.setTime(0);
            _store__WEBPACK_IMPORTED_MODULE_8__["default"].global.setPreview(false);
            _util_img__WEBPACK_IMPORTED_MODULE_11__["default"].reset();
          });
        }
      }, "\u8FD4\u56DE"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "type"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        onClick: function onClick() {
          return _this2.change('canvas');
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "radio",
        name: "type",
        value: "canvas",
        checked: type === 'canvas',
        readOnly: true
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "canvas")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        onClick: function onClick() {
          return _this2.change('svg');
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "radio",
        name: "type",
        value: "svg",
        checked: type === 'svg',
        readOnly: true
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "svg")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        onClick: function onClick() {
          return _this2.change('webgl');
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "radio",
        name: "type",
        value: "webgl",
        checked: type === 'webgl',
        readOnly: true
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "webgl")))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "container"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("ul", {
        className: "menu"
      }, list.map(function (item, i) {
        return /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("li", {
          title: item.name,
          key: i
        }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("img", {
          src: item.props.src
        }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", null, item.props.style.width, " * ", item.props.style.height));
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "view"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "stage",
        ref: function ref(el) {
          return _this2.stage = el;
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()('canvas', {
          mosaic: !isBgBlack
        }),
        ref: function ref(el) {
          return _this2.canvas = el;
        }
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "control"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()('bg', {
          mosaic: !isBgBlack
        }),
        onClick: function onClick() {
          return _this2.clickBg(!isBgBlack);
        }
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()('play', {
          show: !isPlaying
        }),
        onClick: function onClick() {
          return _this2.clickPlay();
        }
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()('pause', {
          show: isPlaying
        }),
        onClick: function onClick() {
          return _this2.clickPause();
        }
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "time"
      }, formatTime(time || 0)), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "progress",
        onClick: function onClick(e) {
          return _this2.clickProgress(e);
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "bar",
        style: {
          width: (time * 100 / total || 0) + '%'
        }
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "drag",
        style: {
          left: (time * 100 / total || 0) + '%'
        },
        onMouseDown: function onMouseDown(e) {
          return _this2.mouseDown(e);
        }
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "time2"
      }, formatTime(total || 0)))), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "side"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        className: "block"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "checkbox",
        ref: function ref(el) {
          return _this2.format = el;
        },
        defaultChecked: this.props.preview.format
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "JSON\u683C\u5F0F\u5316")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        className: "block"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "checkbox",
        ref: function ref(el) {
          return _this2.base64 = el;
        },
        defaultChecked: this.props.preview.base64
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "\u56FE\u7247base64")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        className: "block"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "\u5FAA\u73AF\u6B21\u6570(0\u4E3A\u65E0\u7A77)"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "number",
        min: "0",
        value: iterations || 0,
        onChange: function onChange(e) {
          return _this2.changeIterations(e);
        }
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        className: "block"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "\u5C0F\u6570\u7CBE\u5EA6(0\u4E3A\u6574\u6570)"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "number",
        min: "0",
        value: this.props.preview.precision || 0,
        onChange: function onChange(e) {
          return _this2.changePrecision(e);
        }
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("p", null, "\u8F93\u51FA\u5355\u4F4D"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        className: "inline",
        onClick: function onClick() {
          return _this2.unit('px');
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "radio",
        name: "unit",
        value: "px",
        checked: unit === 'px',
        readOnly: true
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "px")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        className: "inline",
        onClick: function onClick() {
          return _this2.unit('rem');
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "radio",
        name: "unit",
        value: "rem",
        checked: unit === 'rem',
        readOnly: true
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "rem")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        className: "inline",
        onClick: function onClick() {
          return _this2.unit('vw');
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "radio",
        name: "unit",
        value: "vw",
        checked: unit === 'vw',
        readOnly: true
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "vw")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        className: "inline last",
        onClick: function onClick() {
          return _this2.unit('vh');
        }
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "radio",
        name: "unit",
        value: "vh",
        checked: unit === 'vh',
        readOnly: true
      }), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "vh")), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()('block', {
          hidden: unit !== 'rem'
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "Root FontSize"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "number",
        min: "0",
        className: "big",
        value: rem,
        onChange: function onChange(e) {
          return _this2.changeRem(e);
        }
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()('block', {
          hidden: unit !== 'vw'
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "Root Width"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "number",
        min: "0",
        className: "big",
        value: vw,
        onChange: function onChange(e) {
          return _this2.changeVw(e);
        }
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("label", {
        className: classnames__WEBPACK_IMPORTED_MODULE_6___default()('block', {
          hidden: unit !== 'vh'
        })
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("span", null, "Root Height"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("input", {
        type: "number",
        min: "0",
        className: "big",
        value: vh,
        onChange: function onChange(e) {
          return _this2.changeVh(e);
        }
      })), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "btn"
      }, /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "export",
        onClick: function onClick() {
          var _this2$props$preview = _this2.props.preview,
              data = _this2$props$preview.data,
              iterations = _this2$props$preview.iterations,
              precision = _this2$props$preview.precision;
          var format = _this2.format,
              base64 = _this2.base64;
          data = JSON.parse(JSON.stringify(data));
          delete data.uuid;
          _store__WEBPACK_IMPORTED_MODULE_8__["default"].global.setLoading(true);
          (0,_util_output__WEBPACK_IMPORTED_MODULE_10__["default"])(data, {
            iterations: iterations,
            precision: precision,
            unit: unit,
            rem: rem,
            vw: vw,
            vh: vh
          });

          function cb() {
            var str = format.checked ? JSON.stringify(data, null, 2) : JSON.stringify(data);
            str = str.replace(/'/g, '\\\'');
            str = str.replace(/\n/g, '\\\n');
            _util_CSInterface__WEBPACK_IMPORTED_MODULE_9__.csInterface.evalScript("$.ae2karas.export('".concat(str, "')"));
            _store__WEBPACK_IMPORTED_MODULE_8__["default"].global.setAlert('导出成功！');
            _store__WEBPACK_IMPORTED_MODULE_8__["default"].global.setLoading(false);
          }

          if (base64.checked) {
            _util_img__WEBPACK_IMPORTED_MODULE_11__["default"].base64(data, cb);
          } else {
            cb();
          }
        }
      }, "\u5BFC\u51FA"), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_5__.createElement("div", {
        className: "upload",
        onClick: function onClick() {
          var _this2$props$preview2 = _this2.props.preview,
              data = _this2$props$preview2.data,
              iterations = _this2$props$preview2.iterations,
              precision = _this2$props$preview2.precision;
          var format = _this2.format,
              base64 = _this2.base64;
          var name = data.name;
          data = JSON.parse(JSON.stringify(data));
          delete data.uuid;
          _store__WEBPACK_IMPORTED_MODULE_8__["default"].global.setLoading(true);
          (0,_util_output__WEBPACK_IMPORTED_MODULE_10__["default"])(data, {
            iterations: iterations,
            precision: precision,
            unit: unit,
            rem: rem,
            vw: vw,
            vh: vh
          });

          function cb() {
            var str = format.checked ? JSON.stringify(data, null, 2) : JSON.stringify(data);
            str = str.replace(/'/g, '\\\'');
            var blob = new Blob([str], {
              type: 'application/json'
            });
            var file = new File([blob], name + Date.now() + '.json', {
              type: 'application/json'
            });
            var formData = new FormData();
            formData.append(file.name, file);
            formData.append('mode', 'public');
            fetch(_util_config__WEBPACK_IMPORTED_MODULE_12__["default"].UPLOAD_JSON, {
              method: 'POST',
              body: formData
            }).then(function (res) {
              return res.json();
            }).then(function (res) {
              _store__WEBPACK_IMPORTED_MODULE_8__["default"].global.setLoading(false);

              if (res.success && res.result) {
                _store__WEBPACK_IMPORTED_MODULE_8__["default"].global.setAlert('已上传至：\n' + res.result);
              } else {
                _store__WEBPACK_IMPORTED_MODULE_8__["default"].global.setAlert('上传失败！');
              }
            })["catch"](function (e) {
              _store__WEBPACK_IMPORTED_MODULE_8__["default"].global.setLoading(false);
              _store__WEBPACK_IMPORTED_MODULE_8__["default"].global.setAlert('上传失败！');
            });
          }

          if (base64.checked) {
            _util_img__WEBPACK_IMPORTED_MODULE_11__["default"].base64(data, cb);
          } else {
            _util_img__WEBPACK_IMPORTED_MODULE_11__["default"].upload(data, cb);
          }
        }
      }, "\u4E0A\u4F20")))));
    }
  }]);

  return Preview;
}(react__WEBPACK_IMPORTED_MODULE_5__.Component)) || _class) || _class) || _class);
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (Preview);

/***/ }),

/***/ "./src/store/composition.js":
/*!**********************************!*\
  !*** ./src/store/composition.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");





var Composition = /*#__PURE__*/function () {
  function Composition() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, Composition);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "list", []);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "currentId", null);

    (0,mobx__WEBPACK_IMPORTED_MODULE_3__.makeAutoObservable)(this);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(Composition, [{
    key: "update",
    value: function update(list) {
      this.list = list;
    }
  }, {
    key: "setCurrent",
    value: function setCurrent(id) {
      this.currentId = id;
    }
  }]);

  return Composition;
}();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Composition());

/***/ }),

/***/ "./src/store/global.js":
/*!*****************************!*\
  !*** ./src/store/global.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");





var Global = /*#__PURE__*/function () {
  function Global() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, Global);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "isLoading", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "isPreview", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "alert", '');

    (0,mobx__WEBPACK_IMPORTED_MODULE_3__.makeAutoObservable)(this);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(Global, [{
    key: "setLoading",
    value: function setLoading(b) {
      this.isLoading = b;
    }
  }, {
    key: "setPreview",
    value: function setPreview(b) {
      this.isPreview = b;
    }
  }, {
    key: "setAlert",
    value: function setAlert(b) {
      this.alert = b;
    }
  }]);

  return Global;
}();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Global());

/***/ }),

/***/ "./src/store/index.js":
/*!****************************!*\
  !*** ./src/store/index.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _composition__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./composition */ "./src/store/composition.js");
/* harmony import */ var _global__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./global */ "./src/store/global.js");
/* harmony import */ var _preview__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./preview */ "./src/store/preview.js");



/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  composition: _composition__WEBPACK_IMPORTED_MODULE_0__["default"],
  global: _global__WEBPACK_IMPORTED_MODULE_1__["default"],
  preview: _preview__WEBPACK_IMPORTED_MODULE_2__["default"]
});

/***/ }),

/***/ "./src/store/preview.js":
/*!******************************!*\
  !*** ./src/store/preview.js ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/classCallCheck */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/classCallCheck.js");
/* harmony import */ var _babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/createClass */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/createClass.js");
/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/defineProperty.js");
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");





var Preview = /*#__PURE__*/function () {
  function Preview() {
    (0,_babel_runtime_helpers_classCallCheck__WEBPACK_IMPORTED_MODULE_0__["default"])(this, Preview);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "data", null);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "type", 'canvas');

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "unit", 'px');

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "rem", 16);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "vw", 750);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "vh", 1334);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "format", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "base64", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "iterations", 1);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "precision", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "time", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "total", 0);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "isPlaying", false);

    (0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_2__["default"])(this, "isBgBlack", false);

    (0,mobx__WEBPACK_IMPORTED_MODULE_3__.makeAutoObservable)(this);
  }

  (0,_babel_runtime_helpers_createClass__WEBPACK_IMPORTED_MODULE_1__["default"])(Preview, [{
    key: "setData",
    value: function setData(data) {
      this.data = data;
    }
  }, {
    key: "setType",
    value: function setType(type) {
      this.type = type;
    }
  }, {
    key: "setUnit",
    value: function setUnit(unit) {
      this.unit = unit;
    }
  }, {
    key: "setFormat",
    value: function setFormat(format) {
      this.format = format;
    }
  }, {
    key: "setBase64",
    value: function setBase64(base64) {
      this.base64 = base64;
    }
  }, {
    key: "setFontSize",
    value: function setFontSize(fontSize) {
      this.fontSize = fontSize;
    }
  }, {
    key: "setRem",
    value: function setRem(rem) {
      this.rem = rem;
    }
  }, {
    key: "setVw",
    value: function setVw(vw) {
      this.vw = vw;
    }
  }, {
    key: "setVh",
    value: function setVh(vh) {
      this.vh = vh;
    }
  }, {
    key: "setIterations",
    value: function setIterations(iterations) {
      this.iterations = iterations;
    }
  }, {
    key: "setPrecision",
    value: function setPrecision(precision) {
      this.precision = precision;
    }
  }, {
    key: "setTime",
    value: function setTime(time) {
      this.time = time;
    }
  }, {
    key: "setTotal",
    value: function setTotal(total) {
      this.total = total;
    }
  }, {
    key: "setPlay",
    value: function setPlay(isPlaying) {
      this.isPlaying = isPlaying;
    }
  }, {
    key: "setBgBlack",
    value: function setBgBlack(isBgBlack) {
      this.isBgBlack = isBgBlack;
    }
  }]);

  return Preview;
}();

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (new Preview());

/***/ }),

/***/ "./src/util/CSInterface.js":
/*!*********************************!*\
  !*** ./src/util/CSInterface.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "CSInterface": () => (/* binding */ CSInterface),
/* harmony export */   "SystemPath": () => (/* binding */ SystemPath),
/* harmony export */   "csInterface": () => (/* binding */ csInterface)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/typeof.js");


/* eslint-disable */

/**************************************************************************************************
 *
 * ADOBE SYSTEMS INCORPORATED
 * Copyright 2013 Adobe Systems Incorporated
 * All Rights Reserved.
 *
 * NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the
 * terms of the Adobe license agreement accompanying it.  If you have received this file from a
 * source other than Adobe, then your use, modification, or distribution of it requires the prior
 * written permission of Adobe.
 *
 **************************************************************************************************/

/** CSInterface - v5.0.0 */

/**
 * Stores constants for the window types supported by the CSXS infrastructure.
 */
function CSXSWindowType() {}
/** Constant for the CSXS window type Panel. */


CSXSWindowType._PANEL = 'Panel';
/** Constant for the CSXS window type Modeless. */

CSXSWindowType._MODELESS = 'Modeless';
/** Constant for the CSXS window type ModalDialog. */

CSXSWindowType._MODAL_DIALOG = 'ModalDialog';
/** EvalScript error message */

var EvalScript_ErrMessage = 'EvalScript error.';
var cep = cep || {
  util: {}
};
/**
 * @class Version
 * Defines a version number with major, minor, micro, and special
 * components. The major, minor and micro values are numeric; the special
 * value can be any string.
 *
 * @param major   The major version component, a positive integer up to nine digits long.
 * @param minor   The minor version component, a positive integer up to nine digits long.
 * @param micro   The micro version component, a positive integer up to nine digits long.
 * @param special The special version component, an arbitrary string.
 *
 * @return A new \c Version object.
 */

function Version(major, minor, micro, special) {
  this.major = major;
  this.minor = minor;
  this.micro = micro;
  this.special = special;
}
/**
 * The maximum value allowed for a numeric version component.
 * This reflects the maximum value allowed in PlugPlug and the manifest schema.
 */


Version.MAX_NUM = 999999999;
/**
 * @class VersionBound
 * Defines a boundary for a version range, which associates a \c Version object
 * with a flag for whether it is an inclusive or exclusive boundary.
 *
 * @param version   The \c #Version object.
 * @param inclusive True if this boundary is inclusive, false if it is exclusive.
 *
 * @return A new \c VersionBound object.
 */

function VersionBound(version, inclusive) {
  this.version = version;
  this.inclusive = inclusive;
}
/**
 * @class VersionRange
 * Defines a range of versions using a lower boundary and optional upper boundary.
 *
 * @param lowerBound The \c #VersionBound object.
 * @param upperBound The \c #VersionBound object, or null for a range with no upper boundary.
 *
 * @return A new \c VersionRange object.
 */


function VersionRange(lowerBound, upperBound) {
  this.lowerBound = lowerBound;
  this.upperBound = upperBound;
}
/**
 * @class Runtime
 * Represents a runtime related to the CEP infrastructure.
 * Extensions can declare dependencies on particular
 * CEP runtime versions in the extension manifest.
 *
 * @param name    The runtime name.
 * @param version A \c #VersionRange object that defines a range of valid versions.
 *
 * @return A new \c Runtime object.
 */


function Runtime(name, versionRange) {
  this.name = name;
  this.versionRange = versionRange;
}
/**
 * @class Extension
 * Encapsulates a CEP-based extension to an Adobe application.
 *
 * @param id              The unique identifier of this extension.
 * @param name            The localizable display name of this extension.
 * @param mainPath        The path of the "index.html" file.
 * @param basePath        The base path of this extension.
 * @param windowType          The window type of the main window of this extension.
 Valid values are defined by \c #CSXSWindowType.
 * @param width           The default width in pixels of the main window of this extension.
 * @param height          The default height in pixels of the main window of this extension.
 * @param minWidth        The minimum width in pixels of the main window of this extension.
 * @param minHeight       The minimum height in pixels of the main window of this extension.
 * @param maxWidth        The maximum width in pixels of the main window of this extension.
 * @param maxHeight       The maximum height in pixels of the main window of this extension.
 * @param defaultExtensionDataXml The extension data contained in the default \c ExtensionDispatchInfo section of the extension manifest.
 * @param specialExtensionDataXml The extension data contained in the application-specific \c ExtensionDispatchInfo section of the extension manifest.
 * @param requiredRuntimeList     An array of \c Runtime objects for runtimes required by this extension.
 * @param isAutoVisible       True if this extension is visible on loading.
 * @param isPluginExtension   True if this extension has been deployed in the Plugins folder of the host application.
 *
 * @return A new \c Extension object.
 */


function Extension(id, name, mainPath, basePath, windowType, width, height, minWidth, minHeight, maxWidth, maxHeight, defaultExtensionDataXml, specialExtensionDataXml, requiredRuntimeList, isAutoVisible, isPluginExtension) {
  this.id = id;
  this.name = name;
  this.mainPath = mainPath;
  this.basePath = basePath;
  this.windowType = windowType;
  this.width = width;
  this.height = height;
  this.minWidth = minWidth;
  this.minHeight = minHeight;
  this.maxWidth = maxWidth;
  this.maxHeight = maxHeight;
  this.defaultExtensionDataXml = defaultExtensionDataXml;
  this.specialExtensionDataXml = specialExtensionDataXml;
  this.requiredRuntimeList = requiredRuntimeList;
  this.isAutoVisible = isAutoVisible;
  this.isPluginExtension = isPluginExtension;
}
/**
 * @class CSEvent
 * A standard JavaScript event, the base class for CEP events.
 *
 * @param type        The name of the event type.
 * @param scope       The scope of event, can be "GLOBAL" or "APPLICATION".
 * @param appId       The unique identifier of the application that generated the event.
 * @param extensionId     The unique identifier of the extension that generated the event.
 *
 * @return A new \c CSEvent object
 */


function CSEvent(type, scope, appId, extensionId) {
  this.type = type;
  this.scope = scope;
  this.appId = appId;
  this.extensionId = extensionId;
}
/** Event-specific data. */


CSEvent.prototype.data = '';
/**
 * @class SystemPath
 * Stores operating-system-specific location constants for use in the
 * \c #CSInterface.getSystemPath() method.
 * @return A new \c SystemPath object.
 */

function SystemPath() {}
/** The path to user data.  */


SystemPath.USER_DATA = 'userData';
/** The path to common files for Adobe applications.  */

SystemPath.COMMON_FILES = 'commonFiles';
/** The path to the user's default document folder.  */

SystemPath.MY_DOCUMENTS = 'myDocuments';
/** @deprecated. Use \c #SystemPath.Extension.  */

SystemPath.APPLICATION = 'application';
/** The path to current extension.  */

SystemPath.EXTENSION = 'extension';
/** The path to hosting application's executable.  */

SystemPath.HOST_APPLICATION = 'hostApplication';
/**
 * @class ColorType
 * Stores color-type constants.
 */

function ColorType() {}
/** RGB color type. */


ColorType.RGB = 'rgb';
/** Gradient color type. */

ColorType.GRADIENT = 'gradient';
/** Null color type. */

ColorType.NONE = 'none';
/**
 * @class RGBColor
 * Stores an RGB color with red, green, blue, and alpha values.
 * All values are in the range [0.0 to 255.0]. Invalid numeric values are
 * converted to numbers within this range.
 *
 * @param red   The red value, in the range [0.0 to 255.0].
 * @param green The green value, in the range [0.0 to 255.0].
 * @param blue  The blue value, in the range [0.0 to 255.0].
 * @param alpha The alpha (transparency) value, in the range [0.0 to 255.0].
 *      The default, 255.0, means that the color is fully opaque.
 *
 * @return A new RGBColor object.
 */

function RGBColor(red, green, blue, alpha) {
  this.red = red;
  this.green = green;
  this.blue = blue;
  this.alpha = alpha;
}
/**
 * @class Direction
 * A point value  in which the y component is 0 and the x component
 * is positive or negative for a right or left direction,
 * or the x component is 0 and the y component is positive or negative for
 * an up or down direction.
 *
 * @param x     The horizontal component of the point.
 * @param y     The vertical component of the point.
 *
 * @return A new \c Direction object.
 */


function Direction(x, y) {
  this.x = x;
  this.y = y;
}
/**
 * @class GradientStop
 * Stores gradient stop information.
 *
 * @param offset   The offset of the gradient stop, in the range [0.0 to 1.0].
 * @param rgbColor The color of the gradient at this point, an \c #RGBColor object.
 *
 * @return GradientStop object.
 */


function GradientStop(offset, rgbColor) {
  this.offset = offset;
  this.rgbColor = rgbColor;
}
/**
 * @class GradientColor
 * Stores gradient color information.
 *
 * @param type          The gradient type, must be "linear".
 * @param direction     A \c #Direction object for the direction of the gradient
 (up, down, right, or left).
 * @param numStops          The number of stops in the gradient.
 * @param gradientStopList  An array of \c #GradientStop objects.
 *
 * @return A new \c GradientColor object.
 */


function GradientColor(type, direction, numStops, arrGradientStop) {
  this.type = type;
  this.direction = direction;
  this.numStops = numStops;
  this.arrGradientStop = arrGradientStop;
}
/**
 * @class UIColor
 * Stores color information, including the type, anti-alias level, and specific color
 * values in a color object of an appropriate type.
 *
 * @param type          The color type, 1 for "rgb" and 2 for "gradient".
 The supplied color object must correspond to this type.
 * @param antialiasLevel    The anti-alias level constant.
 * @param color         A \c #RGBColor or \c #GradientColor object containing specific color information.
 *
 * @return A new \c UIColor object.
 */


function UIColor(type, antialiasLevel, color) {
  this.type = type;
  this.antialiasLevel = antialiasLevel;
  this.color = color;
}
/**
 * @class AppSkinInfo
 * Stores window-skin properties, such as color and font. All color parameter values are \c #UIColor objects except that systemHighlightColor is \c #RGBColor object.
 *
 * @param baseFontFamily        The base font family of the application.
 * @param baseFontSize          The base font size of the application.
 * @param appBarBackgroundColor     The application bar background color.
 * @param panelBackgroundColor      The background color of the extension panel.
 * @param appBarBackgroundColorSRGB     The application bar background color, as sRGB.
 * @param panelBackgroundColorSRGB      The background color of the extension panel, as sRGB.
 * @param systemHighlightColor          The operating-system highlight color, as sRGB.
 *
 * @return AppSkinInfo object.
 */


function AppSkinInfo(baseFontFamily, baseFontSize, appBarBackgroundColor, panelBackgroundColor, appBarBackgroundColorSRGB, panelBackgroundColorSRGB, systemHighlightColor) {
  this.baseFontFamily = baseFontFamily;
  this.baseFontSize = baseFontSize;
  this.appBarBackgroundColor = appBarBackgroundColor;
  this.panelBackgroundColor = panelBackgroundColor;
  this.appBarBackgroundColorSRGB = appBarBackgroundColorSRGB;
  this.panelBackgroundColorSRGB = panelBackgroundColorSRGB;
  this.systemHighlightColor = systemHighlightColor;
}
/**
 * @class HostEnvironment
 * Stores information about the environment in which the extension is loaded.
 *
 * @param appName   The application's name.
 * @param appVersion    The application's version.
 * @param appLocale The application's current license locale.
 * @param appUILocale   The application's current UI locale.
 * @param appId     The application's unique identifier.
 * @param isAppOnline  True if the application is currently online.
 * @param appSkinInfo   An \c #AppSkinInfo object containing the application's default color and font styles.
 *
 * @return A new \c HostEnvironment object.
 */


function HostEnvironment(appName, appVersion, appLocale, appUILocale, appId, isAppOnline, appSkinInfo) {
  this.appName = appName;
  this.appVersion = appVersion;
  this.appLocale = appLocale;
  this.appUILocale = appUILocale;
  this.appId = appId;
  this.isAppOnline = isAppOnline;
  this.appSkinInfo = appSkinInfo;
}
/**
 * @class HostCapabilities
 * Stores information about the host capabilities.
 *
 * @param EXTENDED_PANEL_MENU True if the application supports panel menu.
 * @param EXTENDED_PANEL_ICONS True if the application supports panel icon.
 * @param DELEGATE_APE_ENGINE True if the application supports delegated APE engine.
 * @param SUPPORT_HTML_EXTENSIONS True if the application supports HTML extensions.
 * @param DISABLE_FLASH_EXTENSIONS True if the application disables FLASH extensions.
 *
 * @return A new \c HostCapabilities object.
 */


function HostCapabilities(EXTENDED_PANEL_MENU, EXTENDED_PANEL_ICONS, DELEGATE_APE_ENGINE, SUPPORT_HTML_EXTENSIONS, DISABLE_FLASH_EXTENSIONS) {
  this.EXTENDED_PANEL_MENU = EXTENDED_PANEL_MENU;
  this.EXTENDED_PANEL_ICONS = EXTENDED_PANEL_ICONS;
  this.DELEGATE_APE_ENGINE = DELEGATE_APE_ENGINE;
  this.SUPPORT_HTML_EXTENSIONS = SUPPORT_HTML_EXTENSIONS;
  this.DISABLE_FLASH_EXTENSIONS = DISABLE_FLASH_EXTENSIONS; // Since 5.0.0
}
/**
 * @class ApiVersion
 * Stores current api version.
 *
 * Since 4.2.0
 *
 * @param major  The major version
 * @param minor  The minor version.
 * @param micro  The micro version.
 *
 * @return ApiVersion object.
 */


function ApiVersion(major, minor, micro) {
  this.major = major;
  this.minor = minor;
  this.micro = micro;
} //------------------------------ CSInterface ----------------------------------

/**
 * @class CSInterface
 * This is the entry point to the CEP extensibility infrastructure.
 * Instantiate this object and use it to:
 * <ul>
 * <li>Access information about the host application in which an extension is running</li>
 * <li>Launch an extension</li>
 * <li>Register interest in event notifications, and dispatch events</li>
 * </ul>
 *
 * @return A new \c CSInterface object
 */


function CSInterface() {}
/**
 * User can add this event listener to handle native application theme color changes.
 * Callback function gives extensions ability to fine-tune their theme color after the
 * global theme color has been changed.
 * The callback function should be like below:
 *
 * @example
 * // event is a CSEvent object, but user can ignore it.
 * function OnAppThemeColorChanged(event)
 * {
 *    // Should get a latest HostEnvironment object from application.
 *    var skinInfo = JSON.parse(window.__adobe_cep__.getHostEnvironment()).appSkinInfo;
 *    // Gets the style information such as color info from the skinInfo,
 *    // and redraw all UI controls of your extension according to the style info.
 * }
 */


CSInterface.THEME_COLOR_CHANGED_EVENT = 'com.adobe.csxs.events.ThemeColorChanged';
/** The host environment data object. */

CSInterface.prototype.hostEnvironment = JSON.parse(window.__adobe_cep__.getHostEnvironment());
/** Retrieves information about the host environment in which the
 *  extension is currently running.
 *
 *   @return A \c #HostEnvironment object.
 */

CSInterface.prototype.getHostEnvironment = function () {
  this.hostEnvironment = JSON.parse(window.__adobe_cep__.getHostEnvironment());
  return this.hostEnvironment;
};
/** Closes this extension. */


CSInterface.prototype.closeExtension = function () {
  window.__adobe_cep__.closeExtension();
};
/**
 * Retrieves a path for which a constant is defined in the system.
 *
 * @param pathType The path-type constant defined in \c #SystemPath ,
 *
 * @return The platform-specific system path string.
 */


CSInterface.prototype.getSystemPath = function (pathType) {
  var path = decodeURI(window.__adobe_cep__.getSystemPath(pathType));
  var OSVersion = this.getOSInformation();

  if (OSVersion.indexOf('Windows') >= 0) {
    path = path.replace('file:///', '');
  } else if (OSVersion.indexOf('Mac') >= 0) {
    path = path.replace('file://', '');
  }

  return path;
};
/**
 * Evaluates a JavaScript script, which can use the JavaScript DOM
 * of the host application.
 *
 * @param script    The JavaScript script.
 * @param callback  Optional. A callback function that receives the result of execution.
 *          If execution fails, the callback function receives the error message \c EvalScript_ErrMessage.
 */


CSInterface.prototype.evalScript = function (script, callback) {
  if (callback == null || callback == undefined) {
    callback = function callback(result) {};
  }

  window.__adobe_cep__.evalScript(script, callback);
};
/**
 * Retrieves the unique identifier of the application.
 * in which the extension is currently running.
 *
 * @return The unique ID string.
 */


CSInterface.prototype.getApplicationID = function () {
  var appId = this.hostEnvironment.appId;
  return appId;
};
/**
 * Retrieves host capability information for the application
 * in which the extension is currently running.
 *
 * @return A \c #HostCapabilities object.
 */


CSInterface.prototype.getHostCapabilities = function () {
  var hostCapabilities = JSON.parse(window.__adobe_cep__.getHostCapabilities());
  return hostCapabilities;
};
/**
 * Triggers a CEP event programmatically. Yoy can use it to dispatch
 * an event of a predefined type, or of a type you have defined.
 *
 * @param event A \c CSEvent object.
 */


CSInterface.prototype.dispatchEvent = function (event) {
  if ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(event.data) == 'object') {
    event.data = JSON.stringify(event.data);
  }

  window.__adobe_cep__.dispatchEvent(event);
};
/**
 * Registers an interest in a CEP event of a particular type, and
 * assigns an event handler.
 * The event infrastructure notifies your extension when events of this type occur,
 * passing the event object to the registered handler function.
 *
 * @param type     The name of the event type of interest.
 * @param listener The JavaScript handler function or method.
 * @param obj      Optional, the object containing the handler method, if any.
 *         Default is null.
 */


CSInterface.prototype.addEventListener = function (type, listener, obj) {
  window.__adobe_cep__.addEventListener(type, listener, obj);
};
/**
 * Removes a registered event listener.
 *
 * @param type      The name of the event type of interest.
 * @param listener  The JavaScript handler function or method that was registered.
 * @param obj       Optional, the object containing the handler method, if any.
 *          Default is null.
 */


CSInterface.prototype.removeEventListener = function (type, listener, obj) {
  window.__adobe_cep__.removeEventListener(type, listener, obj);
};
/**
 * Loads and launches another extension, or activates the extension if it is already loaded.
 *
 * @param extensionId       The extension's unique identifier.
 * @param startupParams     Not currently used, pass "".
 *
 * @example
 * To launch the extension "help" with ID "HLP" from this extension, call:
 * <code>requestOpenExtension("HLP", ""); </code>
 *
 */


CSInterface.prototype.requestOpenExtension = function (extensionId, params) {
  window.__adobe_cep__.requestOpenExtension(extensionId, params);
};
/**
 * Retrieves the list of extensions currently loaded in the current host application.
 * The extension list is initialized once, and remains the same during the lifetime
 * of the CEP session.
 *
 * @param extensionIds  Optional, an array of unique identifiers for extensions of interest.
 *          If omitted, retrieves data for all extensions.
 *
 * @return Zero or more \c #Extension objects.
 */


CSInterface.prototype.getExtensions = function (extensionIds) {
  var extensionIdsStr = JSON.stringify(extensionIds);

  var extensionsStr = window.__adobe_cep__.getExtensions(extensionIdsStr);

  var extensions = JSON.parse(extensionsStr);
  return extensions;
};
/**
 * Retrieves network-related preferences.
 *
 * @return A JavaScript object containing network preferences.
 */


CSInterface.prototype.getNetworkPreferences = function () {
  var result = window.__adobe_cep__.getNetworkPreferences();

  var networkPre = JSON.parse(result);
  return networkPre;
};
/**
 * Initializes the resource bundle for this extension with property values
 * for the current application and locale.
 * To support multiple locales, you must define a property file for each locale,
 * containing keyed display-string values for that locale.
 * See localization documentation for Extension Builder and related products.
 *
 * Keys can be in the
 * form <code>key.value="localized string"</code>, for use in HTML text elements.
 * For example, in this input element, the localized \c key.value string is displayed
 * instead of the empty \c value string:
 *
 * <code><input type="submit" value="" data-locale="key"/></code>
 *
 * @return An object containing the resource bundle information.
 */


CSInterface.prototype.initResourceBundle = function () {
  var resourceBundle = JSON.parse(window.__adobe_cep__.initResourceBundle());
  var resElms = document.querySelectorAll('[data-locale]');

  for (var n = 0; n < resElms.length; n++) {
    var resEl = resElms[n]; // Get the resource key from the element.

    var resKey = resEl.getAttribute('data-locale');

    if (resKey) {
      // Get all the resources that start with the key.
      for (var key in resourceBundle) {
        if (key.indexOf(resKey) == 0) {
          var resValue = resourceBundle[key];

          if (key.indexOf('.') == -1) {
            // No dot notation in resource key,
            // assign the resource value to the element's
            // innerHTML.
            resEl.innerHTML = resValue;
          } else {
            // Dot notation in resource key, assign the
            // resource value to the element's property
            // whose name corresponds to the substring
            // after the dot.
            var attrKey = key.substring(key.indexOf('.') + 1);
            resEl[attrKey] = resValue;
          }
        }
      }
    }
  }

  return resourceBundle;
};
/**
 * Writes installation information to a file.
 *
 * @return The file path.
 */


CSInterface.prototype.dumpInstallationInfo = function () {
  return window.__adobe_cep__.dumpInstallationInfo();
};
/**
 * Retrieves version information for the current Operating System,
 * See http://www.useragentstring.com/pages/Chrome/ for Chrome \c navigator.userAgent values.
 *
 * @return A string containing the OS version, or "unknown Operation System".
 */


CSInterface.prototype.getOSInformation = function () {
  var userAgent = navigator.userAgent;

  if (navigator.platform == 'Win32' || navigator.platform == 'Windows') {
    var winVersion = 'Windows platform';

    if (userAgent.indexOf('Windows NT 5.0') > -1) {
      winVersion = 'Windows 2000';
    } else if (userAgent.indexOf('Windows NT 5.1') > -1) {
      winVersion = 'Windows XP';
    } else if (userAgent.indexOf('Windows NT 5.2') > -1) {
      winVersion = 'Windows Server 2003';
    } else if (userAgent.indexOf('Windows NT 6.0') > -1) {
      winVersion = 'Windows Vista';
    } else if (userAgent.indexOf('Windows NT 6.1') > -1) {
      winVersion = 'Windows 7';
    } else if (userAgent.indexOf('Windows NT 6.2') > -1) {
      winVersion = 'Windows 8';
    }

    var winBit = '32-bit';

    if (userAgent.indexOf('WOW64') > -1) {
      winBit = '64-bit';
    }

    return winVersion + ' ' + winBit;
  } else if (navigator.platform == 'MacIntel' || navigator.platform == 'Macintosh') {
    var agentStr = new String();
    agentStr = userAgent;
    var verLength = agentStr.indexOf(')') - agentStr.indexOf('Mac OS X');
    var verStr = agentStr.substr(agentStr.indexOf('Mac OS X'), verLength);
    var result = verStr.replace('_', '.');
    result = result.replace('_', '.');
    return result;
  }

  return 'Unknown Operation System';
};
/**
 * Opens a page in the default system browser.
 *
 * Since 4.2.0
 *
 * @param url   The URL of the page to open. Must use HTTP or HTTPS protocol.
 *
 * @return One of these error codes:\n
 *      <ul>\n
 *          <li>NO_ERROR - 0</li>\n
 *          <li>ERR_UNKNOWN - 1</li>\n
 *          <li>ERR_INVALID_PARAMS - 2</li>\n
 *          <li>ERR_INVALID_URL - 201</li>\n
 *      </ul>\n
 */


CSInterface.prototype.openURLInDefaultBrowser = function (url) {
  return window.cep.util.openURLInDefaultBrowser(url);
};
/**
 * Retrieves extension ID.
 *
 * Since 4.2.0
 *
 * @return extension ID.
 */


CSInterface.prototype.getExtensionID = function () {
  return window.__adobe_cep__.getExtensionId();
};
/**
 * Retrieves scale factor of screen. This only works on Mac.
 *
 * Since 4.2.0
 *
 * @return One of the following integer.
 *      <ul>\n
 *          <li>-1 means fail to get scale factor or this API has not been available on Windows yet</li>\n
 *          <li>1 means normal screen</li>\n
 *          <li>2 means HiDPI screen</li>\n
 *      </ul>\n
 */


CSInterface.prototype.getScaleFactor = function () {
  return window.__adobe_cep__.getScaleFactor();
};
/**
 * Set a handler to detect any changes of scale factor. This only works on Mac.
 *
 * Since 4.2.0
 *
 * @param handler   The function to be called when scale factor is changed.
 *
 */


CSInterface.prototype.setScaleFactorChangedHandler = function (handler) {
  window.__adobe_cep__.setScaleFactorChangedHandler(handler);
};
/**
 * Retrieves current API version.
 *
 * Since 4.2.0
 *
 * @return ApiVersion object.
 *
 */


CSInterface.prototype.getCurrentApiVersion = function () {
  var apiVersion = JSON.parse(window.__adobe_cep__.getCurrentApiVersion());
  return apiVersion;
};

var csInterface = new CSInterface();


/***/ }),

/***/ "./src/util/config.js":
/*!****************************!*\
  !*** ./src/util/config.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  UPLOAD_JSON: 'https://karas.alipay.com/api/upload',
  UPLOAD_BASE64: 'https://animconfig-office.alipay.net/api/ae2karas/upload'
});

/***/ }),

/***/ "./src/util/img.js":
/*!*************************!*\
  !*** ./src/util/img.js ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _config__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./config */ "./src/util/config.js");

var canvas = document.createElement('canvas');
var count = 0,
    total = 0;
var maxW = 0,
    maxH = 0;

function recursionBase64(data, cb) {
  // 分为普通节点和library节点
  if (data.hasOwnProperty('libraryId')) {} else {
    if (data.props) {
      base64(data.props, cb);
    }

    var children = data.children;

    if (Array.isArray(children)) {
      for (var i = 0, len = children.length; i < len; i++) {
        recursionBase64(children[i], cb);
      }
    }
  }
}

function base64(data, cb) {
  if (data.hasOwnProperty('src')) {
    var src = data.src,
        _data$style = data.style,
        width = _data$style.width,
        height = _data$style.height;
    total++;
    var img = document.createElement('img');

    img.onload = function () {
      width = width || img.width;
      height = height || img.height;
      maxW = Math.max(maxW, width);
      maxH = Math.max(maxH, height);
      var ctx = canvas.getContext('2d');
      ctx.clearRect(0, 0, maxW, maxH);
      canvas.width = width;
      canvas.height = height;
      ctx.drawImage(img, 0, 0, width, height);

      if (/\.jpe?g$/.test(src)) {
        data.src = canvas.toDataURL('image/jpeg');
      } else if (/\.webp$/.test(src)) {
        data.src = canvas.toDataURL('image/webp');
      } else {
        data.src = canvas.toDataURL('image/png');
      }

      if (++count === total) {
        cb();
      }
    };

    img.onerror = function () {
      if (++count === total) {
        cb();
      }
    };

    img.src = src;
  }
}

function recursionUpload(data, imgHash, cb) {
  // 分为普通节点和library节点
  if (data.hasOwnProperty('libraryId')) {} else {
    if (data.props) {
      upload(data.name, data.props, imgHash, cb);
    }

    var children = data.children;

    if (Array.isArray(children)) {
      for (var i = 0, len = children.length; i < len; i++) {
        recursionUpload(children[i], imgHash, cb);
      }
    }
  }
}

function upload(name, data, imgHash, cb) {
  if (data.hasOwnProperty('src')) {
    var src = data.src,
        _data$style2 = data.style,
        width = _data$style2.width,
        height = _data$style2.height;

    if (src.indexOf('data:') === 0) {
      return;
    }

    total++;
    var img = document.createElement('img');

    img.onload = function () {
      maxW = Math.max(maxW, width);
      maxH = Math.max(maxH, height);
      var ctx = canvas.getContext('2d');
      ctx.clearRect(0, 0, maxW, maxH);
      canvas.width = width;
      canvas.height = height;
      ctx.drawImage(img, 0, 0, width, height);
      var str;

      if (/\.jpe?g$/.test(src)) {
        str = canvas.toDataURL('image/jpeg');
      } else if (/\.webp$/.test(src)) {
        str = canvas.toDataURL('image/webp');
      } else {
        str = canvas.toDataURL('image/png');
      }

      name = name.replace(/\.\w+$/, '');
      fetch(_config__WEBPACK_IMPORTED_MODULE_0__["default"].UPLOAD_BASE64, {
        method: 'post',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          imgData: str,
          fileName: name,
          needCompress: true
        })
      }).then(function (res) {
        return res.json();
      }).then(function (res) {
        if (res.success) {
          data.src = res.url;
          imgHash[res.url] = res.url;
        }

        if (++count === total) {
          cb();
        }
      })["catch"](function (e) {
        if (++count === total) {
          cb();
        }
      });
    };

    img.onerror = function () {
      if (++count === total) {
        cb();
      }
    };

    img.src = src;
  }
}

/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({
  base64: function base64(data, cb) {
    count = total = maxW = maxH = 0;
    var library = data.library;

    if (Array.isArray(library)) {
      for (var i = 0, len = library.length; i < len; i++) {
        recursionBase64(library[i], cb);
      }
    }

    data.imgs = undefined;
  },
  upload: function upload(data, cb) {
    var imgHash = {};
    count = total = maxW = maxH = 0;
    var library = data.library;

    function wrap() {
      var imgs = [];

      for (var i in imgHash) {
        if (imgHash.hasOwnProperty(i)) {
          imgs.push(imgHash[i]);
        }
      }

      if (imgs.length) {
        data.imgs = imgs;
      }

      cb();
    }

    if (Array.isArray(library)) {
      for (var i = 0, len = library.length; i < len; i++) {
        recursionUpload(library[i], imgHash, wrap);
      }
    }
  },
  reset: function reset() {
    maxW = maxH = 0;
  }
});

/***/ }),

/***/ "./src/util/output.js":
/*!****************************!*\
  !*** ./src/util/output.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* export default binding */ __WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var STYLE = ['top', 'right', 'bottom', 'left', 'width', 'height', 'transformOrigin', 'translateX', 'translateY', 'translateZ', 'opacity', 'rotateX', 'rotateY', 'rotateZ', 'scaleX', 'scaleY', 'scaleZ', 'start', 'end', 'begin', 'perspective', 'fontSize', 'lineHeight', 'translatePath', 'scale', 'zIndex'];

function recursion(data, params) {
  // 分为普通节点和library节点分别递归进行
  if (data.hasOwnProperty('libraryId')) {
    if (data.init) {
      if (data.init.points) {
        parsePoint(data.init.points, params);
      }

      if (data.init.controls) {
        parsePoint(data.init.controls, params);
      }

      if (data.init.style) {
        parseStyle(data.init.style, params);
      }
    }
  } else {
    if (data.props) {
      if (data.props.points) {
        parsePoint(data.props.points, params);
      }

      if (data.props.controls) {
        parsePoint(data.props.controls, params);
      }

      if (data.props.style) {
        parseStyle(data.props.style, params);
      }

      if (data.tagName === 'img' && data.props.src && !/^data:/.test(data.props.src)) {
        params.imgHash[data.props.src] = {
          url: data.props.src
        };
      }
    }

    var children = data.children;

    if (Array.isArray(children)) {
      for (var i = 0, len = children.length; i < len; i++) {
        recursion(children[i], params);
      }
    }
  }

  var animate = data.animate;

  if (Array.isArray(animate)) {
    for (var _i = 0, _len = animate.length; _i < _len; _i++) {
      parseAnimate(animate[_i], params);
    }
  } else if (animate) {
    parseAnimate(animate, params);
  }
}

function parsePoint(data, params) {
  for (var i = 0, len = data.length; i < len; i++) {
    var item = data[i];

    if (Array.isArray(item)) {
      for (var _i2 = 0, _len2 = item.length; _i2 < _len2; _i2++) {
        var v = item[_i2];

        if (v) {
          v = v.toFixed(params.precision + 2);
          item[_i2] = parseFloat(v);
        }
      }
    }
  }
}

function parseStyle(data, params) {
  var unit = params.unit,
      _params$rem = params.rem,
      rem = _params$rem === void 0 ? 0 : _params$rem,
      _params$vw = params.vw,
      vw = _params$vw === void 0 ? 0 : _params$vw,
      _params$vh = params.vh,
      vh = _params$vh === void 0 ? 0 : _params$vh;

  for (var i = 0, len = STYLE.length; i < len; i++) {
    var k = STYLE[i];

    if (data.hasOwnProperty(k)) {
      var v = data[k];

      if (k === 'transformOrigin') {
        v = v.split(' ');
        v[0] = parseFloat(v[0]);
        v[1] = parseFloat(v[1]);

        if (unit === 'rem') {
          v[0] /= rem;
          v[0] = parseFloat(v[0].toFixed(params.precision));
          v[0] += 'rem';
          v[1] /= rem;
          v[1] = parseFloat(v[1].toFixed(params.precision));
          v[1] += 'rem';
        } else if (unit === 'vw') {
          v[0] *= 100 / vw;
          v[0] = parseFloat(v[0].toFixed(params.precision));
          v[0] += 'vw';
          v[1] *= 100 / vw;
          v[1] = parseFloat(v[1].toFixed(params.precision));
          v[1] += 'vw';
        } else if (unit === 'vh') {
          v[0] *= 100 / vh;
          v[0] = parseFloat(v[0].toFixed(params.precision));
          v[0] += 'vh';
          v[1] *= 100 / vh;
          v[1] = parseFloat(v[1].toFixed(params.precision));
          v[1] += 'vh';
        } else {
          v[0] = parseFloat(v[0].toFixed(params.precision));
          v[1] = parseFloat(v[1].toFixed(params.precision));
        }

        data[k] = v.join(' ');
      } else if (k === 'translatePath') {
        for (var j = 0; j < v.length; j++) {
          var v2 = void 0;

          if (unit === 'rem') {
            v2 = parseFloat((v[j] / rem).toFixed(params.precision)) + 'rem';
          } else if (unit === 'vw') {
            v2 = parseFloat((v[j] * 100 / vw).toFixed(params.precision)) + 'vw';
          } else if (unit === 'vh') {
            v2 = parseFloat((v[j] * 100 / vw).toFixed(params.precision)) + 'vh';
          } else {
            v2 = parseFloat(v[j].toFixed(params.precision));
          }

          v[j] = v2;
        }
      } else if (['top', 'right', 'bottom', 'left', 'width', 'height', 'translateX', 'translateY', 'translateZ', 'perspective', 'fontSize'].indexOf(k) > -1) {
        // 3d有个wrap层是100%
        if (v !== '100%') {
          var _v = void 0;

          if (unit === 'rem') {
            _v = parseFloat((v / rem).toFixed(params.precision)) + 'rem';
          } else if (unit === 'vw') {
            _v = parseFloat((v * 100 / vw).toFixed(params.precision)) + 'vw';
          } else if (unit === 'vh') {
            _v = parseFloat((v * 100 / vw).toFixed(params.precision)) + 'vh';
          } else if (v) {
            _v = parseFloat(v.toFixed(params.precision));
          }

          data[k] = _v;
        }
      } // 无单位的小数
      else if (v) {
        v = v.toFixed(params.precision + 2);
        data[k] = parseFloat(v);
      }
    }
  } // 特殊的fill和stroke


  ['fill', 'stroke'].forEach(function (k) {
    if (data.hasOwnProperty(k)) {
      var _v2 = data[k];

      if (Array.isArray(_v2)) {
        _v2.forEach(function (item, i) {
          if (/Gradient/i.test(item)) {
            _v2[i] = _v2[i].replace(/([\s(])([+-]?[\d.]+)/g, function ($0, $1, $2) {
              if (unit === 'rem') {
                return $1 + (parseFloat($2) / rem).toFixed(params.precision + 2);
              } else if (unit === 'vw') {
                return $1 + (parseFloat($2) * 100 / vw).toFixed(params.precision + 2);
              } else if (unit === 'vh') {
                return $1 + (parseFloat($2) * 100 / vh).toFixed(params.precision + 2);
              } else {
                return $1 + parseFloat($2).toFixed(params.precision + 2);
              }
            });
          }
        });
      }
    }
  });
}

function parseAnimate(data, params) {
  var value = data.value,
      options = data.options;

  for (var i = 0, len = value.length; i < len; i++) {
    var item = value[i];
    parseStyle(item, params);

    if (item.hasOwnProperty('offset')) {
      var v = item.offset.toFixed(params.precision + 2);
      item.offset = parseFloat(v);
    }

    if (item.hasOwnProperty('easing')) {
      var _v3 = item.easing;

      if (_v3) {
        var v2 = [];

        for (var _i3 = 0, _len3 = _v3.length; _i3 < _len3; _i3++) {
          v2[_i3] = parseFloat(_v3[_i3].toFixed(params.precision + 2));
        }

        item.easing = v2;
      } else {
        delete item.easing;
      }
    }

    if (item.hasOwnProperty('points')) {
      parsePoint(item.points, params);
    }

    if (item.hasOwnProperty('controls')) {
      parsePoint(item.controls, params);
    }
  }

  if (options.hasOwnProperty('duration')) {
    var _v4 = options.duration.toFixed(params.precision);

    options.duration = parseFloat(_v4);
  }

  if (options.hasOwnProperty('iterations')) {
    if (params.iterations === 'Infinity') {
      options.iterations = params.iterations;
    } else {
      options.iterations = parseInt(params.iterations) || 1;
    }
  }
}

/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__(data, params) {
  var imgHash = params.imgHash = {};
  recursion(data, params);
  var library = data.library;

  if (Array.isArray(library)) {
    for (var i = 0, len = library.length; i < len; i++) {
      recursion(library[i], params);
    }
  }

  var imgs = [];

  for (var _i4 in imgHash) {
    if (imgHash.hasOwnProperty(_i4)) {
      imgs.push(imgHash[_i4]);
    }
  }

  if (imgs.length) {
    data.imgs = imgs;
  }
}
;

/***/ }),

/***/ "./node_modules/_classnames@2.3.1@classnames/index.js":
/*!************************************************************!*\
  !*** ./node_modules/_classnames@2.3.1@classnames/index.js ***!
  \************************************************************/
/***/ ((module, exports) => {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
  Copyright (c) 2018 Jed Watson.
  Licensed under the MIT License (MIT), see
  http://jedwatson.github.io/classnames
*/
/* global define */

(function () {
	'use strict';

	var hasOwn = {}.hasOwnProperty;

	function classNames() {
		var classes = [];

		for (var i = 0; i < arguments.length; i++) {
			var arg = arguments[i];
			if (!arg) continue;

			var argType = typeof arg;

			if (argType === 'string' || argType === 'number') {
				classes.push(arg);
			} else if (Array.isArray(arg)) {
				if (arg.length) {
					var inner = classNames.apply(null, arg);
					if (inner) {
						classes.push(inner);
					}
				}
			} else if (argType === 'object') {
				if (arg.toString === Object.prototype.toString) {
					for (var key in arg) {
						if (hasOwn.call(arg, key) && arg[key]) {
							classes.push(key);
						}
					}
				} else {
					classes.push(arg.toString());
				}
			}
		}

		return classes.join(' ');
	}

	if ( true && module.exports) {
		classNames.default = classNames;
		module.exports = classNames;
	} else if (true) {
		// register as 'classnames', consistent with npm package name
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {
			return classNames;
		}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
		__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {}
}());


/***/ }),

/***/ "./src/index.html":
/*!************************!*\
  !*** ./src/index.html ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (__webpack_require__.p + "index.html");

/***/ }),

/***/ "./node_modules/_karas@0.66.10@karas/index.js":
/*!****************************************************!*\
  !*** ./node_modules/_karas@0.66.10@karas/index.js ***!
  \****************************************************/
/***/ (function(module) {

(function (global, factory) {
   true ? module.exports = factory() :
  0;
}(this, (function () { 'use strict';

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _superPropBase(object, property) {
    while (!Object.prototype.hasOwnProperty.call(object, property)) {
      object = _getPrototypeOf(object);
      if (object === null) break;
    }

    return object;
  }

  function _get(target, property, receiver) {
    if (typeof Reflect !== "undefined" && Reflect.get) {
      _get = Reflect.get;
    } else {
      _get = function _get(target, property, receiver) {
        var base = _superPropBase(target, property);

        if (!base) return;
        var desc = Object.getOwnPropertyDescriptor(base, property);

        if (desc.get) {
          return desc.get.call(receiver);
        }

        return desc.value;
      };
    }

    return _get(target, property, receiver || target);
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
  }

  function _iterableToArrayLimit(arr, i) {
    var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

    if (_i == null) return;
    var _arr = [];
    var _n = true;
    var _d = false;

    var _s, _e;

    try {
      for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var STYLE_KEY = {
    POSITION: 0,
    DISPLAY: 1,
    TOP: 2,
    RIGHT: 3,
    BOTTOM: 4,
    LEFT: 5,
    MARGIN_TOP: 6,
    MARGIN_RIGHT: 7,
    MARGIN_BOTTOM: 8,
    MARGIN_LEFT: 9,
    PADDING_TOP: 10,
    PADDING_RIGHT: 11,
    PADDING_BOTTOM: 12,
    PADDING_LEFT: 13,
    FONT_SIZE: 14,
    FONT_FAMILY: 15,
    COLOR: 16,
    FONT_STYLE: 17,
    FONT_WEIGHT: 18,
    LINE_HEIGHT: 19,
    BACKGROUND_IMAGE: 20,
    BACKGROUND_COLOR: 21,
    BACKGROUND_SIZE: 22,
    BACKGROUND_REPEAT: 23,
    BACKGROUND_POSITION_X: 24,
    BACKGROUND_POSITION_Y: 25,
    BORDER_TOP_WIDTH: 26,
    BORDER_RIGHT_WIDTH: 27,
    BORDER_BOTTOM_WIDTH: 28,
    BORDER_LEFT_WIDTH: 29,
    BORDER_TOP_COLOR: 30,
    BORDER_RIGHT_COLOR: 31,
    BORDER_BOTTOM_COLOR: 32,
    BORDER_LEFT_COLOR: 33,
    BORDER_TOP_STYLE: 34,
    BORDER_RIGHT_STYLE: 35,
    BORDER_BOTTOM_STYLE: 36,
    BORDER_LEFT_STYLE: 37,
    BORDER_TOP_LEFT_RADIUS: 38,
    BORDER_TOP_RIGHT_RADIUS: 39,
    BORDER_BOTTOM_RIGHT_RADIUS: 40,
    BORDER_BOTTOM_LEFT_RADIUS: 41,
    WIDTH: 42,
    HEIGHT: 43,
    FLEX_GROW: 44,
    FLEX_SHRINK: 45,
    FLEX_BASIS: 46,
    FLEX_DIRECTION: 47,
    JUSTIFY_CONTENT: 48,
    ALIGN_ITEMS: 49,
    ALIGN_SELF: 50,
    TEXT_ALIGN: 51,
    TRANSFORM_ORIGIN: 52,
    VISIBILITY: 53,
    OPACITY: 54,
    Z_INDEX: 55,
    TRANSFORM: 56,
    TRANSLATE_X: 57,
    TRANSLATE_Y: 58,
    TRANSLATE_Z: 59,
    SCALE_X: 60,
    SCALE_Y: 61,
    SCALE_Z: 62,
    SKEW_X: 63,
    SKEW_Y: 64,
    ROTATE_X: 65,
    ROTATE_Y: 66,
    ROTATE_Z: 67,
    ROTATE_3D: 68,
    PERSPECTIVE: 69,
    PERSPECTIVE_ORIGIN: 70,
    FILTER: 71,
    BOX_SHADOW: 72,
    POINTER_EVENTS: 73,
    OVERFLOW: 74,
    MIX_BLEND_MODE: 75,
    BACKGROUND_CLIP: 76,
    WHITE_SPACE: 77,
    TEXT_OVERFLOW: 78,
    LETTER_SPACING: 79,
    LINE_CLAMP: 80,
    ORDER: 81,
    FLEX_WRAP: 82,
    ALIGN_CONTENT: 83,
    TEXT_STROKE_WIDTH: 84,
    TEXT_STROKE_COLOR: 85,
    TEXT_STROKE_OVER: 86,
    // GEOM
    FILL: 87,
    STROKE: 88,
    STROKE_WIDTH: 89,
    STROKE_DASHARRAY: 90,
    STROKE_DASHARRAY_STR: 91,
    STROKE_LINECAP: 92,
    STROKE_LINEJOIN: 93,
    STROKE_MITERLIMIT: 94,
    FILL_RULE: 95,
    // 无此样式，仅cache或特殊情况需要
    MATRIX: 96,
    BORDER_TOP: 97,
    BORDER_RIGHT: 98,
    BORDER_BOTTOM: 99,
    BORDER_LEFT: 100,
    TRANSLATE_PATH: 101
  };
  var STYLE2LOWER_MAP = {};

  function style2Lower(s) {
    STYLE2LOWER_MAP[s] = STYLE2LOWER_MAP[s] || s.toLowerCase().replace(/_([a-z])/g, function ($0, $1) {
      return $1.toUpperCase();
    });
    return STYLE2LOWER_MAP[s];
  }

  var STYLE2UPPER_MAP = {};

  function style2Upper(s) {
    STYLE2UPPER_MAP[s] = STYLE2UPPER_MAP[s] || s.replace(/([a-z\d_])([A-Z])/g, function ($0, $1, $2) {
      return $1 + '_' + $2;
    }).toUpperCase();
    return STYLE2UPPER_MAP[s];
  }

  var STYLE_R_KEY = {};
  var STYLE_RV_KEY = {};
  var STYLE_V_KEY = {};
  Object.keys(STYLE_KEY).forEach(function (k) {
    var k2 = STYLE_KEY[k];
    STYLE_R_KEY[k2] = k;
    var l = style2Lower(k);
    STYLE_RV_KEY[k2] = l;
    STYLE_V_KEY[l] = k2;
  }); // Root的update过程使用

  var UPDATE_KEY = {
    UPDATE_NODE: 0,
    UPDATE_STYLE: 1,
    UPDATE_FOCUS: 2,
    UPDATE_MEASURE: 3,
    UPDATE_COMPONENT: 4,
    UPDATE_OVERWRITE: 5,
    UPDATE_KEYS: 6,
    UPDATE_LIST: 7,
    UPDATE_CONFIG: 8,
    UPDATE_ADD_DOM: 9,
    UPDATE_REMOVE_DOM: 10
  }; // animation计算每帧使用

  var KEY_FRAME_KEY = {
    FRAME_STYLE: 0,
    FRAME_TIME: 1,
    FRAME_EASING: 2,
    FRAME_TRANSITION: 3
  }; // 节点使用

  var NODE_KEY = {
    NODE_DOM_PARENT: 0,
    NODE_OPACITY: 1,
    NODE_MATRIX: 2,
    NODE_MATRIX_EVENT: 3,
    NODE_CACHE: 4,
    NODE_CACHE_TOTAL: 5,
    NODE_CACHE_FILTER: 6,
    NODE_CACHE_MASK: 7,
    NODE_CACHE_OVERFLOW: 8,
    NODE_STRUCT: 9,
    NODE_TAG_NAME: 10,
    NODE_CURRENT_STYLE: 11,
    NODE_CURRENT_PROPS: 12,
    NODE_COMPUTED_STYLE: 13,
    NODE_CACHE_STYLE: 14,
    NODE_CACHE_PROPS: 15,
    NODE_LIMIT_CACHE: 16,
    NODE_IS_MASK: 17,
    NODE_IS_INLINE: 18,
    NODE_HAS_CONTENT: 19,
    NODE_REFRESH_LV: 20,
    NODE_IS_DESTROYED: 21,
    NODE_STYLE: 22,
    NODE_UPDATE_HASH: 23,
    NODE_UNIQUE_UPDATE_ID: 24,
    NODE_DEFS_CACHE: 25,
    NODE_PERSPECTIVE_MATRIX: 26,
    NODE_VIRTUAL_DOM: 27,
    NODE_CACHE_AS_BITMAP: 28
  }; // struct用

  var STRUCT_KEY = {
    STRUCT_NODE: 0,
    STRUCT_INDEX: 1,
    STRUCT_CHILD_INDEX: 2,
    STRUCT_LV: 3,
    STRUCT_NUM: 4,
    STRUCT_TOTAL: 5,
    STRUCT_HAS_MASK: 6
  };
  var ANIMATE_KEY = {
    I_ASSIGNING: 0,
    I_IN_FPS: 1,
    I_IS_DELAY: 2,
    I_BEGIN: 3,
    I_END: 4,
    I_FINISHED: 5,
    I_NEXT_END: 6,
    I_FIRST_PLAY: 7,
    I_FRAME_CB: 8,
    I_PLAY_CB: 9,
    I_TARGET: 10,
    I_ROOT: 11,
    I_FRAMES: 12,
    I_FRAMES_R: 13,
    I_CURRENT_TIME: 14,
    I_NEXT_TIME: 15,
    I_STYLE: 16,
    I_DURATION: 17,
    I_ITERATIONS: 18,
    I_FILL: 19,
    I_PLAYBACK_RATE: 20,
    I_PLAY_COUNT: 21,
    I_PLAY_STATE: 22,
    I_DESTROYED: 23,
    I_START_TIME: 24,
    I_FPS_TIME: 25,
    I_EASING: 26,
    I_ENTER_FRAME: 27,
    I_DELAY: 28,
    I_END_DELAY: 29,
    I_KEYS: 30,
    I_ORIGIN_STYLE: 31,
    I_CURRENT_FRAMES: 32,
    I_CURRENT_FRAME: 33,
    I_SPF_LIMIT: 34,
    I_FPS: 35,
    I_DIRECTION: 36,
    I_FIRST_ENTER: 37,
    I_STAY_BEGIN: 38,
    I_STAY_END: 39,
    I_IS2: 40,
    I_END_TIME: 41,
    I_NODE_CONFIG: 42,
    I_ROOT_CONFIG: 43,
    I_OUT_BEGIN_DELAY: 44,
    I_TIME_STAMP: 45
  };
  var enums = {
    STYLE_KEY: STYLE_KEY,
    // 大写常量为k，数字为值
    STYLE_R_KEY: STYLE_R_KEY,
    // 数字为k，大写常量为值
    STYLE_RV_KEY: STYLE_RV_KEY,
    // 数字为k，小写为值
    STYLE_V_KEY: STYLE_V_KEY,
    // 小写为k，数字为值
    style2Lower: style2Lower,
    style2Upper: style2Upper,
    UPDATE_KEY: UPDATE_KEY,
    KEY_FRAME_KEY: KEY_FRAME_KEY,
    NODE_KEY: NODE_KEY,
    STRUCT_KEY: STRUCT_KEY,
    ANIMATE_KEY: ANIMATE_KEY
  };

  var _enums$STRUCT_KEY = enums.STRUCT_KEY,
      STRUCT_NODE = _enums$STRUCT_KEY.STRUCT_NODE,
      STRUCT_INDEX = _enums$STRUCT_KEY.STRUCT_INDEX,
      STRUCT_CHILD_INDEX = _enums$STRUCT_KEY.STRUCT_CHILD_INDEX,
      STRUCT_LV = _enums$STRUCT_KEY.STRUCT_LV,
      _enums$NODE_KEY = enums.NODE_KEY,
      NODE_IS_DESTROYED = _enums$NODE_KEY.NODE_IS_DESTROYED,
      NODE_STRUCT = _enums$NODE_KEY.NODE_STRUCT;

  var Node = /*#__PURE__*/function () {
    function Node() {
      _classCallCheck(this, Node);

      this.__x = 0;
      this.__y = 0;
      this.__ox = 0; // relative造成的偏移量

      this.__oy = 0;
      this.__width = 0;
      this.__height = 0;
      this.__baseLine = 0;
      this.__config = {}; // 默认undefined
      // this.__prev = undefined;
      // this.__next = undefined;
      // this.__parent = undefined;
      // this.__domParent = undefined;
      // this.__root = undefined;
      // this.__host = undefined;
    }

    _createClass(Node, [{
      key: "__structure",
      value: function __structure(i, lv, j) {
        var _this$__config$NODE_S;

        return this.__config[NODE_STRUCT] = (_this$__config$NODE_S = {}, _defineProperty(_this$__config$NODE_S, STRUCT_NODE, this), _defineProperty(_this$__config$NODE_S, STRUCT_INDEX, i), _defineProperty(_this$__config$NODE_S, STRUCT_CHILD_INDEX, j), _defineProperty(_this$__config$NODE_S, STRUCT_LV, lv), _this$__config$NODE_S);
      }
    }, {
      key: "__modifyStruct",
      value: function __modifyStruct(root) {
        var struct = this.__config[NODE_STRUCT];
        return [struct, 0];
      }
    }, {
      key: "__offsetX",
      value: function __offsetX(diff, isLayout) {
        if (isLayout) {
          this.__x += diff;
        } else {
          this.__ox += diff;
        }

        this.__sx += diff;
      }
    }, {
      key: "__offsetY",
      value: function __offsetY(diff, isLayout) {
        if (isLayout) {
          this.__y += diff;
        } else {
          this.__oy += diff;
        }

        this.__sy += diff;
      }
    }, {
      key: "__destroy",
      value: function __destroy() {
        this.__config[NODE_IS_DESTROYED] = true;
      }
    }, {
      key: "x",
      get: function get() {
        return this.__x;
      }
    }, {
      key: "y",
      get: function get() {
        return this.__y;
      }
    }, {
      key: "ox",
      get: function get() {
        return this.__ox;
      }
    }, {
      key: "oy",
      get: function get() {
        return this.__oy;
      }
    }, {
      key: "sx",
      get: function get() {
        return this.x + this.ox;
      }
    }, {
      key: "sy",
      get: function get() {
        return this.y + this.oy;
      }
    }, {
      key: "width",
      get: function get() {
        return this.__width;
      }
    }, {
      key: "height",
      get: function get() {
        return this.__height;
      }
    }, {
      key: "outerWidth",
      get: function get() {
        return this.__width;
      }
    }, {
      key: "outerHeight",
      get: function get() {
        return this.__height;
      }
    }, {
      key: "prev",
      get: function get() {
        return this.__prev;
      }
    }, {
      key: "next",
      get: function get() {
        return this.__next;
      }
    }, {
      key: "parent",
      get: function get() {
        return this.__parent;
      }
    }, {
      key: "domParent",
      get: function get() {
        return this.__domParent;
      } // canvas/svg根节点

    }, {
      key: "root",
      get: function get() {
        return this.__root;
      } // component根节点

    }, {
      key: "host",
      get: function get() {
        return this.__host;
      } // 考虑高阶组件在内的component根节点

    }, {
      key: "hostRoot",
      get: function get() {
        return this.__hostRoot;
      }
    }, {
      key: "baseLine",
      get: function get() {
        return this.__baseLine;
      }
    }, {
      key: "virtualDom",
      get: function get() {
        return this.__virtualDom;
      }
    }, {
      key: "isDestroyed",
      get: function get() {
        return this.__config[NODE_IS_DESTROYED];
      }
    }]);

    return Node;
  }();

  var mode = {
    CANVAS: 0,
    SVG: 1,
    WEBGL: 2
  };

  var o = {
    AUTO: 0,
    PX: 1,
    PERCENT: 2,
    NUMBER: 3,
    INHERIT: 4,
    DEG: 5,
    STRING: 6,
    RGBA: 7,
    REM: 8,
    EM: 9,
    VW: 10,
    VH: 11,
    VMAX: 12,
    VMIN: 13,

    /**
     * 通用的格式化计算数值单位的方法，百分比/像素/REM/VW/auto和纯数字
     * @param v value
     * @returns 格式化好的[number, unit]
     */
    calUnit: function calUnit(v) {
      var n = parseFloat(v) || 0;

      if (/%$/.test(v)) {
        return [n, o.PERCENT];
      } else if (/px$/i.test(v)) {
        return [n, o.PX];
      } else if (/deg$/i.test(v)) {
        return [n, o.DEG];
      } else if (/rem$/i.test(v)) {
        return [n, o.REM];
      } else if (/vw$/i.test(v)) {
        return [n, o.VW];
      } else if (/vh$/i.test(v)) {
        return [n, o.VH];
      } else if (/em$/i.test(v)) {
        return [n, o.EM];
      } else if (/vw$/i.test(v)) {
        return [n, o.VW];
      } else if (/vh$/i.test(v)) {
        return [n, o.VH];
      } else if (/vmax$/i.test(v)) {
        return [n, o.VMAX];
      } else if (/vmin$/i.test(v)) {
        return [n, o.VMIN];
      }

      return [n, o.NUMBER];
    }
  };

  var o$1 = {
    info: {
      arial: {
        lhr: 1.14990234375,
        // 默认line-height ratio，(67+1854+434)/2048
        // car: 1.1171875, // content-area ratio，(1854+434)/2048
        blr: 0.9052734375,
        // base-line ratio，1854/2048
        // mdr: 0.64599609375, // middle ratio，(1854-1062/2)/2048
        lgr: 0.03271484375,
        // line-gap ratio，67/2048，默认0
        // 个别字符误差，初次之外误差还有根据经验得的比例系数，https://github.com/karasjs/karas/issues/145
        padding: {
          1: 1,
          f: 0.9
        }
      },
      helvetica: {
        lhr: 1.14990234375,
        // (8+1900+447)/2048
        blr: 0.927734375,
        // 1900/2048
        lgr: 0.00390625 // 8/2048

      },
      verdana: {
        lhr: 1.21533203125,
        // (0+2059+430)/2048
        blr: 1.00537109375 // 2059/2048

      },
      tahoma: {
        lhr: 1.20703125,
        // (0+2049+423)/2048
        blr: 1.00048828125,
        // 2049/2048
        padding: {
          S: 1,
          T: 1,
          Z: 1,
          c: 1,
          f: 0.7,
          i: 1,
          l: 1,
          t: 0.9
        }
      },
      georgia: {
        lhr: 1.13623046875,
        // (0+1878+449)/2048
        blr: 0.9169921875 // 1878/2048

      },
      'courier new': {
        lhr: 1.1328125,
        // (0+1705+615)/2048
        blr: 0.83251953125 // 1705/2048

      },
      'pingfang sc': {
        lhr: 1.4,
        // (0+1060+340)/1000
        blr: 1.06,
        // 1060/1000
        padding: {
          f: 0.5
        }
      },
      simsun: {
        lhr: 1.4,
        // (0+1060+340)/1000
        blr: 1.06,
        padding: {
          f: 0.5
        }
      }
    },
    support: function support(fontFamily) {
      return this.info.hasOwnProperty(fontFamily);
    },
    register: function register(name, info) {
      var _ref = info || {},
          _ref$emSquare = _ref.emSquare,
          emSquare = _ref$emSquare === void 0 ? 2048 : _ref$emSquare,
          _ref$ascent = _ref.ascent,
          ascent = _ref$ascent === void 0 ? 1854 : _ref$ascent,
          _ref$descent = _ref.descent,
          descent = _ref$descent === void 0 ? 434 : _ref$descent,
          _ref$lineGap = _ref.lineGap,
          lineGap = _ref$lineGap === void 0 ? 67 : _ref$lineGap,
          _ref$padding = _ref.padding,
          padding = _ref$padding === void 0 ? {} : _ref$padding;

      this.info[name.toLowerCase()] = {
        lhr: (ascent + descent + lineGap) / emSquare,
        blr: ascent / emSquare,
        padding: padding
      };
    },
    addPadding: function addPadding(name, padding) {
      Object.assign(this.info[name.toLowerCase()].padding, padding);
    }
  };
  o$1.info['宋体'] = o$1.info.simsun;
  o$1.info['pingfang'] = o$1.info['pingfang sc'];

  var reg = {
    position: /(([-+]?[\d.]+[pxremvwhina%]*)|(left|top|right|bottom|center)){1,2}/ig,
    // tfo: /((-?[\d.]+(px|%)?)|(left|top|right|bottom|center)){1,2}/ig,
    gradient: /\b(\w+)-?gradient\((.+)\)/i,
    img: /(?:\burl\((['"]?)(.*?)\1\))|(?:\b((data:)))/i
  };

  // 生成4*4单位矩阵
  function identity() {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
  } // 矩阵a*b，固定两个matrix都是长度16


  function multiply(a, b) {
    if (isE(a)) {
      return b;
    }

    if (isE(b)) {
      return a;
    }

    var c = [];

    for (var i = 0; i < 4; i++) {
      var a0 = a[i] || 0;
      var a1 = a[i + 4] || 0;
      var a2 = a[i + 8] || 0;
      var a3 = a[i + 12] || 0;
      c[i] = a0 * b[0] + a1 * b[1] + a2 * b[2] + a3 * b[3];
      c[i + 4] = a0 * b[4] + a1 * b[5] + a2 * b[6] + a3 * b[7];
      c[i + 8] = a0 * b[8] + a1 * b[9] + a2 * b[10] + a3 * b[11];
      c[i + 12] = a0 * b[12] + a1 * b[13] + a2 * b[14] + a3 * b[15];
    }

    return c;
  }

  function calPoint(point, m) {
    var _point = _slicedToArray(point, 4),
        x = _point[0],
        y = _point[1],
        z = _point[2],
        w = _point[3];

    if (w === undefined) {
      w = 1;
    }

    if (m && !isE(m)) {
      if (m.length === 16) {
        z = z || 0;

        var _m = _slicedToArray(m, 16),
            a1 = _m[0],
            b1 = _m[1],
            c1 = _m[2],
            d1 = _m[3],
            a2 = _m[4],
            b2 = _m[5],
            c2 = _m[6],
            d2 = _m[7],
            a3 = _m[8],
            b3 = _m[9],
            c3 = _m[10],
            d3 = _m[11],
            a4 = _m[12],
            b4 = _m[13],
            c4 = _m[14],
            d4 = _m[15];

        w *= x * d1 + y * d2 + z * d3 + d4;
        return [x * a1 + y * a2 + z * a3 + a4, x * b1 + y * b2 + z * b3 + b4, x * c1 + y * c2 + z * c3 + c4, w];
      } // 6位类型


      var _m2 = _slicedToArray(m, 6),
          a = _m2[0],
          b = _m2[1],
          c = _m2[2],
          d = _m2[3],
          e = _m2[4],
          f = _m2[5];

      return [a * x + c * y + e, b * x + d * y + f];
    }

    return [x, y, z, w];
  }
  /**
   * 初等行变换求3*3特定css的matrix方阵，一维6长度
   * https://blog.csdn.net/iloveas2014/article/details/82930946
   * @param m
   * @returns {number[]|*}
   */


  function inverse(m) {
    if (m.length === 16) {
      return inverse4(m);
    }

    var _m3 = _slicedToArray(m, 6),
        a = _m3[0],
        b = _m3[1],
        c = _m3[2],
        d = _m3[3],
        e = _m3[4],
        f = _m3[5];

    if (a === 1 && b === 0 && c === 0 && d === 1 && e === 0 && f === 0) {
      return m;
    }

    var divisor = a * d - b * c;

    if (divisor === 0) {
      return m;
    }

    return [d / divisor, -b / divisor, -c / divisor, a / divisor, (c * f - d * e) / divisor, (b * e - a * f) / divisor];
  } // 16位或者6位单位矩阵判断，空也认为是


  function isE(m) {
    if (!m || !m.length) {
      return true;
    }

    if (m.length === 16) {
      return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 0 && m[4] === 0 && m[5] === 1 && m[6] === 0 && m[7] === 0 && m[8] === 0 && m[9] === 0 && m[10] === 1 && m[11] === 0 && m[12] === 0 && m[13] === 0 && m[14] === 0 && m[15] === 1;
    }

    return m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1 && m[4] === 0 && m[5] === 0;
  }
  /**
   * 求任意4*4矩阵的逆矩阵，行列式为 0 则返回单位矩阵兜底
   * 格式：matrix3d(a1, b1, c1, d1, a2, b2, c2, d2, a3, b3, c3, d3, a4, b4, c4, d4)
   * 参见: https://developer.mozilla.org/en-US/docs/Web/CSS/transform-function/matrix3d()
   * 对应：
   * [
   *   a1,a2,a3,a4,
   *   b1,b2,b3,b4,
   *   c1,c2,c3,c4,
   *   d1,d2,d3,d4,
   * ]
   *
   * 根据公式 A* = |A|A^-1 来计算
   * A* 表示矩阵 A 的伴随矩阵，A^-1 表示矩阵 A 的逆矩阵，|A| 表示行列式的值
   *
   * @returns {number[]}
   */


  function inverse4(s) {
    var inv = [];
    inv[0] = s[5] * s[10] * s[15] - s[5] * s[11] * s[14] - s[9] * s[6] * s[15] + s[9] * s[7] * s[14] + s[13] * s[6] * s[11] - s[13] * s[7] * s[10];
    inv[4] = -s[4] * s[10] * s[15] + s[4] * s[11] * s[14] + s[8] * s[6] * s[15] - s[8] * s[7] * s[14] - s[12] * s[6] * s[11] + s[12] * s[7] * s[10];
    inv[8] = s[4] * s[9] * s[15] - s[4] * s[11] * s[13] - s[8] * s[5] * s[15] + s[8] * s[7] * s[13] + s[12] * s[5] * s[11] - s[12] * s[7] * s[9];
    inv[12] = -s[4] * s[9] * s[14] + s[4] * s[10] * s[13] + s[8] * s[5] * s[14] - s[8] * s[6] * s[13] - s[12] * s[5] * s[10] + s[12] * s[6] * s[9];
    inv[1] = -s[1] * s[10] * s[15] + s[1] * s[11] * s[14] + s[9] * s[2] * s[15] - s[9] * s[3] * s[14] - s[13] * s[2] * s[11] + s[13] * s[3] * s[10];
    inv[5] = s[0] * s[10] * s[15] - s[0] * s[11] * s[14] - s[8] * s[2] * s[15] + s[8] * s[3] * s[14] + s[12] * s[2] * s[11] - s[12] * s[3] * s[10];
    inv[9] = -s[0] * s[9] * s[15] + s[0] * s[11] * s[13] + s[8] * s[1] * s[15] - s[8] * s[3] * s[13] - s[12] * s[1] * s[11] + s[12] * s[3] * s[9];
    inv[13] = s[0] * s[9] * s[14] - s[0] * s[10] * s[13] - s[8] * s[1] * s[14] + s[8] * s[2] * s[13] + s[12] * s[1] * s[10] - s[12] * s[2] * s[9];
    inv[2] = s[1] * s[6] * s[15] - s[1] * s[7] * s[14] - s[5] * s[2] * s[15] + s[5] * s[3] * s[14] + s[13] * s[2] * s[7] - s[13] * s[3] * s[6];
    inv[6] = -s[0] * s[6] * s[15] + s[0] * s[7] * s[14] + s[4] * s[2] * s[15] - s[4] * s[3] * s[14] - s[12] * s[2] * s[7] + s[12] * s[3] * s[6];
    inv[10] = s[0] * s[5] * s[15] - s[0] * s[7] * s[13] - s[4] * s[1] * s[15] + s[4] * s[3] * s[13] + s[12] * s[1] * s[7] - s[12] * s[3] * s[5];
    inv[14] = -s[0] * s[5] * s[14] + s[0] * s[6] * s[13] + s[4] * s[1] * s[14] - s[4] * s[2] * s[13] - s[12] * s[1] * s[6] + s[12] * s[2] * s[5];
    inv[3] = -s[1] * s[6] * s[11] + s[1] * s[7] * s[10] + s[5] * s[2] * s[11] - s[5] * s[3] * s[10] - s[9] * s[2] * s[7] + s[9] * s[3] * s[6];
    inv[7] = s[0] * s[6] * s[11] - s[0] * s[7] * s[10] - s[4] * s[2] * s[11] + s[4] * s[3] * s[10] + s[8] * s[2] * s[7] - s[8] * s[3] * s[6];
    inv[11] = -s[0] * s[5] * s[11] + s[0] * s[7] * s[9] + s[4] * s[1] * s[11] - s[4] * s[3] * s[9] - s[8] * s[1] * s[7] + s[8] * s[3] * s[5];
    inv[15] = s[0] * s[5] * s[10] - s[0] * s[6] * s[9] - s[4] * s[1] * s[10] + s[4] * s[2] * s[9] + s[8] * s[1] * s[6] - s[8] * s[2] * s[5];
    var det = s[0] * inv[0] + s[1] * inv[4] + s[2] * inv[8] + s[3] * inv[12];

    if (det === 0) {
      return identity();
    }

    det = 1 / det;
    var d = [];

    for (var i = 0; i < 16; i++) {
      d[i] = inv[i] * det;
    }

    return d;
  } // 将4*4的16长度矩阵转成css/canvas的6位标准使用，忽略transform3d


  function m2m6(m) {
    return [m[0], m[1], m[4], m[5], m[12], m[13]];
  }

  function point2d(point) {
    var w = point[3];

    if (w && w !== 1) {
      point = point.slice(0, 2);
      point[0] /= w;
      point[1] /= w;
    }

    return point;
  }

  var mx = {
    identity: identity,
    multiply: multiply,
    calPoint: calPoint,
    point2d: point2d,
    inverse: inverse,
    isE: isE,
    m2m6: m2m6
  };

  // 向量点乘积
  function dotProduct(x1, y1, x2, y2) {
    return x1 * x2 + y1 * y2;
  } // 向量叉乘积


  function crossProduct(x1, y1, x2, y2) {
    return x1 * y2 - x2 * y1;
  }

  var vector = {
    dotProduct: dotProduct,
    crossProduct: crossProduct
  };

  var H = 4 * (Math.sqrt(2) - 1) / 3;
  var crossProduct$1 = vector.crossProduct;
  var calPoint$1 = mx.calPoint,
      isE$1 = mx.isE;
  var _enums$STYLE_KEY = enums.STYLE_KEY,
      WIDTH = _enums$STYLE_KEY.WIDTH,
      HEIGHT = _enums$STYLE_KEY.HEIGHT,
      TRANSFORM_ORIGIN = _enums$STYLE_KEY.TRANSFORM_ORIGIN;
  /**
   * 圆弧拟合公式，根据角度求得3阶贝塞尔控制点比例长度，一般<=90，超过拆分
   * @param deg
   * @returns {number}
   */

  function h(deg) {
    deg *= 0.5;
    return 4 * ((1 - Math.cos(deg)) / Math.sin(deg)) / 3;
  }
  /**
   * 判断点是否在多边形内
   * @param x 点坐标
   * @param y
   * @param vertexes 多边形顶点坐标
   * @returns {boolean}
   */


  function pointInPolygon(x, y, vertexes) {
    // 先取最大最小值得一个外围矩形，在外边可快速判断false
    var _vertexes$ = _slicedToArray(vertexes[0], 2),
        xmax = _vertexes$[0],
        ymax = _vertexes$[1];

    var _vertexes$2 = _slicedToArray(vertexes[0], 2),
        xmin = _vertexes$2[0],
        ymin = _vertexes$2[1];

    var len = vertexes.length;

    for (var i = 1; i < len; i++) {
      var _vertexes$i = _slicedToArray(vertexes[i], 2),
          _x = _vertexes$i[0],
          _y = _vertexes$i[1];

      xmax = Math.max(xmax, _x);
      ymax = Math.max(ymax, _y);
      xmin = Math.min(xmin, _x);
      ymin = Math.min(ymin, _y);
    }

    if (x < xmin || y < ymin || x > xmax || y > ymax) {
      return false;
    } // 所有向量积均为非负数说明在多边形内或边上


    for (var _i = 0, _len = vertexes.length; _i < _len; _i++) {
      var _vertexes$_i = _slicedToArray(vertexes[_i], 2),
          x1 = _vertexes$_i[0],
          y1 = _vertexes$_i[1];

      var _vertexes = _slicedToArray(vertexes[(_i + 1) % _len], 2),
          x2 = _vertexes[0],
          y2 = _vertexes[1];

      if (crossProduct$1(x2 - x1, y2 - y1, x - x1, y - y1) < 0) {
        return false;
      }
    }

    return true;
  } // 判断点是否在一个4边形内，比如事件发生是否在节点上


  function pointInQuadrilateral(x, y, x1, y1, x2, y2, x4, y4, x3, y3, matrix) {
    if (matrix && !isE$1(matrix)) {
      var w1, w2, w3, w4;

      var _calPoint = calPoint$1([x1, y1], matrix);

      var _calPoint2 = _slicedToArray(_calPoint, 4);

      x1 = _calPoint2[0];
      y1 = _calPoint2[1];
      w1 = _calPoint2[3];

      var _calPoint3 = calPoint$1([x2, y2], matrix);

      var _calPoint4 = _slicedToArray(_calPoint3, 4);

      x2 = _calPoint4[0];
      y2 = _calPoint4[1];
      w2 = _calPoint4[3];

      var _calPoint5 = calPoint$1([x3, y3], matrix);

      var _calPoint6 = _slicedToArray(_calPoint5, 4);

      x3 = _calPoint6[0];
      y3 = _calPoint6[1];
      w3 = _calPoint6[3];

      var _calPoint7 = calPoint$1([x4, y4], matrix);

      var _calPoint8 = _slicedToArray(_calPoint7, 4);

      x4 = _calPoint8[0];
      y4 = _calPoint8[1];
      w4 = _calPoint8[3];

      if (w1 && w1 !== 1) {
        x1 /= w1;
        y1 /= w1;
      }

      if (w2 && w2 !== 1) {
        x2 /= w2;
        y2 /= w2;
      }

      if (w3 && w3 !== 1) {
        x3 /= w3;
        y3 /= w3;
      }

      if (w4 && w4 !== 1) {
        x4 /= w4;
        y4 /= w4;
      }

      return pointInPolygon(x, y, [[x1, y1], [x2, y2], [x4, y4], [x3, y3]]);
    } else {
      return x >= x1 && y >= y1 && x <= x4 && y <= y4;
    }
  }
  /**
   * 余弦定理3边长求夹角
   * @param a
   * @param b
   * @param c
   */


  function angleBySide(a, b, c) {
    var theta = (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / (2 * b * c);
    return Math.acos(theta);
  }
  /**
   * 余弦定理2边长和夹角求3边
   * @param alpha 弧度
   * @param a
   * @param b
   */


  function sideByAngle(alpha, a, b) {
    var cos = Math.cos(alpha);
    return Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * a * b * cos);
  }
  /**
   * 两点距离
   * @param x1
   * @param y1
   * @param x2
   * @param y2
   */


  function pointsDistance(x1, y1, x2, y2) {
    return Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
  }
  /**
   * 三角形内心
   * @param x1
   * @param y1
   * @param x2
   * @param y2
   * @param x3
   * @param y3
   */


  function triangleIncentre(x1, y1, x2, y2, x3, y3) {
    var a = pointsDistance(x2, y2, x3, y3);
    var b = pointsDistance(x1, y1, x3, y3);
    var c = pointsDistance(x1, y1, x2, y2);
    return [(a * x1 + b * x2 + c * x3) / (a + b + c), (a * y1 + b * y2 + c * y3) / (a + b + c)];
  }
  /**
   * 椭圆圆心和长短轴生成4个端点和控制点
   */


  function ellipsePoints(x, y, a) {
    var b = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : a;
    var ox = a * H;
    var oy = b === a ? ox : b * H;
    return [[x - a, y], [x - a, y - oy, x - ox, y - b, x, y - b], [x + ox, y - b, x + a, y - oy, x + a, y], [x + a, y + oy, x + ox, y + b, x, y + b], [x - ox, y + b, x - a, y + oy, x - a, y]];
  }
  /**
   * 扇形圆心和半径起始角度生成4个端点和控制点
   * 分为4个象限进行拟合，0、1、2、3
   */


  function sectorPoints(x, y, r, begin, end) {
    if (begin > end) {
      var _ref = [end, begin];
      begin = _ref[0];
      end = _ref[1];
    }

    if (begin === end) {
      return [];
    }

    var list = [];
    var b = Math.floor(begin / 90);
    var e = Math.floor(end / 90); // 同象限直接算

    if (b === e || e - b === 1 && end % 90 === 0) {
      var h2 = h(d2r(Math.abs(begin - end)));
      var d = h2 * r;
      var c = Math.sqrt(Math.pow(r, 2) + Math.pow(d, 2));
      var alpha = Math.atan(d / r);

      if (b < 90) {
        // 第1个交点
        var rx = Math.sin(d2r(begin)) * r;
        var ry = Math.cos(d2r(begin)) * r;
        var p1 = [x + rx, y - ry]; // 第1个控制点

        var deg = alpha + d2r(begin);
        rx = Math.sin(deg) * c;
        ry = Math.cos(deg) * c;
        var p2 = [x + rx, y - ry]; // 第2个交点

        rx = Math.sin(d2r(end)) * r;
        ry = Math.cos(d2r(end)) * r;
        var p4 = [x + rx, y - ry]; // 第2个控制点

        deg = d2r(end) - alpha;
        rx = Math.sin(deg) * c;
        ry = Math.cos(deg) * c;
        var p3 = [x + rx, y - ry];
        list.push(p1);
        list.push(p2.concat(p3).concat(p4));
      } else if (b < 180) {
        // 第1个交点
        var _rx = Math.cos(d2r(begin - 90)) * r;

        var _ry = Math.sin(d2r(begin - 90)) * r;

        var _p = [x + _rx, y + _ry]; // 第1个控制点

        var _deg = alpha + d2r(begin - 90);

        _rx = Math.cos(_deg) * c;
        _ry = Math.sin(_deg) * c;
        var _p2 = [x + _rx, y + _ry]; // 第2个交点

        _rx = Math.cos(d2r(end - 90)) * r;
        _ry = Math.sin(d2r(end - 90)) * r;
        var _p3 = [x + _rx, y + _ry]; // 第2个控制点

        _deg = d2r(end - 90) - alpha;
        _rx = Math.cos(_deg) * c;
        _ry = Math.sin(_deg) * c;
        var _p4 = [x + _rx, y + _ry];
        list.push(_p);
        list.push(_p2.concat(_p4).concat(_p3));
      } else if (b < 270) {
        // 第1个交点
        var _rx2 = Math.sin(d2r(begin - 180)) * r;

        var _ry2 = Math.cos(d2r(begin - 180)) * r;

        var _p5 = [x - _rx2, y + _ry2]; // 第1个控制点

        var _deg2 = alpha + d2r(begin - 180);

        _rx2 = Math.sin(_deg2) * c;
        _ry2 = Math.cos(_deg2) * c;
        var _p6 = [x - _rx2, y + _ry2]; // 第2个交点

        _rx2 = Math.sin(d2r(end - 180)) * r;
        _ry2 = Math.cos(d2r(end - 180)) * r;
        var _p7 = [x - _rx2, y + _ry2]; // 第2个控制点

        _deg2 = d2r(end - 180) - alpha;
        _rx2 = Math.sin(_deg2) * c;
        _ry2 = Math.cos(_deg2) * c;
        var _p8 = [x - _rx2, y + _ry2];
        list.push(_p5);
        list.push(_p6.concat(_p8).concat(_p7));
      } else {
        // 第1个交点
        var _rx3 = Math.cos(d2r(begin - 270)) * r;

        var _ry3 = Math.sin(d2r(begin - 270)) * r;

        var _p9 = [x - _rx3, y + _ry3]; // 第1个控制点

        var _deg3 = alpha + d2r(begin - 270);

        _rx3 = Math.cos(_deg3) * c;
        _ry3 = Math.sin(_deg3) * c;
        var _p10 = [x - _rx3, y + _ry3]; // 第2个交点

        _rx3 = Math.cos(d2r(end - 270)) * r;
        _ry3 = Math.sin(d2r(end - 270)) * r;
        var _p11 = [x - _rx3, y + _ry3]; // 第2个控制点

        _deg3 = d2r(end - 270) - alpha;
        _rx3 = Math.cos(_deg3) * c;
        _ry3 = Math.sin(_deg3) * c;
        var _p12 = [x - _rx3, y + _ry3];
        list.push(_p9);
        list.push(_p10.concat(_p12).concat(_p11));
      }
    } // 跨象限循环算
    else {
        var i = b;
        var temp = [];

        for (; i <= e; i++) {
          if (i === 0) {
            var res = sectorPoints(x, y, r, begin, 90);
            temp.push(res);
          } else if (i === 1) {
            // 防止90~90这种情况，但如果begin和end都是90时又要显示
            if (b === i || end > 90) {
              var _res = sectorPoints(x, y, r, begin < 90 ? 90 : begin, end > 180 ? 180 : end);

              temp.push(_res);
            }
          } else if (i === 2) {
            // 防止180~180这种情况，但如果begin和end都是90时又要显示
            if (b === i || end > 180) {
              var _res2 = sectorPoints(x, y, r, begin < 180 ? 180 : begin, end > 270 ? 270 : end);

              temp.push(_res2);
            }
          } else if (i === 3) {
            // 防止180~180这种情况，但如果begin和end都是90时又要显示
            if (b === i || end > 270) {
              var _res3 = sectorPoints(x, y, r, begin < 270 ? 270 : begin, end);

              temp.push(_res3);
            }
          }
        } // 去掉重复的首尾扇弧点


        list = temp[0];

        for (var _i2 = 1, len = temp.length; _i2 < len; _i2++) {
          list.push(temp[_i2][1]);
        }
      }

    return list;
  }
  /**
   * 获取2个矩形重叠区域，如不重叠返回null
   * @param a
   * @param b
   */


  function getRectsIntersection(a, b) {
    if (!isRectsOverlap(a, b)) {
      return null;
    }

    var _a = _slicedToArray(a, 4),
        ax1 = _a[0],
        ay1 = _a[1],
        ax4 = _a[2],
        ay4 = _a[3];

    var _b = _slicedToArray(b, 4),
        bx1 = _b[0],
        by1 = _b[1],
        bx4 = _b[2],
        by4 = _b[3];

    return [Math.max(ax1, bx1), Math.max(ay1, by1), Math.min(ax4, bx4), Math.min(ay4, by4)];
  }
  /**
   * 2个矩形是否重叠
   * @param a
   * @param b
   */


  function isRectsOverlap(a, b) {
    var _a2 = _slicedToArray(a, 4),
        ax1 = _a2[0],
        ay1 = _a2[1],
        ax4 = _a2[2],
        ay4 = _a2[3];

    var _b2 = _slicedToArray(b, 4),
        bx1 = _b2[0],
        by1 = _b2[1],
        bx4 = _b2[2],
        by4 = _b2[3];

    if (ax1 >= bx4 || ay1 >= by4 || bx1 >= ax4 || by1 >= ay4) {
      return false;
    }

    return true;
  }
  /**
   * 2个矩形是否包含，a包含b
   * @param a
   * @param b
   */


  function isRectsInside(a, b) {
    var _a3 = _slicedToArray(a, 4),
        ax1 = _a3[0],
        ay1 = _a3[1],
        ax4 = _a3[2],
        ay4 = _a3[3];

    var _b3 = _slicedToArray(b, 4),
        bx1 = _b3[0],
        by1 = _b3[1],
        bx4 = _b3[2],
        by4 = _b3[3];

    if (ax1 <= bx1 && ay1 <= by1 && ax4 >= bx4 && ay4 >= by4) {
      return true;
    }

    return false;
  }

  function calCoordsInNode(px, py, node) {
    var _node$matrix = node.matrix,
        matrix = _node$matrix === void 0 ? [1, 0, 0, 1, 0, 0] : _node$matrix,
        _node$computedStyle = node.computedStyle,
        computedStyle = _node$computedStyle === void 0 ? {} : _node$computedStyle;
    var width = computedStyle[WIDTH],
        height = computedStyle[HEIGHT],
        _computedStyle$TRANSF = computedStyle[TRANSFORM_ORIGIN];
    _computedStyle$TRANSF = _computedStyle$TRANSF === void 0 ? [width * 0.5, height * 0.5] : _computedStyle$TRANSF;

    var _computedStyle$TRANSF2 = _slicedToArray(_computedStyle$TRANSF, 2),
        ox = _computedStyle$TRANSF2[0],
        oy = _computedStyle$TRANSF2[1];

    var _calPoint9 = calPoint$1([px * width - ox, py * height - oy], matrix);

    var _calPoint10 = _slicedToArray(_calPoint9, 2);

    px = _calPoint10[0];
    py = _calPoint10[1];
    return [px + ox, py + oy];
  }

  function calPercentInNode(x, y, node) {
    var _node$computedStyle2 = node.computedStyle,
        width = _node$computedStyle2[WIDTH],
        height = _node$computedStyle2[HEIGHT],
        _node$computedStyle2$ = _slicedToArray(_node$computedStyle2[TRANSFORM_ORIGIN], 2),
        ox = _node$computedStyle2$[0],
        oy = _node$computedStyle2$[1]; // 先求无旋转时右下角相对于原点的角度ds


    var ds = Math.atan((height - oy) / (width - ox));

    var _calCoordsInNode = calCoordsInNode(1, 1, node),
        _calCoordsInNode2 = _slicedToArray(_calCoordsInNode, 2),
        x1 = _calCoordsInNode2[0],
        y1 = _calCoordsInNode2[1];

    var d1;
    var deg; // 根据旋转后的坐标，分4个象限，求旋转后的右下角相对于原点的角度d1，得出偏移角度deg，分顺逆时针[-180, 180]

    if (x1 >= ox && y1 >= oy) {
      if (ox === x1) {
        d1 = -Math.atan(Infinity);
      } else {
        d1 = Math.atan((y1 - oy) / (x1 - ox));
      }

      deg = d1 - ds;
    } else if (x1 >= ox && y1 < oy) {
      if (ox === x1) {
        d1 = -Math.atan(Infinity);
      } else {
        d1 = Math.atan((oy - y1) / (x1 - ox));
      }

      deg = d1 + ds;
    } else if (x1 < ox && y1 >= oy) {
      d1 = Math.atan((y1 - oy) / (ox - x1));
      deg = d1 - ds;
    } else if (x1 < ox && y1 < oy) {
      d1 = Math.atan((y1 - oy) / (x1 - ox));

      if (ds >= d1) {
        deg = d1 + Math.PI - ds;
      } else {
        deg = Math.PI - d1 + ds;
        deg = -deg;
      }
    } else {
      deg = 0;
    } // 目标点到原点的边长不会变


    var dt = Math.sqrt(Math.pow(x - ox, 2) + Math.pow(y - oy, 2)); // 分4个象限，先求目标点到原点的角度d2，再偏移deg后求得原始坐标

    var d2;

    if (x >= ox && y >= oy) {
      if (ox === x) {
        d2 = -Math.atan(Infinity);
      } else {
        d2 = Math.atan((y - oy) / (x - ox));
      }
    } else if (x >= ox && y < oy) {
      if (ox === x) {
        d2 = -Math.atan(Infinity);
      } else {
        d2 = -Math.atan((y - oy) / (ox - x));
      }
    } else if (x < ox && y >= oy) {
      d2 = Math.PI - Math.atan((y - oy) / (ox - x));
    } else {
      d2 = Math.atan((y - oy) / (x - ox)) - Math.PI;
    }

    d2 -= deg;

    if (d2 > Math.PI) {
      d2 -= Math.PI;
      return [(ox - dt * Math.cos(d2)) / width, (oy - dt * Math.sin(d2)) / height];
    }

    if (d2 > Math.PI * 0.5) {
      d2 = Math.PI - d2;
      return [(ox - dt * Math.cos(d2)) / width, (oy + dt * Math.sin(d2)) / height];
    }

    if (d2 >= 0) {
      return [(ox + dt * Math.cos(d2)) / width, (oy + dt * Math.sin(d2)) / height];
    }

    if (d2 >= -Math.PI * 0.5) {
      d2 = -d2;
      return [(ox + dt * Math.cos(d2)) / width, (oy - dt * Math.sin(d2)) / height];
    }

    if (d2 >= -Math.PI) {
      d2 = Math.PI + d2;
      return [(ox - dt * Math.cos(d2)) / width, (oy - dt * Math.sin(d2)) / height];
    }

    d2 = -Math.PI - d2;
    return [(ox - dt * Math.cos(d2)) / width, (oy + dt * Math.sin(d2)) / height];
  }

  function d2r(n) {
    return n * Math.PI / 180;
  }

  function r2d(n) {
    return n * 180 / Math.PI;
  }
  /**
   * 二阶贝塞尔曲线范围框
   * @param x0
   * @param y0
   * @param x1
   * @param y1
   * @param x2
   * @param y2
   * @returns {number[]}
   * https://www.iquilezles.org/www/articles/bezierbbox/bezierbbox.htm
   */


  function bboxBezier2(x0, y0, x1, y1, x2, y2) {
    var minX = Math.min(x0, x2);
    var minY = Math.min(y0, y2);
    var maxX = Math.max(x0, x2);
    var maxY = Math.max(y0, y2); // 控制点位于边界内部时，边界就是范围框，否则计算导数获取极值

    if (x1 < minX || y1 < minY || x1 > maxX || y1 > maxY) {
      var tx = (x0 - x1) / (x0 - 2 * x1 + x2);
      var ty = (y0 - y1) / (y0 - 2 * y1 + y2);
      var sx = 1 - tx;
      var sy = 1 - ty;
      var qx = sx * sx * x0 + 2 * sx * tx * x1 + tx * tx * x2;
      var qy = sy * sy * y0 + 2 * sy * ty * y1 + ty * ty * y2;
      minX = Math.min(minX, qx);
      minY = Math.min(minY, qy);
      maxX = Math.min(maxX, qx);
      maxY = Math.min(maxY, qy);
    }

    return [minX, minY, maxX, maxY];
  }
  /**
   * 同上三阶的
   */


  function bboxBezier3(x0, y0, x1, y1, x2, y2, x3, y3) {
    var minX = Math.min(x0, x3);
    var minY = Math.min(y0, y3);
    var maxX = Math.max(x0, x3);
    var maxY = Math.max(y0, y3);

    if (x1 < minX || y1 < minY || x1 > maxX || y1 > maxY || x2 < minX || y2 < minY || x2 > maxX || y2 > maxY) {
      var cx = -x0 + x1;
      var cy = -y0 + y1;
      var bx = x0 - 2 * x1 + x2;
      var by = y0 - 2 * y1 + y2;
      var ax = -x0 + 3 * x1 - 3 * x2 + x3;
      var ay = -y0 + 3 * y1 - 3 * y2 + y3;
      var hx = bx * bx - ax * cx;
      var hy = by * by - ay * cy;

      if (hx > 0) {
        hx = Math.sqrt(hx);
        var t = (-bx - hx) / ax;

        if (t > 0 && t < 1) {
          var s = 1 - t;
          var q = s * s * s * x0 + 3 * s * s * t * x1 + 3 * s * t * t * x2 + t * t * t * x3;
          minX = Math.min(minX, q);
          maxX = Math.max(maxX, q);
        }

        t = (-bx + hx) / ax;

        if (t > 0 && t < 1) {
          var _s = 1 - t;

          var _q = _s * _s * _s * x0 + 3 * _s * _s * t * x1 + 3 * _s * t * t * x2 + t * t * t * x3;

          minX = Math.min(minX, _q);
          maxX = Math.max(maxX, _q);
        }
      }

      if (hy > 0) {
        hy = Math.sqrt(hy);

        var _t = (-by - hy) / ay;

        if (_t > 0 && _t < 1) {
          var _s2 = 1 - _t;

          var _q2 = _s2 * _s2 * _s2 * y0 + 3 * _s2 * _s2 * _t * y1 + 3 * _s2 * _t * _t * y2 + _t * _t * _t * y3;

          minY = Math.min(minY, _q2);
          maxY = Math.max(maxY, _q2);
        }

        _t = (-by + hy) / ay;

        if (_t > 0 && _t < 1) {
          var _s3 = 1 - _t;

          var _q3 = _s3 * _s3 * _s3 * y0 + 3 * _s3 * _s3 * _t * y1 + 3 * _s3 * _t * _t * y2 + _t * _t * _t * y3;

          minY = Math.min(minY, _q3);
          maxY = Math.max(maxY, _q3);
        }
      }
    }

    return [minX, minY, maxX, maxY];
  }

  function bboxBezier(x0, y0, x1, y1, x2, y2, x3, y3) {
    if (arguments.length === 4) {
      return [x0, y0, x1, y1];
    }

    if (arguments.length === 6) {
      return bboxBezier2(x0, y0, x1, y1, x2, y2);
    }

    if (arguments.length === 8) {
      return bboxBezier3(x0, y0, x1, y1, x2, y2, x3, y3);
    }
  }
  /**
   * 范数 or 模
   */


  function norm(v) {
    var order = v.length;
    var sum = v.reduce(function (a, b) {
      return Math.pow(a, order) + Math.pow(b, order);
    });
    return Math.pow(sum, 1 / order);
  }

  function simpson38(derivativeFunc, l, r) {
    var f = derivativeFunc;
    var middleL = (2 * l + r) / 3;
    var middleR = (l + 2 * r) / 3;
    return (f(l) + 3 * f(middleL) + 3 * f(middleR) + f(r)) * (r - l) / 8;
  }
  /**
   * bezier 曲线的长度
   * @param derivativeFunc 微分函数
   * @param l 左点
   * @param r 右点
   * @param eps 精度
   * @return {*} number
   */


  function adaptiveSimpson38(derivativeFunc, l, r) {
    var eps = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0.001;
    var f = derivativeFunc;
    var mid = (l + r) / 2;
    var st = simpson38(f, l, r);
    var sl = simpson38(f, l, mid);
    var sr = simpson38(f, mid, r);
    var ans = sl + sr - st;

    if (Math.abs(ans) <= 15 * eps) {
      return sl + sr + ans / 15;
    }

    return adaptiveSimpson38(f, l, mid, eps / 2) + adaptiveSimpson38(f, mid, r, eps / 2);
  }
  /**
   * bezier 曲线的长度
   * @param points 曲线的起止点 和 控制点
   * @param order 阶次， 2 和 3
   * @param startT 计算长度的起点，满足 0 <= startT <= endT <= 1
   * @param endT 计算长度的终点
   * @return {*} number
   */


  function bezierLength(points, order) {
    var startT = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var endT = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

    var derivativeFunc = function derivativeFunc(t) {
      return norm(at(t, points, order));
    };

    return adaptiveSimpson38(derivativeFunc, startT, endT);
  }
  /**
   * 3 阶 bezier 曲线的 order 阶导数在 t 位置时候的 (x, y) 的值
   */


  function at3(t, points) {
    var order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

    var _points = _slicedToArray(points, 4),
        p0 = _points[0],
        p1 = _points[1],
        p2 = _points[2],
        p3 = _points[3];

    var _p13 = _slicedToArray(p0, 2),
        x0 = _p13[0],
        y0 = _p13[1];

    var _p14 = _slicedToArray(p1, 2),
        x1 = _p14[0],
        y1 = _p14[1];

    var _p15 = _slicedToArray(p2, 2),
        x2 = _p15[0],
        y2 = _p15[1];

    var _p16 = _slicedToArray(p3, 2),
        x3 = _p16[0],
        y3 = _p16[1];

    var x = 0;
    var y = 0;

    if (order === 0) {
      x = Math.pow(1 - t, 3) * x0 + 3 * t * Math.pow(1 - t, 2) * x1 + 3 * (1 - t) * Math.pow(t, 2) * x2 + Math.pow(t, 3) * x3;
      y = Math.pow(1 - t, 3) * y0 + 3 * t * Math.pow(1 - t, 2) * y1 + 3 * (1 - t) * Math.pow(t, 2) * y2 + Math.pow(t, 3) * y3;
    } else if (order === 1) {
      x = 3 * ((1 - t) * (1 - t) * (x1 - x0) + 2 * (1 - t) * t * (x2 - x1) + t * t * (x3 - x2));
      y = 3 * ((1 - t) * (1 - t) * (y1 - y0) + 2 * (1 - t) * t * (y2 - y1) + t * t * (y3 - y2));
    } else if (order === 2) {
      x = 6 * (x2 - 2 * x1 + x0) * (1 - t) + 6 * (x3 - 2 * x2 + x1) * t;
      y = 6 * (y2 - 2 * y1 + y0) * (1 - t) + 6 * (y3 - 2 * y2 + y1) * t;
    } else if (order === 3) {
      x = 6 * (x3 - 3 * x2 + 3 * x1 - x0);
      y = 6 * (y3 - 3 * y2 + 3 * y1 - y0);
    } else {
      // 3阶导数就是常数了，大于3阶的都是0
      x = 0;
      y = 0;
    }

    return [x, y];
  }
  /**
   * 2 阶 bezier 曲线的 order 阶导数在 t 位置时候的 (x, y) 的值
   */


  function at2(t, points) {
    var order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;

    var _points2 = _slicedToArray(points, 3),
        p0 = _points2[0],
        p1 = _points2[1],
        p2 = _points2[2];

    var _p17 = _slicedToArray(p0, 2),
        x0 = _p17[0],
        y0 = _p17[1];

    var _p18 = _slicedToArray(p1, 2),
        x1 = _p18[0],
        y1 = _p18[1];

    var _p19 = _slicedToArray(p2, 2),
        x2 = _p19[0],
        y2 = _p19[1];

    var x = 0;
    var y = 0;

    if (order === 0) {
      x = Math.pow(1 - t, 2) * x0 + 2 * t * (1 - t) * x1 + Math.pow(t, 2) * x2;
      y = Math.pow(1 - t, 2) * y0 + 2 * t * (1 - t) * y1 + Math.pow(t, 2) * y2;
    } else if (order === 1) {
      x = 2 * (1 - t) * (x1 - x0) + 2 * t * (x2 - x1);
      y = 2 * (1 - t) * (y1 - y0) + 2 * t * (y2 - y1);
    } else if (order === 2) {
      x = 2 * (x2 - 2 * x1 + x0);
      y = 2 * (y2 - 2 * y1 + y0);
    } else {
      x = 0;
      y = 0;
    }

    return [x, y];
  }

  function at(t, points, bezierOrder) {
    var derivativeOrder = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

    if (bezierOrder === 2) {
      return at2(t, points, derivativeOrder);
    } else if (bezierOrder === 3) {
      return at3(t, points, derivativeOrder);
    }
  }

  function pointAtBezier(points, order, percent, maxIteration, eps) {
    var length = bezierLength(points, order, 0, 1);
    return pointAtBezierWithLength(points, order, length, percent, maxIteration, eps);
  }

  function pointAtBezierWithLength(points, order, length) {
    var percent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
    var maxIteration = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 20;
    var eps = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.001;

    var derivativeFunc = function derivativeFunc(t) {
      return norm(at(t, points, order));
    };

    var targetLen = length * percent;
    var approachLen = length;
    var approachT = percent;
    var preApproachT = approachT;

    for (var i = 0; i < maxIteration; i++) {
      approachLen = simpson38(derivativeFunc, 0, approachT);
      var d = approachLen - targetLen;

      if (Math.abs(d) < eps) {
        break;
      } // Newton 法


      var derivative1 = norm(at(approachT, points, order, 1)); // 1 阶导数

      var derivative2 = norm(at(approachT, points, order, 2)); // 2 阶导数

      var numerator = d * derivative1;
      var denominator = d * derivative2 + derivative1 * derivative1;
      approachT = approachT - numerator / denominator;

      if (Math.abs(approachT - preApproachT) < eps) {
        break;
      } else {
        preApproachT = approachT;
      }
    }

    return at(approachT, points, order, 0);
  }

  function sliceBezier(points, t) {
    var _points3 = _slicedToArray(points, 4),
        _points3$ = _slicedToArray(_points3[0], 2),
        x1 = _points3$[0],
        y1 = _points3$[1],
        _points3$2 = _slicedToArray(_points3[1], 2),
        x2 = _points3$2[0],
        y2 = _points3$2[1],
        _points3$3 = _slicedToArray(_points3[2], 2),
        x3 = _points3$3[0],
        y3 = _points3$3[1],
        p4 = _points3[3];

    var x12 = (x2 - x1) * t + x1;
    var y12 = (y2 - y1) * t + y1;
    var x23 = (x3 - x2) * t + x2;
    var y23 = (y3 - y2) * t + y2;
    var x123 = (x23 - x12) * t + x12;
    var y123 = (y23 - y12) * t + y12;

    if (points.length === 4) {
      var _p20 = _slicedToArray(p4, 2),
          x4 = _p20[0],
          y4 = _p20[1];

      var x34 = (x4 - x3) * t + x3;
      var y34 = (y4 - y3) * t + y3;
      var x234 = (x34 - x23) * t + x23;
      var y234 = (y34 - y23) * t + y23;
      var x1234 = (x234 - x123) * t + x123;
      var y1234 = (y234 - y123) * t + y123;
      return [[x1, y1], [x12, y12], [x123, y123], [x1234, y1234]];
    } else if (points.length === 3) {
      return [[x1, y1], [x12, y12], [x123, y123]];
    }
  }

  function sliceBezier2Both(points) {
    var start = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
    start = Math.max(start, 0);
    end = Math.min(end, 1);

    if (start === 0 && end === 1) {
      return points;
    }

    if (end < 1) {
      points = sliceBezier(points, end);
    }

    if (start > 0) {
      if (end < 1) {
        start = start / end;
      }

      points = sliceBezier(points.reverse(), 1 - start).reverse();
    }

    return points;
  }

  function pointOnCircle(x, y, r, deg) {
    if (deg >= 270) {
      deg -= 270;
      deg = d2r(deg);
      return [x - Math.cos(deg) * r, y - Math.sin(deg) * r];
    } else if (deg >= 180) {
      deg -= 180;
      deg = d2r(deg);
      return [x - Math.sin(deg) * r, y + Math.cos(deg) * r];
    } else if (deg >= 90) {
      deg -= 90;
      deg = d2r(deg);
      return [x + Math.cos(deg) * r, y + Math.sin(deg) * r];
    } else {
      deg = d2r(deg);
      return [x + Math.sin(deg) * r, y - Math.cos(deg) * r];
    }
  }

  var geom = {
    pointInPolygon: pointInPolygon,
    pointInQuadrilateral: pointInQuadrilateral,
    d2r: d2r,
    r2d: r2d,
    // 贝塞尔曲线模拟1/4圆弧比例
    H: H,
    // <90任意角度贝塞尔曲线拟合圆弧的比例公式
    h: h,
    angleBySide: angleBySide,
    sideByAngle: sideByAngle,
    pointsDistance: pointsDistance,
    triangleIncentre: triangleIncentre,
    ellipsePoints: ellipsePoints,
    sectorPoints: sectorPoints,
    getRectsIntersection: getRectsIntersection,
    isRectsOverlap: isRectsOverlap,
    isRectsInside: isRectsInside,
    calCoordsInNode: calCoordsInNode,
    calPercentInNode: calPercentInNode,
    bboxBezier: bboxBezier,
    bezierLength: bezierLength,
    pointAtBezier: pointAtBezier,
    pointAtBezierWithLength: pointAtBezierWithLength,
    sliceBezier: sliceBezier,
    sliceBezier2Both: sliceBezier2Both,
    pointOnCircle: pointOnCircle
  };

  /**
   * @typedef {Object} gradientStatement
   * @property {Array<number>} color - 颜色rgba，0～255，如 [0, 255, 0, 255]
   * @property {number} angle - 角度，0～2 * Math.PI，(originX, originY) 为原点，垂直向上为0
   */

  /**
   * 获取渐变图像像素数组
   * @param {number} originX - 渐变中心x坐标（相对图片左上角(0,0)的值，可在图片外，下同）
   * @param {number} originY - 渐变中心y坐标
   * @param {number} width - 图片宽度
   * @param {number} height - 图片高度
   * @param {Array<stop>} stop - 渐变声明列表
   * @param data - canvas的imgData.data
   * @returns {Array<number>} 图像像素数组，每4个元素（rgba）构成一个像素点
   * @example
       // 矩形宽度为200*200，此时坐标为0～199，渐变中心为中点时，应传入99.5，可消除零点问题
       // 若渐变中心在某一整数轴上，就会引入零点问题，此时零点取y轴正半轴的色值，要消除这个问题，可以对渐变中心增加一个偏移量，使其不为整数
       let w = 200;
       let h = 200;
       let ctx = document.getElementById('example').getContext('2d');
       let imgData = ctx.getImageData(0,0, w, h);
       let data = getConicGradientImage(99.5, 99.5, w, h, [{
         color: [0,0,0,255],
         angle: 0,
       } ,{
         color: [255,0,0,255],
         angle: 2 * Math.PI,
       }]);
       for (let i = 0; i < imgData.data.length; i++) {
         imgData.data[i] = data[i];
       }
       ctx.putImageData(imgData, 0, 0);
   */
  function getConicGradientImage(originX, originY, width, height, stop, data) {
    if (stop.length < 2) {
      throw new Error('Conic gradient should recieve at least 2 gradient statements (start line and end line).');
    }

    width = Math.floor(width);
    height = Math.floor(height);
    /**
     * 根据坐标获取角度
     * @param {number} x - x坐标，左上角为原点
     * @param {number} y - y坐标，左上角为原点
     * @returns {number} angle - 角度，0～2 * Math.PI，(originX, originY) 为原点，垂直向上为0
     */

    var getAngle = function getAngle(x, y) {
      // 此函数注释内的x、y轴基于 (originX, originY)
      // 计算相对 (originX, originY) 的坐标(dx, dy)
      var dx = x - originX;
      var dy = originY - y; // 在y轴上

      if (dx === 0) {
        return dy < 0 ? // y轴负半轴，
        1 * Math.PI : // y轴正半轴，因此，(originX, originY) 的angle视作0
        0;
      } // 在x轴上


      if (dy === 0) {
        return dx < 0 ? // x轴负半轴
        1.5 * Math.PI : // x轴正半轴
        0.5 * Math.PI;
      }

      var atan = Math.atan(dy / dx);
      /**
       *  2   |  1
       * -----|-----
       *  3   |  4
       */
      // 第一象限，atan > 0
      // 第四象限，atan < 0

      if (dx > 0) {
        return 0.5 * Math.PI - atan;
      } // 第二象限，atan < 0
      // 第三象限，atan > 0


      if (dx < 0) {
        return 1.5 * Math.PI - atan;
      }
    };

    var increasingList = stop.map(function (item) {
      return {
        color: item[0],
        angle: item[1] * Math.PI * 2
      };
    });

    for (var y = 0; y < height; y++) {
      var _loop = function _loop(x) {
        // step 1. 找到当前点坐标相对 (originX, originY) 的角度
        var angle = getAngle(x, y); // step 2. 找到当前点坐标对应的渐变区间

        var j = void 0;

        for (j = 0; j < increasingList.length && increasingList[j].angle <= angle; j++) {}

        var start = increasingList[j - 1];
        var end = increasingList[j];

        if (!(start && end)) {
          // step 2-1. 不在渐变区间里
          return "continue";
        } // step 3. 计算色值并填充


        var factor = (angle - start.angle) / (end.angle - start.angle);
        var color = end.color.map(function (v, idx) {
          return factor * (v - start.color[idx]) + start.color[idx];
        });
        var i = (x + y * width) * 4;
        data[i] = color[0];
        data[i + 1] = color[1];
        data[i + 2] = color[2];
        data[i + 3] = Math.min(255, color[3] * 255);
      };

      for (var x = 0; x < width; x++) {
        var _ret = _loop(x);

        if (_ret === "continue") continue;
      }
    }

    return data;
  }

  var gradient = {
    getConicGradientImage: getConicGradientImage
  };

  function canvasPolygon(ctx, list) {
    var dx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var dy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    if (!list || !list.length) {
      return;
    }

    var start = -1;

    for (var i = 0, len = list.length; i < len; i++) {
      var item = list[i];

      if (Array.isArray(item) && item.length) {
        start = i;
        break;
      }
    }

    if (start === -1) {
      return;
    }

    ctx.moveTo(list[start][0] + dx, list[start][1] + dy);

    for (var _i = start + 1, _len = list.length; _i < _len; _i++) {
      var _item = list[_i];

      if (!Array.isArray(_item)) {
        continue;
      }

      if (_item.length === 2) {
        ctx.lineTo(_item[0] + dx, _item[1] + dy);
      } else if (_item.length === 4) {
        ctx.quadraticCurveTo(_item[0] + dx, _item[1] + dy, _item[2] + dx, _item[3] + dy);
      } else if (_item.length === 6) {
        ctx.bezierCurveTo(_item[0] + dx, _item[1] + dy, _item[2] + dx, _item[3] + dy, _item[4] + dx, _item[5] + dy);
      }
    }
  }

  function svgPolygon(list) {
    if (!list || !list.length) {
      return '';
    }

    var start = -1;

    for (var i = 0, len = list.length; i < len; i++) {
      var item = list[i];

      if (Array.isArray(item) && item.length) {
        start = i;
        break;
      }
    }

    if (start === -1) {
      return '';
    }

    var s = 'M' + list[start][0] + ',' + list[start][1];

    for (var _i2 = start + 1, _len2 = list.length; _i2 < _len2; _i2++) {
      var _item2 = list[_i2];

      if (!Array.isArray(_item2)) {
        continue;
      }

      if (_item2.length === 2) {
        s += 'L' + _item2[0] + ',' + _item2[1];
      } else if (_item2.length === 4) {
        s += 'Q' + _item2[0] + ',' + _item2[1] + ' ' + _item2[2] + ',' + _item2[3];
      } else if (_item2.length === 6) {
        s += 'C' + _item2[0] + ',' + _item2[1] + ' ' + _item2[2] + ',' + _item2[3] + ' ' + _item2[4] + ',' + _item2[5];
      }
    }

    return s;
  }

  function canvasLine(ctx, x1, y1, x2, y2, controlA, controlB, num) {
    var dx = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
    var dy = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
    ctx.moveTo(x1 + dx, y1 + dy);

    if (num === 3) {
      ctx.bezierCurveTo(controlA[0] + dx, controlA[1] + dy, controlB[0] + dx, controlB[1], x2 + dx, y2 + dy);
      return 2;
    } else if (num === 2) {
      ctx.quadraticCurveTo(controlB[0] + dx, controlB[1] + dy, x2 + dx, y2 + dy);
      return 2;
    } else if (num === 1) {
      ctx.quadraticCurveTo(controlA[0] + dx, controlA[1] + dy, x2 + dx, y2 + dy);
      return 2;
    } else {
      ctx.lineTo(x2 + dx, y2 + dy);
      return 1;
    }
  }

  function svgLine(x1, y1, x2, y2, controlA, controlB, num) {
    if (num === 3) {
      return 'M' + x1 + ',' + y1 + 'C' + controlA[0] + ',' + controlA[1] + ' ' + controlB[0] + ',' + controlB[1] + ' ' + x2 + ',' + y2;
    } else if (num === 2) {
      return 'M' + x1 + ',' + y1 + 'Q' + controlB[0] + ',' + controlB[1] + ' ' + x2 + ',' + y2;
    } else if (num === 1) {
      return 'M' + x1 + ',' + y1 + 'Q' + controlA[0] + ',' + controlA[1] + ' ' + x2 + ',' + y2;
    } else {
      return 'M' + x1 + ',' + y1 + 'L' + x2 + ',' + y2;
    }
  }

  function canvasFilter(filter) {
    var s = '';
    filter.forEach(function (item) {
      var _item3 = _slicedToArray(item, 2),
          k = _item3[0],
          v = _item3[1];

      if (k === 'blur') {
        s += "blur(".concat(v, "px)");
      } else if (k === 'hue-rotate') {
        s += "hue-rotate(".concat(v, "deg)");
      } else if (k === 'saturate' || k === 'brightness' || k === 'grayscale' || k === 'contrast') {
        s += "".concat(k, "(").concat(v, "%)");
      }
    });
    return s;
  }

  var painter = {
    canvasPolygon: canvasPolygon,
    svgPolygon: svgPolygon,
    canvasLine: canvasLine,
    svgLine: svgLine,
    canvasFilter: canvasFilter,
    svgFilter: canvasFilter
  };

  var H$1 = geom.H;
  var PX = o.PX,
      PERCENT = o.PERCENT,
      REM = o.REM,
      VW = o.VW,
      VH = o.VH,
      VMAX = o.VMAX,
      VMIN = o.VMIN;
  var canvasPolygon$1 = painter.canvasPolygon,
      svgPolygon$1 = painter.svgPolygon;
  var _enums$STYLE_KEY$1 = enums.STYLE_KEY,
      BORDER_LEFT_WIDTH = _enums$STYLE_KEY$1.BORDER_LEFT_WIDTH,
      BORDER_TOP_WIDTH = _enums$STYLE_KEY$1.BORDER_TOP_WIDTH,
      BORDER_BOTTOM_WIDTH = _enums$STYLE_KEY$1.BORDER_BOTTOM_WIDTH,
      PADDING_LEFT = _enums$STYLE_KEY$1.PADDING_LEFT,
      PADDING_BOTTOM = _enums$STYLE_KEY$1.PADDING_BOTTOM,
      PADDING_TOP = _enums$STYLE_KEY$1.PADDING_TOP,
      BORDER_TOP_LEFT_RADIUS = _enums$STYLE_KEY$1.BORDER_TOP_LEFT_RADIUS,
      BORDER_TOP_RIGHT_RADIUS = _enums$STYLE_KEY$1.BORDER_TOP_RIGHT_RADIUS,
      BORDER_BOTTOM_LEFT_RADIUS = _enums$STYLE_KEY$1.BORDER_BOTTOM_LEFT_RADIUS,
      BORDER_BOTTOM_RIGHT_RADIUS = _enums$STYLE_KEY$1.BORDER_BOTTOM_RIGHT_RADIUS,
      FONT_SIZE = _enums$STYLE_KEY$1.FONT_SIZE;
  /* 获取合适的虚线实体空白宽度ps/pd和数量n
   * 总长total，start边长bs，end边长be，内容长w，
   * 实体长范围[smin,smax]，空白长范围[dmin,dmax]
   */

  function calFitDashed(total, bs, be, w, smin, smax, dmin, dmax) {
    var n = 1;
    var ps = 1;
    var pd = 1; // 从最大实体空白长开始尝试

    outer: for (var i = smax; i >= smin; i--) {
      for (var j = dmax; j >= dmin; j--) {
        // 已知实体空白长度，n实体和n-1空白组成total，计算获取n数量
        var per = i + j;
        var num = Math.floor((total + j) / per);
        var k = j; // 可能除不尽，此时扩展空白长

        if (num * per < j + total) {
          var free = total - num * i;
          k = free / (num - 1);

          if (k > dmax) {
            continue;
          }
        }

        per = i + k; // bs比实体大才有效，因为小的话必定和第一个实体完整相连

        if (bs > 1 && bs > i) {
          var mo = bs % per;

          if (mo > i) {
            continue;
          }

          if (be > 1) {
            var _mo = (bs + w) % per;

            if (_mo > i) {
              continue;
            }
          }
        }

        if (be > 1) {
          var _mo2 = (bs + w) % per;

          if (_mo2 > i) {
            continue;
          }
        }

        if (num > 0) {
          n = num;
          ps = i;
          pd = k;
        }

        break outer;
      }
    }

    return {
      n: n,
      ps: ps,
      pd: pd
    };
  } // dashed时n个实线和n-1虚线默认以3:1宽度组成，dotted则是n和n以1:1组成


  function calDashed(style, m1, m2, m3, m4, bw) {
    var total = m4 - m1;
    var w = m3 - m2;
    var bs = m2 - m1;
    var be = m4 - m3;

    if (style === 'dotted') {
      return calFitDashed(total, bs, be, w, bw, bw, Math.max(1, bw * 0.25), bw * 2);
    } else {
      var _calFitDashed = calFitDashed(total, bs, be, w, bw, bw * 3, Math.max(1, bw * 0.25), bw * 2),
          n = _calFitDashed.n,
          ps = _calFitDashed.ps,
          pd = _calFitDashed.pd;

      if (n === 1) {
        return calFitDashed(total, bs, be, w, bw, bw, Math.max(1, bw * 0.25), bw * 2);
      } // 降级为dotted


      return {
        n: n,
        ps: ps,
        pd: pd
      };
    }
  } // 获取边框分割为几块的坐标，虚线分割为若干四边形、三边型、五边形
  // 三边形重复内外边交点形成四边形，五边形进行切割形成2个四边形
  // direction为上右下左0123


  function calPoints(borderWidth, borderStyle, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, direction, beginRadius, endRadius) {
    var points = [];

    if (['dashed', 'dotted'].indexOf(borderStyle) > -1) {
      // 寻找一个合适的虚线线段长度和之间空白边距长度
      var _ref = direction === 0 || direction === 2 ? calDashed(borderStyle, x1, x2, x3, x4, borderWidth) : calDashed(borderStyle, y1, y2, y3, y4, borderWidth),
          n = _ref.n,
          ps = _ref.ps,
          pd = _ref.pd;

      if (n > 1) {
        for (var i = 0; i < n; i++) {
          // 最后一个可能没有到底，延长之
          var isLast = i === n - 1;
          var main1 = void 0;
          var main2 = void 0;
          var cross1 = void 0;
          var cross2 = void 0;

          if (direction === 0 || direction === 2) {
            main1 = i ? x1 + ps * i + pd * i : x1;
          } else {
            main1 = i ? y1 + ps * i + pd * i : y1;
          }

          main2 = main1 + ps;

          if (direction === 0) {
            // 整个和borderLeft重叠
            if (main2 <= x2) {
              if (isLast) {
                points.push([[x1, y1], [x4, y1], [x3, y2], [x2, y2]]);
              } else {
                cross1 = y1 + (main1 - x1) * Math.tan(deg1);
                cross2 = y1 + (main2 - x1) * Math.tan(deg1);
                points.push([[main1, y1], [main2, y1], [main2, cross2], [main1, cross1]]);
              }
            } // 整个和borderRight重叠
            else if (main1 >= x3) {
                cross1 = y1 + (x4 - main1) * Math.tan(deg2);
                cross2 = y1 + (x4 - main2) * Math.tan(deg2);

                if (isLast) {
                  points.push([[main1, y1], [x4, y1], [x4, y1], [main1, cross1]]);
                } else {
                  points.push([[main1, y1], [main2, y1], [main2, cross2], [main1, cross1]]);
                }
              } // 不被整个重叠的情况再细分
              else {
                  // 上部分和borderLeft重叠
                  if (main1 < x2) {
                    cross1 = y1 + (main1 - x1) * Math.tan(deg1);
                    points.push([[main1, y1], [x2, y1], [x2, y2], [main1, cross1]]);

                    if (isLast) {
                      points.push([[x2, y1], [x3, y1], [x3, y2], [x2, y2]]);
                      points.push([[x3, y1], [x4, y1], [x4, y1], [x2, y2]]);
                    } else {
                      // 下部分和borderRight重叠
                      if (main2 > x3) {
                        cross2 = y1 + (x4 - main2) * Math.tan(deg2);
                        points.push([[x2, y1], [x3, y1], [x3, y2], [x2, y2]]);
                        points.push([[x3, y1], [main2, y1], [main2, cross2], [x3, y2]]);
                      } // 下部独立
                      else {
                          points.push([[x2, y1], [main2, y1], [main2, y2], [x2, y2]]);
                        }
                    }
                  } // 下部分和borderRight重叠
                  else if (main2 > x3) {
                      cross1 = y1 + (x4 - main2) * Math.tan(deg2); // 上部分和borderLeft重叠

                      if (main1 < x2) {
                        cross2 = y1 + (main1 - x1) * Math.tan(deg1);
                        points.push([[main1, y1], [x2, y1], [x2, y2], [main1, cross2]]);
                        points.push([[x2, y1], [x3, y1], [x3, y2], [x2, y2]]);

                        if (isLast) {
                          points.push([[x3, y1], [x4, y1], [x4, y1], [x3, y2]]);
                        } else {
                          points.push([[x3, y1], [main2, y1], [main2, cross1], [x3, y2]]);
                        }
                      } // 上部独立
                      else {
                          points.push([[main1, y1], [x3, y1], [x3, y2], [main1, y2]]);

                          if (isLast) {
                            points.push([[x3, y1], [x4, y1], [x4, y1], [x3, y2]]);
                          } else {
                            points.push([[x3, y1], [main2, y1], [main2, cross1], [x3, y2]]);
                          }
                        }
                    } // 完全独立
                    else {
                        if (isLast) {
                          points.push([[main1, y1], [x4, y1], [x3, y2], [main1, y2]]);
                        } else {
                          points.push([[main1, y1], [main2, y1], [main2, y2], [main1, y2]]);
                        }
                      }
                }
          } else if (direction === 1) {
            // 整个和borderTop重叠
            if (main2 <= y2) {
              if (isLast) {
                points.push([[x3, y2], [x4, y1], [x4, y4], [x3, y3]]);
              } else {
                cross1 = x4 - (main1 - y1) * Math.tan(deg1);
                cross2 = x4 - (main2 - y1) * Math.tan(deg1);
                points.push([[cross1, main1], [x4, main1], [x4, main2], [cross2, main2]]);
              }
            } // 整个和borderBottom重叠
            else if (main1 >= y3) {
                cross1 = x3 + (main1 - y3) * Math.tan(deg2);
                cross2 = x3 + (main2 - y3) * Math.tan(deg2);

                if (isLast) {
                  points.push([[cross1, main1], [x4, main1], [x4, y4], [x4, y4]]);
                } else {
                  points.push([[cross1, main1], [x4, main1], [x4, main2], [cross2, main2]]);
                }
              } // 不被整个重叠的情况再细分
              else {
                  // 上部分和borderTop重叠
                  if (main1 < y2) {
                    cross1 = x3 + (y2 - main1) * Math.tan(deg1);
                    points.push([[cross1, main1], [x4, main1], [x4, y2], [x3, y2]]);

                    if (isLast) {
                      points.push([[x3, y2], [x4, y2], [x4, y3], [x3, y3]]);
                      points.push([[x3, y3], [x4, y3], [x4, y4], [x4, y4]]);
                    } else {
                      // 下部分和borderBottom重叠
                      if (main2 > y3) {
                        cross2 = x3 + (main2 - y3) * Math.tan(deg2);
                        points.push([[x3, y2], [x4, y2], [x4, y3], [x3, y3]]);
                        points.push([[x3, y3], [x4, y3], [x4, main2], [cross2, main2]]);
                      } // 下部独立
                      else {
                          points.push([[x3, y2], [x4, y2], [x4, main2], [x3, main2]]);
                        }
                    }
                  } // 下部分和borderBottom重叠
                  else if (main2 > y3) {
                      cross1 = x3 + (main2 - y3) * Math.tan(deg2); // 上部分和borderTop重叠

                      if (main1 < y2) {
                        cross2 = x3 + (y2 - main1) * Math.tan(deg1);
                        points.push([[cross2, main1], [x4, main1], [x4, y2], [x3, y2]]);
                        points.push([[x3, y2], [x4, y2], [x4, y3], [x3, y3]]);

                        if (isLast) {
                          points.push([[x3, y3], [x4, y3], [x4, x4], [x4, x4]]);
                        } else {
                          points.push([[x3, y3], [x4, y3], [x4, main2], [cross1, main2]]);
                        }
                      } // 上部独立
                      else {
                          points.push([[x3, main1], [x4, main1], [x4, y3], [x3, y3]]);

                          if (isLast) {
                            points.push([[x3, y3], [x4, y3], [x4, y4], [x4, y4]]);
                          } else {
                            points.push([[x3, y3], [x4, y3], [x4, main2], [cross1, main2]]);
                          }
                        }
                    } // 完全独立
                    else {
                        if (isLast) {
                          points.push([[x3, main1], [x4, main1], [x4, y4], [x3, y3]]);
                        } else {
                          points.push([[x3, main1], [x4, main1], [x4, main2], [x3, main2]]);
                        }
                      }
                }
          } else if (direction === 2) {
            // 整个和borderLeft重叠
            if (main2 <= x2) {
              if (isLast) {
                points.push([[x1, y4], [x2, y3], [x3, y3], [x4, y4]]);
              } else {
                cross1 = y4 - (main1 - x1) * Math.tan(deg1);
                cross2 = y4 - (main2 - x1) * Math.tan(deg1);
                points.push([[main1, cross1], [main2, cross2], [main2, y4], [main1, y4]]);
              }
            } // 整个和borderRight重叠
            else if (main1 >= x3) {
                cross1 = y4 - (x4 - main1) * Math.tan(deg2);
                cross2 = y4 - (x4 - main2) * Math.tan(deg2);

                if (isLast) {
                  points.push([[main1, cross1], [x4, y4], [x4, y4], [main1, y4]]);
                } else {
                  points.push([[main1, cross1], [main2, cross2], [main2, y4], [main1, y4]]);
                }
              } // 不被整个重叠的情况再细分
              else {
                  // 上部分和borderLeft重叠
                  if (main1 < x2) {
                    cross1 = y4 - (main1 - x1) * Math.tan(deg1);
                    points.push([[main1, cross1], [x2, y3], [x2, y4], [main1, y4]]);

                    if (isLast) {
                      points.push([[x2, y3], [x3, y3], [x3, y4], [x2, y4]]);
                      points.push([[x3, y3], [x4, y4], [x4, y4], [x3, y4]]);
                    } else {
                      // 下部分和borderRight重叠
                      if (main2 > x3) {
                        cross2 = y4 - (main2 - x3) * Math.tan(deg2);
                        points.push([[x2, y3], [x3, y3], [x3, y4], [x2, y4]]);
                        points.push([[x3, y3], [main2, cross2], [main2, y4], [x3, y4]]);
                      } // 下部独立
                      else {
                          points.push([[x2, y3], [main2, y3], [main2, y4], [x2, y4]]);
                        }
                    }
                  } // 下部分和borderRight重叠
                  else if (main2 > x3) {
                      cross1 = y4 - (x4 - main2) * Math.tan(deg2); // 上部分和borderLeft重叠

                      if (main1 < x2) {
                        cross2 = y4 - (main1 - x3) * Math.tan(deg1);
                        points.push([[main1, cross2], [x2, y3], [x2, y4], [main1, y4]]);
                        points.push([[x2, y3], [x3, y3], [x3, y4], [x2, y4]]);

                        if (isLast) {
                          points.push([[x3, y3], [x4, y4], [x4, y4], [x3, y4]]);
                        } else {
                          points.push([[x3, y3], [main2, cross1], [main2, y4], [x3, y4]]);
                        }
                      } // 上部独立
                      else {
                          points.push([[main1, y3], [x3, y3], [x3, y4], [main1, y4]]);

                          if (isLast) {
                            points.push([[x3, y3], [x4, y4], [x4, y4], [x3, y4]]);
                          } else {
                            points.push([[x3, y3], [main2, cross1], [main2, y4], [x3, y4]]);
                          }
                        }
                    } // 完全独立
                    else {
                        if (isLast) {
                          points.push([[main1, y3], [x3, y3], [x4, y4], [main1, y4]]);
                        } else {
                          points.push([[main1, y3], [main2, y3], [main2, y4], [main1, y4]]);
                        }
                      }
                }
          } else if (direction === 3) {
            // 整个和borderTop重叠
            if (main2 <= y2) {
              if (isLast) {
                points.push([[x1, y1], [x2, y2], [x2, y3], [x1, y4]]);
              } else {
                cross1 = x1 + (main1 - y1) * Math.tan(deg1);
                cross2 = x1 + (main2 - y1) * Math.tan(deg1);
                points.push([[x1, main1], [cross1, main1], [cross2, main2], [x1, main2]]);
              }
            } // 整个和borderBottom重叠
            else if (main1 >= y3) {
                cross1 = x1 + (y4 - main1) * Math.tan(deg2);
                cross2 = x1 + (y4 - main2) * Math.tan(deg2);

                if (isLast) {
                  points.push([[x1, main1], [cross1, main1], [x1, y4], [x1, y4]]);
                } else {
                  points.push([[x1, main1], [cross1, main1], [cross2, main2], [x1, main2]]);
                }
              } // 不被整个重叠的情况再细分
              else {
                  // 上部分和borderTop重叠
                  if (main1 < y2) {
                    cross1 = x1 + (main1 - y1) * Math.tan(deg1);
                    points.push([[x1, main1], [cross1, main1], [x2, y2], [x1, y2]]);

                    if (isLast) {
                      points.push([[x1, y2], [x2, y2], [x2, y3], [x1, y3]]);
                      points.push([[x1, y3], [x2, y3], [x1, y4], [x1, y4]]);
                    } else {
                      // 下部分和borderBottom重叠
                      if (main2 > y3) {
                        cross2 = x1 + (y4 - main2) * Math.tan(deg2);
                        points.push([[x1, y2], [x2, y2], [x2, y3], [x1, y3]]);
                        points.push([[x1, y3], [x2, y3], [cross2, main2], [x1, main2]]);
                      } // 下部独立
                      else {
                          points.push([[x1, y2], [x2, y2], [x2, main2], [x1, main2]]);
                        }
                    }
                  } // 下部分和borderBottom重叠
                  else if (main2 > y3) {
                      cross1 = x1 + (y4 - main2) * Math.tan(deg2); // 上部分和borderTop重叠

                      if (main1 < y2) {
                        cross2 = x1 + (main1 - y1) * Math.tan(deg1);
                        points.push([[x1, main1], [cross2, main1], [x2, y2], [x1, y1]]);
                        points.push([[x1, y2], [x2, y2], [x2, y3], [x1, y3]]);

                        if (isLast) {
                          points.push([[x1, y3], [x2, y3], [x1, y4], [x1, y4]]);
                        } else {
                          points.push([[x1, y3], [x2, y3], [cross1, main2], [x1, main2]]);
                        }
                      } // 上部独立
                      else {
                          points.push([[x1, main1], [x2, main1], [x2, y3], [x1, y3]]);

                          if (isLast) {
                            points.push([[x1, y3], [x2, y3], [x1, y4], [x1, y4]]);
                          } else {
                            points.push([[x1, y3], [x2, y3], [cross1, main2], [x1, main2]]);
                          }
                        }
                    } // 完全独立
                    else {
                        if (isLast) {
                          points.push([[x1, main1], [x2, main1], [x2, y3], [x1, y4]]);
                        } else {
                          points.push([[x1, main1], [x2, main1], [x2, main2], [x1, main2]]);
                        }
                      }
                }
          }
        }

        if (direction === 0) {
          return calTopRadiusPoints(borderWidth, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, points, beginRadius, endRadius);
        } else if (direction === 1) {
          return calRightRadiusPoints(borderWidth, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, points, beginRadius, endRadius);
        } else if (direction === 2) {
          return calBottomRadiusPoints(borderWidth, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, points, beginRadius, endRadius);
        } else if (direction === 3) {
          return calLeftRadiusPoints(borderWidth, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, points, beginRadius, endRadius);
        }
      }
    } // 兜底返回实线


    if (direction === 0) {
      if (x2 > x1) {
        points.push([[x1, y1], [x2, y1], [x2, y2], [x1, y1]]);
      }

      points.push([[x2, y1], [x3, y1], [x3, y2], [x2, y2]]);

      if (x4 > x3) {
        points.push([[x3, y1], [x4, y1], [x4, y1], [x3, y2]]);
      }

      return calTopRadiusPoints(borderWidth, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, points, beginRadius, endRadius);
    } else if (direction === 1) {
      if (y2 > y1) {
        points.push([[x4, y1], [x4, y1], [x4, y2], [x3, y2]]);
      }

      points.push([[x3, y2], [x4, y2], [x4, y3], [x3, y3]]);

      if (y4 > y3) {
        points.push([[x3, y3], [x4, y3], [x4, y4], [x4, y4]]);
      }

      return calRightRadiusPoints(borderWidth, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, points, beginRadius, endRadius);
    } else if (direction === 2) {
      if (x2 > x1) {
        points.push([[x1, y4], [x2, y3], [x2, y4], [x1, y4]]);
      }

      points.push([[x2, y3], [x3, y3], [x3, y4], [x2, y4]]);

      if (x4 > x3) {
        points.push([[x3, y3], [x4, y4], [x4, y4], [x3, y4]]);
      }

      return calBottomRadiusPoints(borderWidth, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, points, beginRadius, endRadius);
    } else if (direction === 3) {
      if (y2 > y1) {
        points.push([[x1, y1], [x1, y1], [x2, y2], [x1, y2]]);
      }

      points.push([[x1, y2], [x2, y2], [x2, y3], [x1, y3]]);

      if (y4 > y3) {
        points.push([[x1, y3], [x2, y3], [x1, y4], [x1, y4]]);
      }

      return calLeftRadiusPoints(borderWidth, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, points, beginRadius, endRadius);
    }
  }

  function calTopRadiusPoints(borderWidth, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, pointsList, beginRadius, endRadius) {
    var _beginRadius = _slicedToArray(beginRadius, 2),
        brx = _beginRadius[0],
        bry = _beginRadius[1];

    var _endRadius = _slicedToArray(endRadius, 2),
        erx = _endRadius[0],
        ery = _endRadius[1]; // 一条边的两侧圆角均为0时无效


    if ((!brx || !bry) && (!erx || !ery)) {
      return pointsList;
    } // 分界坐标圆心，左圆角、右圆角、中间矩形，3个区域2个坐标；当左右圆角相接时中间矩形为0即中间2个坐标相等


    var oxl = x2 + brx - (x2 - x1);
    var oxr = x3 - erx + (x4 - x3); // 先拆分，当一块四边形跨越左右圆角和中间非圆角时被拆为3份，只跨一边圆角拆2份，不跨不处理
    // 也有可能左右圆角相接，跨越的只分为左右2份
    // 最终左圆角内的存入begin，右圆角内的存入end，中间center

    var beginList = [];
    var centerList = [];
    var endList = [];

    for (var i = 0, len = pointsList.length; i < len; i++) {
      var points = pointsList[i]; // 全在左圆角

      if (points[1][0] < oxl) {
        beginList.push(points);
      } // 全在右圆角
      else if (points[0][0] > oxr) {
          endList.push(points);
        } // 跨越左右圆角
        else if (points[1][0] > oxr && points[0][0] < oxl) {
            var ya = oxl < x2 ? y1 + Math.tan(deg1) * (oxl - x1) : y2;
            var yb = oxr > x3 ? y1 + Math.tan(deg2) * (x4 - oxr) : y2;
            beginList.push([points[0], [oxl, y1], [oxl, ya], points[3]]);

            if (oxl < oxr) {
              if (oxl > x2 && oxr < x3) {
                centerList.push([[oxl, y1], [oxr, y1], [oxr, y2], [oxl, y2]]);
              } else if (oxl > x2) {
                centerList.push([[oxl, y1], [x3, y1], [x3, y2], [oxl, y2]]);
                centerList.push([[x3, y1], [oxr, y1], [oxr, yb], [x3, y2]]);
              } else if (oxr < x3) {
                centerList.push([[oxl, y1], [x2, y1], [x2, y2], [oxl, ya]]);
                centerList.push([[x2, y1], [oxr, y1], [oxr, y2], [x2, y2]]);
              } else {
                centerList.push([[oxl, y1], [x2, y1], [x2, y2], [oxl, ya]]);
                centerList.push([[x2, y1], [x3, y1], [x3, y2], [x2, y2]]);
                centerList.push([[x3, y1], [oxr, y1], [oxr, yb], [x3, y2]]);
              }
            }

            endList.push([[oxr, y1], points[1], points[2], [oxr, yb]]);
          } // 跨越右圆角
          else if (points[1][0] > oxr) {
              var y = oxr > x3 ? y1 + Math.tan(deg2) * (x4 - oxr) : y2;
              centerList.push([points[0], [oxr, y1], [oxr, y], points[3]]);
              endList.push([[oxr, y1], points[1], points[2], [oxr, y]]);
            } // 跨越左圆角
            else if (points[0][0] < oxl) {
                var _y = oxl < x2 ? y1 + Math.tan(deg1) * (oxl - x1) : y2;

                beginList.push([points[0], [oxl, y1], [oxl, _y], points[3]]);
                centerList.push([[oxl, y1], points[1], points[2], [oxl, _y]]);
              } else {
                centerList.push(points);
              }
    }

    var beginLength = beginList.length;

    if (beginLength) {
      // 边宽可能大于圆角尺寸，边的里面无需圆弧化
      var needInner = brx > x2 - x1 && borderWidth < bry; // 算这个角度是为了头部和上条边相交线的延长线

      var crossDeg = Math.atan((x2 - x1) / (y2 - y1));
      var rx1 = brx;
      var ry1 = bry;
      var sx1 = ry1 / rx1;
      var oyl = y1 + bry;
      var rx2 = brx - (x2 - x1);
      var ry2 = bry - (y2 - y1);
      var sx2 = ry2 / rx2; // 先计算第一个块，确定x/y边界，防止因为划分原因导致出现超过边界情况交叉

      var xa, _ya, xb, _yb;

      var ca = calBezierTopLeft(beginList[0][0], beginList[0][1], oxl, oyl, sx1, ry1, true, Math.tan(crossDeg) * ry1);

      var _ca$ = _slicedToArray(ca[0], 2);

      xa = _ca$[0];
      _ya = _ca$[1];
      var cb;

      if (needInner) {
        cb = calBezierTopLeft(beginList[0][3], beginList[0][2], oxl, oyl, sx2, ry2, true, Math.tan(crossDeg) * ry2);

        var _cb$ = _slicedToArray(cb[0], 2);

        xb = _cb$[0];
        _yb = _cb$[1];
      }

      beginList.forEach(function (points, i) {
        var controls1;
        var controls2;

        if (i === 0) {
          controls1 = ca;

          if (needInner) {
            controls2 = cb;
          }
        } else {
          controls1 = calBezierTopLeft(points[0], points[1], oxl, oyl, sx1, ry1);

          if (needInner) {
            controls2 = calBezierTopLeft(points[3], points[2], oxl, oyl, sx2, ry2);
          }
        }

        for (var _i = 0, _len = controls1.length; _i < _len; _i++) {
          limit(controls1[_i], xa, _ya, 0);
        }

        points[0] = controls1[0];
        points[1] = controls1[1].concat(controls1[2]).concat(controls1[3]);

        if (needInner) {
          for (var _i2 = 0, _len2 = controls2.length; _i2 < _len2; _i2++) {
            limit(controls2[_i2], xb, _yb, 0);
          }

          if (controls2.length === 1) {
            points[2] = controls2[0];
            points.pop();
          } else {
            points[2] = controls2[3];
            points[3] = controls2[2].concat(controls2[1]).concat(controls2[0]);
          }
        }
      });
    }

    var endLength = endList.length;

    if (endLength) {
      // 边宽可能大于圆角尺寸，边的里面无需圆弧化
      var _needInner = erx > x4 - x3 && borderWidth < ery; // 算这个角度是为了最后和下条边相交线的延长线


      var _crossDeg = Math.atan((x4 - x3) / (y2 - y1));

      var _rx = erx;
      var _ry = ery;

      var _sx = _ry / _rx;

      var oyr = y1 + ery;

      var _rx2 = erx - (x4 - x3);

      var _ry2 = ery - (y2 - y1);

      var _sx2 = _ry2 / _rx2; // 先计算最后一个块，确定x/y边界，防止因为划分原因导致出现超过边界情况交叉


      var _xa, _ya2, _xb, _yb2;

      var _ca = calBezierTopRight(endList[endLength - 1][0], endList[endLength - 1][1], oxr, oyr, _sx, _ry, true, Math.tan(_crossDeg) * _ry);

      var _ca2 = _slicedToArray(_ca[_ca.length - 1], 2);

      _xa = _ca2[0];
      _ya2 = _ca2[1];

      var _cb;

      if (_needInner) {
        _cb = calBezierTopRight(endList[endLength - 1][3], endList[endLength - 1][2], oxr, oyr, _sx2, _ry2, true, Math.tan(_crossDeg) * _ry2);

        var _cb2 = _slicedToArray(_cb[_cb.length - 1], 2);

        _xb = _cb2[0];
        _yb2 = _cb2[1];
      }

      endList.forEach(function (points, i) {
        var controls1;
        var controls2;

        if (i === endLength - 1) {
          controls1 = _ca;

          if (_needInner) {
            controls2 = _cb;
          }
        } else {
          controls1 = calBezierTopRight(points[0], points[1], oxr, oyr, _sx, _ry);

          if (_needInner) {
            controls2 = calBezierTopRight(points[3], points[2], oxr, oyr, _sx2, _ry2);
          }
        }

        for (var _i3 = 0, _len3 = controls1.length; _i3 < _len3; _i3++) {
          limit(controls1[_i3], _xa, _ya2, 1);
        }

        points[0] = controls1[0];
        points[1] = controls1[1].concat(controls1[2]).concat(controls1[3]);

        if (_needInner) {
          for (var _i4 = 0, _len4 = controls2.length; _i4 < _len4; _i4++) {
            limit(controls2[_i4], _xb, _yb2, 1);
          }

          if (controls2.length === 1) {
            points[2] = controls2[0];
            points.pop();
          } else {
            points[2] = controls2[3];
            points[3] = controls2[2].concat(controls2[1]).concat(controls2[0]);
          }
        }
      });
    }

    return beginList.concat(centerList).concat(endList);
  }

  function calBezierTopLeft(p1, p2, ox, oy, sx, r, isStart, crossDx) {
    // 先缩放x轴，椭圆变圆，2个点x坐标相应变化，y不变
    var _p = _slicedToArray(p1, 2),
        p1x = _p[0],
        p1y = _p[1];

    var _p2 = _slicedToArray(p2, 2),
        p2x = _p2[0],
        p2y = _p2[1];

    var dx1 = -p1x + ox;
    var dsx1 = dx1 * sx;
    var dx2 = -p2x + ox;
    var dsx2 = dx2 * sx; // 求2个点和1/4圆弧的交点坐标，和圆心连线，反三角函数求出夹角

    var deg2 = Math.atan(dsx2 / (oy - p2y)); // 根据角和半径再三角函数求交点坐标，可以直接缩放x轴恢复原本椭圆坐标，求贝塞尔控制点用不到交点

    var cpx2 = ox - Math.sin(deg2) * r / sx;
    var cpy2 = oy - Math.cos(deg2) * r;
    var deg1;
    var cpx1;
    var cpy1; // 最初的是两条border的交界线，需要特殊求交界线延长和椭圆的交点，不能直连圆心求交点

    if (isStart) {
      // 交界线和y轴夹角beta以及交点的x坐标都会受缩放影响，先化圆好求交点坐标
      var crossDsx = crossDx * sx;
      var beta = Math.atan(crossDsx / r); // 公式计算可得beta和交点连圆心的角alpha关系

      var tanBetaDiv2Sqrt = Math.sqrt(Math.tan(beta) / 2);
      var tanAlphaHalf = tanBetaDiv2Sqrt / (1 + tanBetaDiv2Sqrt);
      var alpha = Math.atan(tanAlphaHalf) * 2; // 获得alpha后直接根据半径求出交点坐标

      deg1 = Math.PI * 0.5 - alpha;
      cpx1 = ox - Math.cos(alpha) * r / sx;
      cpy1 = oy - Math.sin(alpha) * r;
    } else {
      deg1 = Math.atan(dsx1 / (oy - p1y));
      cpx1 = ox - Math.sin(deg1) * r / sx;
      cpy1 = oy - Math.cos(deg1) * r;
    } // 首尾只有3个点情况下重复了顶点形成4边形，同时圆角x/y相等有inner时
    // 使得交点相同角度相同无法计算，直接返回1个点即可


    if (deg1 === deg2) {
      return [[cpx1, cpy1]];
    } // 根据夹角求贝塞尔拟合圆弧长度


    var h = geom.h(Math.abs(deg1 - deg2));
    var d = h * r; // 过交点做切线，知道切线段长度d，求切线上从交点延长d的坐标，即为控制点
    // 圆心交点控制点连成直角三角形，获得斜边即圆心到控制点距离c
    // 求切线角，用上面夹角减去切线角可得控制点和圆心连线的角，从而获得坐标

    var c = Math.sqrt(Math.pow(r, 2) + Math.pow(d, 2));
    var degTg = Math.atan(d / r);
    var degTg1 = deg1 - degTg;
    var cdx1 = Math.sin(degTg1) * c;
    var cdy1 = Math.cos(degTg1) * c;
    var cx1 = ox - cdx1 / sx;
    var cy1 = oy - cdy1;
    var degTg2 = deg2 + degTg;
    var cdx2 = Math.sin(degTg2) * c;
    var cdy2 = Math.cos(degTg2) * c;
    var cx2 = ox - cdx2 / sx;
    var cy2 = oy - cdy2; // window.ctx.fillStyle = '#F90';
    // window.ctx.beginPath();
    // window.ctx.arc(p1x, p1y, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0FF';
    // window.ctx.beginPath();
    // window.ctx.arc(cx1, cy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#00F';
    // window.ctx.beginPath();
    // window.ctx.arc(cx2, cy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0F0';
    // window.ctx.beginPath();
    // window.ctx.arc(p2x, p2y, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.closePath();

    return [[cpx1, cpy1], [cx1, cy1], [cx2, cy2], [cpx2, cpy2]];
  }

  function calBezierTopRight(p1, p2, ox, oy, sx, r, isEnd, crossDx) {
    // 先缩放x轴，椭圆变圆，2个点x坐标相应变化，y不变
    var _p3 = _slicedToArray(p1, 2),
        p1x = _p3[0],
        p1y = _p3[1];

    var _p4 = _slicedToArray(p2, 2),
        p2x = _p4[0],
        p2y = _p4[1];

    var dx1 = p1x - ox;
    var dsx1 = dx1 * sx;
    var dx2 = p2x - ox;
    var dsx2 = dx2 * sx; // 求2个点和1/4圆弧的交点坐标，和圆心连线，反三角函数求出夹角

    var deg1 = Math.atan(dsx1 / (oy - p1y)); // 根据角和半径再三角函数求交点坐标，可以直接缩放x轴恢复原本椭圆坐标，求贝塞尔控制点用不到交点

    var cpx1 = ox + Math.sin(deg1) * r / sx;
    var cpy1 = oy - Math.cos(deg1) * r;
    var deg2;
    var cpx2;
    var cpy2; // 最后的是两条border的交界线，需要特殊求交界线延长和椭圆的交点，不能直连圆心求交点

    if (isEnd) {
      // 交界线和y轴夹角beta以及交点的x坐标都会受缩放影响，先化圆好求交点坐标
      var crossDsx = crossDx * sx;
      var beta = Math.atan(crossDsx / r); // 公式计算可得beta和交点连圆心的角alpha关系

      var tanBetaDiv2Sqrt = Math.sqrt(Math.tan(beta) / 2);
      var tanAlphaHalf = tanBetaDiv2Sqrt / (1 + tanBetaDiv2Sqrt);
      var alpha = Math.atan(tanAlphaHalf) * 2; // 获得alpha后直接根据半径求出交点坐标

      deg2 = Math.PI * 0.5 - alpha;
      cpx2 = ox + Math.cos(alpha) * r / sx;
      cpy2 = oy - Math.sin(alpha) * r;
    } else {
      deg2 = Math.atan(dsx2 / (oy - p2y));
      cpx2 = ox + Math.sin(deg2) * r / sx;
      cpy2 = oy - Math.cos(deg2) * r;
    } // 首尾只有3个点情况下重复了顶点形成4边形，同时圆角x/y相等有inner时
    // 使得交点相同角度相同无法计算，直接返回1个点即可


    if (deg1 === deg2) {
      return [[cpx1, cpy1]];
    } // 根据夹角求贝塞尔拟合圆弧长度


    var h = geom.h(Math.abs(deg1 - deg2));
    var d = h * r; // 过交点做切线，知道切线段长度d，求切线上从交点延长d的坐标，即为控制点
    // 圆心交点控制点连成直角三角形，获得斜边即圆心到控制点距离c
    // 求切线角，用上面夹角减去切线角可得控制点和圆心连线的角，从而获得坐标

    var c = Math.sqrt(Math.pow(r, 2) + Math.pow(d, 2));
    var degTg = Math.atan(d / r);
    var degTg1 = deg1 + degTg;
    var cdx1 = Math.sin(degTg1) * c;
    var cdy1 = Math.cos(degTg1) * c;
    var cx1 = ox + cdx1 / sx;
    var cy1 = oy - cdy1;
    var degTg2 = deg2 - degTg;
    var cdx2 = Math.sin(degTg2) * c;
    var cdy2 = Math.cos(degTg2) * c;
    var cx2 = ox + cdx2 / sx;
    var cy2 = oy - cdy2; // window.ctx.fillStyle = '#F90';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx1, cpy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0FF';
    // window.ctx.beginPath();
    // window.ctx.arc(cx1, cy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#00F';
    // window.ctx.beginPath();
    // window.ctx.arc(cx2, cy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0F0';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx2, cpy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.closePath();

    return [[cpx1, cpy1], [cx1, cy1], [cx2, cy2], [cpx2, cpy2]];
  }

  function calRightRadiusPoints(borderWidth, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, pointsList, beginRadius, endRadius) {
    var _beginRadius2 = _slicedToArray(beginRadius, 2),
        brx = _beginRadius2[0],
        bry = _beginRadius2[1];

    var _endRadius2 = _slicedToArray(endRadius, 2),
        erx = _endRadius2[0],
        ery = _endRadius2[1]; // 一条边的两侧圆角均为0时无效


    if ((!brx || !bry) && (!erx || !ery)) {
      return pointsList;
    } // 分界坐标圆心，上圆角、下圆角、中间矩形，3个区域2个坐标；当上下圆角相接时中间矩形为0即中间2个坐标相等


    var oyt = y2 + bry - (y2 - y1);
    var oyb = y3 - ery + (y4 - y3);
    var beginList = [];
    var centerList = [];
    var endList = []; // 同borderTop拆分

    for (var i = 0, len = pointsList.length; i < len; i++) {
      var points = pointsList[i]; // 全在上圆角

      if (points[2][1] < oyt) {
        beginList.push(points);
      } // 全在下圆角
      else if (points[1][1] > oyb) {
          endList.push(points);
        } // 跨越上下圆角
        else if (points[2][1] > oyb && points[1][1] < oyt) {
            var xa = oyt < y2 ? x3 + Math.tan(deg2) * (y2 - oyt) : x3;
            var xb = oyb > y3 ? x3 + Math.tan(deg1) * (oyb - y3) : x3;
            beginList.push([points[0], points[1], [x4, oyt], [xa, oyt]]);

            if (oyt < oyb) {
              if (oyb < y3 && oyt > y2) {
                centerList.push([[x3, oyt], [x4, oyt], [x4, oyb], [x3, oyb]]);
              } else if (oyt > y2) {
                centerList.push([[x3, y2], [x4, y2], [x4, y3], [x3, y3]]);
                centerList.push([[x3, y3], [x4, y3], [x4, oyb], [xb, oyb]]);
              } else if (oyb < y3) {
                centerList.push([[xa, oyt], [x4, oyt], [x4, y2], [x3, y2]]);
                centerList.push([[x3, y2], [x4, y2], [x4, oyb], [x3, oyb]]);
              } else {
                centerList.push([[xa, oyt], [x4, oyt], [x4, y2], [x3, y2]]);
                centerList.push([[x3, y2], [x4, y2], [x4, y3], [x3, y3]]);
                centerList.push([[x3, y3], [x4, y3], [x4, oyb], [xb, oyb]]);
              }
            }

            endList.push([[xb, oyb], [x4, oyb], points[2], points[3]]);
          } // 跨越下圆角
          else if (points[2][1] > oyb) {
              var x = oyb > y3 ? x3 + Math.tan(deg1) * (oyb - y3) : x3;
              centerList.push([points[0], points[1], [x4, oyb], [x, oyb]]);
              endList.push([[x, oyb], [x4, oyb], points[2], points[3]]);
            } // 跨越上圆角
            else if (points[1][1] < oyt) {
                var _x = oyt < y2 ? x3 + Math.tan(deg2) * (y2 - oyt) : x3;

                beginList.push([points[0], points[1], [x4, oyt], [_x, oyt]]);
                centerList.push([[_x, oyt], [x4, oyt], points[2], points[3]]);
              } else {
                centerList.push(points);
              }
    }

    var beginLength = beginList.length;

    if (beginLength) {
      var needInner = bry > y2 - y1 && borderWidth < brx;
      var crossDeg = Math.atan((x4 - x3) / (y2 - y1));
      var rx1 = brx;
      var ry1 = bry;
      var sx1 = ry1 / rx1;
      var oxt = x4 - brx;
      var rx2 = brx - (x4 - x3);
      var ry2 = bry - (y2 - y1);
      var sx2 = ry2 / rx2; // 先计算第一个块，确定x/y边界，防止因为划分原因导致出现超过边界情况交叉

      var _xa2, ya, _xb2, yb;

      var ca = calBezierRightTop(beginList[0][1], beginList[0][2], oxt, oyt, sx1, ry1, true, Math.tan(crossDeg) * ry1);

      var _ca3 = _slicedToArray(ca[ca.length - 1], 2);

      _xa2 = _ca3[0];
      ya = _ca3[1];
      var cb;

      if (needInner) {
        cb = calBezierRightTop(beginList[0][0], beginList[0][3], oxt, oyt, sx2, ry2, true, Math.tan(crossDeg) * ry2);

        var _cb3 = _slicedToArray(cb[cb.length - 1], 2);

        _xb2 = _cb3[0];
        yb = _cb3[1];
      }

      beginList.forEach(function (points, i) {
        var controls1;
        var controls2;

        if (i === 0) {
          controls1 = ca;

          if (needInner) {
            controls2 = cb;
          }
        } else {
          controls1 = calBezierRightTop(points[1], points[2], oxt, oyt, sx1, ry1);

          if (needInner) {
            controls2 = calBezierRightTop(points[0], points[3], oxt, oyt, sx2, ry2);
          }
        }

        for (var _i5 = 0, _len5 = controls1.length; _i5 < _len5; _i5++) {
          limit(controls1[_i5], _xa2, ya, 2);
        }

        if (needInner) {
          for (var _i6 = 0, _len6 = controls2.length; _i6 < _len6; _i6++) {
            limit(controls2[_i6], _xb2, yb, 2);
          }

          if (controls2.length === 1) {
            points[2] = controls2[0];
            points.pop();
          } else {
            points[2] = controls2[0];
            points[3] = controls2[1].concat(controls2[2]).concat(controls2[3]);
          }
        } else {
          points[2] = points[3];
          points[3] = points[0];
        }

        points[0] = controls1[3];
        points[1] = controls1[2].concat(controls1[1]).concat(controls1[0]);
      });
    }

    var endLength = endList.length;

    if (endLength) {
      var _needInner2 = ery > y4 - y3 && borderWidth < erx;

      var _crossDeg2 = Math.atan((x4 - x3) / (y4 - y3));

      var _rx3 = erx;
      var _ry3 = ery;

      var _sx3 = _ry3 / _rx3;

      var oxb = x4 - erx;

      var _rx4 = erx - (x4 - x3);

      var _ry4 = ery - (y4 - y3);

      var _sx4 = _ry4 / _rx4; // 先计算最后一个块，确定x/y边界，防止因为划分原因导致出现超过边界情况交叉


      var _xa3, _ya3, _xb3, _yb3;

      var _ca4 = calBezierRightBottom(endList[endLength - 1][1], endList[endLength - 1][2], oxb, oyb, _sx3, _ry3, true, Math.tan(_crossDeg2) * _ry3);

      var _ca4$ = _slicedToArray(_ca4[0], 2);

      _xa3 = _ca4$[0];
      _ya3 = _ca4$[1];

      var _cb4;

      if (_needInner2) {
        _cb4 = calBezierRightBottom(endList[endLength - 1][0], endList[endLength - 1][3], oxb, oyb, _sx4, _ry4, true, Math.tan(_crossDeg2) * _ry4);

        var _cb4$ = _slicedToArray(_cb4[0], 2);

        _xb3 = _cb4$[0];
        _yb3 = _cb4$[1];
      }

      endList.forEach(function (points, i) {
        var controls1;
        var controls2;

        if (i === endLength - 1) {
          controls1 = _ca4;

          if (_needInner2) {
            controls2 = _cb4;
          }
        } else {
          controls1 = calBezierRightBottom(points[1], points[2], oxb, oyb, _sx3, _ry3);

          if (_needInner2) {
            controls2 = calBezierRightBottom(points[0], points[3], oxb, oyb, _sx4, _ry4);
          }
        }

        for (var _i7 = 0, _len7 = controls1.length; _i7 < _len7; _i7++) {
          limit(controls1[_i7], _xa3, _ya3, 3);
        }

        if (_needInner2) {
          for (var _i8 = 0, _len8 = controls2.length; _i8 < _len8; _i8++) {
            limit(controls2[_i8], _xb3, _yb3, 3);
          }

          if (controls2.length === 1) {
            points[2] = controls2[0];
            points.pop();
          } else {
            points[2] = controls2[0];
            points[3] = controls2[1].concat(controls2[2]).concat(controls2[3]);
          }
        } else {
          points[2] = points[3];
          points[3] = points[0];
        }

        points[0] = controls1[3];
        points[1] = controls1[2].concat(controls1[1]).concat(controls1[0]);
      });
    }

    return beginList.concat(centerList).concat(endList);
  }

  function calBezierRightTop(p1, p2, ox, oy, sx, r, isStart, crossDx) {
    // 先缩放x轴，椭圆变圆，2个点x坐标相应变化，y不变
    var _p5 = _slicedToArray(p1, 2),
        p1x = _p5[0],
        p1y = _p5[1];

    var _p6 = _slicedToArray(p2, 2),
        p2x = _p6[0],
        p2y = _p6[1];

    var dx1 = p1x - ox;
    var dsx1 = dx1 * sx;
    var dx2 = p2x - ox;
    var dsx2 = dx2 * sx; // 求2个点和1/4圆弧的交点坐标，和圆心连线，反三角函数求出夹角

    var deg2 = Math.atan(dsx2 / (oy - p2y)); // 根据角和半径再三角函数求交点坐标，可以直接缩放x轴恢复原本椭圆坐标，求贝塞尔控制点用不到交点

    var cpx2 = ox + Math.sin(deg2) * r / sx;
    var cpy2 = oy - Math.cos(deg2) * r;
    var deg1;
    var cpx1;
    var cpy1;

    if (isStart) {
      // 交界线和y轴夹角beta以及交点的x坐标都会受缩放影响，先化圆好求交点坐标
      var crossDsx = crossDx * sx;
      var beta = Math.atan(crossDsx / r); // 公式计算可得beta和交点连圆心的角alpha关系

      var tanBetaDiv2Sqrt = Math.sqrt(Math.tan(beta) / 2);
      var tanAlphaHalf = tanBetaDiv2Sqrt / (1 + tanBetaDiv2Sqrt);
      var alpha = Math.atan(tanAlphaHalf) * 2; // 获得alpha后直接根据半径求出交点坐标

      deg1 = Math.PI * 0.5 - alpha;
      cpx1 = ox + Math.cos(alpha) * r / sx;
      cpy1 = oy - Math.sin(alpha) * r;
    } else {
      deg1 = Math.atan(dsx1 / (oy - p1y));
      cpx1 = ox + Math.sin(deg1) * r / sx;
      cpy1 = oy - Math.cos(deg1) * r;
    } // 首尾只有3个点情况下重复了顶点形成4边形，同时圆角x/y相等有inner时
    // 使得交点相同角度相同无法计算，直接返回1个点即可


    if (deg1 === deg2) {
      return [[cpx1, cpy1]];
    } // 根据夹角求贝塞尔拟合圆弧长度


    var h = geom.h(Math.abs(deg1 - deg2));
    var d = h * r; // 过交点做切线，知道切线段长度d，求切线上从交点延长d的坐标，即为控制点
    // 圆心交点控制点连成直角三角形，获得斜边即圆心到控制点距离c
    // 求切线角，用上面夹角减去切线角可得控制点和圆心连线的角，从而获得坐标

    var c = Math.sqrt(Math.pow(r, 2) + Math.pow(d, 2));
    var degTg = Math.atan(d / r);
    var degTg1 = deg1 + degTg;
    var cdx1 = Math.sin(degTg1) * c;
    var cdy1 = Math.cos(degTg1) * c;
    var cx1 = ox + cdx1 / sx;
    var cy1 = oy - cdy1;
    var degTg2 = deg2 - degTg;
    var cdx2 = Math.sin(degTg2) * c;
    var cdy2 = Math.cos(degTg2) * c;
    var cx2 = ox + cdx2 / sx;
    var cy2 = oy - cdy2; // window.ctx.fillStyle = '#000';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx1, cpy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0FF';
    // window.ctx.beginPath();
    // window.ctx.arc(cx1, cy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#00F';
    // window.ctx.beginPath();
    // window.ctx.arc(cx2, cy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0F0';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx2, cpy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.closePath();

    return [[cpx2, cpy2], [cx2, cy2], [cx1, cy1], [cpx1, cpy1]];
  }

  function calBezierRightBottom(p1, p2, ox, oy, sx, r, isEnd, crossDx) {
    // 先缩放x轴，椭圆变圆，2个点x坐标相应变化，y不变
    var _p7 = _slicedToArray(p1, 2),
        p1x = _p7[0],
        p1y = _p7[1];

    var _p8 = _slicedToArray(p2, 2),
        p2x = _p8[0],
        p2y = _p8[1];

    var dx1 = p1x - ox;
    var dsx1 = dx1 * sx;
    var dx2 = p2x - ox;
    var dsx2 = dx2 * sx; // 求2个点和1/4圆弧的交点坐标，和圆心连线，反三角函数求出夹角

    var deg1 = Math.atan(dsx1 / (p1y - oy)); // 根据角和半径再三角函数求交点坐标，可以直接缩放x轴恢复原本椭圆坐标，求贝塞尔控制点用不到交点

    var cpx1 = ox + Math.sin(deg1) * r / sx;
    var cpy1 = oy + Math.cos(deg1) * r;
    var deg2;
    var cpx2;
    var cpy2;

    if (isEnd) {
      // 交界线和y轴夹角beta以及交点的x坐标都会受缩放影响，先化圆好求交点坐标
      var crossDsx = crossDx * sx;
      var beta = Math.atan(crossDsx / r); // 公式计算可得beta和交点连圆心的角alpha关系

      var tanBetaDiv2Sqrt = Math.sqrt(Math.tan(beta) / 2);
      var tanAlphaHalf = tanBetaDiv2Sqrt / (1 + tanBetaDiv2Sqrt);
      var alpha = Math.atan(tanAlphaHalf) * 2; // 获得alpha后直接根据半径求出交点坐标

      deg2 = Math.PI * 0.5 - alpha;
      cpx2 = ox + Math.cos(alpha) * r / sx;
      cpy2 = oy + Math.sin(alpha) * r;
    } else {
      deg2 = Math.atan(dsx2 / (p2y - oy));
      cpx2 = ox + Math.sin(deg2) * r / sx;
      cpy2 = oy + Math.cos(deg2) * r;
    } // 首尾只有3个点情况下重复了顶点形成4边形，同时圆角x/y相等有inner时
    // 使得交点相同角度相同无法计算，直接返回1个点即可


    if (deg1 === deg2) {
      return [[cpx1, cpy1]];
    } // 根据夹角求贝塞尔拟合圆弧长度


    var h = geom.h(Math.abs(deg1 - deg2));
    var d = h * r; // 过交点做切线，知道切线段长度d，求切线上从交点延长d的坐标，即为控制点
    // 圆心交点控制点连成直角三角形，获得斜边即圆心到控制点距离c
    // 求切线角，用上面夹角减去切线角可得控制点和圆心连线的角，从而获得坐标

    var c = Math.sqrt(Math.pow(r, 2) + Math.pow(d, 2));
    var degTg = Math.atan(d / r);
    var degTg1 = deg1 - degTg;
    var cdx1 = Math.sin(degTg1) * c;
    var cdy1 = Math.cos(degTg1) * c;
    var cx1 = ox + cdx1 / sx;
    var cy1 = oy + cdy1;
    var degTg2 = deg2 + degTg;
    var cdx2 = Math.sin(degTg2) * c;
    var cdy2 = Math.cos(degTg2) * c;
    var cx2 = ox + cdx2 / sx;
    var cy2 = oy + cdy2; // window.ctx.fillStyle = '#F90';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx1, cpy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0FF';
    // window.ctx.beginPath();
    // window.ctx.arc(cx1, cy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#00F';
    // window.ctx.beginPath();
    // window.ctx.arc(cx2, cy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0F0';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx2, cpy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.closePath();

    return [[cpx2, cpy2], [cx2, cy2], [cx1, cy1], [cpx1, cpy1]];
  }

  function calBottomRadiusPoints(borderWidth, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, pointsList, beginRadius, endRadius) {
    var _beginRadius3 = _slicedToArray(beginRadius, 2),
        brx = _beginRadius3[0],
        bry = _beginRadius3[1];

    var _endRadius3 = _slicedToArray(endRadius, 2),
        erx = _endRadius3[0],
        ery = _endRadius3[1]; // 一条边的两侧圆角均为0时无效


    if ((!brx || !bry) && (!erx || !ery)) {
      return pointsList;
    } // 分界坐标圆心，左圆角、右圆角、中间矩形，3个区域2个坐标；当左右圆角相接时中间矩形为0即中间2个坐标相等


    var oxl = x2 + brx - (x2 - x1);
    var oxr = x3 - erx + (x4 - x3); // 先拆分，当一块四边形跨越左右圆角和中间非圆角时被拆为3份，只跨一边圆角拆2份，不跨不处理
    // 也有可能左右圆角相接，跨越的只分为左右2份
    // 最终左圆角内的存入begin，右圆角内的存入end，中间center

    var beginList = [];
    var centerList = [];
    var endList = [];

    for (var i = 0, len = pointsList.length; i < len; i++) {
      var points = pointsList[i]; // 全在左圆角

      if (points[2][0] < oxl) {
        beginList.push(points);
      } // 全在右圆角
      else if (points[3][0] > oxr) {
          endList.push(points);
        } // 跨越左右圆角
        else if (points[2][0] > oxr && points[3][0] < oxl) {
            var ya = oxl < x2 ? y4 - Math.tan(deg1) * (oxl - x1) : y2;
            var yb = oxr > x3 ? y4 - Math.tan(deg2) * (x4 - oxr) : y3;
            beginList.push([points[0], [oxl, ya], [oxl, y4], points[3]]);

            if (oxl < oxr) {
              if (oxl > x2 && oxr < x3) {
                centerList.push([[oxl, y3], [oxr, y3], [oxr, y4], [oxl, y4]]);
              } else if (oxl > x2) {
                centerList.push([[oxl, y3], [x3, y3], [x3, y4], [oxl, y4]]);
                centerList.push([[x3, y3], [oxr, yb], [oxr, y4], [x3, y4]]);
              } else if (oxr < x3) {
                centerList.push([[oxl, ya], [x2, y3], [x2, y4], [oxl, y4]]);
                centerList.push([[x2, y3], [oxr, y3], [oxr, y4], [x2, y4]]);
              } else {
                centerList.push([[oxl, ya], [x2, y3], [x2, y4], [oxl, y4]]);
                centerList.push([[x2, y3], [x3, y3], [x3, y4], [x2, y4]]);
                centerList.push([[x3, y3], [oxr, yb], [oxr, y4], [x3, y4]]);
              }
            }

            endList.push([[oxr, yb], points[1], points[2], [oxr, y4]]);
          } // 跨越右圆角
          else if (points[2][0] > oxr) {
              var y = oxr > x3 ? y4 - Math.tan(deg2) * (x4 - oxr) : y3;
              centerList.push([points[0], [oxr, y], [oxr, y4], points[3]]);
              endList.push([[oxr, y], points[1], points[2], [oxr, y4]]);
            } // 跨越左圆角
            else if (points[3][0] < oxl) {
                var _y2 = oxl < x2 ? y4 - Math.tan(deg1) * (oxl - x1) : y3;

                beginList.push([points[0], [oxl, _y2], [oxl, y4], points[3]]);
                centerList.push([[oxl, _y2], points[1], points[2], [oxl, y4]]);
              } else {
                centerList.push(points);
              }
    }

    var beginLength = beginList.length;

    if (beginLength) {
      // 边宽可能大于圆角尺寸，边的里面无需圆弧化
      var needInner = brx > x2 - x1 && borderWidth < bry; // 算这个角度是为了头部和上条边相交线的延长线

      var crossDeg = Math.atan((x2 - x1) / (y4 - y3));
      var rx1 = brx;
      var ry1 = bry;
      var sx1 = ry1 / rx1;
      var oyl = y4 - bry;
      var rx2 = brx - (x2 - x1);
      var ry2 = bry - (y4 - y3);
      var sx2 = ry2 / rx2; // 先计算第一个块，确定x/y边界，防止因为划分原因导致出现超过边界情况交叉

      var xa, _ya4, xb, _yb4;

      var ca = calBezierBottomLeft(beginList[0][3], beginList[0][2], oxl, oyl, sx1, ry1, true, Math.tan(crossDeg) * ry1);

      var _ca$2 = _slicedToArray(ca[0], 2);

      xa = _ca$2[0];
      _ya4 = _ca$2[1];
      var cb;

      if (needInner) {
        cb = calBezierBottomLeft(beginList[0][0], beginList[0][1], oxl, oyl, sx2, ry2, true, Math.tan(crossDeg) * ry2);

        var _cb$2 = _slicedToArray(cb[0], 2);

        xb = _cb$2[0];
        _yb4 = _cb$2[1];
      }

      beginList.forEach(function (points, i) {
        var controls1;
        var controls2;

        if (i === 0) {
          controls1 = ca;

          if (needInner) {
            controls2 = cb;
          }
        } else {
          controls1 = calBezierBottomLeft(points[3], points[2], oxl, oyl, sx1, ry1);

          if (needInner) {
            controls2 = calBezierBottomLeft(points[0], points[1], oxl, oyl, sx2, ry2);
          }
        }

        for (var _i9 = 0, _len9 = controls1.length; _i9 < _len9; _i9++) {
          limit(controls1[_i9], xa, _ya4, 4);
        }

        if (needInner) {
          for (var _i10 = 0, _len10 = controls2.length; _i10 < _len10; _i10++) {
            limit(controls2[_i10], xb, _yb4, 4);
          }

          if (controls2.length === 1) {
            points[2] = controls2[0];
            points.pop();
          } else {
            points[2] = controls2[3];
            points[3] = controls2[2].concat(controls2[1]).concat(controls2[0]);
          }
        } else {
          points[2] = points[1];
          points[3] = points[0];
        }

        points[0] = controls1[0];
        points[1] = controls1[1].concat(controls1[2]).concat(controls1[3]);
      });
    }

    var endLength = endList.length;

    if (endLength) {
      // 边宽可能大于圆角尺寸，边的里面无需圆弧化
      var _needInner3 = erx > x4 - x3 && borderWidth < ery; // 算这个角度是为了最后和下条边相交线的延长线


      var _crossDeg3 = Math.atan((x4 - x3) / (y4 - y3));

      var _rx5 = erx;
      var _ry5 = ery;

      var _sx5 = _ry5 / _rx5;

      var oyr = y4 - ery;

      var _rx6 = erx - (x4 - x3);

      var _ry6 = ery - (y4 - y3);

      var _sx6 = _ry6 / _rx6; // 先计算最后一个块，确定x/y边界，防止因为划分原因导致出现超过边界情况交叉


      var _xa4, _ya5, _xb4, _yb5;

      var _ca5 = calBezierBottomRight(endList[endLength - 1][3], endList[endLength - 1][2], oxr, oyr, _sx5, _ry5, true, Math.tan(_crossDeg3) * _ry5);

      var _ca6 = _slicedToArray(_ca5[_ca5.length - 1], 2);

      _xa4 = _ca6[0];
      _ya5 = _ca6[1];

      var _cb5;

      if (_needInner3) {
        _cb5 = calBezierBottomRight(endList[endLength - 1][0], endList[endLength - 1][1], oxr, oyr, _sx6, _ry6, true, Math.tan(_crossDeg3) * _ry6);

        var _cb6 = _slicedToArray(_cb5[_cb5.length - 1], 2);

        _xb4 = _cb6[0];
        _yb5 = _cb6[1];
      }

      endList.forEach(function (points, i) {
        var controls1;
        var controls2;

        if (i === endLength - 1) {
          controls1 = _ca5;

          if (_needInner3) {
            controls2 = _cb5;
          }
        } else {
          controls1 = calBezierBottomRight(points[3], points[2], oxr, oyr, _sx5, _ry5);

          if (_needInner3) {
            controls2 = calBezierBottomRight(points[0], points[1], oxr, oyr, _sx6, _ry6);
          }
        }

        for (var _i11 = 0, _len11 = controls1.length; _i11 < _len11; _i11++) {
          limit(controls1[_i11], _xa4, _ya5, 5);
        }

        if (_needInner3) {
          for (var _i12 = 0, _len12 = controls2.length; _i12 < _len12; _i12++) {
            limit(controls2[_i12], _xb4, _yb5, 5);
          }

          if (controls2.length === 1) {
            points[2] = controls2[0];
            points.pop();
          } else {
            points[2] = controls2[3];
            points[3] = controls2[2].concat(controls2[1]).concat(controls2[0]);
          }
        } else {
          points[2] = points[1];
          points[3] = points[0];
        }

        points[0] = controls1[0];
        points[1] = controls1[1].concat(controls1[2]).concat(controls1[3]);
      });
    }

    return beginList.concat(centerList).concat(endList);
  }

  function calBezierBottomLeft(p1, p2, ox, oy, sx, r, isStart, crossDx) {
    // 先缩放x轴，椭圆变圆，2个点x坐标相应变化，y不变
    var _p9 = _slicedToArray(p1, 2),
        p1x = _p9[0],
        p1y = _p9[1];

    var _p10 = _slicedToArray(p2, 2),
        p2x = _p10[0],
        p2y = _p10[1];

    var dx1 = -p1x + ox;
    var dsx1 = dx1 * sx;
    var dx2 = -p2x + ox;
    var dsx2 = dx2 * sx; // 求2个点和1/4圆弧的交点坐标，和圆心连线，反三角函数求出夹角

    var deg2 = Math.atan(dsx2 / (p2y - oy)); // 根据角和半径再三角函数求交点坐标，可以直接缩放x轴恢复原本椭圆坐标，求贝塞尔控制点用不到交点

    var cpx2 = ox - Math.sin(deg2) * r / sx;
    var cpy2 = oy + Math.cos(deg2) * r;
    var deg1;
    var cpx1;
    var cpy1; // 最初的是两条border的交界线，需要特殊求交界线延长和椭圆的交点，不能直连圆心求交点

    if (isStart) {
      // 交界线和y轴夹角beta以及交点的x坐标都会受缩放影响，先化圆好求交点坐标
      var crossDsx = crossDx * sx;
      var beta = Math.atan(crossDsx / r); // 公式计算可得beta和交点连圆心的角alpha关系

      var tanBetaDiv2Sqrt = Math.sqrt(Math.tan(beta) / 2);
      var tanAlphaHalf = tanBetaDiv2Sqrt / (1 + tanBetaDiv2Sqrt);
      var alpha = Math.atan(tanAlphaHalf) * 2; // 获得alpha后直接根据半径求出交点坐标

      deg1 = Math.PI * 0.5 - alpha;
      cpx1 = ox - Math.cos(alpha) * r / sx;
      cpy1 = oy + Math.sin(alpha) * r;
    } else {
      deg1 = Math.atan(dsx1 / (p1y - oy));
      cpx1 = ox - Math.sin(deg1) * r / sx;
      cpy1 = oy + Math.cos(deg1) * r;
    } // 首尾只有3个点情况下重复了顶点形成4边形，同时圆角x/y相等有inner时
    // 使得交点相同角度相同无法计算，直接返回1个点即可


    if (deg1 === deg2) {
      return [[cpx1, cpy1]];
    } // 根据夹角求贝塞尔拟合圆弧长度


    var h = geom.h(Math.abs(deg1 - deg2));
    var d = h * r; // 过交点做切线，知道切线段长度d，求切线上从交点延长d的坐标，即为控制点
    // 圆心交点控制点连成直角三角形，获得斜边即圆心到控制点距离c
    // 求切线角，用上面夹角减去切线角可得控制点和圆心连线的角，从而获得坐标

    var c = Math.sqrt(Math.pow(r, 2) + Math.pow(d, 2));
    var degTg = Math.atan(d / r);
    var degTg1 = deg1 - degTg;
    var cdx1 = Math.sin(degTg1) * c;
    var cdy1 = Math.cos(degTg1) * c;
    var cx1 = ox - cdx1 / sx;
    var cy1 = oy + cdy1;
    var degTg2 = deg2 + degTg;
    var cdx2 = Math.sin(degTg2) * c;
    var cdy2 = Math.cos(degTg2) * c;
    var cx2 = ox - cdx2 / sx;
    var cy2 = oy + cdy2; // window.ctx.fillStyle = '#F90';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx1, cpy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0FF';
    // window.ctx.beginPath();
    // window.ctx.arc(cx1, cy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#00F';
    // window.ctx.beginPath();
    // window.ctx.arc(cx2, cy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0F0';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx2, cpy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.closePath();

    return [[cpx1, cpy1], [cx1, cy1], [cx2, cy2], [cpx2, cpy2]];
  }

  function calBezierBottomRight(p1, p2, ox, oy, sx, r, isEnd, crossDx) {
    // 先缩放x轴，椭圆变圆，2个点x坐标相应变化，y不变
    var _p11 = _slicedToArray(p1, 2),
        p1x = _p11[0],
        p1y = _p11[1];

    var _p12 = _slicedToArray(p2, 2),
        p2x = _p12[0],
        p2y = _p12[1];

    var dx1 = p1x - ox;
    var dsx1 = dx1 * sx;
    var dx2 = p2x - ox;
    var dsx2 = dx2 * sx; // 求2个点和1/4圆弧的交点坐标，和圆心连线，反三角函数求出夹角

    var deg1 = Math.atan(dsx1 / (p1y - oy)); // 根据角和半径再三角函数求交点坐标，可以直接缩放x轴恢复原本椭圆坐标，求贝塞尔控制点用不到交点

    var cpx1 = ox + Math.sin(deg1) * r / sx;
    var cpy1 = oy + Math.cos(deg1) * r;
    var deg2;
    var cpx2;
    var cpy2; // 最后的是两条border的交界线，需要特殊求交界线延长和椭圆的交点，不能直连圆心求交点

    if (isEnd) {
      // 交界线和y轴夹角beta以及交点的x坐标都会受缩放影响，先化圆好求交点坐标
      var crossDsx = crossDx * sx;
      var beta = Math.atan(crossDsx / r); // 公式计算可得beta和交点连圆心的角alpha关系

      var tanBetaDiv2Sqrt = Math.sqrt(Math.tan(beta) / 2);
      var tanAlphaHalf = tanBetaDiv2Sqrt / (1 + tanBetaDiv2Sqrt);
      var alpha = Math.atan(tanAlphaHalf) * 2; // 获得alpha后直接根据半径求出交点坐标

      deg2 = Math.PI * 0.5 - alpha;
      cpx2 = ox + Math.cos(alpha) * r / sx;
      cpy2 = oy + Math.sin(alpha) * r;
    } else {
      deg2 = Math.atan(dsx2 / (p2y - oy));
      cpx2 = ox + Math.sin(deg2) * r / sx;
      cpy2 = oy + Math.cos(deg2) * r;
    } // 首尾只有3个点情况下重复了顶点形成4边形，同时圆角x/y相等有inner时
    // 使得交点相同角度相同无法计算，直接返回1个点即可


    if (deg1 === deg2) {
      return [[cpx1, cpy1]];
    } // 根据夹角求贝塞尔拟合圆弧长度


    var h = geom.h(Math.abs(deg1 - deg2));
    var d = h * r; // 过交点做切线，知道切线段长度d，求切线上从交点延长d的坐标，即为控制点
    // 圆心交点控制点连成直角三角形，获得斜边即圆心到控制点距离c
    // 求切线角，用上面夹角减去切线角可得控制点和圆心连线的角，从而获得坐标

    var c = Math.sqrt(Math.pow(r, 2) + Math.pow(d, 2));
    var degTg = Math.atan(d / r);
    var degTg1 = deg1 + degTg;
    var cdx1 = Math.sin(degTg1) * c;
    var cdy1 = Math.cos(degTg1) * c;
    var cx1 = ox + cdx1 / sx;
    var cy1 = oy + cdy1;
    var degTg2 = deg2 - degTg;
    var cdx2 = Math.sin(degTg2) * c;
    var cdy2 = Math.cos(degTg2) * c;
    var cx2 = ox + cdx2 / sx;
    var cy2 = oy + cdy2; // window.ctx.fillStyle = '#F90';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx1, cpy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0FF';
    // window.ctx.beginPath();
    // window.ctx.arc(cx1, cy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#00F';
    // window.ctx.beginPath();
    // window.ctx.arc(cx2, cy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0F0';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx2, cpy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.closePath();

    return [[cpx1, cpy1], [cx1, cy1], [cx2, cy2], [cpx2, cpy2]];
  }

  function calLeftRadiusPoints(borderWidth, deg1, deg2, x1, x2, x3, x4, y1, y2, y3, y4, pointsList, beginRadius, endRadius) {
    var _beginRadius4 = _slicedToArray(beginRadius, 2),
        brx = _beginRadius4[0],
        bry = _beginRadius4[1];

    var _endRadius4 = _slicedToArray(endRadius, 2),
        erx = _endRadius4[0],
        ery = _endRadius4[1]; // 一条边的两侧圆角均为0时无效


    if ((!brx || !bry) && (!erx || !ery)) {
      return pointsList;
    } // 分界坐标圆心，上圆角、下圆角、中间矩形，3个区域2个坐标；当上下圆角相接时中间矩形为0即中间2个坐标相等


    var oyt = y2 + bry - (y2 - y1);
    var oyb = y3 - ery + (y4 - y3);
    var beginList = [];
    var centerList = [];
    var endList = []; // 同borderTop拆分

    for (var i = 0, len = pointsList.length; i < len; i++) {
      var points = pointsList[i]; // 全在上圆角

      if (points[3][1] < oyt) {
        beginList.push(points);
      } // 全在下圆角
      else if (points[0][1] > oyb) {
          endList.push(points);
        } // 跨越上下圆角
        else if (points[3][1] > oyb && points[0][1] < oyt) {
            var xa = oyt < y2 ? x2 - Math.tan(deg2) * (y2 - oyt) : x2;
            var xb = oyb > y3 ? x2 - Math.tan(deg1) * (oyb - y3) : x2;
            beginList.push([points[0], points[1], [xa, oyt], [x1, oyt]]);

            if (oyt < oyb) {
              if (oyb < y3 && oyt > y2) {
                centerList.push([[x1, oyt], [x2, oyt], [x2, oyb], [x1, oyb]]);
              } else if (oyt > y2) {
                centerList.push([[x1, oyt], [x2, oyt], [x2, y3], [x1, y3]]);
                centerList.push([[x1, y3], [x2, y3], [xb, oyb], [x1, oyb]]);
              } else if (oyb < y3) {
                centerList.push([[x1, oyt], [xa, oyt], [x2, y2], [x1, y2]]);
                centerList.push([[x1, y2], [x2, y2], [x2, oyb], [x1, oyb]]);
              } else {
                centerList.push([[x1, oyt], [xa, oyt], [x2, y2], [x1, y2]]);
                centerList.push([[x1, y2], [x2, y2], [x2, y3], [x1, y3]]);
                centerList.push([[x1, y3], [x2, y3], [xb, oyb], [x1, oyb]]);
              }
            }

            endList.push([[x1, oyb], [xb, oyb], points[2], points[3]]);
          } // 跨越下圆角
          else if (points[3][1] > oyb) {
              var x = oyb > y3 ? x2 - Math.tan(deg1) * (oyb - y3) : x2;
              centerList.push([points[0], points[1], [x, oyb], [x1, oyb]]);
              endList.push([[x1, oyb], [x, oyb], points[2], points[3]]);
            } // 跨越上圆角
            else if (points[1][1] < oyt) {
                var _x2 = oyt < y2 ? x2 - Math.tan(deg2) * (y2 - oyt) : x2;

                beginList.push([points[0], points[1], [_x2, oyt], [x1, oyt]]);
                centerList.push([[x1, oyt], [_x2, oyt], points[2], points[3]]);
              } else {
                centerList.push(points);
              }
    }

    var beginLength = beginList.length;

    if (beginLength) {
      var needInner = bry > y2 - y1 && borderWidth < brx;
      var crossDeg = Math.atan((x2 - x1) / (y2 - y1));
      var rx1 = brx;
      var ry1 = bry;
      var sx1 = ry1 / rx1;
      var oxt = x1 + brx;
      var rx2 = brx - (x2 - x1);
      var ry2 = bry - (y2 - y1);
      var sx2 = ry2 / rx2; // 先计算第一个块，确定x/y边界，防止因为划分原因导致出现超过边界情况交叉

      var _xa5, ya, _xb5, yb;

      var ca = calBezierLeftTop(beginList[0][0], beginList[0][3], oxt, oyt, sx1, ry1, true, Math.tan(crossDeg) * ry1);

      var _ca7 = _slicedToArray(ca[ca.length - 1], 2);

      _xa5 = _ca7[0];
      ya = _ca7[1];
      var cb;

      if (needInner) {
        cb = calBezierLeftTop(beginList[0][1], beginList[0][2], oxt, oyt, sx2, ry2, true, Math.tan(crossDeg) * ry2);

        var _cb7 = _slicedToArray(cb[cb.length - 1], 2);

        _xb5 = _cb7[0];
        yb = _cb7[1];
      }

      beginList.forEach(function (points, i) {
        var controls1;
        var controls2;

        if (i === 0) {
          controls1 = ca;

          if (needInner) {
            controls2 = cb;
          }
        } else {
          controls1 = calBezierLeftTop(points[0], points[3], oxt, oyt, sx1, ry1);

          if (needInner) {
            controls2 = calBezierLeftTop(points[1], points[2], oxt, oyt, sx2, ry2);
          }
        }

        for (var _i13 = 0, _len13 = controls1.length; _i13 < _len13; _i13++) {
          limit(controls1[_i13], _xa5, ya, 6);
        }

        if (needInner) {
          for (var _i14 = 0, _len14 = controls2.length; _i14 < _len14; _i14++) {
            limit(controls2[_i14], _xb5, yb, 6);
          }

          if (controls2.length === 1) {
            points[2] = controls2[0];
            points.pop();
          } else {
            points[2] = controls2[0];
            points[3] = controls2[1].concat(controls2[2]).concat(controls2[3]);
          }
        } else {
          points[3] = points[1];
        }

        points[0] = controls1[3];
        points[1] = controls1[2].concat(controls1[1]).concat(controls1[0]);
      });
    }

    var endLength = endList.length;

    if (endLength) {
      var _needInner4 = ery > y4 - y3 && borderWidth < erx;

      var _crossDeg4 = Math.atan((x2 - x1) / (y4 - y3));

      var _rx7 = erx;
      var _ry7 = ery;

      var _sx7 = _ry7 / _rx7;

      var oxb = x1 + erx;

      var _rx8 = erx - (x2 - x1);

      var _ry8 = ery - (y4 - y3);

      var _sx8 = _ry8 / _rx8; // 先计算最后一个块，确定x/y边界，防止因为划分原因导致出现超过边界情况交叉


      var _xa6, _ya6, _xb6, _yb6;

      var _ca8 = calBezierLeftBottom(endList[endLength - 1][0], endList[endLength - 1][3], oxb, oyb, _sx7, _ry7, true, Math.tan(_crossDeg4) * _ry7);

      var _ca8$ = _slicedToArray(_ca8[0], 2);

      _xa6 = _ca8$[0];
      _ya6 = _ca8$[1];

      var _cb8;

      if (_needInner4) {
        _cb8 = calBezierLeftBottom(endList[endLength - 1][1], endList[endLength - 1][2], oxb, oyb, _sx8, _ry8, true, Math.tan(_crossDeg4) * _ry8);

        var _cb8$ = _slicedToArray(_cb8[0], 2);

        _xb6 = _cb8$[0];
        _yb6 = _cb8$[1];
      }

      endList.forEach(function (points, i) {
        var controls1;
        var controls2;

        if (i === endLength - 1) {
          controls1 = _ca8;

          if (_needInner4) {
            controls2 = _cb8;
          }
        } else {
          controls1 = calBezierLeftBottom(points[0], points[3], oxb, oyb, _sx7, _ry7);

          if (_needInner4) {
            controls2 = calBezierLeftBottom(points[1], points[2], oxb, oyb, _sx8, _ry8);
          }
        }

        for (var _i15 = 0, _len15 = controls1.length; _i15 < _len15; _i15++) {
          limit(controls1[_i15], _xa6, _ya6, 7);
        }

        if (_needInner4) {
          for (var _i16 = 0, _len16 = controls2.length; _i16 < _len16; _i16++) {
            limit(controls2[_i16], _xb6, _yb6, 7);
          }

          if (controls2.length === 1) {
            points[2] = controls2[0];
            points.pop();
          } else {
            points[2] = controls2[0];
            points[3] = controls2[1].concat(controls2[2]).concat(controls2[3]);
          }
        } else {
          points[3] = points[1];
        }

        points[0] = controls1[3];
        points[1] = controls1[2].concat(controls1[1]).concat(controls1[0]);
      });
    }

    return beginList.concat(centerList).concat(endList);
  }

  function calBezierLeftTop(p1, p2, ox, oy, sx, r, isStart, crossDx) {
    // 先缩放x轴，椭圆变圆，2个点x坐标相应变化，y不变
    var _p13 = _slicedToArray(p1, 2),
        p1x = _p13[0],
        p1y = _p13[1];

    var _p14 = _slicedToArray(p2, 2),
        p2x = _p14[0],
        p2y = _p14[1];

    var dx1 = ox - p1x;
    var dsx1 = dx1 * sx;
    var dx2 = ox - p2x;
    var dsx2 = dx2 * sx; // 求2个点和1/4圆弧的交点坐标，和圆心连线，反三角函数求出夹角

    var deg2 = Math.atan(dsx2 / (oy - p2y)); // 根据角和半径再三角函数求交点坐标，可以直接缩放x轴恢复原本椭圆坐标，求贝塞尔控制点用不到交点

    var cpx2 = ox - Math.sin(deg2) * r / sx;
    var cpy2 = oy - Math.cos(deg2) * r;
    var deg1;
    var cpx1;
    var cpy1;

    if (isStart) {
      // 交界线和y轴夹角beta以及交点的x坐标都会受缩放影响，先化圆好求交点坐标
      var crossDsx = crossDx * sx;
      var beta = Math.atan(crossDsx / r); // 公式计算可得beta和交点连圆心的角alpha关系

      var tanBetaDiv2Sqrt = Math.sqrt(Math.tan(beta) / 2);
      var tanAlphaHalf = tanBetaDiv2Sqrt / (1 + tanBetaDiv2Sqrt);
      var alpha = Math.atan(tanAlphaHalf) * 2; // 获得alpha后直接根据半径求出交点坐标

      deg1 = Math.PI * 0.5 - alpha;
      cpx1 = ox - Math.cos(alpha) * r / sx;
      cpy1 = oy - Math.sin(alpha) * r;
    } else {
      deg1 = Math.atan(dsx1 / (oy - p1y));
      cpx1 = ox - Math.sin(deg1) * r / sx;
      cpy1 = oy - Math.cos(deg1) * r;
    } // 首尾只有3个点情况下重复了顶点形成4边形，同时圆角x/y相等有inner时
    // 使得交点相同角度相同无法计算，直接返回1个点即可


    if (deg1 === deg2) {
      return [[cpx1, cpy1]];
    } // 根据夹角求贝塞尔拟合圆弧长度


    var h = geom.h(Math.abs(deg1 - deg2));
    var d = h * r; // 过交点做切线，知道切线段长度d，求切线上从交点延长d的坐标，即为控制点
    // 圆心交点控制点连成直角三角形，获得斜边即圆心到控制点距离c
    // 求切线角，用上面夹角减去切线角可得控制点和圆心连线的角，从而获得坐标

    var c = Math.sqrt(Math.pow(r, 2) + Math.pow(d, 2));
    var degTg = Math.atan(d / r);
    var degTg1 = deg1 + degTg;
    var cdx1 = Math.sin(degTg1) * c;
    var cdy1 = Math.cos(degTg1) * c;
    var cx1 = ox - cdx1 / sx;
    var cy1 = oy - cdy1;
    var degTg2 = deg2 - degTg;
    var cdx2 = Math.sin(degTg2) * c;
    var cdy2 = Math.cos(degTg2) * c;
    var cx2 = ox - cdx2 / sx;
    var cy2 = oy - cdy2; // window.ctx.fillStyle = '#000';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx1, cpy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0FF';
    // window.ctx.beginPath();
    // window.ctx.arc(cx1, cy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#00F';
    // window.ctx.beginPath();
    // window.ctx.arc(cx2, cy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0F0';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx2, cpy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.closePath();

    return [[cpx2, cpy2], [cx2, cy2], [cx1, cy1], [cpx1, cpy1]];
  }

  function calBezierLeftBottom(p1, p2, ox, oy, sx, r, isEnd, crossDx) {
    // 先缩放x轴，椭圆变圆，2个点x坐标相应变化，y不变
    var _p15 = _slicedToArray(p1, 2),
        p1x = _p15[0],
        p1y = _p15[1];

    var _p16 = _slicedToArray(p2, 2),
        p2x = _p16[0],
        p2y = _p16[1];

    var dx1 = ox - p1x;
    var dsx1 = dx1 * sx;
    var dx2 = ox - p2x;
    var dsx2 = dx2 * sx; // 求2个点和1/4圆弧的交点坐标，和圆心连线，反三角函数求出夹角

    var deg1 = Math.atan(dsx1 / (p1y - oy)); // 根据角和半径再三角函数求交点坐标，可以直接缩放x轴恢复原本椭圆坐标，求贝塞尔控制点用不到交点

    var cpx1 = ox - Math.sin(deg1) * r / sx;
    var cpy1 = oy + Math.cos(deg1) * r;
    var deg2;
    var cpx2;
    var cpy2;

    if (isEnd) {
      // 交界线和y轴夹角beta以及交点的x坐标都会受缩放影响，先化圆好求交点坐标
      var crossDsx = crossDx * sx;
      var beta = Math.atan(crossDsx / r); // 公式计算可得beta和交点连圆心的角alpha关系

      var tanBetaDiv2Sqrt = Math.sqrt(Math.tan(beta) / 2);
      var tanAlphaHalf = tanBetaDiv2Sqrt / (1 + tanBetaDiv2Sqrt);
      var alpha = Math.atan(tanAlphaHalf) * 2; // 获得alpha后直接根据半径求出交点坐标

      deg2 = Math.PI * 0.5 - alpha;
      cpx2 = ox - Math.cos(alpha) * r / sx;
      cpy2 = oy + Math.sin(alpha) * r;
    } else {
      deg2 = Math.atan(dsx2 / (p2y - oy));
      cpx2 = ox - Math.sin(deg2) * r / sx;
      cpy2 = oy + Math.cos(deg2) * r;
    } // 首尾只有3个点情况下重复了顶点形成4边形，同时圆角x/y相等有inner时
    // 使得交点相同角度相同无法计算，直接返回1个点即可


    if (deg1 === deg2) {
      return [[cpx1, cpy1]];
    } // 根据夹角求贝塞尔拟合圆弧长度


    var h = geom.h(Math.abs(deg1 - deg2));
    var d = h * r; // 过交点做切线，知道切线段长度d，求切线上从交点延长d的坐标，即为控制点
    // 圆心交点控制点连成直角三角形，获得斜边即圆心到控制点距离c
    // 求切线角，用上面夹角减去切线角可得控制点和圆心连线的角，从而获得坐标

    var c = Math.sqrt(Math.pow(r, 2) + Math.pow(d, 2));
    var degTg = Math.atan(d / r);
    var degTg1 = deg1 - degTg;
    var cdx1 = Math.sin(degTg1) * c;
    var cdy1 = Math.cos(degTg1) * c;
    var cx1 = ox - cdx1 / sx;
    var cy1 = oy + cdy1;
    var degTg2 = deg2 + degTg;
    var cdx2 = Math.sin(degTg2) * c;
    var cdy2 = Math.cos(degTg2) * c;
    var cx2 = ox - cdx2 / sx;
    var cy2 = oy + cdy2; // window.ctx.fillStyle = '#F90';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx1, cpy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0FF';
    // window.ctx.beginPath();
    // window.ctx.arc(cx1, cy1, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#00F';
    // window.ctx.beginPath();
    // window.ctx.arc(cx2, cy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.fillStyle = '#0F0';
    // window.ctx.beginPath();
    // window.ctx.arc(cpx2, cpy2, 1,0, 2 * Math.PI);
    // window.ctx.fill();
    // window.ctx.closePath();

    return [[cpx2, cpy2], [cx2, cy2], [cx1, cy1], [cpx1, cpy1]];
  }
  /**
   * 简单计算椭圆的圆化坐标控制点，视作重合位置，外面判断backgroundClip并调整坐标
   * @param x 起始x
   * @param y 起始y
   * @param w 宽
   * @param h 高
   * @param btlr borderTopLeftRadius
   * @param btrr borderTopRightRadius
   * @param bbrr borderBottomRightRadius
   * @param bblr borderBottomLeftRadius
   * @returns {[]} 多边形的顶点和曲线控制点
   */


  function calRadius(x, y, w, h, btlr, btrr, bbrr, bblr) {
    var need;

    var _btlr = _slicedToArray(btlr, 2),
        btlx = _btlr[0],
        btly = _btlr[1];

    var _btrr = _slicedToArray(btrr, 2),
        btrx = _btrr[0],
        btry = _btrr[1];

    var _bbrr = _slicedToArray(bbrr, 2),
        bbrx = _bbrr[0],
        bbry = _bbrr[1];

    var _bblr = _slicedToArray(bblr, 2),
        bblx = _bblr[0],
        bbly = _bblr[1];

    btlx = Math.max(btlx, 0);
    btly = Math.max(btly, 0);
    btrx = Math.max(btrx, 0);
    btry = Math.max(btry, 0);
    bbrx = Math.max(bbrx, 0);
    bbry = Math.max(bbry, 0);
    bblx = Math.max(bblx, 0);
    bbly = Math.max(bbly, 0); // 圆角必须x/y都>0才有效，否则视为不绘制

    if (btlx > 0 && btly > 0 || btrx > 0 && btry > 0 || bbrx > 0 && bbry > 0 || bblx > 0 && bbly > 0) {
      need = true;
    }

    if (need) {
      var list = [];

      if (btlx > 0 && btly > 0) {
        list.push([x, y + btly]);
        list.push([x, y + btly * (1 - H$1), x + btlx * (1 - H$1), y, x + btlx, y]);
      } else {
        list.push([x, y]);
      }

      if (btrx > 0 && btry > 0) {
        list.push([x + w - btrx, y]);
        list.push([x + w - btrx * (1 - H$1), y, x + w, y + btry * (1 - H$1), x + w, y + btry]);
      } else {
        list.push([x + w, y]);
      }

      if (bbrx > 0 && bbry > 0) {
        list.push([x + w, y + h - bbry]);
        list.push([x + w, y + h - bbry * (1 - H$1), x + w - bbrx * (1 - H$1), y + h, x + w - bbrx, y + h]);
      } else {
        list.push([x + w, y + h]);
      }

      if (bblx > 0 && bbly > 0) {
        list.push([x + bblx, y + h]);
        list.push([x + bblx * (1 - H$1), y + h, x, y + h - bbly * (1 - H$1), x, y + h - bbly]);
      } else {
        list.push([x, y + h]);
      }

      return list;
    }
  }

  function limit(points, x, y, direction) {
    if (direction === 0) {
      points[0] = Math.max(points[0], x);
      points[1] = Math.min(points[1], y);
    } else if (direction === 1) {
      points[0] = Math.min(points[0], x);
      points[1] = Math.min(points[1], y);
    } else if (direction === 2) {
      points[0] = Math.max(points[0], x);
      points[1] = Math.max(points[1], y);
    } else if (direction === 3) {
      points[0] = Math.max(points[0], x);
      points[1] = Math.min(points[1], y);
    } else if (direction === 4) {
      points[0] = Math.max(points[0], x);
      points[1] = Math.max(points[1], y);
    } else if (direction === 5) {
      points[0] = Math.min(points[0], x);
      points[1] = Math.max(points[1], y);
    } else if (direction === 6) {
      points[0] = Math.min(points[0], x);
      points[1] = Math.max(points[1], y);
    } else if (direction === 7) {
      points[0] = Math.min(points[0], x);
      points[1] = Math.min(points[1], y);
    }
  }

  var BR_KS = [BORDER_TOP_LEFT_RADIUS, BORDER_TOP_RIGHT_RADIUS, BORDER_BOTTOM_RIGHT_RADIUS, BORDER_BOTTOM_LEFT_RADIUS];

  function calBorderRadius(w, h, currentStyle, computedStyle, root) {
    var noRadius = true;
    BR_KS.forEach(function (k) {
      computedStyle[k] = currentStyle[k].map(function (item, i) {
        if (item[0] > 0) {
          noRadius = false;
        } else {
          return 0;
        }

        if (item[1] === PX) {
          return Math.max(0, item[0]);
        } else if (item[1] === PERCENT) {
          return Math.max(0, item[0] * (i ? h : w) * 0.01);
        } else if (item[1] === REM) {
          return Math.max(0, item[0] * root.computedStyle[FONT_SIZE]);
        } else if (item[1] === VW) {
          return Math.max(0, item[0] * root.width * 0.01);
        } else if (item[1] === VH) {
          return Math.max(0, item[0] * root.height * 0.01);
        } else if (item[1] === VMAX) {
          return Math.max(0, item[0] * Math.max(root.width, root.height) * 0.01);
        } else if (item[1] === VMIN) {
          return Math.max(0, item[0] * Math.min(root.width, root.height) * 0.01);
        }

        return 0;
      });
    }); // 优化提前跳出

    if (noRadius) {
      return;
    } // radius限制，相交的2个之和不能超过边长，如果2个都超过中点取中点，只有1个超过取交点，这包含了单个不能超过总长的逻辑


    BR_KS.forEach(function (k, i) {
      var j = i % 2 === 0 ? 0 : 1;
      var target = j ? h : w;
      var prev = computedStyle[k];
      var next = computedStyle[BR_KS[(i + 1) % 4]]; // 相加超过边长则是相交

      if (prev[j] + next[j] > target) {
        var half = target * 0.5; // 都超过一半中点取中点

        if (prev[j] >= half && next[j] >= half) {
          prev[j] = next[j] = half;
        } // 仅1个超过中点，因相交用总长减去另一方即可
        else if (prev[j] > half) {
            prev[j] = target - next[j];
          } else if (next[j] > half) {
            next[j] = target - prev[j];
          }
      }
    });
  }

  function calBorderRadiusInline(contentBoxList, currentStyle, computedStyle) {
    var first, last;

    if (contentBoxList.length) {
      first = contentBoxList[0];
      last = contentBoxList[contentBoxList.length - 1];
    } // 先看first的左侧


    var w = first ? first.outerWidth : 0,
        h = first ? first.outerHeight : 0;
    w += computedStyle[BORDER_LEFT_WIDTH] + computedStyle[PADDING_LEFT];
    h += computedStyle[BORDER_TOP_WIDTH] + computedStyle[BORDER_BOTTOM_WIDTH] + computedStyle[PADDING_TOP] + computedStyle[PADDING_BOTTOM];
    [BORDER_TOP_LEFT_RADIUS, BORDER_BOTTOM_LEFT_RADIUS].forEach(function (k) {
      computedStyle[k] = currentStyle[k].map(function (item, i) {
        var v;

        if (item[1] === PX) {
          v = Math.max(0, item[0]);
          v = Math.min(i ? h : w, v);
        } else {
          v = Math.max(0, item[0] * (i ? h : w) * 0.01);
          v = Math.min(i ? h : w, v);
        }

        return v;
      });
    }); // 再看end的右侧

    w = last ? last.outerWidth : 0;
    h = last ? last.outerHeight : 0;
    [BORDER_TOP_RIGHT_RADIUS, BORDER_BOTTOM_RIGHT_RADIUS].forEach(function (k) {
      computedStyle[k] = currentStyle[k].map(function (item, i) {
        var v;

        if (item[1] === PX) {
          v = Math.max(0, item[0]);
          v = Math.min(i ? h : w, v);
        } else {
          v = Math.max(0, item[0] * (i ? h : w) * 0.01);
          v = Math.min(i ? h : w, v);
        }

        return v;
      });
    });
  }

  function renderBorder(xom, renderMode, ctx, points, color, dx, dy) {
    if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
      ctx.beginPath();

      if (ctx.fillStyle !== color) {
        ctx.fillStyle = color;
      }

      points.forEach(function (point) {
        canvasPolygon$1(ctx, point, dx, dy);
      });
      ctx.fill();
      ctx.closePath();
    } else if (renderMode === mode.SVG) {
      var s = '';
      points.forEach(function (point) {
        s += svgPolygon$1(point);
      });
      xom.virtualDom.bb.push({
        type: 'item',
        tagName: 'path',
        props: [['d', s], ['fill', color]]
      });
    }
  }

  var border = {
    calPoints: calPoints,
    calRadius: calRadius,
    calBorderRadius: calBorderRadius,
    calBorderRadiusInline: calBorderRadiusInline,
    renderBorder: renderBorder
  };

  // 类型为引用防止json仿造
  var TYPE_VD = {
    _: 1
  };
  var TYPE_GM = {
    _: 2
  };
  var TYPE_CP = {
    _: 3
  };
  var $$type = {
    TYPE_VD: TYPE_VD,
    TYPE_GM: TYPE_GM,
    TYPE_CP: TYPE_CP
  };

  var toString = {}.toString;

  function isType(type) {
    return function (obj) {
      return toString.call(obj) === '[object ' + type + ']';
    };
  }

  var isObject = isType('Object');
  var isString = isType('String');
  var isFunction = isType('Function');
  var isNumber = isType('Number');
  var isBoolean = isType('Boolean');
  var isDate = isType('Date');
  var hasOwn = {}.hasOwnProperty;
  var fnToString = hasOwn.toString;
  var ObjectFunctionString = fnToString.call(Object);

  function isNil(v) {
    return v === undefined || v === null;
  }

  function _joinSourceArray(arr) {
    var res = '';

    for (var i = 0, len = arr.length; i < len; i++) {
      var item = arr[i];

      if (Array.isArray(item)) {
        res += _joinSourceArray(item);
      } else {
        res += stringify(item);
      }
    }

    return res;
  }

  function stringify(s) {
    if (isNil(s)) {
      return '';
    }

    return s.toString();
  }

  function encodeHtml(s, prop) {
    if (prop) {
      return s.replace(/"/g, '&quot;');
    }

    return s.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/ /g, '&nbsp;');
  } // 根元素专用


  function joinVirtualDom(vd) {
    var s = '<defs>';
    vd.defs.forEach(function (item) {
      s += joinDef(item);
    });
    s += '</defs><g>';
    vd.bb.forEach(function (item) {
      s += joinVd(item);
    });
    s += '</g><g';

    if (vd.conClip) {
      s += ' clip-path="' + vd.conClip + '"';
    }

    s += '>';
    (vd.children || []).forEach(function (item) {
      if (item.isMask) {
        return;
      }

      s += joinVd(item);
    });
    s += '</g>';
    return s;
  } // 普通元素


  function joinVd(vd) {
    if (vd.type === 'item' || vd.type === 'img') {
      var s = '';
      (vd.props || []).forEach(function (item) {
        s += ' ' + item[0] + '="' + item[1] + '"';
      });

      if (vd.tagName === 'text') {
        return '<text' + s + '>' + vd.content + '</text>';
      }

      return '<' + vd.tagName + s + '/>';
    } else if (vd.type === 'text') {
      var _s = ""; // text有许多lineBox

      (vd.children || []).forEach(function (item) {
        _s += joinVd(item);
      });
      return '<g>' + _s + '</g>';
    } else if (vd.type === 'dom' || vd.type === 'geom') {
      var _s2 = '<g>';
      vd.bb.forEach(function (item) {
        _s2 += joinVd(item);
      });
      _s2 += '</g><g';

      if (vd.conClip) {
        _s2 += ' clip-path="' + vd.conClip + '"';
      }

      _s2 += '>';
      (vd.children || []).forEach(function (item) {
        if (item.isMask) {
          return;
        }

        _s2 += joinVd(item);
      });
      _s2 += '</g>';
      var opacity = vd.opacity,
          transform = vd.transform,
          visibility = vd.visibility,
          mask = vd.mask,
          overflow = vd.overflow,
          filter = vd.filter,
          mixBlendMode = vd.mixBlendMode;
      return '<g' + (opacity !== 1 && opacity !== undefined ? ' opacity="' + opacity + '"' : '') + (transform ? ' transform="' + transform + '"' : '') + ' visibility="' + visibility + '"' + (mask ? ' mask="' + mask + '"' : '') + (overflow ? ' clip-path="' + overflow + '"' : '') // + (filter ? (' filter="' + filter + '"') : '')
      + (filter || mixBlendMode ? ' style="' : '') + (filter ? 'filter:' + filter + ';' : '') + (mixBlendMode ? 'mix-blend-mode:' + mixBlendMode + ';' : '') + (filter || mixBlendMode ? '"' : '') + '>' + _s2 + '</g>';
    }
  }

  function joinDef(def) {
    var s = '<' + def.tagName + ' id="' + def.uuid + '"';

    if (def.tagName === 'mask' || def.tagName === 'clipPath') ; else if (def.tagName === 'filter') ; else {
      s += ' gradientUnits="userSpaceOnUse"';
    }

    (def.props || []).forEach(function (item) {
      s += ' ' + item[0] + '="' + item[1] + '"';
    });
    s += '>';
    (def.children || []).forEach(function (item) {
      s += joinItem(item);
    });
    s += '</' + def.tagName + '>';
    return s;
  }

  function joinItem(item) {
    var s = '<' + item.tagName;
    (item.props || []).forEach(function (item) {
      s += ' ' + item[0] + '="' + item[1] + '"';
    });
    s += '></' + item.tagName + '>';
    return s;
  }

  function rgba2int(color) {
    if (Array.isArray(color)) {
      return color;
    }

    var res = [];

    if (!color || color === 'transparent') {
      res = [0, 0, 0, 0];
    } else if (color.charAt(0) === '#') {
      color = color.slice(1);

      if (color.length === 3) {
        res.push(parseInt(color.charAt(0) + color.charAt(0), 16));
        res.push(parseInt(color.charAt(1) + color.charAt(1), 16));
        res.push(parseInt(color.charAt(2) + color.charAt(2), 16));
        res[3] = 1;
      } else if (color.length === 6) {
        res.push(parseInt(color.slice(0, 2), 16));
        res.push(parseInt(color.slice(2, 4), 16));
        res.push(parseInt(color.slice(4), 16));
        res[3] = 1;
      } else if (color.length === 8) {
        res.push(parseInt(color.slice(0, 2), 16));
        res.push(parseInt(color.slice(2, 4), 16));
        res.push(parseInt(color.slice(4, 6), 16));
        res.push(parseInt(color.slice(6), 16) / 255);
      } else {
        res[0] = res[1] = res[2] = 0;
        res[3] = 1;
      }
    } else {
      var c = color.match(/rgba?\s*\(\s*([\d.]+)\s*,\s*([\d.]+)\s*,\s*([\d.]+)(?:\s*,\s*([\d.]+))?\s*\)/i);

      if (c) {
        res = [parseInt(c[1]), parseInt(c[2]), parseInt(c[3])];

        if (!isNil(c[4])) {
          res[3] = parseFloat(c[4]);
        } else {
          res[3] = 1;
        }
      } else {
        res = [0, 0, 0, 0];
      }
    }

    return res;
  }

  function int2rgba(color) {
    if (Array.isArray(color)) {
      if (color.length === 4) {
        color = color.map(function (c, i) {
          return i === 3 ? c : Math.floor(Math.max(0, c));
        });
        return 'rgba(' + joinArr(color, ',') + ')';
      } else if (color.length === 3) {
        color = color.map(function (c) {
          return Math.floor(c);
        });
        return 'rgba(' + joinArr(color, ',') + ',1)';
      }
    }

    return color || 'rgba(0,0,0,0)';
  }

  function int2invert(color) {
    if (Array.isArray(color)) {
      color = color.slice(0);
      color[0] = 255 - color[0];
      color[1] = 255 - color[1];
      color[2] = 255 - color[2];

      if (color.length === 4) {
        return 'rgba(' + joinArr(color, ',') + ')';
      } else if (color.length === 3) {
        return 'rgba(' + joinArr(color, ',') + ',1)';
      }
    }

    return 'rgba(0,0,0,0)';
  }

  function arr2hash(arr) {
    var hash = {};

    for (var i = 0, len = arr.length; i < len; i++) {
      var item = arr[i];

      if (Array.isArray(item)) {
        hash[item[0]] = item[1];
      } else {
        for (var list = Object.keys(item), j = list.length - 1; j >= 0; j--) {
          var k = list[j];
          hash[k] = item[k];
        }
      }
    }

    return hash;
  }

  function hash2arr(hash) {
    if (Array.isArray(hash)) {
      return hash;
    }

    var arr = [];

    for (var list = Object.keys(hash), i = 0, len = list.length; i < len; i++) {
      var k = list[i];
      arr.push([k, hash[k]]);
    }

    return arr;
  }

  function clone(obj) {
    if (isNil(obj) || _typeof(obj) !== 'object') {
      return obj;
    } // parse递归会出现内部先返回解析好的json，外部parse不能clone


    if (obj.$$type === $$type.TYPE_VD || obj.$$type === $$type.TYPE_GM || obj.$$type === $$type.TYPE_CP) {
      return obj;
    }

    if (util.isDate(obj)) {
      return new Date(obj);
    }

    if (!isPlainObject(obj) && !Array.isArray(obj)) {
      return obj;
    }

    var n = Array.isArray(obj) ? [] : {};
    Object.keys(obj).forEach(function (i) {
      n[i] = clone(obj[i]);
    });
    return n;
  }
  /**
   * 简化的arr对比，arr中只有arr和其它类型，其它类型对比值或引用，arr递归
   * @param a
   * @param b
   * @returns {boolean}
   */


  function equalArr(a, b) {
    if (!a || !b) {
      return a === b;
    }

    if (a.length !== b.length) {
      return false;
    }

    for (var i = 0, len = a.length; i < len; i++) {
      var ai = a[i];
      var bi = b[i];
      var isArrayA = Array.isArray(ai);
      var isArrayB = Array.isArray(bi);

      if (isArrayA && isArrayB) {
        if (!equalArr(ai, bi)) {
          return false;
        }
      } else if (isArrayA || isArrayB) {
        return false;
      } else if (ai !== bi) {
        return false;
      }
    }

    return true;
  }
  /**
   * 深度对比对象
   * @param a
   * @param b
   * @returns {boolean}
   */


  function equal(a, b) {
    if (a === b) {
      return true;
    }

    if (isObject(a) && isObject(b)) {
      var hash = {};

      for (var i = 0, arr = Object.keys(a), len = arr.length; i < len; i++) {
        var k = arr[i];

        if (!b.hasOwnProperty(k) || !equal(a[k], b[k])) {
          return false;
        }

        hash[k] = true;
      } // a没有b有则false


      for (var _i = 0, _arr = Object.keys(b), _len = _arr.length; _i < _len; _i++) {
        var _k = _arr[_i];

        if (!hash.hasOwnProperty(_k)) {
          return false;
        }
      }
    } else if (isDate(a) && isDate(b)) {
      return a.getTime() === b.getTime();
    } else if (Array.isArray(a) && Array.isArray(b)) {
      if (a.length !== b.length) {
        return false;
      }

      for (var _i2 = 0, _len2 = a.length; _i2 < _len2; _i2++) {
        if (!equal(a[_i2], b[_i2])) {
          return false;
        }
      }
    } else {
      return a === b;
    }

    return true;
  }

  function extend(target, source, keys) {
    if (source === null || _typeof(source) !== 'object') {
      return target;
    }

    if (!keys) {
      keys = Object.keys(source);
    }

    var i = 0;
    var len = keys.length;

    while (i < len) {
      var k = keys[i];
      target[k] = source[k];
      i++;
    }

    return target;
  }

  function joinArr(arr, split) {
    var s = arr.length ? arr[0] : '';

    for (var i = 1, len = arr.length; i < len; i++) {
      s += split + arr[i];
    }

    return s;
  }

  function extendAnimate(ovd, nvd) {
    var list = nvd.__animationList = ovd.animationList.splice(0);
    list.forEach(function (item) {
      item.__setTarget(nvd); // 事件队列的缘故，可能动画本帧刚执行过，然后再继承，就会缺失，需再次赋值一遍；也有可能停留最后


      if (item.assigning || item.finished && item.__stayEnd()) {
        item.assignCurrentStyle();
      }
    }); // 帧动画继承

    nvd.__frameAnimateList = ovd.__frameAnimateList.splice(0);
  }

  function transformBbox(bbox, matrix) {
    var dx = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var dy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;

    if (matrix && !mx.isE(matrix)) {
      var _bbox = bbox,
          _bbox2 = _slicedToArray(_bbox, 4),
          x1 = _bbox2[0],
          y1 = _bbox2[1],
          x2 = _bbox2[2],
          y2 = _bbox2[3]; // 可能因filter的原因扩展范围


      if (dx) {
        x1 -= dx;
        x2 += dx;
      }

      if (dy) {
        y1 -= dy;
        y2 += dy;
      }

      var list = [x2, y1, x1, y2, x2, y2];
      var w;

      var _mx$calPoint = mx.calPoint([x1, y1], matrix);

      var _mx$calPoint2 = _slicedToArray(_mx$calPoint, 4);

      x1 = _mx$calPoint2[0];
      y1 = _mx$calPoint2[1];
      w = _mx$calPoint2[3];

      if (w && w !== 1) {
        x1 /= w;
        y1 /= w;
      }

      var xa = x1,
          ya = y1,
          xb = x1,
          yb = y1;

      for (var i = 0; i < 6; i += 2) {
        var x = list[i],
            y = list[i + 1];

        var _mx$calPoint3 = mx.calPoint([x, y], matrix);

        var _mx$calPoint4 = _slicedToArray(_mx$calPoint3, 4);

        x = _mx$calPoint4[0];
        y = _mx$calPoint4[1];
        w = _mx$calPoint4[3];

        if (w && w !== 1) {
          x /= w;
          y /= w;
        }

        xa = Math.min(xa, x);
        xb = Math.max(xb, x);
        ya = Math.min(ya, y);
        yb = Math.max(yb, y);
      }

      bbox = [xa, ya, xb, yb];
    } else if (dx || dy) {
      bbox = bbox.slice(0);
      bbox[0] -= dx;
      bbox[1] -= dy;
      bbox[2] += dx;
      bbox[3] += dy;
    }

    return bbox;
  }

  function isPlainObject(obj) {
    if (!obj || toString.call(obj) !== '[object Object]') {
      return false;
    }

    var proto = Object.getPrototypeOf(obj);

    if (!proto) {
      return true;
    }

    var Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString;
  }

  function assignMatrix(t, v) {
    t[0] = v[0];
    t[1] = v[1];
    t[2] = v[2];
    t[3] = v[3];
    t[4] = v[4];
    t[5] = v[5];
    t[6] = v[6];
    t[7] = v[7];
    t[8] = v[8];
    t[9] = v[9];
    t[10] = v[10];
    t[11] = v[11];
    t[12] = v[12];
    t[13] = v[13];
    t[14] = v[14];
    t[15] = v[15];
    return t;
  }

  var util = {
    isObject: isObject,
    isString: isString,
    isFunction: isFunction,
    isNumber: isNumber,
    isBoolean: isBoolean,
    isDate: isDate,
    isNil: isNil,
    isPrimitive: function isPrimitive(v) {
      return util.isNil(v) || util.isBoolean(v) || util.isString(v) || util.isNumber(v);
    },
    // css中常用undefined/null表示auto本身
    isAuto: function isAuto(v) {
      return isNil(v) || v === 'auto';
    },
    isPlainObject: isPlainObject,
    stringify: stringify,
    joinSourceArray: function joinSourceArray(arr) {
      return _joinSourceArray(arr);
    },
    encodeHtml: encodeHtml,
    joinVirtualDom: joinVirtualDom,
    joinVd: joinVd,
    joinDef: joinDef,
    rgba2int: rgba2int,
    int2rgba: int2rgba,
    int2invert: int2invert,
    arr2hash: arr2hash,
    hash2arr: hash2arr,
    clone: clone,
    equalArr: equalArr,
    equal: equal,
    extend: extend,
    joinArr: joinArr,
    extendAnimate: extendAnimate,
    transformBbox: transformBbox,
    assignMatrix: assignMatrix
  };

  var debug = {
    flag: false
  };

  var textCache = {
    list: [],
    // 每次渲染前的更新后，等待测量的文字对象列表
    data: {},
    // Text中存入的特殊等待测量的信息，字体+字号+粗细为key
    charWidth: {},
    // key的文字宽度hash
    padding: {},
    // key的文字宽度偏移，少量字体的少量文字有
    ELLIPSIS: '…'
  };

  var ca = {
    alpha: true,
    antialias: true,
    premultipliedAlpha: true,
    preserveDrawingBuffer: true // depth: true,
    // stencil: true,

  };

  var calPoint$2 = mx.calPoint;
  /**
   * 初始化 shader
   * @param gl GL context
   * @param vshader vertex shader (string)
   * @param fshader fragment shader (string)
   * @return program, if the program object was created and successfully made current
   */

  function initShaders(gl, vshader, fshader) {
    var program = createProgram(gl, vshader, fshader);

    if (!program) {
      throw new Error('Failed to create program');
    } // 要开启透明度，用以绘制透明的图形


    gl.enable(gl.BLEND);
    gl.blendFunc(gl.ONE, gl.ONE_MINUS_SRC_ALPHA);
    return program;
  }
  /**
   * Create the linked program object
   * @param gl GL context
   * @param vshader a vertex shader program (string)
   * @param fshader a fragment shader program (string)
   * @return created program object, or null if the creation has failed
   */


  function createProgram(gl, vshader, fshader) {
    // Create shader object
    var vertexShader = loadShader(gl, gl.VERTEX_SHADER, vshader);
    var fragmentShader = loadShader(gl, gl.FRAGMENT_SHADER, fshader);

    if (!vertexShader || !fragmentShader) {
      return null;
    } // Create a program object


    var program = gl.createProgram();

    if (!program) {
      return null;
    }

    program.vertexShader = vertexShader;
    program.fragmentShader = fragmentShader; // Attach the shader objects

    gl.attachShader(program, vertexShader);
    gl.attachShader(program, fragmentShader); // Link the program object

    gl.linkProgram(program); // Check the result of linking

    var linked = gl.getProgramParameter(program, gl.LINK_STATUS);

    if (!linked) {
      var error = gl.getProgramInfoLog(program);
      gl.deleteProgram(program);
      gl.deleteShader(fragmentShader);
      gl.deleteShader(vertexShader);
      throw new Error('Failed to link program: ' + error);
    }

    return program;
  }
  /**
   * Create a shader object
   * @param gl GL context
   * @param type the type of the shader object to be created
   * @param source shader program (string)
   * @return created shader object, or null if the creation has failed.
   */


  function loadShader(gl, type, source) {
    // Create shader object
    var shader = gl.createShader(type);

    if (shader == null) {
      throw new Error('unable to create shader');
    } // Set the shader program


    gl.shaderSource(shader, source); // Compile the shader

    gl.compileShader(shader); // Check the result of compilation

    var compiled = gl.getShaderParameter(shader, gl.COMPILE_STATUS);

    if (!compiled) {
      var error = gl.getShaderInfoLog(shader);
      gl.deleteShader(shader);
      throw new Error('Failed to compile shader: ' + error);
    }

    return shader;
  }

  function convertCoords2Gl(_ref, cx, cy, revertY) {
    var _ref2 = _slicedToArray(_ref, 4),
        x = _ref2[0],
        y = _ref2[1],
        z = _ref2[2],
        w = _ref2[3];

    if (z === undefined) {
      z = 0;
    }

    if (w === undefined) {
      w = 1;
    }

    if (w && w !== 1) {
      x /= w;
      y /= w;
      z /= w;
    }

    if (x === cx) {
      x = 0;
    } else {
      x = (x - cx) / cx;
    }

    if (y === cy) {
      y = 0;
    } else {
      y = (y - cy) / cy;

      if (revertY) {
        y = -y;
      }
    }

    return [x * w, y * w, z * w, w];
  }

  function createTexture(gl, tex, n, width, height) {
    var texture = gl.createTexture();
    bindTexture(gl, texture, n); // gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, -1);

    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true); // 传入高宽时是绑定fbo，且tex一定为null

    if (width && height) {
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, width, height, 0, gl.RGBA, gl.UNSIGNED_BYTE, tex);
    } // 普通将canvas对象作为纹理
    else {
        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, tex);
      }

    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR);
    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
    return texture;
  }

  function bindTexture(gl, texture, n) {
    gl.activeTexture(gl['TEXTURE' + n]);
    gl.bindTexture(gl.TEXTURE_2D, texture);
  }
  /**
   * texCache集满纹理上传占用最多可用纹理单元后，进行批量顺序绘制
   * 将所有dom的矩形顶点（经过transform变换后的）、贴图坐标、透明度存入3个buffer中，
   * 然后相同纹理单元的形成一批，设置uniform的纹理单元号进行绘制，如此循环
   * @param gl
   * @param list
   * @param hash
   * @param cx
   * @param cy
   * @param revertY
   */


  function drawTextureCache(gl, list, hash, cx, cy, revertY) {
    var vtPoint = [],
        vtTex = [],
        vtOpacity = [];
    var lastChannel; // 上一个dom的单元号

    var record = [0]; // [num, channel]每一批的数量和单元号记录

    var stack = [record]; // 所有批的数据记录集合

    list.forEach(function (item, i) {
      var _item = _slicedToArray(item, 5),
          cache = _item[0],
          opacity = _item[1],
          matrix = _item[2],
          dx = _item[3],
          dy = _item[4];

      if (i) {
        var channel = hash[cache.page.uuid]; // 和上一个单元号不同时，生成新的批次记录

        if (lastChannel !== channel) {
          lastChannel = channel;
          record = [0, lastChannel];
          stack.push(record);
        }
      } else {
        lastChannel = hash[cache.page.uuid];
        record[1] = lastChannel;
      }

      var x = cache.x,
          y = cache.y,
          width = cache.width,
          height = cache.height,
          page = cache.page,
          bbox = cache.bbox; // 计算顶点坐标和纹理坐标，转换[0,1]对应关系

      var bx = bbox[0],
          by = bbox[1];
      var xa = bx + (dx || 0),
          ya = by + height + (dy || 0);
      var xb = bx + width + (dx || 0),
          yb = by + (dy || 0);

      var _calPoint = calPoint$2([xa, ya], matrix),
          _calPoint2 = _slicedToArray(_calPoint, 4),
          x1 = _calPoint2[0],
          y1 = _calPoint2[1],
          w1 = _calPoint2[3];

      var _calPoint3 = calPoint$2([xb, ya], matrix),
          _calPoint4 = _slicedToArray(_calPoint3, 4),
          x2 = _calPoint4[0],
          y2 = _calPoint4[1],
          w2 = _calPoint4[3];

      var _calPoint5 = calPoint$2([xb, yb], matrix),
          _calPoint6 = _slicedToArray(_calPoint5, 4),
          x3 = _calPoint6[0],
          y3 = _calPoint6[1],
          w3 = _calPoint6[3];

      var _calPoint7 = calPoint$2([xa, yb], matrix),
          _calPoint8 = _slicedToArray(_calPoint7, 4),
          x4 = _calPoint8[0],
          y4 = _calPoint8[1],
          w4 = _calPoint8[3];

      var _convertCoords2Gl = convertCoords2Gl([x1, y1, 0, w1], cx, cy, revertY);

      var _convertCoords2Gl2 = _slicedToArray(_convertCoords2Gl, 2);

      x1 = _convertCoords2Gl2[0];
      y1 = _convertCoords2Gl2[1];

      var _convertCoords2Gl3 = convertCoords2Gl([x2, y2, 0, w2], cx, cy, revertY);

      var _convertCoords2Gl4 = _slicedToArray(_convertCoords2Gl3, 2);

      x2 = _convertCoords2Gl4[0];
      y2 = _convertCoords2Gl4[1];

      var _convertCoords2Gl5 = convertCoords2Gl([x3, y3, 0, w3], cx, cy, revertY);

      var _convertCoords2Gl6 = _slicedToArray(_convertCoords2Gl5, 2);

      x3 = _convertCoords2Gl6[0];
      y3 = _convertCoords2Gl6[1];

      var _convertCoords2Gl7 = convertCoords2Gl([x4, y4, 0, w4], cx, cy, revertY);

      var _convertCoords2Gl8 = _slicedToArray(_convertCoords2Gl7, 2);

      x4 = _convertCoords2Gl8[0];
      y4 = _convertCoords2Gl8[1];
      vtPoint.push(x1, y1, 0, w1, x4, y4, 0, w4, x2, y2, 0, w2, x4, y4, 0, w4, x2, y2, 0, w2, x3, y3, 0, w3);
      var tx1 = x / page.width,
          ty1 = (y + height) / page.height;
      var tx2 = (x + width) / page.width,
          ty2 = y / page.height;
      vtTex.push(tx1, ty1, tx1, ty2, tx2, ty1, tx1, ty2, tx2, ty1, tx2, ty2);
      vtOpacity.push(opacity, opacity, opacity, opacity, opacity, opacity);
      record[0]++;
    }); // 顶点buffer

    var pointBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, pointBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vtPoint), gl.STATIC_DRAW);
    var a_position = gl.getAttribLocation(gl.program, 'a_position');
    gl.vertexAttribPointer(a_position, 4, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_position); // 纹理buffer

    var texBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vtTex), gl.STATIC_DRAW);
    var a_texCoords = gl.getAttribLocation(gl.program, 'a_texCoords');
    gl.vertexAttribPointer(a_texCoords, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_texCoords); // opacity buffer

    var opacityBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, opacityBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vtOpacity), gl.STATIC_DRAW);
    var a_opacity = gl.getAttribLocation(gl.program, 'a_opacity');
    gl.vertexAttribPointer(a_opacity, 1, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_opacity); // 纹理单元

    var u_texture = gl.getUniformLocation(gl.program, 'u_texture');
    var count = 0; // 循环按批次渲染

    stack.forEach(function (record) {
      var _record = _slicedToArray(record, 2),
          num = _record[0],
          channel = _record[1];

      gl.uniform1i(u_texture, channel);
      num *= 6;
      gl.drawArrays(gl.TRIANGLES, count, num);
      count += num;
    });
    gl.deleteBuffer(pointBuffer);
    gl.deleteBuffer(texBuffer);
    gl.deleteBuffer(opacityBuffer);
    gl.disableVertexAttribArray(a_position);
    gl.disableVertexAttribArray(a_texCoords);
    gl.disableVertexAttribArray(a_opacity);
  }
  /**
   * https://www.w3.org/TR/2018/WD-filter-effects-1-20181218/#feGaussianBlurElement
   * 根据cacheTotal生成cacheFilter，按照css规范的优化方法执行3次，避免卷积核扩大3倍性能慢
   * x/y方向分开执行，加速性能，计算次数由d*d变为d+d，d为卷积核大小
   * spread由d和sigma计算得出，d由sigma计算得出，sigma即css的blur()参数
   * 规范的优化方法对d的值分奇偶优化，这里再次简化，d一定是奇数，即卷积核大小
   * i和j为total和filter的纹理单元，3次执行（x/y合起来算1次）需互换单元，来回执行源和结果
   * 由total变为filter时cache会各方向上扩展spread的大小到width/height
   * 因此第一次绘制时坐标非1，后面则固定1
   * @param gl
   * @param program
   * @param frameBuffer
   * @param texCache
   * @param tex1 初次绘制目标纹理
   * @param tex2 初次绘制源纹理
   * @param i 初次绘制目标纹理单元
   * @param j 初次绘制源纹理单元
   * @param width
   * @param height
   * @param cx
   * @param cy
   * @param spread
   * @param d
   * @param sigma
   */


  function drawBlur(gl, program, frameBuffer, texCache, tex1, tex2, i, j, width, height, cx, cy, spread, d, sigma) {
    // 第一次将total绘制到blur上，此时尺寸存在spread差值，因此不加模糊防止坐标计算问题，仅作为扩展纹理尺寸
    var _convertCoords2Gl9 = convertCoords2Gl([spread, height - spread], cx, cy),
        _convertCoords2Gl10 = _slicedToArray(_convertCoords2Gl9, 2),
        x1 = _convertCoords2Gl10[0],
        y2 = _convertCoords2Gl10[1];

    var _convertCoords2Gl11 = convertCoords2Gl([width - spread, spread], cx, cy),
        _convertCoords2Gl12 = _slicedToArray(_convertCoords2Gl11, 2),
        x2 = _convertCoords2Gl12[0],
        y1 = _convertCoords2Gl12[1]; // 顶点buffer


    var pointBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, pointBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([x1, y1, x1, y2, x2, y1, x1, y2, x2, y1, x2, y2]), gl.STATIC_DRAW);
    var a_position = gl.getAttribLocation(program, 'a_position');
    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_position); // 纹理buffer

    var texBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1]), gl.STATIC_DRAW);
    var a_texCoords = gl.getAttribLocation(program, 'a_texCoords');
    gl.vertexAttribPointer(a_texCoords, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_texCoords); // direction全0，即无模糊，此时只是进行扩展尺寸操作，还没到模糊所以传0

    var u_direction = gl.getUniformLocation(program, 'u_direction');
    gl.uniform2f(u_direction, 0, 0); // 纹理单元

    var u_texture = gl.getUniformLocation(program, 'u_texture');
    gl.uniform1i(u_texture, j);
    gl.drawArrays(gl.TRIANGLES, 0, 6); // fbo绑定切换纹理对象和单元索引，同时注意不能向源纹理绘制，因为源是cacheTotal，需要重新生成一个，y方向再来一次

    gl.bindBuffer(gl.ARRAY_BUFFER, pointBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1]), gl.STATIC_DRAW);
    /**
     * 反复执行共3次，坐标等均不变，只是切换fbo绑定对象和纹理单元
     * 注意max和ratio的设置，当是100尺寸的正方形时，传给direction的始终为1
     * 当正方形<100时，direction相应地要扩大相对于100的倍数，反之则缩小，如此为了取相邻点坐标时是+-1
     * 当非正方形时，长轴一端为基准值不变，短的要二次扩大比例倍数
     */

    var max = 100 / Math.max(width, height);
    var ratio = width / height;
    var recycle = []; // 3次过程中新生成的中间纹理需要回收

    for (var k = 0; k < 3; k++) {
      var tex3 = createTexture(gl, null, j, width, height);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex3, 0);

      if (width >= height) {
        gl.uniform2f(u_direction, max, 0);
      } else {
        gl.uniform2f(u_direction, max * ratio, 0);
      }

      gl.uniform1i(u_texture, i);
      gl.drawArrays(gl.TRIANGLES, 0, 6);
      recycle.push(tex1);
      var tex4 = createTexture(gl, null, i, width, height);
      gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex4, 0);

      if (width >= height) {
        gl.uniform2f(u_direction, 0, max * ratio);
      } else {
        gl.uniform2f(u_direction, 0, max);
      }

      gl.uniform1i(u_texture, j);
      gl.drawArrays(gl.TRIANGLES, 0, 6);
      tex1 = tex4;
      recycle.push(tex3);
    } // 回收


    gl.deleteBuffer(pointBuffer);
    gl.deleteBuffer(texBuffer);
    gl.disableVertexAttribArray(a_position);
    gl.disableVertexAttribArray(a_texCoords);
    recycle.forEach(function (item) {
      return gl.deleteTexture(item);
    });
    return tex1;
  }

  function drawCm(gl, program, i, m) {
    // 顶点buffer
    var pointBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, pointBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1]), gl.STATIC_DRAW);
    var a_position = gl.getAttribLocation(program, 'a_position');
    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_position); // 纹理buffer

    var texBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1]), gl.STATIC_DRAW);
    var a_texCoords = gl.getAttribLocation(program, 'a_texCoords');
    gl.vertexAttribPointer(a_texCoords, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_texCoords); // 纹理单元

    var u_texture = gl.getUniformLocation(program, 'u_texture');
    gl.uniform1i(u_texture, i); // matrix

    var u_m = gl.getUniformLocation(program, 'u_m');
    gl.uniform1fv(u_m, new Float32Array(m));
    gl.drawArrays(gl.TRIANGLES, 0, 6); // 回收

    gl.deleteBuffer(pointBuffer);
    gl.deleteBuffer(texBuffer);
    gl.disableVertexAttribArray(a_position);
    gl.disableVertexAttribArray(a_texCoords);
  }
  /**
   * 根据total/filter生成overflow
   * @param gl
   * @param i 输入纹理单元
   * @param dx 二者偏移值
   * @param dy
   * @param width 最终大小
   * @param height
   * @param w 输入纹理大小
   * @param h
   */


  function drawOverflow(gl, i, dx, dy, width, height, w, h) {
    // 顶点buffer
    var pointBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, pointBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1]), gl.STATIC_DRAW);
    var a_position = gl.getAttribLocation(gl.programOverflow, 'a_position');
    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_position); // 纹理buffer，原本大小width/height，使用其中的w/h

    var x1 = dx / w,
        y1 = dy / h,
        x2 = (width + dx) / w,
        y2 = (height + dy) / h;
    var texBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([x1, y1, x1, y2, x2, y1, x1, y2, x2, y1, x2, y2]), gl.STATIC_DRAW);
    var a_texCoords = gl.getAttribLocation(gl.programOverflow, 'a_texCoords');
    gl.vertexAttribPointer(a_texCoords, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_texCoords); // 纹理单元

    var u_texture = gl.getUniformLocation(gl.programOverflow, 'u_texture');
    gl.uniform1i(u_texture, i);
    gl.drawArrays(gl.TRIANGLES, 0, 6);
    gl.deleteBuffer(pointBuffer);
  }

  function drawMask(gl, i, j, program) {
    // 顶点buffer
    var pointBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, pointBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1]), gl.STATIC_DRAW);
    var a_position = gl.getAttribLocation(program, 'a_position');
    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_position); // 纹理buffer

    var texBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1]), gl.STATIC_DRAW);
    var a_texCoords = gl.getAttribLocation(program, 'a_texCoords');
    gl.vertexAttribPointer(a_texCoords, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_texCoords); // 纹理单元

    var u_texture1 = gl.getUniformLocation(program, 'u_texture1');
    gl.uniform1i(u_texture1, j);
    var u_texture2 = gl.getUniformLocation(program, 'u_texture2');
    gl.uniform1i(u_texture2, i);
    gl.drawArrays(gl.TRIANGLES, 0, 6);
    gl.deleteBuffer(pointBuffer);
    gl.deleteBuffer(texBuffer);
    gl.disableVertexAttribArray(a_position);
    gl.disableVertexAttribArray(a_texCoords);
  }

  function drawMbm(gl, program, i, j, W, H) {
    // 顶点buffer
    var pointBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, pointBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1]), gl.STATIC_DRAW);
    var a_position = gl.getAttribLocation(program, 'a_position');
    gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_position); // 纹理buffer

    var texBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, texBuffer);
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1]), gl.STATIC_DRAW);
    var a_texCoords = gl.getAttribLocation(program, 'a_texCoords');
    gl.vertexAttribPointer(a_texCoords, 2, gl.FLOAT, false, 0, 0);
    gl.enableVertexAttribArray(a_texCoords); // 纹理单元

    var u_texture1 = gl.getUniformLocation(program, 'u_texture1');
    gl.uniform1i(u_texture1, i);
    var u_texture2 = gl.getUniformLocation(program, 'u_texture2');
    gl.uniform1i(u_texture2, j);
    gl.drawArrays(gl.TRIANGLES, 0, 6);
    gl.deleteBuffer(pointBuffer);
    gl.deleteBuffer(texBuffer);
    gl.disableVertexAttribArray(a_position);
    gl.disableVertexAttribArray(a_texCoords);
  }

  var webgl = {
    initShaders: initShaders,
    createTexture: createTexture,
    bindTexture: bindTexture,
    drawTextureCache: drawTextureCache,
    drawBlur: drawBlur,
    drawOverflow: drawOverflow,
    drawMask: drawMask,
    drawMbm: drawMbm,
    drawCm: drawCm
  };

  var SPF = 1000 / 60;
  var CANVAS = {};
  var WEBGL = {};
  var CANVAS_LIST = [];
  var WEBGL_LIST = [];
  var SUPPORT_OFFSCREEN_CANVAS = typeof OffscreenCanvas === 'function' && util.isFunction(OffscreenCanvas.prototype.getContext);
  var defaultFontFamilyData;

  function cache(key, width, height, hash, message) {
    var o;

    if (!key) {
      var target = hash === CANVAS ? CANVAS_LIST : WEBGL_LIST;

      if (target.length) {
        o = target.pop();
      } else {
        o = !debug.flag && SUPPORT_OFFSCREEN_CANVAS ? new OffscreenCanvas(width, height) : document.createElement('canvas');
      }
    } else if (!hash[key]) {
      o = hash[key] = !debug.flag && SUPPORT_OFFSCREEN_CANVAS ? new OffscreenCanvas(width, height) : document.createElement('canvas');
    } else {
      o = hash[key];
    }

    o.width = width;
    o.height = height;

    if (debug.flag) {
      o.style.width = width + 'px';
      o.style.height = height + 'px';
      o.setAttribute('type', hash === CANVAS ? 'canvas' : 'webgl');

      if (key) {
        o.setAttribute('key', key);
      }

      if (message) {
        o.setAttribute('message', message);
      }

      document.body.appendChild(o);
    }

    var ctx;

    if (hash === CANVAS) {
      ctx = o.getContext('2d');
    } else {
      ctx = o.getContext('webgl', ca) || o.getContext('experimental-webgl', ca);
    }

    return {
      canvas: o,
      ctx: ctx,
      draw: function draw() {// 空函数，仅对小程序提供hook特殊处理，flush缓冲
      },
      enabled: true,
      available: true,
      release: function release() {
        if (!key && this.available) {
          if (hash === CANVAS) {
            CANVAS_LIST.push(this.canvas);
          } else {
            WEBGL_LIST.push(this.canvas);
          }
        }

        this.available = false;
      }
    };
  }

  function cacheCanvas(key, width, height, message) {
    return cache(key, width, height, CANVAS, message);
  }

  function cacheWebgl(key, width, height, message) {
    return cache(key, width, height, WEBGL, message);
  }

  var IMG = {};
  var INIT = 0;
  var LOADING = 1;
  var LOADED = 2;
  var FONT = {};
  var COMPONENT = {};
  var inject = {
    measureText: function measureText() {
      var list = textCache.list,
          data = textCache.data;
      var html = '';
      var keys = [];
      var lengths = [];
      var chars = [];
      Object.keys(data).forEach(function (key) {
        var _data$key = data[key],
            ff = _data$key.ff,
            fs = _data$key.fs,
            fw = _data$key.fw,
            s = _data$key.s;

        if (s) {
          keys.push(key);
          lengths.push(s.length);
          var inline = "position:absolute;font-family:".concat(ff, ";font-size:").concat(fs, "px;font-weight:").concat(fw);

          for (var i = 0, len = s.length; i < len; i++) {
            var _char = s.charAt(i);

            chars.push(_char);
            html += "<span style=\"".concat(inline, "\">").concat(_char.replace(/</, '&lt;').replace(' ', '&nbsp;'), "</span>");
          }

          data[key].s = '';
        }
      });

      if (!html) {
        return;
      }

      var div = document.createElement('div');
      div.style.position = 'absolute';
      div.style.left = '99999px';
      div.style.top = '-99999px';
      div.style.visibility = 'hidden';
      document.body.appendChild(div);
      div.innerHTML = html;
      var cns = div.childNodes;
      var charWidth = textCache.charWidth;
      var count = 0,
          index = 0,
          key;

      for (var i = 0, len = cns.length; i < len; i++) {
        var node = cns[i];

        if (count === 0) {
          key = keys[index];
        }

        if (++count === lengths[index]) {
          index++;
          count = 0;
        }

        var _char2 = chars[i]; // clientWidth只返回ceil整数，精度必须用getComputedStyle

        var css = window.getComputedStyle(node, null);
        charWidth[key][_char2] = parseFloat(css.width);
      }

      list.forEach(function (text) {
        return text.__measureCb();
      });
      textCache.list = [];
      textCache.data = {};

      if (!debug.flag) {
        document.body.removeChild(div);
      }
    },
    measureTextSync: function measureTextSync(key, ff, fs, fw, _char3) {
      var inline = "position:absolute;font-family:".concat(ff, ";font-size:").concat(fs, "px;font-weight:").concat(fw);
      var html = "<span style=\"".concat(inline, "\">").concat(_char3, "</span><span style=\"").concat(inline, "\">").concat(_char3).concat(_char3, "</span>");
      var div = document.createElement('div');
      div.style.position = 'absolute';
      div.style.left = '99999px';
      div.style.top = '-99999px';
      div.style.visibility = 'hidden';
      document.body.appendChild(div);
      div.innerHTML = html;
      var cns = div.childNodes;
      var w1 = parseFloat(window.getComputedStyle(cns[0], null).width);
      var w2 = parseFloat(window.getComputedStyle(cns[1], null).width);
      return w1 * 2 - w2;
    },
    IMG: IMG,
    INIT: INIT,
    LOADED: LOADED,
    LOADING: LOADING,
    measureImg: function measureImg(url, cb) {
      if (Array.isArray(url)) {
        if (!url.length) {
          return cb();
        }

        var count = 0;
        var len = url.length;
        var list = [];
        url.forEach(function (item, i) {
          inject.measureImg(item, function (cache) {
            list[i] = cache;

            if (++count === len) {
              cb(list);
            }
          });
        });
        return;
      } else if (!url || !util.isString(url)) {
        inject.error('Measure img invalid: ' + url);
        cb && cb({
          state: LOADED,
          success: false,
          url: url
        });
        return;
      }

      var cache = IMG[url] = IMG[url] || {
        state: INIT,
        task: []
      };

      if (cache.state === LOADED) {
        cb && cb(cache);
      } else if (cache.state === LOADING) {
        cb && cache.task.push(cb);
      } else {
        cache.state = LOADING;
        cb && cache.task.push(cb);
        var img = new Image();

        img.onload = function () {
          cache.state = LOADED;
          cache.success = true;
          cache.width = img.width;
          cache.height = img.height;
          cache.source = img;
          cache.url = url;
          var list = cache.task.splice(0);
          list.forEach(function (cb) {
            return cb(cache);
          });
        };

        img.onerror = function (e) {
          cache.state = LOADED;
          cache.success = false;
          cache.url = url;
          var list = cache.task.splice(0);
          list.forEach(function (cb) {
            return cb(cache);
          });
        };

        if (url.substr(0, 5) !== 'data:') {
          var host = /^(?:\w+:)?\/\/([^/:]+)/.exec(url);

          if (host) {
            if (typeof location === 'undefined' || location.hostname !== host[1]) {
              img.crossOrigin = 'anonymous';
            }
          }
        }

        img.src = url;

        if (debug.flag && typeof document !== 'undefined') {
          document.body.appendChild(img);
        }
      }
    },
    warn: function warn(s) {
      console.warn(s);
    },
    error: function error(s) {
      console.error(s);
    },
    requestAnimationFrame: function (_requestAnimationFrame) {
      function requestAnimationFrame(_x) {
        return _requestAnimationFrame.apply(this, arguments);
      }

      requestAnimationFrame.toString = function () {
        return _requestAnimationFrame.toString();
      };

      return requestAnimationFrame;
    }(function (cb) {
      if (!cb) {
        return;
      }

      var res;

      if (typeof requestAnimationFrame !== 'undefined') {
        inject.requestAnimationFrame = requestAnimationFrame.bind(window);
        res = requestAnimationFrame(cb);
      } else {
        res = setTimeout(cb, SPF);

        inject.requestAnimationFrame = function (cb) {
          return setTimeout(cb, SPF);
        };
      }

      return res;
    }),
    cancelAnimationFrame: function (_cancelAnimationFrame) {
      function cancelAnimationFrame(_x2) {
        return _cancelAnimationFrame.apply(this, arguments);
      }

      cancelAnimationFrame.toString = function () {
        return _cancelAnimationFrame.toString();
      };

      return cancelAnimationFrame;
    }(function (id) {
      var res;

      if (typeof cancelAnimationFrame !== 'undefined') {
        inject.cancelAnimationFrame = cancelAnimationFrame.bind(window);
        res = cancelAnimationFrame(id);
      } else {
        res = clearTimeout(id);

        inject.cancelAnimationFrame = function (id) {
          return clearTimeout(id);
        };
      }

      return res;
    }),
    now: function now() {
      if (typeof performance !== 'undefined') {
        inject.now = function () {
          return Math.floor(performance.now());
        };

        return Math.floor(performance.now());
      }

      inject.now = Date.now.bind(Date);
      return Date.now();
    },
    hasCacheCanvas: function hasCacheCanvas(key) {
      return key && CANVAS.hasOwnProperty(key);
    },
    getCacheCanvas: function getCacheCanvas(width, height, key, message) {
      return cacheCanvas(key, width, height, message);
    },
    releaseCacheCanvas: function releaseCacheCanvas(o) {
      CANVAS_LIST.push(o);
    },
    delCacheCanvas: function delCacheCanvas(key) {
      key && delete CANVAS[key];
    },
    hasCacheWebgl: function hasCacheWebgl(key) {
      return key && WEBGL.hasOwnProperty(key);
    },
    getCacheWebgl: function getCacheWebgl(width, height, key, message) {
      return cacheWebgl(key, width, height, message);
    },
    releaseCacheWebgl: function releaseCacheWebgl(o) {
      WEBGL_LIST.push(o);
    },
    delCacheWebgl: function delCacheWebgl(key) {
      key && delete WEBGL[key];
    },
    isDom: function isDom(o) {
      if (o) {
        if (util.isString(o)) {
          return true;
        }

        if (typeof window !== 'undefined' && window.Element && o instanceof window.Element) {
          return true;
        }

        if (typeof window !== 'undefined' && window.OffscreenCanvas && o instanceof window.OffscreenCanvas) {
          return true;
        } // worker


        if (typeof self !== 'undefined' && self.OffscreenCanvas && o instanceof self.OffscreenCanvas) {
          return true;
        }

        if (util.isFunction(o.getElementsByTagName)) {
          return true;
        }
      }

      return false;
    },
    isWebGLTexture: function isWebGLTexture(o) {
      if (o && typeof WebGLTexture !== 'undefined') {
        return o instanceof WebGLTexture;
      }
    },
    checkSupportFontFamily: function checkSupportFontFamily(ff) {
      ff = ff.toLowerCase(); // 强制arial兜底

      if (ff === 'arial' || ff === 'serif' || ff === 'sans-serif' || ff === 'sansserif') {
        return true;
      }

      if (!o$1.info.hasOwnProperty(ff)) {
        return false;
      }

      if (o$1.info[ff].hasOwnProperty('checked')) {
        return o$1.info[ff].checked;
      }

      var canvas = inject.getCacheCanvas(16, 16, '__$$CHECK_SUPPORT_FONT_FAMILY$$__');
      var context = canvas.ctx;
      context.textAlign = 'center';
      context.fillStyle = '#000';
      context.textBaseline = 'middle';

      if (!defaultFontFamilyData) {
        context.clearRect(0, 0, 16, 16);
        context.font = '16px arial';
        context.fillText('a', 8, 8);
        canvas.draw();
        defaultFontFamilyData = context.getImageData(0, 0, 16, 16).data;
      }

      context.clearRect(0, 0, 16, 16);
      context.font = '16px ' + ff;
      context.fillText('a', 8, 8);
      canvas.draw();
      var data = context.getImageData(0, 0, 16, 16).data;

      for (var i = 0, len = data.length; i < len; i++) {
        if (defaultFontFamilyData[i] !== data[i]) {
          return o$1.info[ff].checked = true;
        }
      }

      return o$1.info[ff].checked = false;
    },
    loadFont: function loadFont(url, cb) {
      if (Array.isArray(url)) {
        if (!url.length) {
          return cb();
        }

        var count = 0;
        var len = url.length;
        var list = [];
        url.forEach(function (item, i) {
          inject.loadFont(item, function (cache) {
            list[i] = cache;

            if (++count === len) {
              cb(list);
            }
          });
        });
        return;
      } else if (!url || !util.isString(url)) {
        inject.error('Load font invalid: ' + url);
        cb && cb({
          state: LOADED,
          success: false,
          url: url
        });
        return;
      }

      var cache = FONT[url] = FONT[url] || {
        state: INIT,
        task: []
      };

      if (cache.state === LOADED) {
        cb && cb(cache);
      } else if (cache.state === LOADING) {
        cb && cache.task.push(cb);
      } else {
        cache.state = LOADING;
        cb && cache.task.push(cb);
        var f = new FontFace(url, "url(".concat(url, ")"));
        f.load().then(function () {
          cache.state = LOADED;
          cache.success = true;
          cache.url = url;
          var list = cache.task.splice(0);
          list.forEach(function (cb) {
            return cb(cache);
          });
        })["catch"](function () {
          cache.state = LOADED;
          cache.success = false;
          cache.url = url;
          var list = cache.task.splice(0);
          list.forEach(function (cb) {
            return cb(cache);
          });
        });
      }
    },
    loadComponent: function loadComponent(url, cb) {
      if (Array.isArray(url)) {
        if (!url.length) {
          return cb();
        }

        var count = 0;
        var len = url.length;
        var list = [];
        url.forEach(function (item, i) {
          inject.loadComponent(item, function (cache) {
            list[i] = cache;

            if (++count === len) {
              cb(list);
            }
          });
        });
        return;
      } else if (!url || !util.isString(url)) {
        inject.error('Load component invalid: ' + url);
        cb && cb({
          state: LOADED,
          success: false,
          url: url
        });
        return;
      }

      var cache = COMPONENT[url] = COMPONENT[url] || {
        state: INIT,
        task: []
      };

      if (cache.state === LOADED) {
        cb && cb(cache);
      } else if (cache.state === LOADING) {
        cb && cache.task.push(cb);
      } else {
        cache.state = LOADING;
        cb && cache.task.push(cb);
        var script = document.createElement('script');
        script.src = url;
        script.async = true;

        script.onload = function () {
          cache.state = LOADED;
          cache.success = true;
          cache.url = url;
          var list = cache.task.splice(0);
          list.forEach(function (cb) {
            return cb(cache);
          });
          document.head.removeChild(script);
        };

        script.onerror = function () {
          cache.state = LOADED;
          cache.success = false;
          cache.url = url;
          var list = cache.task.splice(0);
          list.forEach(function (cb) {
            return cb(cache);
          });
          document.head.removeChild(script);
        };

        document.head.appendChild(script);
      }
    }
  };

  var rgba2int$1 = util.rgba2int,
      isNil$1 = util.isNil;
  var PX$1 = o.PX,
      PERCENT$1 = o.PERCENT,
      DEG = o.DEG,
      NUMBER = o.NUMBER,
      REM$1 = o.REM,
      VW$1 = o.VW,
      VH$1 = o.VH,
      VMAX$1 = o.VMAX,
      VMIN$1 = o.VMIN,
      calUnit = o.calUnit;
  var d2r$1 = geom.d2r;
  var canvasPolygon$2 = painter.canvasPolygon,
      svgPolygon$2 = painter.svgPolygon;
  var FONT_SIZE$1 = enums.STYLE_KEY.FONT_SIZE,
      NODE_DEFS_CACHE = enums.NODE_KEY.NODE_DEFS_CACHE;

  function getLinearDeg(v) {
    var deg = 180;

    if (v === 'to top') {
      deg = 0;
    } else if (v === 'to top right') {
      deg = 45;
    } else if (v === 'to right') {
      deg = 90;
    } else if (v === 'to bottom right') {
      deg = 135;
    } else if (v === 'to bottom') ; else if (v === 'to bottom left') {
      deg = 225;
    } else if (v === 'to left') {
      deg = 270;
    } else if (v === 'to top left') {
      deg = 315;
    } // 数字角度，没有的话取默认角度
    else {
        var match = /([-+]?[\d.]+)deg/.exec(v);

        if (match) {
          deg = parseFloat(match[1]);
        }
      }

    return deg % 360;
  }

  function getRadialPosition(data) {
    if (/^[-+]?[\d.]/.test(data)) {
      var v = calUnit(data);

      if ([NUMBER, DEG].indexOf(v[1]) > -1) {
        v[1] = PX$1;
      }

      return v;
    } else {
      return [{
        top: 0,
        left: 0,
        center: 50,
        right: 100,
        bottom: 100
      }[data] || 50, PERCENT$1];
    }
  } // 获取color-stop区间范围，去除无用值


  function getColorStop(v, length, root) {
    var list = [];
    var firstColor = v[0][0]; // 先把已经声明距离的换算成[0,1]以数组形式存入，未声明的原样存入

    for (var i = 0, len = v.length; i < len; i++) {
      var item = v[i]; // 考虑是否声明了位置

      if (item.length > 1) {
        var p = item[1];

        if (p[1] === PERCENT$1) {
          list.push([item[0], p[0] * 0.01]);
        } else if (p[1] === REM$1) {
          list.push([item[0], p[0] * root.computedStyle[FONT_SIZE$1] / length]);
        } else if (p[1] === VW$1) {
          list.push([item[0], p[0] * root.width / length]);
        } else if (p[1] === VH$1) {
          list.push([item[0], p[0] * root.height / length]);
        } else if (p[1] === VMAX$1) {
          list.push([item[0], p[0] * Math.max(root.width, root.height) / length]);
        } else if (p[1] === VMIN$1) {
          list.push([item[0], p[0] * Math.min(root.width, root.height) / length]);
        } else {
          list.push([item[0], p[0] / length]);
        }
      } else {
        list.push([item[0]]);
      }
    }

    if (list.length === 1) {
      list.push(util.clone(list[0]));
    } // 首尾不声明默认为[0, 1]


    if (list[0].length === 1) {
      list[0].push(0);
    }

    if (list.length > 1) {
      var _i = list.length - 1;

      if (list[_i].length === 1) {
        list[_i].push(1);
      }
    } // 找到未声明位置的，需区间计算，找到连续的未声明的，前后的区间平分


    var start = list[0][1];

    for (var _i2 = 1, _len = list.length; _i2 < _len - 1; _i2++) {
      var _item = list[_i2];

      if (_item.length > 1) {
        start = _item[1];
      } else {
        var j = _i2 + 1;
        var end = list[list.length - 1][1];

        for (; j < _len - 1; j++) {
          var _item2 = list[j];

          if (_item2.length > 1) {
            end = _item2[1];
            break;
          }
        }

        var num = j - _i2 + 1;
        var per = (end - start) / num;

        for (var k = _i2; k < j; k++) {
          var _item3 = list[k];

          _item3.push(start + per * (k + 1 - _i2));
        }

        _i2 = j;
      }
    } // 每个不能小于前面的，canvas/svg不能兼容这种情况，需处理


    for (var _i3 = 1, _len2 = list.length; _i3 < _len2; _i3++) {
      var _item4 = list[_i3];
      var prev = list[_i3 - 1];

      if (_item4[1] < prev[1]) {
        _item4[1] = prev[1];
      }
    } // 0之前的和1之后的要过滤掉


    for (var _i4 = 0, _len3 = list.length; _i4 < _len3; _i4++) {
      var _item5 = list[_i4];

      if (_item5[1] > 1) {
        list.splice(_i4);
        var _prev = list[_i4 - 1];

        if (_prev && _prev[1] < 1) {
          var dr = _item5[0][0] - _prev[0][0];
          var dg = _item5[0][1] - _prev[0][1];
          var db = _item5[0][2] - _prev[0][2];
          var da = _item5[0][3] - _prev[0][3];

          var _p = (1 - _prev[1]) / (_item5[1] - _prev[1]);

          list.push([[_item5[0][0] + dr * _p, _item5[0][1] + dg * _p, _item5[0][2] + db * _p, _item5[0][3] + da * _p], 1]);
        }

        break;
      }
    }

    for (var _i5 = list.length - 1; _i5 >= 0; _i5--) {
      var _item6 = list[_i5];

      if (_item6[1] < 0) {
        list.splice(0, _i5 + 1);
        var next = list[_i5];

        if (next && next[1] > 0) {
          var _dr = next[0][0] - _item6[0][0];

          var _dg = next[0][1] - _item6[0][1];

          var _db = next[0][2] - _item6[0][2];

          var _da = next[0][3] - _item6[0][3];

          var _p2 = -_item6[1] / (next[1] - _item6[1]);

          list.unshift([[_item6[0][0] + _dr * _p2, _item6[0][1] + _dg * _p2, _item6[0][2] + _db * _p2, _item6[0][3] + _da * _p2], 0]);
        }

        break;
      }
    } // 可能存在超限情况，如在使用px单位超过len或<len时，canvas会报错超过[0,1]区间，需手动换算至区间内


    list.forEach(function (item) {
      // item[0] = int2rgba(item[0]);
      if (item[1] < 0) {
        item[1] = 0;
      } else if (item[1] > 1) {
        item[1] = 1;
      }
    }); // 都超限时，第一个颜色兜底

    if (!list.length) {
      list.push([firstColor, 0]);
    }

    return list;
  } // 根据角度和圆心获取渐变的4个点坐标


  function calLinearCoords(deg, length, cx, cy) {
    var x0;
    var y0;
    var x1;
    var y1;

    if (deg >= 270) {
      var r = d2r$1(360 - deg);
      x0 = cx + Math.sin(r) * length;
      y0 = cy + Math.cos(r) * length;
      x1 = cx - Math.sin(r) * length;
      y1 = cy - Math.cos(r) * length;
    } else if (deg >= 180) {
      var _r = d2r$1(deg - 180);

      x0 = cx + Math.sin(_r) * length;
      y0 = cy - Math.cos(_r) * length;
      x1 = cx - Math.sin(_r) * length;
      y1 = cy + Math.cos(_r) * length;
    } else if (deg >= 90) {
      var _r2 = d2r$1(180 - deg);

      x0 = cx - Math.sin(_r2) * length;
      y0 = cy - Math.cos(_r2) * length;
      x1 = cx + Math.sin(_r2) * length;
      y1 = cy + Math.cos(_r2) * length;
    } else {
      var _r3 = d2r$1(deg);

      x0 = cx - Math.sin(_r3) * length;
      y0 = cy + Math.cos(_r3) * length;
      x1 = cx + Math.sin(_r3) * length;
      y1 = cy - Math.cos(_r3) * length;
    }

    return [x0, y0, x1, y1];
  }

  function calCircleCentre(position, x1, y1, iw, ih, root) {
    var cx, cy;
    var positionX = position[0],
        positionY = position[1];

    if (positionX[1] === PERCENT$1) {
      cx = x1 + positionX[0] * iw * 0.01;
    } else if (positionX[1] === REM$1) {
      cx = x1 + positionX[0] * root.computedStyle[FONT_SIZE$1];
    } else if (positionX[1] === VW$1) {
      cx = x1 + positionX[0] * root.width * 0.01;
    } else if (positionX[1] === VH$1) {
      cx = x1 + positionX[0] * root.height * 0.01;
    } else if (positionX[1] === VMAX$1) {
      cx = x1 + positionX[0] * Math.max(root.width, root.height) * 0.01;
    } else if (positionX[1] === VMIN$1) {
      cx = x1 + positionX[0] * Math.min(root.width, root.height) * 0.01;
    } else {
      cx = x1 + positionX[0];
    }

    if (positionY[1] === PERCENT$1) {
      cy = y1 + positionY[0] * ih * 0.01;
    } else if (positionY[1] === REM$1) {
      cy = y1 + positionY[0] * root.computedStyle[FONT_SIZE$1];
    } else if (positionY[1] === VW$1) {
      cy = y1 + positionY[0] * root.width * 0.01;
    } else if (positionY[1] === VH$1) {
      cy = y1 + positionY[0] * root.height * 0.01;
    } else if (positionY[1] === VH$1) {
      cy = y1 + positionY[0] * Math.max(root.width, root.height) * 0.01;
    } else if (positionY[1] === VH$1) {
      cy = y1 + positionY[0] * Math.min(root.width, root.height) * 0.01;
    } else {
      cy = y1 + positionY[0];
    }

    return [cx, cy];
  } // 获取径向渐变圆心半径


  function calRadialRadius(shape, size, position, iw, ih, x1, y1, x2, y2, root) {
    var cx,
        cy,
        xl,
        yl,
        r,
        tx,
        ty,
        d = 0; // 扩展的from to ratio格式，圆心、长轴坐标、短轴缩放比

    if (Array.isArray(size)) {
      cx = x1 + size[0] * iw;
      cy = y1 + size[1] * ih;
      tx = x1 + size[4] * iw;
      ty = y1 + size[5] * ih;

      if (size[6] <= 0) {
        r = Math.min(Math.abs(cx - x1), Math.min(Math.abs(cy - y1), Math.min(Math.abs(cy - y2), Math.min(Math.abs(cx - y2)))));
      } else {
        xl = Math.sqrt(Math.pow((size[2] - size[0]) * iw, 2) + Math.pow((size[3] - size[1]) * ih, 2));
        yl = xl * size[6];
        r = Math.max(xl, yl); // 看旋转

        if (xl !== yl) {
          if (size[2] >= size[0]) {
            if (size[3] >= size[1]) {
              d = Math.asin((size[3] - size[1]) * ih / xl);
            } else {
              d = -Math.asin((size[1] - size[3]) * ih / xl);
            }
          } else {
            if (size[3] >= size[1]) {
              d = d2r$1(180) - Math.asin((size[3] - size[1]) * ih / xl);
            } else {
              d = Math.asin((size[1] - size[3]) * ih / xl) - d2r$1(180);
            }
          }
        }
      }
    } else {
      // 默认椭圆a是水平轴，b是垂直轴
      var _calCircleCentre = calCircleCentre(position, x1, y1, iw, ih, root);

      var _calCircleCentre2 = _slicedToArray(_calCircleCentre, 2);

      cx = _calCircleCentre2[0];
      cy = _calCircleCentre2[1];
      tx = cx;
      ty = cy;
      var ratio = 1;

      if (size === 'closest-corner' && shape === 'circle') {
        if (cx <= x1 || cx >= x2 || cy <= y1 || cy >= y2) {
          r = Math.min(Math.abs(cx - x1), Math.min(Math.abs(cy - y1), Math.min(Math.abs(cy - y2), Math.min(Math.abs(cx - y2)))));
        } else {
          if (cx < x1 + iw * 0.5) {
            xl = cx - x1;
          } else {
            xl = x2 - cx;
          }

          if (cy < y1 + ih * 0.5) {
            yl = cy - y1;
          } else {
            yl = y2 - cy;
          }

          r = Math.sqrt(Math.pow(xl, 2) + Math.pow(yl, 2));
        }
      } else if (size === 'closest-side' || size === 'closest-corner') {
        // 在边外特殊情况只有end颜色填充
        if (cx <= x1 || cx >= x2 || cy <= y1 || cy >= y2) {
          r = Math.min(Math.abs(cx - x1), Math.min(Math.abs(cy - y1), Math.min(Math.abs(cy - y2), Math.min(Math.abs(cx - y2)))));
        } else {
          var _ratio = 1;

          if (cx < x1 + iw * 0.5) {
            xl = cx - x1;
          } else {
            xl = x2 - cx;
          }

          if (cy < y1 + ih * 0.5) {
            yl = cy - y1;
          } else {
            yl = y2 - cy;
          }

          r = Math.min(xl, yl); // css的角和边有对应关系，即边扩展倍数，计算为固定值

          if (size === 'closest-corner') {
            _ratio = Math.sqrt(2);
          }

          xl *= _ratio;
          yl *= _ratio;
          r *= _ratio;
        }
      } else {
        if (cx <= x1) {
          xl = x1 - cx + iw;
        } else if (cx >= x2) {
          xl = cx - x2 + iw;
        } else if (cx < x1 + iw * 0.5) {
          xl = x2 - cx;
        } else {
          xl = cx - x1;
        }

        if (cy <= y1) {
          yl = y1 - cy + ih;
        } else if (cy >= y2) {
          yl = cy - y2 + ih;
        } else if (cy < y1 + ih * 0.5) {
          yl = y2 - cy;
        } else {
          yl = cy - y1;
        }

        r = Math.max(xl, yl);

        if (size !== 'farthest-side') {
          ratio = Math.sqrt(2);
        }

        xl *= ratio;
        yl *= ratio;
        r *= ratio;
      }
    }

    if (shape === 'circle') {
      xl = yl = r;
    }

    return [cx, cy, r, xl, yl, tx, ty, d];
  }

  function parseGradient(s) {
    var gradient = reg.gradient.exec(s);

    if (gradient) {
      var o = {
        k: gradient[1]
      };

      if (o.k === 'linear') {
        var deg = /([-+]?[\d.]+deg)|(to\s+[toprighbml]+)/i.exec(gradient[2]);

        if (deg) {
          o.d = getLinearDeg(deg[0].toLowerCase());
        } // 扩展支持从a点到b点相对坐标，而不是css角度，sketch等ui软件中用此格式
        else {
            var points = /([-+]?[\d.]+)\s+([-+]?[\d.]+)\s+([-+]?[\d.]+)\s+([-+]?[\d.]+)/.exec(gradient[2]);

            if (points) {
              o.d = [parseFloat(points[1]), parseFloat(points[2]), parseFloat(points[3]), parseFloat(points[4])];
            } else {
              o.d = 180;
            }
          }
      } else if (o.k === 'radial') {
        o.s = gradient[2].indexOf('circle') > -1 ? 'circle' : 'ellipse';
        var size = /(closest|farthest)-(side|corner)/i.exec(gradient[2]);

        if (size) {
          o.z = size[0].toLowerCase();
        } // 扩展支持从a点到b点相对坐标，而不是size，sketch等ui软件中用此格式
        else {
            var _points = /([-+]?[\d.]+)\s+([-+]?[\d.]+)\s+([-+]?[\d.]+)\s+([-+]?[\d.]+)(?:\s+([-+]?[\d.]+))?(?:\s+([-+]?[\d.]+))?(?:\s+([-+]?[\d.]+))?/.exec(gradient[2]);

            if (_points) {
              o.z = [parseFloat(_points[1]), parseFloat(_points[2]), parseFloat(_points[3]), parseFloat(_points[4])];
              var i5 = !isNil$1(_points[5]),
                  i6 = !isNil$1(_points[6]),
                  i7 = !isNil$1(_points[7]); // 重载，567是偏移x/y和ratio，都可省略即不偏移和半径1，只有5是ratio，只有56是x/y

              if (i5 && i6 && i7) {
                o.z.push(parseFloat(_points[5]));
                o.z.push(parseFloat(_points[6]));
                o.z.push(parseFloat(_points[7]));
              } else if (i5 && i6) {
                o.z.push(parseFloat(_points[5]));
                o.z.push(parseFloat(_points[6]));
                o.z.push(1);
              } else if (i5) {
                o.z.push(o.z[0]);
                o.z.push(o.z[1]);
                o.z.push(parseFloat(_points[5]));
              } else {
                o.z.push(o.z[0]);
                o.z.push(o.z[1]);
                o.z.push(1);
              }
            } else {
              o.z = 'farthest-corner';
            }
          }

        var position = /at\s+((?:[-+]?[\d.]+[pxremvwhina%]*)|(?:left|top|right|bottom|center))(?:\s+((?:[-+]?[\d.]+[pxremvwhina%]*)|(?:left|top|right|bottom|center)))?/i.exec(gradient[2]);

        if (position) {
          var x = getRadialPosition(position[1]);
          var y = position[2] ? getRadialPosition(position[2]) : x;
          o.p = [x, y];
        } else {
          o.p = [[50, PERCENT$1], [50, PERCENT$1]];
        }
      } else if (o.k === 'conic') {
        var _deg = /([-+]?[\d.]+deg)/i.exec(gradient[2]);

        if (_deg) {
          o.d = parseFloat(_deg[0]) % 360;
        } else {
          o.d = 0;
        }

        var _position = /at\s+((?:[-+]?[\d.]+[pxremvwhina%]*)|(?:left|top|right|bottom|center))(?:\s+((?:[-+]?[\d.]+[pxremvwhina%]*)|(?:left|top|right|bottom|center)))?/i.exec(gradient[2]);

        if (_position) {
          var _x = getRadialPosition(_position[1]);

          var _y = _position[2] ? getRadialPosition(_position[2]) : _x;

          o.p = [_x, _y];
        } else {
          o.p = [[50, PERCENT$1], [50, PERCENT$1]];
        }
      }

      var v = gradient[2].match(/([-+]?[\d.]+[pxremvwhina%]+)?\s*((#[0-9a-f]{3,8})|(rgba?\s*\(.+?\)))\s*([-+]?[\d.]+[pxremvwhina%]+)?/ig) || [];
      o.v = v.map(function (item) {
        var color = /((?:#[0-9a-f]{3,8})|(?:rgba?\s*\(.+?\)))/i.exec(item);
        var arr = [rgba2int$1(color[1])];
        var percent = /[-+]?[\d.]+[pxremvwhina%]+/.exec(item);

        if (percent) {
          var _v = calUnit(percent[0]);

          if ([NUMBER, DEG].indexOf(_v[1]) > -1) {
            _v[1] = PX$1;
          }

          arr[1] = _v;
        }

        return arr;
      });
      return o;
    }
  }

  function getLinear(v, d, ox, oy, cx, cy, w, h, root) {
    var dx = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : 0;
    var dy = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;
    ox += dx;
    oy += dy;
    cx += dx;
    cy += dy; // d为数组是2个坐标点，数字是css标准角度

    var x1, y1, x2, y2, stop;

    if (Array.isArray(d)) {
      x1 = ox + d[0] * w;
      y1 = oy + d[1] * h;
      x2 = ox + d[2] * w;
      y2 = oy + d[3] * h;
      var total = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));
      stop = getColorStop(v, total);
    } else {
      while (d >= 360) {
        d -= 360;
      }

      while (d < 0) {
        d += 360;
      } // 根据角度求直线上2点，设置半径为长宽最大值，这样一定在矩形外，看做一个向量A


      var len = Math.max(w, h);
      var coords = calLinearCoords(d, len, cx, cy);
      len *= 2; // start和4个顶点的向量在A上的投影长度

      var l1 = vector.dotProduct(ox - coords[0], oy - coords[1], coords[2] - coords[0], coords[3] - coords[1]) / len;
      var l2 = vector.dotProduct(ox + w - coords[0], oy - coords[1], coords[2] - coords[0], coords[3] - coords[1]) / len;
      var l3 = vector.dotProduct(ox + w - coords[0], oy + h - coords[1], coords[2] - coords[0], coords[3] - coords[1]) / len;
      var l4 = vector.dotProduct(ox - coords[0], oy + h - coords[1], coords[2] - coords[0], coords[3] - coords[1]) / len; // 最小和最大值为0~100%

      var min = l1,
          max = l1;
      min = Math.min(min, Math.min(l2, Math.min(l3, l4)));
      max = Math.max(max, Math.max(l2, Math.max(l3, l4))); // 求得0和100%的长度和坐标

      var _total = max - min;

      var r1 = min / len;

      var _dx = coords[2] - coords[0];

      var _dy = coords[3] - coords[1];

      x1 = coords[0] + _dx * r1;
      y1 = coords[1] + _dy * r1;
      x2 = coords[2] - _dx * r1;
      y2 = coords[3] - _dy * r1;
      stop = getColorStop(v, _total, root);
    }

    return {
      x1: x1,
      y1: y1,
      x2: x2,
      y2: y2,
      stop: stop
    };
  }

  function getRadial(v, shape, size, position, x1, y1, x2, y2, root) {
    var w = x2 - x1;
    var h = y2 - y1;

    var _calRadialRadius = calRadialRadius(shape, size, position, w, h, x1, y1, x2, y2, root),
        _calRadialRadius2 = _slicedToArray(_calRadialRadius, 8),
        cx = _calRadialRadius2[0],
        cy = _calRadialRadius2[1],
        r = _calRadialRadius2[2],
        xl = _calRadialRadius2[3],
        yl = _calRadialRadius2[4],
        tx = _calRadialRadius2[5],
        ty = _calRadialRadius2[6],
        d = _calRadialRadius2[7]; // 圆形取最小值，椭圆根据最小圆进行transform，椭圆其中一边轴和r一样，另一边则大小缩放可能


    var matrix,
        scx = 1,
        scy = 1;

    if (xl !== yl || d) {
      matrix = [1, 0, 0, 1, 0, 0];

      if (d) {
        var sin = Math.sin(d);
        var cos = Math.cos(d);
        matrix = [cos, sin, 0, 0, -sin, cos, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
      }

      if (xl !== r) {
        scx = xl / r;
        var m = [scx, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
        matrix = mx.multiply(matrix, m);
      }

      if (yl !== r) {
        scy = yl / r;
        var _m = [1, 0, 0, 0, 0, scy, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
        matrix = mx.multiply(matrix, _m);
      }
    }

    var stop = getColorStop(v, r, root);
    return {
      cx: cx,
      cy: cy,
      tx: tx,
      ty: ty,
      r: r,
      stop: stop,
      scx: scx,
      scy: scy,
      matrix: matrix,
      d: d
    };
  }

  function getConic(v, d, p, x1, y1, x2, y2, ratio, root) {
    var _calConicRadius = calConicRadius(v, d, p, x1, y1, x2, y2, root),
        _calConicRadius2 = _slicedToArray(_calConicRadius, 4),
        cx = _calConicRadius2[0],
        cy = _calConicRadius2[1],
        r = _calConicRadius2[2],
        deg = _calConicRadius2[3];

    var stop = getColorStop(v, 1, root);
    r <<= 1; // 锥形半径*2，这样分割画圆时保证一定会填满原有矩形

    r *= ratio; // 矢量图形比较特殊，有可能超限，传入个倍数扩大半径

    return {
      cx: cx,
      cy: cy,
      w: x2 - x1,
      h: y2 - y1,
      r: r,
      deg: deg,
      stop: stop
    };
  }

  function calConicRadius(v, deg, position, x1, y1, x2, y2, root) {
    var iw = x2 - x1;
    var ih = y2 - y1;

    var _calCircleCentre3 = calCircleCentre(position, x1, y1, iw, ih, root),
        _calCircleCentre4 = _slicedToArray(_calCircleCentre3, 2),
        cx = _calCircleCentre4[0],
        cy = _calCircleCentre4[1];

    var r, a, b;

    if (cx >= x1 + iw * 0.5) {
      a = cx - x1;
    } else {
      a = x2 - cx;
    }

    if (cy >= y1 + ih * 0.5) {
      b = cy - y1;
    } else {
      b = y2 - cy;
    }

    r = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
    return [cx, cy, r, deg];
  }

  function renderConic(xom, renderMode, ctx, res, x, y, w, h, btlr, btrr, bbrr, bblr, isInline) {
    // border-radius使用三次贝塞尔曲线模拟1/4圆角，误差在[0, 0.000273]之间
    var list = border.calRadius(x, y, w, h, btlr, btrr, bbrr, bblr);

    if (!list) {
      list = [[x, y], [x + w, y], [x + w, y + h], [x, y + h], [x, y]];
    }

    if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
      var offscreen = inject.getCacheCanvas(w, h, '__$$CONIC_GRADIENT$$__');
      var imgData = offscreen.ctx.getImageData(0, 0, w, h);
      gradient.getConicGradientImage(res.cx - x, res.cy - y, res.w, res.h, res.stop, imgData.data);
      offscreen.ctx.putImageData(imgData, 0, 0);
      ctx.save();
      ctx.beginPath();
      canvasPolygon$2(ctx, list);
      ctx.clip();
      ctx.closePath();
      ctx.drawImage(offscreen.canvas, x, y);
      ctx.restore();
      offscreen.ctx.clearRect(0, 0, w, h);
    } else if (renderMode === mode.SVG) {
      if (isInline) {
        var v = {
          tagName: 'symbol',
          props: [],
          children: []
        };

        xom.__config[NODE_DEFS_CACHE].push(v);

        res.forEach(function (item) {
          v.children.push({
            type: 'item',
            tagName: 'path',
            props: [['d', svgPolygon$2(item[0])], ['fill', item[1]]]
          });
        });
        return ctx.add(v);
      } else {
        var _v2 = {
          tagName: 'clipPath',
          children: [{
            tagName: 'path',
            props: [['d', svgPolygon$2(list)]]
          }]
        };

        xom.__config[NODE_DEFS_CACHE].push(_v2);

        var clip = ctx.add(_v2);
        res.forEach(function (item) {
          xom.virtualDom.bb.push({
            type: 'item',
            tagName: 'path',
            props: [['d', svgPolygon$2(item[0])], ['fill', item[1]], ['clip-path', 'url(#' + clip + ')']]
          });
        });
      }
    }
  }

  var gradient$1 = {
    parseGradient: parseGradient,
    getLinear: getLinear,
    getRadial: getRadial,
    getConic: getConic,
    renderConic: renderConic
  };

  var DOM = {
    position: 'static',
    display: 'block',
    top: 'auto',
    right: 'auto',
    bottom: 'auto',
    left: 'auto',
    marginTop: 0,
    marginRight: 0,
    marginBottom: 0,
    marginLeft: 0,
    paddingTop: 0,
    paddingRight: 0,
    paddingBottom: 0,
    paddingLeft: 0,
    fontSize: 'inherit',
    fontFamily: 'inherit',
    color: 'inherit',
    fontStyle: 'inherit',
    fontWeight: 'inherit',
    lineHeight: 'inherit',
    backgroundImage: null,
    backgroundColor: 'transparent',
    backgroundSize: 'auto',
    backgroundRepeat: 'repeat',
    backgroundPositionX: 0,
    backgroundPositionY: 0,
    backgroundClip: 'borderBox',
    borderTopWidth: 0,
    borderRightWidth: 0,
    borderBottomWidth: 0,
    borderLeftWidth: 0,
    borderTopColor: '#000',
    borderRightColor: '#000',
    borderBottomColor: '#000',
    borderLeftColor: '#000',
    borderTopStyle: 'solid',
    borderRightStyle: 'solid',
    borderBottomStyle: 'solid',
    borderLeftStyle: 'solid',
    borderTopLeftRadius: 0,
    borderTopRightRadius: 0,
    borderBottomRightRadius: 0,
    borderBottomLeftRadius: 0,
    width: 'auto',
    height: 'auto',
    flexGrow: 0,
    flexShrink: 1,
    flexBasis: 'auto',
    flexDirection: 'row',
    flexWrap: 'nowrap',
    order: 0,
    justifyContent: 'flexStart',
    alignItems: 'stretch',
    alignSelf: 'auto',
    alignContent: 'stretch',
    textAlign: 'inherit',
    letterSpacing: 'inherit',
    transformOrigin: 'center',
    visibility: 'inherit',
    opacity: 1,
    zIndex: 0,
    transform: null,
    translateX: 0,
    translateY: 0,
    translateZ: 0,
    scaleX: 1,
    scaleY: 1,
    scaleZ: 1,
    skewX: 0,
    skewY: 0,
    rotateX: 0,
    rotateY: 0,
    rotateZ: 0,
    rotate3d: '0, 0, 0, 0',
    perspective: 0,
    perspectiveOrigin: 'center',
    filter: null,
    boxShadow: null,
    pointerEvents: 'inherit',
    overflow: 'visible',
    mixBlendMode: 'normal',
    whiteSpace: 'inherit',
    textOverflow: 'clip',
    lineClamp: 0,
    textStrokeWidth: 'inherit',
    textStrokeColor: 'inherit',
    textStrokeOver: 'inherit'
  };
  var GEOM = {
    fill: 'transparent',
    stroke: '#000',
    strokeWidth: 1,
    strokeDasharray: '',
    strokeLinecap: 'butt',
    strokeLinejoin: 'miter',
    strokeMiterlimit: 4,
    fillRule: 'nonzero'
  };
  var DOM_ENTRY_SET = [];
  var DOM_KEY_SET = [];
  Object.keys(DOM).forEach(function (k) {
    DOM_KEY_SET.push(k);
    var v = DOM[k];
    DOM_ENTRY_SET.push({
      k: k,
      v: v
    });
  });
  var GEOM_ENTRY_SET = [];
  var GEOM_KEY_SET = [];
  Object.keys(GEOM).forEach(function (k) {
    GEOM_KEY_SET.push(k);
    var v = GEOM[k];
    GEOM_ENTRY_SET.push({
      k: k,
      v: v
    });
  });
  var INHERIT = {
    fontFamily: 'arial',
    fontSize: 16,
    fontWeight: 400,
    fontStyle: 'normal',
    color: '#000',
    textAlign: 'left',
    visibility: 'visible',
    pointerEvents: 'auto',
    textStrokeColor: '#000',
    textStrokeWidth: 1,
    textStrokeOver: 'none'
  };
  var INHERIT_KEY_SET = [];
  Object.keys(INHERIT).forEach(function (k) {
    INHERIT_KEY_SET.push(k);
  });
  var reset = {
    DOM: DOM,
    GEOM: GEOM,
    isValid: function isValid(i) {
      return DOM.hasOwnProperty(i) || GEOM.hasOwnProperty(i);
    },
    DOM_KEY_SET: DOM_KEY_SET,
    GEOM_KEY_SET: GEOM_KEY_SET,
    DOM_ENTRY_SET: DOM_ENTRY_SET,
    GEOM_ENTRY_SET: GEOM_ENTRY_SET,
    INHERIT: INHERIT,
    INHERIT_KEY_SET: INHERIT_KEY_SET
  };

  var isNil$2 = util.isNil;

  function parseFlex(style, grow, shrink, basis) {
    if (isNil$2(style.flexGrow)) {
      style.flexGrow = grow || 0;
    }

    if (isNil$2(style.flexShrink)) {
      style.flexShrink = shrink || 0;
    }

    if (isNil$2(style.flexBasis)) {
      style.flexBasis = basis || 0;
    }
  }

  function parseMarginPadding(style, key, list) {
    var temp = style[key];

    if (!isNil$2(temp)) {
      var match = temp.toString().match(/([-+]?[\d.]+[pxremvwhina%]*)|(auto)/ig);

      if (match) {
        if (match.length === 1) {
          match[3] = match[2] = match[1] = match[0];
        } else if (match.length === 2) {
          match[2] = match[0];
          match[3] = match[1];
        } else if (match.length === 3) {
          match[3] = match[1];
        }

        list.forEach(function (k, i) {
          if (isNil$2(style[k])) {
            style[k] = match[i];
          }
        });
      }
    }
  }

  function parseOneBorder(style, k) {
    var v = style[k];

    if (isNil$2(v)) {
      return;
    } // 后面会统一格式化处理


    if (isNil$2(style[k + 'Width'])) {
      var w = /\b[\d.]+[pxremvwhina%]*\b/i.exec(v);
      style[k + 'Width'] = w ? w[0] : 0;
    }

    if (isNil$2(style[k + 'Style'])) {
      var s = /\b(solid|dashed|dotted)\b/i.exec(v);
      style[k + 'Style'] = s ? s[1] : 'solid';
    }

    if (isNil$2(style[k + 'Color'])) {
      var c = /#[0-9a-f]{3,8}/i.exec(v);

      if (c && [4, 7, 9].indexOf(c[0].length) > -1) {
        style[k + 'Color'] = c[0];
      } else if (/\btransparent\b/i.test(v)) {
        style[k + 'Color'] = 'transparent';
      } else {
        c = /rgba?\s*\(.+\)/i.exec(v);
        style[k + 'Color'] = c ? c[0] : 'transparent';
      }
    }
  }

  var abbr = {
    margin: ['marginTop', 'marginRight', 'marginBottom', 'marginLeft'],
    padding: ['paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft'],
    border: ['borderTop', 'borderRight', 'borderBottom', 'borderLeft'],
    borderTop: ['borderTopWidth', 'borderTopStyle', 'borderTopColor'],
    borderRight: ['borderRightWidth', 'borderRightStyle', 'borderRightColor'],
    borderBottom: ['borderBottomWidth', 'borderBottomStyle', 'borderBottomColor'],
    borderLeft: ['borderLeftWidth', 'borderLeftStyle', 'borderLeftColor'],
    borderWidth: ['borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth'],
    borderColor: ['borderTopColor', 'borderRightColor', 'borderBottomColor', 'borderLeftColor'],
    borderStyle: ['borderTopStyle', 'borderRightStyle', 'borderBottomStyle', 'borderLeftStyle'],
    borderRadius: ['borderTopLeftRadius', 'borderTopRightRadius', 'borderBottomRightRadius', 'borderBottomLeftRadius'],
    background: ['backgroundColor', 'backgroundImage', 'backgroundRepeat', 'backgroundPosition'],
    backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
    flex: ['flexGrow', 'flexShrink', 'flexBasis'],
    translate: ['translateX', 'translateY'],
    translate3d: ['translateX', 'translateY', 'translateY'],
    scale: ['scaleX', 'scaleY'],
    scale3d: ['scaleX', 'scaleY', 'scaleZ'],
    rotate: ['rotateZ'],
    skew: ['skewX', 'skewY'],
    textStroke: ['textStrokeWidth', 'textStrokeColor', 'textStrokeOver'],
    toFull: function toFull(style, k) {
      var _this = this;

      var v = style[k];

      if (k === 'background') {
        // bg缩写多个时有color则必须是最后一个
        if (Array.isArray(v)) {
          var length = v.length;

          if (isNil$2(style.backgroundColor)) {
            var bgc = /^\s*((transparent)|(#[0-9a-f]{3,8})|(rgba?\s*\(.+?\)))/i.exec(v[length - 1]);

            if (bgc) {
              style.backgroundColor = bgc[0];
              v = v.slice(0, length - 1);
            }
          }

          var bgi = [];
          var bgr = [];
          var bgp = [];
          v.forEach(function (item) {
            if (isNil$2(style.backgroundImage)) {
              var gd = reg.gradient.exec(item);

              if (gd) {
                bgi.push(gd[0]);
                item = item.replace(gd[0], '');
              } else {
                var img = reg.img.exec(v);

                if (img) {
                  bgi.push(img[0]);
                  item = item.replace(img[0], '');
                }
              }
            }

            if (isNil$2(style.backgroundRepeat)) {
              var repeat = /(no-?)?repeat(-?[xy])?/i.exec(item);

              if (repeat) {
                bgr.push(repeat[0].toLowerCase());
              }
            }

            if (isNil$2(style.backgroundPosition)) {
              var position = item.match(reg.position);

              if (position) {
                bgp.push(position.join(' '));
              }
            }
          });

          if (bgi.length) {
            style.backgroundImage = bgi;
          }

          if (bgr.length) {
            style.backgroundRepeat = bgr;
          }

          if (bgp.length) {
            style.backgroundPosition = bgp;
            this.toFull(style, 'backgroundPosition');
          }
        } else {
          if (isNil$2(style.backgroundImage)) {
            var gd = reg.gradient.exec(v);

            if (gd) {
              style.backgroundImage = gd[0];
              v = v.replace(gd[0], '');
            } else {
              var img = reg.img.exec(v);

              if (img) {
                style.backgroundImage = img[0];
                v = v.replace(img[0], '');
              }
            }
          }

          if (isNil$2(style.backgroundRepeat)) {
            var repeat = /(no-?)?repeat(-?[xy])?/i.exec(v);

            if (repeat) {
              style.backgroundRepeat = repeat[0].toLowerCase();
            }
          }

          if (isNil$2(style.backgroundColor)) {
            var _bgc = /^(transparent)|(#[0-9a-f]{3,8})|(rgba?\s*\(.+?\))/i.exec(v);

            if (_bgc) {
              style.backgroundColor = _bgc[0];
              v = v.replace(_bgc[0], '');
            }
          }

          if (isNil$2(style.backgroundPosition)) {
            var position = v.match(reg.position);

            if (position) {
              style.backgroundPosition = position.join(' ');
              this.toFull(style, 'backgroundPosition');
            }
          }
        }
      } else if (k === 'flex') {
        if (v === 'none') {
          parseFlex(style, 0, 0, 'auto');
        } else if (v === 'auto') {
          parseFlex(style, 1, 1, 'auto');
        } else if (/^[\d.]+\s+[\d.]+\s+(auto|none|content)/.test(v)) {
          var arr = v.split(/\s+/);
          parseFlex(style, parseFloat(arr[0]), parseFloat(arr[1]), arr[2]);
        } else if (/^[\d.]+\s+[\d.]+\s+[\d.]+[pxremvwhina%]*/.test(v)) {
          var _arr = v.split(/\s+/);

          parseFlex(style, parseFloat(_arr[0]), parseFloat(_arr[1]), _arr[2]);
        } else if (/^[\d.]+\s+[\d.]+$/.test(v)) {
          var _arr2 = v.split(/\s+/);

          parseFlex(style, parseFloat(_arr2[0]), parseFloat(_arr2[1]), 0);
        } else if (/^[\d.]+\s+[\d.]+[pxremvwhina%]+/.test(v)) {
          var _arr3 = v.split(/\s+/);

          parseFlex(style, parseFloat(_arr3[0]), 1, _arr3[1]);
        } else if (/^[\d.]+$/.test(v)) {
          parseFlex(style, parseFloat(v), 1, 0);
        } else if (/^[\d.]+[pxremvwhina%]+/i.test(v)) {
          parseFlex(style, 1, 1, v);
        } else {
          parseFlex(style, 0, 1, 'auto');
        }
      } else if (k === 'flexFlow') {
        v = v.toString().split(/\s+/);

        if (v.length) {
          if (isNil$2(style.flexDirection)) ;

          style.flexDirection = v[0];

          if (v.length > 1) {
            style.flexWrap = v[1];
          }
        }
      } else if (k === 'borderRadius') {
        // borderRadius缩写很特殊，/分隔x/y，然后上右下左4个
        v = v.toString().split('/');

        if (v.length === 1) {
          v[1] = v[0];
        }

        for (var i = 0; i < 2; i++) {
          var item = v[i].toString().split(/\s+/);

          if (item.length === 0) {
            v[i] = [0, 0, 0, 0];
          } else if (item.length === 1) {
            v[i] = [item[0], item[0], item[0], item[0]];
          } else if (item.length === 2) {
            v[i] = [item[0], item[1], item[0], item[1]];
          } else if (item.length === 3) {
            v[i] = [item[0], item[1], item[2], item[1]];
          } else {
            v[i] = item.slice(0, 4);
          }
        }

        this[k].forEach(function (k, i) {
          if (isNil$2(style[k])) {
            style[k] = v[0][i] + ' ' + v[1][i];
          }
        });
      } else if (k === 'backgroundPosition') {
        if (!Array.isArray(v)) {
          v = [v];
        }

        var isEmpty = this[k].map(function (k2) {
          return isNil$2(style[k2]);
        });
        v.forEach(function (v2) {
          v2 = v2.toString().split(/\s+/);

          if (v2.length === 1) {
            v2[1] = '50%';
          }

          _this[k].forEach(function (k2, i) {
            if (isEmpty[i]) {
              style[k2] = style[k2] || [];
              style[k2].push(v2[i]);
            }
          });
        });
      } else if (['translate', 'scale', 'skew'].indexOf(k) > -1) {
        var _arr4 = v.toString().split(/\s*,\s*/);

        if (_arr4.length === 1) {
          _arr4[1] = _arr4[0];
        }

        this[k].forEach(function (k, i) {
          if (isNil$2(style[k])) {
            style[k] = _arr4[i];
          }
        });
      } else if (['translate3d', 'scale3d'].indexOf(k) > -1) {
        var _arr5 = v.toString().split(/\s*,\s*/);

        if (_arr5.length === 1) {
          _arr5[2] = _arr5[1] = _arr5[0];
        } else if (_arr5.length === 2) {
          _arr5[2] = k === 'scale3d' ? 1 : 0;
        }

        this[k].forEach(function (k, i) {
          if (isNil$2(style[k])) {
            style[k] = _arr5[i];
          }
        });
      } else if (k === 'margin' || k === 'padding') {
        parseMarginPadding(style, k, this[k]);
      } else if (/^border((Top)|(Right)|(Bottom)|(Left))$/.test(k)) {
        parseOneBorder(style, k);
      } else if (k === 'textStroke') {
        var w = /(?:^|\s)([-+]?[\d.]+[pxremvwhina%]*)/.exec(v);

        if (w) {
          style.textStrokeWidth = w[1];
        }

        var c = /(transparent)|(#[0-9a-f]{3,8})|(rgba?\s*\(.+?\))/i.exec(v);

        if (c) {
          style.textStrokeColor = c[0];
        }

        if (/\bfill\b/i.test(v)) {
          style.textStrokeOver = 'fill';
        } else {
          style.textStrokeOver = 'none';
        }
      } else if (this[k]) {
        this[k].forEach(function (k) {
          if (isNil$2(style[k])) {
            style[k] = v;
          }
        });
      }

      return style;
    }
  };

  var STYLE_KEY$1 = enums.STYLE_KEY;
  var KEY_COLOR = [[STYLE_KEY$1.BACKGROUND_COLOR], [STYLE_KEY$1.BORDER_BOTTOM_COLOR], [STYLE_KEY$1.BORDER_LEFT_COLOR], [STYLE_KEY$1.BORDER_RIGHT_COLOR], [STYLE_KEY$1.BORDER_TOP_COLOR], [STYLE_KEY$1.COLOR], [STYLE_KEY$1.TEXT_STROKE_COLOR]];
  var
  var KEY_GRADIENT = [[STYLE_KEY$1.BACKGROUND_IMAGE], [STYLE_KEY$1.FILL], [STYLE_KEY$1.STROKE]];
  var KEY_RADIUS = [[STYLE_KEY$1.BORDER_TOP_LEFT_RADIUS], [STYLE_KEY$1.BORDER_TOP_RIGHT_RADIUS], [STYLE_KEY$1.BORDER_BOTTOM_RIGHT_RADIUS], [STYLE_KEY$1.BORDER_BOTTOM_LEFT_RADIUS]];
  var COLOR_HASH = {};
  KEY_COLOR.forEach(function (k) {
    COLOR_HASH[k] = true;
  });
  var LENGTH_HASH = {};
  KEY_LENGTH.forEach(function (k) {
    LENGTH_HASH[k] = true;
  });
  var RADIUS_HASH = {};
  KEY_RADIUS.forEach(function (k) {
    RADIUS_HASH[k] = true;
  });
  var GRADIENT_HASH = {};
  KEY_GRADIENT.forEach(function (k) {
    GRADIENT_HASH[k] = true;
  });
  var GRADIENT_TYPE = {
    linear: true,
    radial: true,
    conic: true
  };
  var KEY_EXPAND = [[STYLE_KEY$1.TRANSLATE_X], [STYLE_KEY$1.TRANSLATE_Y], [STYLE_KEY$1.TRANSLATE_Z], [STYLE_KEY$1.SKEW_X], [STYLE_KEY$1.SKEW_Y], [STYLE_KEY$1.SCALE_X], [STYLE_KEY$1.SCALE_Y], [STYLE_KEY$1.SCALE_Z], [STYLE_KEY$1.ROTATE_X], [STYLE_KEY$1.ROTATE_Y], [STYLE_KEY$1.ROTATE_Z]];
  var EXPAND_HASH = {};
  KEY_EXPAND.forEach(function (k) {
    EXPAND_HASH[k] = true;
  });
  var key = {
    KEY_COLOR: KEY_COLOR,
    KEY_EXPAND: KEY_EXPAND,
    KEY_GRADIENT: KEY_GRADIENT,
    KEY_LENGTH: KEY_LENGTH,
    KEY_RADIUS: KEY_RADIUS,
    COLOR_HASH: COLOR_HASH,
    EXPAND_HASH: EXPAND_HASH,
    GRADIENT_HASH: GRADIENT_HASH,
    LENGTH_HASH: LENGTH_HASH,
    RADIUS_HASH: RADIUS_HASH,
    GRADIENT_TYPE: GRADIENT_TYPE
  };

  var _REPAINT, _MEASURE;
  var RESET_DOM = reset.DOM,
      RESET_GEOM = reset.GEOM;
  var INHERIT$1 = o.INHERIT;
  var STYLE_KEY$2 = enums.STYLE_KEY;
  var GEOM$1 = {};
  var GEOM_KEY_SET$1 = [];

  var IGNORE = _defineProperty({}, STYLE_KEY$2.POINTER_EVENTS, true);

  var REPAINT = (_REPAINT = {}, _defineProperty(_REPAINT, STYLE_KEY$2.TRANSFORM, true), _defineProperty(_REPAINT, STYLE_KEY$2.TRANSLATE_X, true), _defineProperty(_REPAINT, STYLE_KEY$2.TRANSLATE_Y, true), _defineProperty(_REPAINT, STYLE_KEY$2.SKEW_X, true), _defineProperty(_REPAINT, STYLE_KEY$2.SKEW_Y, true), _defineProperty(_REPAINT, STYLE_KEY$2.SCALE_X, true), _defineProperty(_REPAINT, STYLE_KEY$2.SCALE_Y, true), _defineProperty(_REPAINT, STYLE_KEY$2.ROTATE_Z, true), _defineProperty(_REPAINT, STYLE_KEY$2.COLOR, true), _defineProperty(_REPAINT, STYLE_KEY$2.FONT_STYLE, true), _defineProperty(_REPAINT, STYLE_KEY$2.STROKE_WIDTH, true), _defineProperty(_REPAINT, STYLE_KEY$2.FILL, true), _defineProperty(_REPAINT, STYLE_KEY$2.STROKE_DASHARRAY, true), _defineProperty(_REPAINT, STYLE_KEY$2.STROKE_LINECAP, true), _defineProperty(_REPAINT, STYLE_KEY$2.STROKE_LINEJOIN, true), _defineProperty(_REPAINT, STYLE_KEY$2.STROKE_MITERLIMIT, true), _defineProperty(_REPAINT, STYLE_KEY$2.BACKGROUND_COLOR, true), _defineProperty(_REPAINT, STYLE_KEY$2.BACKGROUND_IMAGE, true), _defineProperty(_REPAINT, STYLE_KEY$2.BACKGROUND_POSITION_X, true), _defineProperty(_REPAINT, STYLE_KEY$2.BACKGROUND_POSITION_Y, true), _defineProperty(_REPAINT, STYLE_KEY$2.BACKGROUND_REPEAT, true), _defineProperty(_REPAINT, STYLE_KEY$2.BACKGROUND_SIZE, true), _defineProperty(_REPAINT, STYLE_KEY$2.STROKE, true), _defineProperty(_REPAINT, STYLE_KEY$2.BORDER_BOTTOM_COLOR, true), _defineProperty(_REPAINT, STYLE_KEY$2.BORDER_LEFT_COLOR, true), _defineProperty(_REPAINT, STYLE_KEY$2.BORDER_RIGHT_COLOR, true), _defineProperty(_REPAINT, STYLE_KEY$2.BORDER_TOP_COLOR, true), _defineProperty(_REPAINT, STYLE_KEY$2.BORDER_TOP_LEFT_RADIUS, true), _defineProperty(_REPAINT, STYLE_KEY$2.BORDER_TOP_RIGHT_RADIUS, true), _defineProperty(_REPAINT, STYLE_KEY$2.BORDER_BOTTOM_RIGHT_RADIUS, true), _defineProperty(_REPAINT, STYLE_KEY$2.BORDER_BOTTOM_LEFT_RADIUS, true), _defineProperty(_REPAINT, STYLE_KEY$2.VISIBILITY, true), _defineProperty(_REPAINT, STYLE_KEY$2.OPACITY, true), _defineProperty(_REPAINT, STYLE_KEY$2.Z_INDEX, true), _defineProperty(_REPAINT, STYLE_KEY$2.FILTER, true), _defineProperty(_REPAINT, STYLE_KEY$2.BOX_SHADOW, true), _defineProperty(_REPAINT, STYLE_KEY$2.OVERFLOW, true), _defineProperty(_REPAINT, STYLE_KEY$2.BACKGROUND_CLIP, true), _defineProperty(_REPAINT, STYLE_KEY$2.TEXT_STROKE_WIDTH, true), _defineProperty(_REPAINT, STYLE_KEY$2.TEXT_STROKE_COLOR, true), _defineProperty(_REPAINT, STYLE_KEY$2.TEXT_STROKE_OVER, true), _REPAINT);
  var MEASURE = (_MEASURE = {}, _defineProperty(_MEASURE, STYLE_KEY$2.FONT_SIZE, true), _defineProperty(_MEASURE, STYLE_KEY$2.FONT_WEIGHT, true), _defineProperty(_MEASURE, STYLE_KEY$2.FONT_FAMILY, true), _MEASURE);
  var o$2 = {
    GEOM: GEOM$1,
    GEOM_KEY_SET: GEOM_KEY_SET$1,
    IGNORE: IGNORE,
    REPAINT: REPAINT,
    MEASURE: MEASURE,
    addGeom: function addGeom(tagName, ks, cb) {
      if (Array.isArray(ks)) {
        ks.forEach(function (k) {
          o$2.addGeom(tagName, k, cb);
        });
      } else if (ks) {
        if (!GEOM$1.hasOwnProperty(ks)) {
          GEOM_KEY_SET$1.push(ks);
        }

        var hash = GEOM$1[ks] = GEOM$1[ks] || {};
        hash[tagName] = cb || true;
      }
    },
    isIgnore: function isIgnore(k) {
      return IGNORE.hasOwnProperty(k);
    },
    isGeom: function isGeom(tagName, k) {
      return tagName && k && GEOM$1.hasOwnProperty(k) && GEOM$1[k].hasOwnProperty(tagName);
    },
    isRepaint: function isRepaint(k, tagName) {
      return REPAINT.hasOwnProperty(k) || o$2.isGeom(tagName, k);
    },
    isMeasure: function isMeasure(k) {
      return MEASURE.hasOwnProperty(k);
    },
    isValid: function isValid(tagName, k) {
      if (!k) {
        return false;
      }

      if (RESET_DOM.hasOwnProperty(k)) {
        return true;
      } // geom的fill等矢量才有的样式


      if (tagName.charAt(0) === '$' && RESET_GEOM.hasOwnProperty(k)) {
        return true;
      }

      if (GEOM$1.hasOwnProperty(k)) {
        return GEOM$1[k].hasOwnProperty(tagName);
      }

      if (k === 'translatePath') {
        return true;
      }

      return false;
    }
  };
  var MEASURE_KEY_SET = o$2.MEASURE_KEY_SET = Object.keys(MEASURE).map(function (i) {
    return parseInt(i);
  });
  var len = MEASURE_KEY_SET.length;

  o$2.isMeasureInherit = function (target) {
    if (target) {
      for (var i = 0; i < len; i++) {
        var k = MEASURE_KEY_SET[i];

        if (target.hasOwnProperty(k) && target[k][1] === INHERIT$1) {
          return true;
        }
      }
    }

    return false;
  };

  o$2.measureInheritList = function (target) {
    var list = [];

    for (var i = 0; i < len; i++) {
      var k = MEASURE_KEY_SET[i];

      if (target.hasOwnProperty(k) && target[k][1] === INHERIT$1) {
        list.push(k);
      }
    }

    return list;
  };

  o$2.addGeom('$line', ['x1', 'y1', 'x2', 'y2', 'controlA', 'controlB', 'start', 'end']);
  o$2.addGeom('$circle', ['r']);
  o$2.addGeom('$ellipse', ['rx', 'ry']);
  o$2.addGeom('$rect', ['rx', 'ry']);
  o$2.addGeom('$sector', ['begin', 'end', 'edge', 'closure']);
  o$2.addGeom('$polyline', ['points', 'controls', 'start', 'end']);
  o$2.addGeom('$polygon', ['points', 'controls', 'start', 'end', 'booleanOperations']);

  var _VALUE, _ARRAY_, _ARRAY_0_;
  var STYLE_KEY$3 = enums.STYLE_KEY,
      STYLE_RV_KEY$1 = enums.STYLE_RV_KEY,
      style2Upper$1 = enums.style2Upper,
      _enums$STYLE_KEY$2 = enums.STYLE_KEY,
      POSITION = _enums$STYLE_KEY$2.POSITION,
      WIDTH$1 = _enums$STYLE_KEY$2.WIDTH,
      HEIGHT$1 = _enums$STYLE_KEY$2.HEIGHT,
      TRANSLATE_X = _enums$STYLE_KEY$2.TRANSLATE_X,
      TRANSLATE_Y = _enums$STYLE_KEY$2.TRANSLATE_Y,
      TRANSLATE_Z = _enums$STYLE_KEY$2.TRANSLATE_Z,
      SCALE_X = _enums$STYLE_KEY$2.SCALE_X,
      SCALE_Y = _enums$STYLE_KEY$2.SCALE_Y,
      SCALE_Z = _enums$STYLE_KEY$2.SCALE_Z,
      SKEW_X = _enums$STYLE_KEY$2.SKEW_X,
      SKEW_Y = _enums$STYLE_KEY$2.SKEW_Y,
      ROTATE_X = _enums$STYLE_KEY$2.ROTATE_X,
      ROTATE_Y = _enums$STYLE_KEY$2.ROTATE_Y,
      ROTATE_Z = _enums$STYLE_KEY$2.ROTATE_Z,
      ROTATE_3D = _enums$STYLE_KEY$2.ROTATE_3D,
      PERSPECTIVE = _enums$STYLE_KEY$2.PERSPECTIVE,
      PERSPECTIVE_ORIGIN = _enums$STYLE_KEY$2.PERSPECTIVE_ORIGIN,
      TRANSFORM = _enums$STYLE_KEY$2.TRANSFORM,
      TRANSFORM_ORIGIN$1 = _enums$STYLE_KEY$2.TRANSFORM_ORIGIN,
      BACKGROUND_IMAGE = _enums$STYLE_KEY$2.BACKGROUND_IMAGE,
      BACKGROUND_COLOR = _enums$STYLE_KEY$2.BACKGROUND_COLOR,
      BACKGROUND_POSITION_X = _enums$STYLE_KEY$2.BACKGROUND_POSITION_X,
      BACKGROUND_POSITION_Y = _enums$STYLE_KEY$2.BACKGROUND_POSITION_Y,
      BACKGROUND_SIZE = _enums$STYLE_KEY$2.BACKGROUND_SIZE,
      OPACITY = _enums$STYLE_KEY$2.OPACITY,
      Z_INDEX = _enums$STYLE_KEY$2.Z_INDEX,
      COLOR = _enums$STYLE_KEY$2.COLOR,
      FONT_SIZE$2 = _enums$STYLE_KEY$2.FONT_SIZE,
      FONT_FAMILY = _enums$STYLE_KEY$2.FONT_FAMILY,
      FONT_WEIGHT = _enums$STYLE_KEY$2.FONT_WEIGHT,
      FONT_STYLE = _enums$STYLE_KEY$2.FONT_STYLE,
      LINE_HEIGHT = _enums$STYLE_KEY$2.LINE_HEIGHT,
      TEXT_ALIGN = _enums$STYLE_KEY$2.TEXT_ALIGN,
      FILTER = _enums$STYLE_KEY$2.FILTER,
      VISIBILITY = _enums$STYLE_KEY$2.VISIBILITY,
      BOX_SHADOW = _enums$STYLE_KEY$2.BOX_SHADOW,
      POINTER_EVENTS = _enums$STYLE_KEY$2.POINTER_EVENTS,
      FILL = _enums$STYLE_KEY$2.FILL,
      STROKE = _enums$STYLE_KEY$2.STROKE,
      STROKE_WIDTH = _enums$STYLE_KEY$2.STROKE_WIDTH,
      STROKE_DASHARRAY = _enums$STYLE_KEY$2.STROKE_DASHARRAY,
      BORDER_TOP_WIDTH$1 = _enums$STYLE_KEY$2.BORDER_TOP_WIDTH,
      BORDER_RIGHT_WIDTH = _enums$STYLE_KEY$2.BORDER_RIGHT_WIDTH,
      BORDER_BOTTOM_WIDTH$1 = _enums$STYLE_KEY$2.BORDER_BOTTOM_WIDTH,
      BORDER_LEFT_WIDTH$1 = _enums$STYLE_KEY$2.BORDER_LEFT_WIDTH,
      DISPLAY = _enums$STYLE_KEY$2.DISPLAY,
      FLEX_DIRECTION = _enums$STYLE_KEY$2.FLEX_DIRECTION,
      FLEX_GROW = _enums$STYLE_KEY$2.FLEX_GROW,
      FLEX_SHRINK = _enums$STYLE_KEY$2.FLEX_SHRINK,
      FLEX_BASIS = _enums$STYLE_KEY$2.FLEX_BASIS,
      JUSTIFY_CONTENT = _enums$STYLE_KEY$2.JUSTIFY_CONTENT,
      ALIGN_SELF = _enums$STYLE_KEY$2.ALIGN_SELF,
      ALIGN_ITEMS = _enums$STYLE_KEY$2.ALIGN_ITEMS,
      MATRIX = _enums$STYLE_KEY$2.MATRIX,
      LETTER_SPACING = _enums$STYLE_KEY$2.LETTER_SPACING,
      BACKGROUND_CLIP = _enums$STYLE_KEY$2.BACKGROUND_CLIP,
      WHITE_SPACE = _enums$STYLE_KEY$2.WHITE_SPACE,
      TEXT_OVERFLOW = _enums$STYLE_KEY$2.TEXT_OVERFLOW,
      LINE_CLAMP = _enums$STYLE_KEY$2.LINE_CLAMP,
      ORDER = _enums$STYLE_KEY$2.ORDER,
      FLEX_WRAP = _enums$STYLE_KEY$2.FLEX_WRAP,
      ALIGN_CONTENT = _enums$STYLE_KEY$2.ALIGN_CONTENT,
      TRANSLATE_PATH = _enums$STYLE_KEY$2.TRANSLATE_PATH,
      TEXT_STROKE_COLOR = _enums$STYLE_KEY$2.TEXT_STROKE_COLOR,
      TEXT_STROKE_WIDTH = _enums$STYLE_KEY$2.TEXT_STROKE_WIDTH,
      TEXT_STROKE_OVER = _enums$STYLE_KEY$2.TEXT_STROKE_OVER;
  var AUTO = o.AUTO,
      PX$2 = o.PX,
      PERCENT$2 = o.PERCENT,
      NUMBER$1 = o.NUMBER,
      INHERIT$2 = o.INHERIT,
      DEG$1 = o.DEG,
      RGBA = o.RGBA,
      STRING = o.STRING,
      REM$2 = o.REM,
      VW$2 = o.VW,
      VH$2 = o.VH,
      VMAX$2 = o.VMAX,
      VMIN$2 = o.VMIN,
      calUnit$1 = o.calUnit;
  var isNil$3 = util.isNil,
      rgba2int$2 = util.rgba2int,
      equalArr$1 = util.equalArr;
  var MEASURE_KEY_SET$1 = o$2.MEASURE_KEY_SET,
      isGeom = o$2.isGeom,
      GEOM$2 = o$2.GEOM,
      GEOM_KEY_SET$2 = o$2.GEOM_KEY_SET;
  var COLOR_HASH$1 = key.COLOR_HASH,
      LENGTH_HASH$1 = key.LENGTH_HASH,
      RADIUS_HASH$1 = key.RADIUS_HASH,
      GRADIENT_HASH$1 = key.GRADIENT_HASH,
      EXPAND_HASH$1 = key.EXPAND_HASH,
      GRADIENT_TYPE$1 = key.GRADIENT_TYPE;
  var TRANSFORM_HASH = {
    translateX: TRANSLATE_X,
    translateY: TRANSLATE_Y,
    translateZ: TRANSLATE_Z,
    scaleX: SCALE_X,
    scaleY: SCALE_Y,
    scaleZ: SCALE_Z,
    skewX: SKEW_X,
    skewY: SKEW_Y,
    rotateX: ROTATE_X,
    rotateY: ROTATE_Y,
    rotateZ: ROTATE_Z,
    rotate: ROTATE_Z
  };

  function compatibleTransform(k, arr) {
    if (k === SCALE_X || k === SCALE_Y || k === SCALE_Z) {
      arr[1] = NUMBER$1;
    } else if (k === TRANSLATE_X || k === TRANSLATE_Y || k === TRANSLATE_Z) {
      if (arr[1] === NUMBER$1) {
        arr[1] = PX$2;
      }
    } else if (k === PERSPECTIVE) {
      if ([NUMBER$1, PERCENT$2, DEG$1].indexOf(arr[1]) > -1) {
        arr[1] = PX$2;
      }
    } else {
      if (arr[1] === NUMBER$1) {
        arr[1] = DEG$1;
      }
    }
  }
  /**
   * 将传入的手写style标准化，并且用reset默认值覆盖其中为空的
   * @param style 手写的style样式
   * @param reset 默认样式，可选
   * @returns Object 标准化的枚举数组结构样式
   */


  function normalize(style) {
    var reset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

    if (!util.isObject(style)) {
      return {};
    }

    var res = {}; // style只有单层无需深度clone

    style = util.extend({}, style); // 缩写提前处理，因为reset里没有缩写

    var temp = style.border;

    if (temp) {
      abbr.toFull(style, 'border');
    }

    ['borderTop', 'borderRight', 'borderBottom', 'borderLeft'].forEach(function (k) {
      abbr.toFull(style, k);
    });
    temp = style.borderWidth;

    if (temp) {
      abbr.toFull(style, 'borderWidth');
    }

    temp = style.borderColor;

    if (temp) {
      abbr.toFull(style, 'borderColor');
    }

    temp = style.borderStyle;

    if (temp) {
      abbr.toFull(style, 'borderStyle');
    }

    temp = style.borderRadius;

    if (temp) {
      abbr.toFull(style, 'borderRadius');
    }

    temp = style.background; // 处理渐变背景缩写

    if (temp) {
      abbr.toFull(style, 'background');
    } // 背景位置


    temp = style.backgroundPosition;

    if (!isNil$3(temp)) {
      abbr.toFull(style, 'backgroundPosition');
    } // flex


    temp = style.flex;

    if (temp) {
      abbr.toFull(style, 'flex');
    } // flex-flow


    temp = style.flexFlow;

    if (temp) {
      abbr.toFull(style, 'flexFlow');
    }

    temp = style.margin;

    if (!isNil$3(temp)) {
      abbr.toFull(style, 'margin');
    }

    temp = style.padding;

    if (!isNil$3(temp)) {
      abbr.toFull(style, 'padding');
    }

    temp = style.textStroke;

    if (temp) {
      abbr.toFull(style, 'textStroke');
    } // 扩展css，将transform几个值拆分为独立的css为动画准备，同时不能使用transform


    ['translate', 'scale', 'skew', 'translate3d', 'scale3d', 'rotate'].forEach(function (k) {
      temp = style[k];

      if (!isNil$3(temp)) {
        abbr.toFull(style, k);
      }
    }); // 扩展的不能和transform混用，给出警告

    ['translateX', 'translateY', 'translateZ', 'scaleX', 'scaleY', 'scaleZ', 'skewX', 'skewY', 'rotateX', 'rotateY', 'rotateZ', 'rotate3d'].forEach(function (k) {
      var v = style[k];

      if (!isNil$3(v) && style.transform) {
        inject.warn("Can not use expand style \"".concat(k, "\" with transform"));
      }
    }); // 默认reset，根据传入不同，当style为空时覆盖

    reset.forEach(function (item) {
      var k = item.k,
          v = item.v;

      if (isNil$3(style[k])) {
        style[k] = v;
      }
    }); // 背景图

    temp = style.backgroundImage;

    if (temp !== undefined) {
      if (!temp) {
        res[BACKGROUND_IMAGE] = [null];
      } else if (Array.isArray(temp)) {
        res[BACKGROUND_IMAGE] = temp.map(function (item) {
          if (!item) {
            return null;
          }

          if (reg.gradient.test(item)) {
            return gradient$1.parseGradient(item);
          }

          if (reg.img.test(item)) {
            return reg.img.exec(item)[2];
          }

          return null;
        });
      } // 区分是渐变色还是图
      else if (reg.gradient.test(temp)) {
          res[BACKGROUND_IMAGE] = [gradient$1.parseGradient(temp)];
        } else if (reg.img.test(temp)) {
          res[BACKGROUND_IMAGE] = [reg.img.exec(temp)[2]];
        } else {
          res[BACKGROUND_IMAGE] = [null];
        }
    }

    temp = style.backgroundColor;

    if (temp) {
      // 先赋值默认透明，后续操作有合法值覆盖
      var bgc = /^#[0-9a-f]{3,8}/i.exec(temp);

      if (bgc && [4, 7, 9].indexOf(bgc[0].length) > -1) {
        res[BACKGROUND_COLOR] = [rgba2int$2(bgc[0]), RGBA];
      } else {
        bgc = /rgba?\s*\(.+\)/i.exec(temp);
        res[BACKGROUND_COLOR] = [rgba2int$2(bgc ? bgc[0] : [0, 0, 0, 0]), RGBA];
      }
    }

    ['backgroundPositionX', 'backgroundPositionY'].forEach(function (k, i) {
      temp = style[k];

      if (!isNil$3(temp)) {
        k = i ? BACKGROUND_POSITION_Y : BACKGROUND_POSITION_X;

        if (!Array.isArray(temp)) {
          temp = [temp];
        }

        res[k] = temp.map(function (item) {
          if (/^[-+]?[\d.]/.test(item)) {
            var v = calUnit$1(item);

            if ([NUMBER$1, DEG$1].indexOf(v[1]) > -1) {
              v[1] = PX$2;
            }

            return v;
          } else {
            return [{
              top: 0,
              left: 0,
              center: 50,
              right: 100,
              bottom: 100
            }[item] || 0, PERCENT$2];
          }
        });
      }
    }); // 背景尺寸

    temp = style.backgroundSize;

    if (temp) {
      if (!Array.isArray(temp)) {
        temp = [temp];
      }

      res[BACKGROUND_SIZE] = temp.map(function (item) {
        if (!item) {
          return [[0, AUTO], [0, AUTO]];
        }

        var match = item.toString().match(/\b(?:([-+]?[\d.]+[pxremvwhina%]*)|(contain|cover|auto))/ig);

        if (match) {
          if (match.length === 1) {
            if (match[0] === 'contain' || match[0] === 'cover') {
              match[1] = match[0];
            } else {
              match[1] = 'auto';
            }
          }

          var v = [];

          for (var i = 0; i < 2; i++) {
            var _item = match[i];

            if (/^[-+]?[\d.]/.test(_item)) {
              var n = calUnit$1(_item);

              if ([NUMBER$1, DEG$1].indexOf(n[1]) > -1) {
                n[1] = PX$2;
              }

              v.push(n);
            } else if (_item === 'contain' || _item === 'cover') {
              v.push([_item, STRING]);
            } else {
              v.push([0, AUTO]);
            }
          }

          return v;
        } else {
          return [[0, AUTO], [0, AUTO]];
        }
      });
    } // border-color


    ['Top', 'Right', 'Bottom', 'Left'].forEach(function (k) {
      k = 'border' + k + 'Color';
      var v = style[k];

      if (!isNil$3(v)) {
        res[STYLE_KEY$3[style2Upper$1(k)]] = [rgba2int$2(v), RGBA];
      }
    }); // border-radius

    ['TopLeft', 'TopRight', 'BottomRight', 'BottomLeft'].forEach(function (k) {
      k = 'border' + k + 'Radius';
      var v = style[k];

      if (!isNil$3(v)) {
        var arr = v.toString().split(/\s+/);

        if (arr.length === 1) {
          arr[1] = arr[0];
        }

        for (var i = 0; i < 2; i++) {
          var item = arr[i];

          if (/^[-+]?[\d.]/.test(item)) {
            var n = calUnit$1(item);

            if ([NUMBER$1, DEG$1].indexOf(n[1]) > -1) {
              n[1] = PX$2;
            }

            if (n[0] < 0) {
              n[0] = 0;
            }

            arr[i] = n;
          } else {
            arr[i] = [0, PX$2];
          }
        }

        res[STYLE_KEY$3[style2Upper$1(k)]] = arr;
      }
    });
    temp = style.transform;

    if (temp) {
      var transform = res[TRANSFORM] = [];
      var match = (temp || '').toString().match(/\w+\(.+?\)/g);

      if (match) {
        match.forEach(function (item) {
          var i = item.indexOf('(');
          var k = item.slice(0, i);
          var v = item.slice(i + 1, item.length - 1);

          if (k === 'matrix') {
            var arr = v.toString().split(/\s*,\s*/);
            arr = arr.map(function (item) {
              return parseFloat(item);
            });

            if (arr.length > 6) {
              arr = arr.slice(0, 6);
            }

            if (arr.length === 6) {
              transform.push([MATRIX, [arr[0], arr[1], 0, 0, arr[2], arr[3], 0, 0, 0, 0, 1, 0, arr[4], arr[5], 0, 1]]);
            }
          } else if (k === 'matrix3d') {
            var _arr = v.toString().split(/\s*,\s*/);

            _arr = _arr.map(function (item) {
              return parseFloat(item);
            });

            if (_arr.length > 16) {
              _arr = _arr.slice(0, 16);
            }

            if (_arr.length === 16) {
              transform.push([MATRIX, _arr]);
            }
          } else if (k === 'perspective') {
            var _arr2 = calUnit$1(v);

            if (_arr2[0] < 0) {
              _arr2[0] = 0;
            }

            compatibleTransform(PERSPECTIVE, _arr2);
            transform.push([PERSPECTIVE, _arr2]);
          } else if (k === 'rotate3d') {
            var _arr3 = v.toString().split(/\s*,\s*/);

            if (_arr3.length === 4) {
              var deg = calUnit$1(_arr3[3]);
              compatibleTransform(ROTATE_3D, deg);
              _arr3[0] = parseFloat(_arr3[0]);
              _arr3[1] = parseFloat(_arr3[1]);
              _arr3[2] = parseFloat(_arr3[2]);
              _arr3[3] = deg;
              transform.push([ROTATE_3D, _arr3]);
            }
          } else if (TRANSFORM_HASH.hasOwnProperty(k)) {
            var k2 = TRANSFORM_HASH[k];

            var _arr4 = calUnit$1(v);

            compatibleTransform(k2, _arr4);
            transform.push([k2, _arr4]);
          } else if ({
            translate: true,
            scale: true,
            skew: true
          }.hasOwnProperty(k)) {
            var _arr5 = v.toString().split(/\s*,\s*/);

            if (_arr5.length === 1) {
              _arr5[1] = k === 'scale' ? _arr5[0] : [0];
            }

            if (_arr5.length === 2) {
              var k1 = STYLE_KEY$3[style2Upper$1(k + 'X')];
              var _k = STYLE_KEY$3[style2Upper$1(k + 'Y')];
              var arr1 = calUnit$1(_arr5[0]);
              var arr2 = calUnit$1(_arr5[1]);
              compatibleTransform(k1, arr1);
              compatibleTransform(_k, arr2);
              transform.push([k1, arr1]);
              transform.push([_k, arr2]);
            }
          } else if ({
            translate3d: true,
            scale3d: true
          }.hasOwnProperty(k)) {
            var _arr6 = v.toString().split(/\s*,\s*/);

            if (_arr6.length === 1) {
              _arr6[1] = k === 'scale3d' ? [1] : [0];
              _arr6[2] = k === 'scale3d' ? [1] : [0];
            } else if (_arr6.length === 2) {
              _arr6[2] = k === 'scale3d' ? [1] : [0];
            }

            if (_arr6.length === 3) {
              var _k2 = STYLE_KEY$3[style2Upper$1(k + 'X')];
              var _k3 = STYLE_KEY$3[style2Upper$1(k + 'Y')];
              var k3 = STYLE_KEY$3[style2Upper$1(k + 'Z')];

              var _arr7 = calUnit$1(_arr6[0]);

              var _arr8 = calUnit$1(_arr6[1]);

              var arr3 = calUnit$1(_arr6[2]);
              compatibleTransform(_k2, _arr7);
              compatibleTransform(_k3, _arr8);
              compatibleTransform(k3, arr3);
              transform.push([_k2, _arr7]);
              transform.push([_k3, _arr8]);
              transform.push([k3, arr3]);
            }
          }
        });
      }
    }

    temp = style.perspective;

    if (!isNil$3(temp)) {
      var arr = calUnit$1(temp);

      if (arr[0] < 0) {
        arr[0] = 0;
      }

      compatibleTransform(PERSPECTIVE, arr);
      res[PERSPECTIVE] = arr;
    }

    ['perspectiveOrigin', 'transformOrigin'].forEach(function (k) {
      temp = style[k];

      if (!isNil$3(temp)) {
        var _arr9 = res[STYLE_KEY$3[style2Upper$1(k)]] = [];

        var _match = temp.toString().match(reg.position);

        if (_match) {
          if (_match.length === 1) {
            _match[1] = _match[0];
          }

          for (var i = 0; i < 2; i++) {
            var item = _match[i];

            if (/^[-+]?[\d.]/.test(item)) {
              var n = calUnit$1(item);

              if ([NUMBER$1, DEG$1].indexOf(n[1]) > -1) {
                n[1] = PX$2;
              }

              _arr9.push(n);
            } else {
              _arr9.push([{
                top: 0,
                left: 0,
                center: 50,
                right: 100,
                bottom: 100
              }[item], PERCENT$2]); // 不规范的写法变默认值50%


              if (isNil$3(_arr9[i][0])) {
                _arr9[i][0] = 50;
              }
            }
          }
        } else {
          _arr9.push([50, PERCENT$2]);

          _arr9.push([50, PERCENT$2]);
        }
      }
    });
    ['translateX', 'translateY', 'translateZ', 'scaleX', 'scaleY', 'scaleZ', 'skewX', 'skewY', 'rotateX', 'rotateY', 'rotateZ', 'rotate'].forEach(function (k) {
      var v = style[k];

      if (isNil$3(v)) {
        return;
      }

      var k2 = TRANSFORM_HASH[k];
      var n = calUnit$1(v); // 没有单位或默认值处理单位

      compatibleTransform(k2, n);
      res[k2] = n;
    });
    temp = style.rotate3d;

    if (temp) {
      var _arr10 = temp.toString().split(/\s*,\s*/);

      if (_arr10.length === 4) {
        var deg = calUnit$1(_arr10[3]);
        compatibleTransform(ROTATE_3D, deg);
        _arr10[0] = parseFloat(_arr10[0]);
        _arr10[1] = parseFloat(_arr10[1]);
        _arr10[2] = parseFloat(_arr10[2]);
        _arr10[3] = deg;
        res[ROTATE_3D] = _arr10;
      }
    }

    temp = style.opacity;

    if (!isNil$3(temp)) {
      temp = parseFloat(temp);

      if (!isNaN(temp)) {
        temp = Math.max(temp, 0);
        temp = Math.min(temp, 1);
        res[OPACITY] = temp;
      } else {
        res[OPACITY] = 1;
      }
    }

    temp = style.zIndex;

    if (!isNil$3(temp)) {
      res[Z_INDEX] = parseInt(temp) || 0;
    } // 转化不同单位值为对象标准化，不写单位的变成number单位转化为px


    ['marginTop', 'marginRight', 'marginBottom', 'marginLeft', 'paddingTop', 'paddingRight', 'paddingBottom', 'paddingLeft', 'borderTopWidth', 'borderRightWidth', 'borderBottomWidth', 'borderLeftWidth', 'top', 'right', 'bottom', 'left', 'width', 'height'].forEach(function (k) {
      var v = style[k];

      if (isNil$3(v)) {
        return;
      }

      if (v === 'auto') {
        v = [0, AUTO];
      } else {
        v = calUnit$1(v); // 无单位视为px

        if ([NUMBER$1, DEG$1].indexOf(v[1]) > -1) {
          v[1] = PX$2;
        }
      }

      var k2 = STYLE_KEY$3[style2Upper$1(k)];
      res[k2] = v; // 限制padding/border为正数

      if ({
        paddingTop: true,
        paddingRight: true,
        paddingBottom: true,
        paddingLeft: true,
        borderTopWidth: true,
        borderRightWidth: true,
        borderBottomWidth: true,
        borderLeftWidth: true,
        width: true,
        height: true
      }.hasOwnProperty(k) && v[0] < 0) {
        v[0] = 0;
      }
    });
    temp = style.flexBasis;

    if (!isNil$3(temp)) {
      if (temp === 'content') {
        res[FLEX_BASIS] = [temp, STRING];
      } else if (/^[\d.]/.test(temp)) {
        var v = res[FLEX_BASIS] = calUnit$1(temp);
        v[0] = Math.max(v[0], 0); // 无单位视为px

        if ([NUMBER$1, DEG$1].indexOf(v[1]) > -1) {
          v[1] = PX$2;
        }
      } else {
        res[FLEX_BASIS] = [0, AUTO];
      }
    }

    temp = style.order;

    if (!isNil$3(temp)) {
      res[ORDER] = parseInt(temp) || 0;
    }

    temp = style.color;

    if (!isNil$3(temp)) {
      if (temp === 'inherit') {
        res[COLOR] = [[], INHERIT$2];
      } else {
        res[COLOR] = [rgba2int$2(temp), RGBA];
      }
    }

    temp = style.textStrokeColor;

    if (!isNil$3(temp)) {
      if (temp === 'inherit') {
        res[TEXT_STROKE_COLOR] = [[], INHERIT$2];
      } else {
        res[TEXT_STROKE_COLOR] = [rgba2int$2(temp), RGBA];
      }
    }

    temp = style.fontSize;

    if (temp || temp === 0) {
      if (temp === 'inherit') {
        res[FONT_SIZE$2] = [0, INHERIT$2];
      } else {
        var _v = calUnit$1(temp); // fontSize不能为负数，否则为继承


        if (_v < 0) {
          res[FONT_SIZE$2] = [0, INHERIT$2];
        } else {
          if ([NUMBER$1, DEG$1].indexOf(_v[1]) > -1) {
            _v[1] = PX$2;
          }

          res[FONT_SIZE$2] = _v;
        }
      }
    }

    temp = style.textStrokeWidth;

    if (!isNil$3(temp)) {
      if (temp === 'inherit') {
        res[TEXT_STROKE_WIDTH] = [0, INHERIT$2];
      } else {
        var _v2 = calUnit$1(temp); // textStrokeWidth不能为负数，否则为继承


        if (_v2 < 0) {
          res[TEXT_STROKE_WIDTH] = [0, INHERIT$2];
        } else {
          if ([NUMBER$1, DEG$1, PERCENT$2].indexOf(_v2[1]) > -1) {
            _v2[1] = PX$2;
          }

          res[TEXT_STROKE_WIDTH] = _v2;
        }
      }
    }

    temp = style.textStrokeOver;

    if (!isNil$3(temp)) {
      if (temp === 'inherit') {
        res[TEXT_STROKE_OVER] = [0, INHERIT$2];
      } else {
        var _v3 = temp.toString();

        if (_v3 !== 'none' && _v3 !== 'fill') {
          _v3 = 'none';
        }

        res[TEXT_STROKE_OVER] = [_v3, STRING];
      }
    }

    temp = style.fontWeight;

    if (!isNil$3(temp)) {
      if (temp === 'bold') {
        res[FONT_WEIGHT] = [700, NUMBER$1];
      } else if (temp === 'normal') {
        res[FONT_WEIGHT] = [400, NUMBER$1];
      } else if (temp === 'lighter') {
        res[FONT_WEIGHT] = [200, NUMBER$1];
      } else if (temp === 'inherit') {
        res[FONT_WEIGHT] = [0, INHERIT$2];
      } else {
        res[FONT_WEIGHT] = [Math.max(0, parseInt(temp)) || 400, NUMBER$1];
      }
    }

    temp = style.fontStyle;

    if (temp) {
      if (temp === 'inherit') {
        res[FONT_STYLE] = [0, INHERIT$2];
      } else {
        res[FONT_STYLE] = [temp, STRING];
      }
    }

    temp = style.fontFamily;

    if (temp) {
      if (temp === 'inherit') {
        res[FONT_FAMILY] = [0, INHERIT$2];
      } else {
        // 统一文字声明格式
        res[FONT_FAMILY] = [temp.toString().toLowerCase().replace(/['"]/, '').replace(/\s*,\s*/g, ','), STRING];
      }
    }

    temp = style.textAlign;

    if (temp) {
      if (temp === 'inherit') {
        res[TEXT_ALIGN] = [0, INHERIT$2];
      } else {
        res[TEXT_ALIGN] = [temp, STRING];
      }
    }

    temp = style.lineHeight;

    if (temp !== undefined) {
      if (temp === 'inherit') {
        res[LINE_HEIGHT] = [0, INHERIT$2];
      } else if (temp === 'normal') {
        res[LINE_HEIGHT] = [0, AUTO];
      } // lineHeight默认数字，想要px必须强制带单位
      else if (/^[\d.]+/i.test(temp)) {
          var _v4 = calUnit$1(temp);

          if ([DEG$1].indexOf(_v4[1]) > -1) {
            _v4[1] = NUMBER$1;
          }

          res[LINE_HEIGHT] = _v4;
        } else {
          var n = Math.max(0, parseFloat(temp)) || 'normal'; // 非法数字

          if (n === 'normal') {
            res[LINE_HEIGHT] = [null, AUTO];
          } else {
            res[LINE_HEIGHT] = [n, NUMBER$1];
          }
        }
    }

    temp = style.letterSpacing;

    if (temp !== undefined) {
      if (temp === 'inherit') {
        res[LETTER_SPACING] = [0, INHERIT$2];
      } else if (temp === 'normal') {
        res[LETTER_SPACING] = [0, PX$2];
      } else if (/^[-+]?[\d.]/.test(temp)) {
        var _v5 = calUnit$1(temp);

        if ([NUMBER$1, DEG$1].indexOf(_v5[1]) > -1) {
          _v5[1] = PX$2;
        }

        res[LETTER_SPACING] = _v5;
      } else {
        res[LETTER_SPACING] = [parseFloat(temp) || 0, PX$2];
      }
    }

    temp = style.whiteSpace;

    if (temp) {
      if (temp === 'inherit') {
        res[WHITE_SPACE] = [0, INHERIT$2];
      } else {
        res[WHITE_SPACE] = [temp, STRING];
      }
    }

    temp = style.lineClamp;

    if (temp !== undefined) {
      temp = parseInt(temp) || 0;
      res[LINE_CLAMP] = Math.max(0, temp);
    } // fill和stroke为渐变时特殊处理，fillRule无需处理字符串


    temp = style.fill;

    if (temp !== undefined) {
      if (!temp) {
        res[FILL] = ['none'];
      } else if (Array.isArray(temp)) {
        if (temp.length) {
          res[FILL] = temp.map(function (item) {
            if (!item) {
              return 'none';
            } else if (reg.gradient.test(item)) {
              return gradient$1.parseGradient(item);
            } else {
              return rgba2int$2(item);
            }
          });
        } else {
          res[FILL] = ['none'];
        }
      } else if (reg.gradient.test(temp)) {
        res[FILL] = [gradient$1.parseGradient(temp)];
      } else {
        res[FILL] = [rgba2int$2(temp)];
      }
    }

    temp = style.stroke;

    if (temp !== undefined) {
      if (!temp) {
        res[STROKE] = ['none'];
      } else if (Array.isArray(temp)) {
        if (temp.length) {
          res[STROKE] = temp.map(function (item) {
            if (!item) {
              return 'none';
            } else if (reg.gradient.test(item)) {
              return gradient$1.parseGradient(item);
            } else {
              return rgba2int$2(item);
            }
          });
        } else {
          res[STROKE] = ['none'];
        }
      } else if (reg.gradient.test(temp)) {
        res[STROKE] = [gradient$1.parseGradient(temp)];
      } else {
        res[STROKE] = [rgba2int$2(temp)];
      }
    }

    temp = style.strokeWidth;

    if (!isNil$3(temp)) {
      if (!Array.isArray(temp)) {
        temp = [temp];
      }

      res[STROKE_WIDTH] = temp.map(function (item) {
        var v = calUnit$1(item);

        if ([NUMBER$1, DEG$1].indexOf(v[1]) > -1) {
          v[1] = PX$2;
        }

        v[0] = Math.max(v[0], 0);
        return v;
      });
    }

    temp = style.strokeDasharray;

    if (!isNil$3(temp)) {
      if (Array.isArray(temp)) {
        res[STROKE_DASHARRAY] = temp.map(function (item) {
          var match = item.toString().match(/[\d.]+/g);

          if (match) {
            match = match.map(function (item) {
              return parseFloat(item);
            });

            if (match.length % 2 === 1) {
              match.push(match[match.length - 1]);
            }

            return match;
          }

          return [];
        });
      } else {
        var _match2 = temp.toString().match(/[\d.]+/g);

        if (_match2) {
          _match2 = _match2.map(function (item) {
            return parseFloat(item);
          });

          if (_match2.length % 2 === 1) {
            _match2.push(_match2[_match2.length - 1]);
          }

          res[STROKE_DASHARRAY] = [_match2];
        } else {
          res[STROKE_DASHARRAY] = [[]];
        }
      }
    }

    temp = style.filter;

    if (temp !== undefined) {
      var _match3 = (temp || '').toString().match(/\b[\w-]+\s*\(\s*[-+]?[\d.]+\s*[pxremvwhdg%]*\s*\)\s*/ig);

      var f = null;

      if (_match3) {
        f = [];

        _match3.forEach(function (item) {
          var m2 = /([\w-]+)\s*\(\s*([-+]?[\d.]+\s*[pxremvwhdg%]*)\s*\)\s*/i.exec(item);

          if (m2) {
            var k = m2[1].toLowerCase(),
                _v6 = calUnit$1(m2[2]);

            if (k === 'blur') {
              if (_v6[0] <= 0 || [DEG$1, PERCENT$2].indexOf(_v6[1]) > -1) {
                return;
              }

              if (_v6[1] === NUMBER$1) {
                _v6[1] = PX$2;
              }

              f.push([k, _v6]);
            } else if (k === 'hue-rotate') {
              if ([NUMBER$1, DEG$1].indexOf(_v6[1]) === -1) {
                return;
              }

              _v6[1] = DEG$1;
              f.push([k, _v6]);
            } else if (k === 'saturate' || k === 'brightness' || k === 'grayscale' || k === 'contrast') {
              if ([NUMBER$1, PERCENT$2].indexOf(_v6[1]) === -1) {
                return;
              }

              _v6[0] = Math.max(_v6[0], 0);
              _v6[1] = PERCENT$2;
              f.push([k, _v6]);
            }
          }
        });
      }

      res[FILTER] = f;
    }

    temp = style.visibility;

    if (temp) {
      if (temp === 'inherit') {
        res[VISIBILITY] = [0, INHERIT$2];
      } else {
        res[VISIBILITY] = [temp, STRING];
      }
    }

    temp = style.pointerEvents;

    if (temp) {
      if (temp === 'inherit') {
        res[POINTER_EVENTS] = [0, INHERIT$2];
      } else {
        res[POINTER_EVENTS] = [temp, STRING];
      }
    }

    temp = style.boxShadow;

    if (temp !== undefined) {
      var bs = null;

      var _match4 = (temp || '').match(/([-+]?[\d.]+[pxremvwhina%]*)\s*([-+]?[\d.]+[pxremvwhina%]*)\s*([-+]?[\d.]+[pxremvwhina%]*\s*)?([-+]?[\d.]+[pxremvwhina%]*\s*)?(((transparent)|(#[0-9a-f]{3,8})|(rgba?\(.+?\)))\s*)?(inset|outset)?\s*,?/ig);

      if (_match4) {
        _match4.forEach(function (item) {
          var boxShadow = /([-+]?[\d.]+[pxremvwhina%]*)\s*([-+]?[\d.]+[pxremvwhina%]*)\s*([-+]?[\d.]+[pxremvwhina%]*\s*)?([-+]?[\d.]+[pxremvwhina%]*\s*)?(?:((?:transparent)|(?:#[0-9a-f]{3,8})|(?:rgba?\(.+\)))\s*)?(inset|outset)?/i.exec(item);

          if (boxShadow) {
            bs = bs || [];
            var _res = []; // v,h,blur,spread,color,inset

            for (var i = 0; i < 4; i++) {
              var _v7 = calUnit$1(boxShadow[i + 1]);

              if ([NUMBER$1, DEG$1].indexOf(_v7[1]) > -1) {
                _v7[1] = PX$2;
              } // x/y可以负，blur和spread不行


              if (i > 1 && _v7[0] < 0) {
                _v7 = 0;
              }

              _res.push(_v7);
            }

            _res.push(rgba2int$2(boxShadow[5]));

            _res.push(boxShadow[6] || 'outset');

            bs.push(_res);
          }
        });
      }

      res[BOX_SHADOW] = bs;
    } // 直接赋值的string类型


    ['position', 'display', 'flexDirection', 'flexWrap', 'justifyContent', 'alignItems', 'alignSelf', 'alignContent', 'overflow', 'mixBlendMode', 'borderTopStyle', 'borderRightStyle', 'borderBottomStyle', 'borderLeftStyle', 'backgroundClip', 'textOverflow'].forEach(function (k) {
      if (style.hasOwnProperty(k)) {
        res[STYLE_KEY$3[style2Upper$1(k)]] = style[k];
      }
    }); // 直接赋值的number类型

    ['flexGrow', 'flexShrink'].forEach(function (k) {
      if (style.hasOwnProperty(k)) {
        res[STYLE_KEY$3[style2Upper$1(k)]] = Math.max(parseFloat(style[k]) || 0, 0);
      }
    });
    temp = style.zIndex;

    if (!isNil$3(temp)) {
      res[Z_INDEX] = parseFloat(temp) || 0;
    } // 这些支持多个的用数组表示


    ['backgroundRepeat', 'strokeLinecap', 'strokeLinejoin', 'strokeMiterlimit', 'fillRule'].forEach(function (k) {
      if (style.hasOwnProperty(k)) {
        var _v8 = style[k];
        res[STYLE_KEY$3[style2Upper$1(k)]] = Array.isArray(_v8) ? _v8 : [_v8];
      }
    });
    GEOM_KEY_SET$2.forEach(function (k) {
      if (style.hasOwnProperty(k)) {
        res[k] = style[k];
      }
    });
    return res;
  }
  /**
   * 第一次和REFLOW等级下，刷新前首先执行，生成computedStyle
   * 影响文字测量的只有字体和大小和重量，需要提前处理
   * 继承相关的计算
   * @param node 对象节点
   * @param isRoot 是否是根节点，无继承需使用默认值
   */


  function computeMeasure(node, isRoot) {
    var currentStyle = node.currentStyle,
        computedStyle = node.computedStyle,
        domParent = node.domParent;
    var parentComputedStyle = !isRoot && domParent.computedStyle;
    MEASURE_KEY_SET$1.forEach(function (k) {
      var v = currentStyle[k]; // ff特殊处理

      if (k === FONT_FAMILY) {
        if (v[1] === INHERIT$2) {
          computedStyle[k] = getFontFamily(isRoot ? reset.INHERIT[STYLE_RV_KEY$1[k]] : parentComputedStyle[k]);
        } else {
          computedStyle[k] = getFontFamily(v[0]);
        }
      } else if (v[1] === INHERIT$2) {
        computedStyle[k] = isRoot ? reset.INHERIT[STYLE_RV_KEY$1[k]] : parentComputedStyle[k];
      } // 只有fontSize会有%
      else if (v[1] === PERCENT$2) {
          computedStyle[k] = isRoot ? reset.INHERIT[STYLE_RV_KEY$1[k]] : parentComputedStyle[k] * v[0] * 0.01;
        } else if (v[1] === REM$2) {
          computedStyle[k] = isRoot ? reset.INHERIT[STYLE_RV_KEY$1[k]] : node.root.computedStyle[FONT_SIZE$2] * v[0];
        } else if (v[1] === VW$2) {
          computedStyle[k] = isRoot ? reset.INHERIT[STYLE_RV_KEY$1[k]] : node.root.width * 0.01 * v[0];
        } else if (v[1] === VH$2) {
          computedStyle[k] = isRoot ? reset.INHERIT[STYLE_RV_KEY$1[k]] : node.root.height * 0.01 * v[0];
        } else if (v[1] === VMAX$2) {
          computedStyle[k] = isRoot ? reset.INHERIT[STYLE_RV_KEY$1[k]] : Math.max(node.root.width, node.root.height) * 0.01 * v[0];
        } else if (v[1] === VMIN$2) {
          computedStyle[k] = isRoot ? reset.INHERIT[STYLE_RV_KEY$1[k]] : Math.min(node.root.width, node.root.height) * 0.01 * v[0];
        } else {
          computedStyle[k] = v[0];
        }
    });
  }
  /**
   * 每次布局前需要计算的reflow相关的computedStyle
   * @param node 对象节点
   * @param isHost 是否是根节点或组件节点这种局部根节点，无继承需使用默认值
   */


  function computeReflow(node, isHost) {
    var currentStyle = node.currentStyle,
        computedStyle = node.computedStyle,
        parent = node.domParent,
        root = node.root;
    var rem = root.computedStyle[FONT_SIZE$2];
    var isRoot = !parent;
    var parentComputedStyle = parent && parent.computedStyle;
    [BORDER_TOP_WIDTH$1, BORDER_RIGHT_WIDTH, BORDER_BOTTOM_WIDTH$1, BORDER_LEFT_WIDTH$1].forEach(function (k) {
      // border-width不支持百分比
      var item = currentStyle[k];

      if (item[1] === PX$2) {
        computedStyle[k] = item[0];
      } else if (item[1] === REM$2) {
        computedStyle[k] = item[0] * rem;
      } else if (item[1] === VW$2) {
        computedStyle[k] = item[0] * root.width * 0.01;
      } else if (item[1] === VH$2) {
        computedStyle[k] = item[0] * root.height * 0.01;
      } else if (item[1] === VMAX$2) {
        computedStyle[k] = item[0] * Math.max(root.width, root.height) * 0.01;
      } else if (item[1] === VMIN$2) {
        computedStyle[k] = item[0] * Math.min(root.width, root.height) * 0.01;
      } else {
        computedStyle[k] = 0;
      }
    });
    [POSITION, DISPLAY, FLEX_DIRECTION, JUSTIFY_CONTENT, ALIGN_ITEMS, ALIGN_SELF, FLEX_GROW, FLEX_SHRINK, LINE_CLAMP, ORDER, FLEX_WRAP, ALIGN_CONTENT].forEach(function (k) {
      computedStyle[k] = currentStyle[k];
    });
    var textAlign = currentStyle[TEXT_ALIGN];

    if (textAlign[1] === INHERIT$2) {
      computedStyle[TEXT_ALIGN] = isRoot ? 'left' : parentComputedStyle[TEXT_ALIGN];
    } else {
      computedStyle[TEXT_ALIGN] = textAlign[0];
    }

    var fontSize = computedStyle[FONT_SIZE$2];
    var lineHeight = currentStyle[LINE_HEIGHT]; // lineHeight继承很特殊，数字和normal不同于普通单位

    if (lineHeight[1] === INHERIT$2) {
      if (isRoot) {
        computedStyle[LINE_HEIGHT] = calNormalLineHeight(computedStyle);
      } else {
        var p = parent;
        var ph;

        while (p) {
          ph = p.currentStyle[LINE_HEIGHT];

          if (ph[1] !== INHERIT$2) {
            break;
          }

          p = p.domParent;
        } // 到root还是inherit或normal，或者中途遇到了normal，使用normal


        if ([AUTO, INHERIT$2].indexOf(ph[1]) > -1) {
          computedStyle[LINE_HEIGHT] = calNormalLineHeight(computedStyle);
        } // 数字继承
        else if (ph[1] === NUMBER$1) {
            computedStyle[LINE_HEIGHT] = Math.max(ph[0], 0) * fontSize;
          } // 单位继承
          else {
              computedStyle[LINE_HEIGHT] = parentComputedStyle[LINE_HEIGHT];
            }
      }
    } // 防止为0
    else if (lineHeight[1] === PX$2) {
        computedStyle[LINE_HEIGHT] = Math.max(lineHeight[0], 0) || calNormalLineHeight(computedStyle);
      } else if (lineHeight[1] === PERCENT$2) {
        computedStyle[LINE_HEIGHT] = Math.max(lineHeight[0] * fontSize * 0.01, 0) || calNormalLineHeight(computedStyle);
      } else if (lineHeight[1] === REM$2) {
        computedStyle[LINE_HEIGHT] = Math.max(lineHeight[0] * rem, 0) || calNormalLineHeight(computedStyle);
      } else if (lineHeight[1] === VW$2) {
        computedStyle[LINE_HEIGHT] = Math.max(lineHeight[0] * root.width * 0.01, 0) || calNormalLineHeight(computedStyle);
      } else if (lineHeight[1] === VH$2) {
        computedStyle[LINE_HEIGHT] = Math.max(lineHeight[0] * root.height * 0.01, 0) || calNormalLineHeight(computedStyle);
      } else if (lineHeight[1] === VMAX$2) {
        computedStyle[LINE_HEIGHT] = Math.max(lineHeight[0] * Math.max(root.width, root.height) * 0.01, 0) || calNormalLineHeight(computedStyle);
      } else if (lineHeight[1] === VMIN$2) {
        computedStyle[LINE_HEIGHT] = Math.max(lineHeight[0] * Math.min(root.width, root.height) * 0.01, 0) || calNormalLineHeight(computedStyle);
      } else if (lineHeight[1] === NUMBER$1) {
        computedStyle[LINE_HEIGHT] = Math.max(lineHeight[0], 0) * fontSize || calNormalLineHeight(computedStyle);
      } // normal或auto
      else {
          computedStyle[LINE_HEIGHT] = calNormalLineHeight(computedStyle);
        }

    var letterSpacing = currentStyle[LETTER_SPACING];

    if (letterSpacing[1] === INHERIT$2) {
      computedStyle[LETTER_SPACING] = isRoot ? 0 : parentComputedStyle[LETTER_SPACING];
    } else if (letterSpacing[1] === PERCENT$2) {
      computedStyle[LETTER_SPACING] = fontSize * 0.01 * letterSpacing[0];
    } else if (letterSpacing[1] === REM$2) {
      computedStyle[LETTER_SPACING] = rem * letterSpacing[0];
    } else if (letterSpacing[1] === VW$2) {
      computedStyle[LETTER_SPACING] = root.width * 0.01 * letterSpacing[0];
    } else if (letterSpacing[1] === VH$2) {
      computedStyle[LETTER_SPACING] = root.height * 0.01 * letterSpacing[0];
    } else if (letterSpacing[1] === VMAX$2) {
      computedStyle[LETTER_SPACING] = Math.max(root.width, root.height) * 0.01 * letterSpacing[0];
    } else if (letterSpacing[1] === VMIN$2) {
      computedStyle[LETTER_SPACING] = Math.min(root.width, root.height) * 0.01 * letterSpacing[0];
    } else {
      computedStyle[LETTER_SPACING] = letterSpacing[0];
    } //whiteSpace


    var whiteSpace = currentStyle[WHITE_SPACE];

    if (whiteSpace[1] === INHERIT$2) {
      computedStyle[WHITE_SPACE] = isRoot ? 'normal' : parentComputedStyle[WHITE_SPACE];
    } else {
      computedStyle[WHITE_SPACE] = whiteSpace[0];
    }
  }

  function setFontStyle(style) {
    var fontSize = style[FONT_SIZE$2] || 0;
    var fontFamily = style[FONT_FAMILY] || 'arial';

    if (/\s/.test(fontFamily)) {
      fontFamily = '"' + fontFamily.replace(/"/g, '\\"') + '"';
    }

    return (style[FONT_STYLE] || 'normal') + ' ' + (style[FONT_WEIGHT] || '400') + ' ' + fontSize + 'px/' + fontSize + 'px ' + fontFamily;
  }

  function getFontFamily(str) {
    var ff = str.split(',');
    var f = 'arial';

    for (var i = 0, len = ff.length; i < len; i++) {
      if (o$1.support(ff[i])) {
        f = ff[i];
        break;
      }
    }

    return f;
  }

  function getBaseLine(style) {
    var fontSize = style[FONT_SIZE$2];
    var ff = getFontFamily(style[FONT_FAMILY]);
    var normal = fontSize * (o$1.info[ff] || o$1.info.arial).lhr;
    return (style[LINE_HEIGHT] - normal) * 0.5 + fontSize * (o$1.info[ff] || o$1.info.arial).blr;
  }

  function calNormalLineHeight(style) {
    var ff = getFontFamily(style[FONT_FAMILY]);
    return style[FONT_SIZE$2] * (o$1.info[ff] || o$1.info.arial).lhr;
  }

  function calRelativePercent(n, parent, k) {
    n *= 0.01;

    while (parent) {
      var style = parent.currentStyle[k];

      if (style[1] === AUTO) {
        if (k === WIDTH$1) {
          parent = parent.domParent;
        } else {
          break;
        }
      } else if (style[1] === PX$2) {
        return n * style[0];
      } else if (style[1] === PERCENT$2) {
        n *= style[0] * 0.01;
        parent = parent.domParent;
      } else if (style[1] === REM$2) {
        return n * style[0] * parent.root.computedStyle[FONT_SIZE$2];
      } else if (style[1] === VW$2) {
        return n * style[0] * parent.root.width * 0.01;
      } else if (style[1] === VH$2) {
        return n * style[0] * parent.root.height * 0.01;
      } else if (style[1] === VMAX$2) {
        return n * style[0] * Math.max(parent.root.width, parent.root.height) * 0.01;
      } else if (style[1] === VMIN$2) {
        return n * style[0] * Math.min(parent.root.width, parent.root.height) * 0.01;
      }
    }

    return n;
  }

  function calRelative(currentStyle, k, v, parent, isWidth) {
    if (v[1] === AUTO) {
      v = 0;
    } else if ([PX$2, NUMBER$1].indexOf(v[1]) > -1) {
      v = v[0];
    } else if (v[1] === PERCENT$2) {
      if (isWidth) {
        v = calRelativePercent(v[0], parent, WIDTH$1);
      } else {
        v = calRelativePercent(v[0], parent, HEIGHT$1);
      }
    } else if (v[1] === REM$2) {
      v = v[0] * parent.root.computedStyle[FONT_SIZE$2];
    } else if (v[1] === VW$2) {
      v = v[0] * parent.root.width * 0.01;
    } else if (v[1] === VH$2) {
      v = v[0] * parent.root.height * 0.01;
    } else if (v[1] === VMAX$2) {
      v = v[0] * Math.max(parent.root.width, parent.root.height) * 0.01;
    } else if (v[1] === VMIN$2) {
      v = v[0] * Math.min(parent.root.width, parent.root.height) * 0.01;
    }

    return v;
  }

  function calAbsolute(currentStyle, k, v, size, root) {
    if (v[1] === AUTO) {
      v = 0;
    } else if ([PX$2, NUMBER$1, DEG$1, RGBA, STRING].indexOf(v[1]) > -1) {
      v = v[0];
    } else if (v[1] === PERCENT$2) {
      v = v[0] * size * 0.01;
    } else if (v[1] === REM$2) {
      v = v[0] * root.computedStyle[FONT_SIZE$2];
    } else if (v[1] === VW$2) {
      v = v[0] * root.width * 0.01;
    } else if (v[1] === VH$2) {
      v = v[0] * root.height * 0.01;
    } else if (v[1] === VMAX$2) {
      v = v[0] * Math.max(root.width, root.height) * 0.01;
    } else if (v[1] === VMIN$2) {
      v = v[0] * Math.min(root.width, root.height) * 0.01;
    }

    return v;
  }

  function equalStyle(k, a, b, target) {
    if (!a || !b) {
      return a === b;
    }

    if (k === TRANSFORM) {
      if (a.length !== b.length) {
        return false;
      }

      for (var i = 0, len = a.length; i < len; i++) {
        var oa = a[i];
        var ob = b[i];

        if (oa[0] !== ob[0]) {
          return false;
        } // translate/matrix等都是数组


        if (!equalArr$1(oa[1], ob[1])) {
          return false;
        }
      }

      return true;
    }

    if (k === FILTER) {
      if (a.length !== b.length) {
        return false;
      }

      for (var _i = 0, _len = a.length; _i < _len; _i++) {
        if (!equalArr$1(a[_i], b[_i])) {
          return false;
        }
      }
    }

    if (k === BACKGROUND_SIZE) {
      if (a.length !== b.length) {
        return false;
      }

      for (var _i2 = 0, _len2 = a.length; _i2 < _len2; _i2++) {
        var aa = a[_i2],
            bb = b[_i2];

        if (aa[0][0] !== bb[0][0] || aa[0][1] !== bb[0][1] || aa[1][0] !== bb[1][0] || aa[1][1] !== bb[1][1]) {
          return false;
        }
      }

      return true;
    }

    if (k === TRANSFORM_ORIGIN$1 || RADIUS_HASH$1.hasOwnProperty(k)) {
      return a[0][0] === b[0][0] && a[0][1] === b[0][1] && a[1][0] === b[1][0] && a[1][1] === b[1][1];
    }

    if (k === BACKGROUND_POSITION_X || k === BACKGROUND_POSITION_Y || LENGTH_HASH$1.hasOwnProperty(k) || EXPAND_HASH$1.hasOwnProperty(k)) {
      return a[0] === b[0] && a[1] === b[1];
    }

    if (k === BOX_SHADOW) {
      return equalArr$1(a, b);
    }

    if (COLOR_HASH$1.hasOwnProperty(k)) {
      return a[1] === b[1] && equalArr$1(a[0], b[0]);
    }

    if (GRADIENT_HASH$1.hasOwnProperty(k) && a.k === b.k && GRADIENT_TYPE$1.hasOwnProperty(a.k)) {
      var av = a.v;
      var bv = b.v;

      if (a.d !== b.d || av.length !== bv.length) {
        return false;
      }

      for (var _i3 = 0, _len3 = av.length; _i3 < _len3; _i3++) {
        var ai = av[_i3];
        var bi = bv[_i3];

        if (ai.length !== bi.length) {
          return false;
        }

        for (var j = 0; j < 4; j++) {
          if (ai[0][j] !== bi[0][j]) {
            return false;
          }
        }

        if (ai.length > 1) {
          if (ai[1][0] !== bi[1][0] || ai[1][1] !== bi[1][1]) {
            return false;
          }
        }
      }

      return true;
    } // multi都是纯值数组，equalArr本身即递归，非multi根据类型判断


    if (isGeom(target.tagName, k) && (target.isMulti || Array.isArray(a) && Array.isArray(b))) {
      return equalArr$1(a, b);
    }

    return a === b;
  }

  function isRelativeOrAbsolute(node) {
    var position = node.currentStyle[POSITION];
    return position === 'relative' || position === 'absolute';
  }

  var VALUE = (_VALUE = {}, _defineProperty(_VALUE, POSITION, true), _defineProperty(_VALUE, DISPLAY, true), _defineProperty(_VALUE, STYLE_KEY$3.BACKGROUND_REPEAT, true), _defineProperty(_VALUE, FLEX_DIRECTION, true), _defineProperty(_VALUE, FLEX_GROW, true), _defineProperty(_VALUE, FLEX_SHRINK, true), _defineProperty(_VALUE, FLEX_WRAP, true), _defineProperty(_VALUE, JUSTIFY_CONTENT, true), _defineProperty(_VALUE, ALIGN_ITEMS, true), _defineProperty(_VALUE, ALIGN_SELF, true), _defineProperty(_VALUE, STYLE_KEY$3.OVERFLOW, true), _defineProperty(_VALUE, STYLE_KEY$3.MIX_BLEND_MODE, true), _defineProperty(_VALUE, STYLE_KEY$3.STROKE_LINECAP, true), _defineProperty(_VALUE, STYLE_KEY$3.STROKE_LINEJOIN, true), _defineProperty(_VALUE, STYLE_KEY$3.STROKE_MITERLIMIT, true), _defineProperty(_VALUE, STYLE_KEY$3.FILL_RULE, true), _defineProperty(_VALUE, OPACITY, true), _defineProperty(_VALUE, Z_INDEX, true), _defineProperty(_VALUE, BACKGROUND_CLIP, true), _defineProperty(_VALUE, TEXT_OVERFLOW, true), _defineProperty(_VALUE, LINE_CLAMP, true), _VALUE); // 仅1维数组

  var ARRAY_0 = (_ARRAY_ = {}, _defineProperty(_ARRAY_, COLOR, true), _defineProperty(_ARRAY_, TEXT_STROKE_COLOR, true), _defineProperty(_ARRAY_, BACKGROUND_COLOR, true), _defineProperty(_ARRAY_, STYLE_KEY$3.BORDER_TOP_COLOR, true), _defineProperty(_ARRAY_, STYLE_KEY$3.BORDER_RIGHT_COLOR, true), _defineProperty(_ARRAY_, STYLE_KEY$3.BORDER_BOTTOM_COLOR, true), _defineProperty(_ARRAY_, STYLE_KEY$3.BORDER_LEFT_COLOR, true), _ARRAY_); // 仅2维数组且只有2个值

  var ARRAY_0_1 = (_ARRAY_0_ = {}, _defineProperty(_ARRAY_0_, STYLE_KEY$3.BORDER_TOP_LEFT_RADIUS, true), _defineProperty(_ARRAY_0_, STYLE_KEY$3.BORDER_TOP_RIGHT_RADIUS, true), _defineProperty(_ARRAY_0_, STYLE_KEY$3.BORDER_BOTTOM_RIGHT_RADIUS, true), _defineProperty(_ARRAY_0_, STYLE_KEY$3.BORDER_BOTTOM_LEFT_RADIUS, true), _defineProperty(_ARRAY_0_, TRANSFORM_ORIGIN$1, true), _defineProperty(_ARRAY_0_, PERSPECTIVE_ORIGIN, true), _ARRAY_0_);

  function cloneStyle(style, keys) {
    if (!keys) {
      keys = Object.keys(style).map(function (i) {
        if (!GEOM$2.hasOwnProperty(i)) {
          i = parseInt(i);
        }

        return i;
      });
    }

    var res = {};

    for (var i = 0, len = keys.length; i < len; i++) {
      var k = keys[i];
      var v = style[k]; // 渐变特殊处理

      if (k === BACKGROUND_IMAGE) {
        res[k] = v.map(function (item) {
          // 可能为null
          if (item && item.k) {
            return util.clone(item);
          } else {
            return item;
          }
        });
      } else if (k === FILL || k === STROKE) {
        res[k] = v.map(function (item) {
          // 渐变
          // 可能非法为空
          if (item && item.k) {
            return util.clone(item);
          } // 颜色
          else {
              return item.slice(0);
            }
        });
      } else if (k === TRANSFORM || k === FILTER) {
        if (v) {
          var n = v.slice(0);

          for (var _i4 = 0, _len4 = n.length; _i4 < _len4; _i4++) {
            n[_i4] = n[_i4].slice(0);
            n[_i4][1] = n[_i4][1].slice(0);
          }

          res[k] = n;
        }
      } else if (k === BOX_SHADOW) {
        if (v) {
          v = v.map(function (item) {
            var n = item.slice(0);
            n[4] = n[4].slice(0);
            return n;
          });
          res[k] = v;
        }
      } else if (k === TRANSLATE_PATH) {
        if (v) {
          res[k] = v.map(function (item) {
            return item.slice(0);
          });
        }
      } // position等直接值类型赋值
      else if (VALUE.hasOwnProperty(k)) {
          res[k] = v;
        } // geom自定义属性
        else if (GEOM$2.hasOwnProperty(k)) {
            res[k] = util.clone(v);
          } // 其余皆是数组或空，默认是一维数组只需slice即可
          else if (v) {
              var _n = res[k] = v.slice(0); // 特殊引用里数组某项再次clone


              if (k === BACKGROUND_POSITION_X || k === BACKGROUND_POSITION_Y) {
                for (var _i5 = 0, _len5 = _n.length; _i5 < _len5; _i5++) {
                  _n[_i5] = _n[_i5].slice(0);
                }
              } else if (k === BACKGROUND_SIZE) {
                for (var _i6 = 0, _len6 = _n.length; _i6 < _len6; _i6++) {
                  _n[_i6] = _n[_i6].slice(0);
                  _n[_i6][0] = _n[_i6][0].slice(0);
                  _n[_i6][1] = _n[_i6][1].slice(0);
                }
              } else if (ARRAY_0.hasOwnProperty(k)) {
                _n[0] = _n[0].slice(0);
              } else if (ARRAY_0_1.hasOwnProperty(k)) {
                _n[0] = _n[0].slice(0);
                _n[1] = _n[1].slice(0);
              } else if (k === TRANSFORM) {
                for (var _i7 = 0, _len7 = _n.length; _i7 < _len7; _i7++) {
                  _n[_i7] = _n[_i7].slice(0);
                }
              } else if (k === ROTATE_3D) {
                _n[3] = _n[3].slice(0);
              }
            }
    }

    return res;
  }

  var css = {
    normalize: normalize,
    computeMeasure: computeMeasure,
    computeReflow: computeReflow,
    setFontStyle: setFontStyle,
    getFontFamily: getFontFamily,
    getBaseLine: getBaseLine,
    calRelative: calRelative,
    calAbsolute: calAbsolute,
    equalStyle: equalStyle,
    isRelativeOrAbsolute: isRelativeOrAbsolute,
    cloneStyle: cloneStyle
  };

  var _enums$STYLE_KEY$3 = enums.STYLE_KEY,
      COLOR$1 = _enums$STYLE_KEY$3.COLOR,
      FONT_WEIGHT$1 = _enums$STYLE_KEY$3.FONT_WEIGHT,
      FONT_FAMILY$1 = _enums$STYLE_KEY$3.FONT_FAMILY,
      FONT_SIZE$3 = _enums$STYLE_KEY$3.FONT_SIZE,
      FONT_STYLE$1 = _enums$STYLE_KEY$3.FONT_STYLE,
      LETTER_SPACING$1 = _enums$STYLE_KEY$3.LETTER_SPACING,
      TEXT_STROKE_COLOR$1 = _enums$STYLE_KEY$3.TEXT_STROKE_COLOR,
      TEXT_STROKE_WIDTH$1 = _enums$STYLE_KEY$3.TEXT_STROKE_WIDTH,
      TEXT_STROKE_OVER$1 = _enums$STYLE_KEY$3.TEXT_STROKE_OVER;
  /**
   * 表示一行文本的类，保存它的位置、内容、从属信息，在布局阶段生成，并在渲染阶段被Text调用render()
   * 关系上直属于Text类，一个Text类可能因为换行原因导致有多个TextBox，一行内容中也可能有不同Text从而不同TextBox
   * 另外本类还会被LineBoxManager添加到LineBox里，LineBox为一行中的inline/文本组合，之间需要进行垂直对齐
   * 在textOverflow为ellipsis时，可能会收到后面节点的向前回退（后面不足放下…），使得省略号发生在本节点
   */

  var TextBox = /*#__PURE__*/function () {
    function TextBox(parent, index, x, y, w, h, content, wList) {
      _classCallCheck(this, TextBox);

      this.__parent = parent;
      this.__index = index;
      this.__x = x;
      this.__y = y;
      this.__width = w;
      this.__height = h;
      this.__content = content;
      this.__wList = wList;
      this.__virtualDom = {};
    }
    /**
     * 渲染阶段被Text类调用，多行Text会有多个TextBox，内容被分拆开
     * @param renderMode
     * @param ctx
     * @param computedStyle
     * @param cacheStyle Text父节点Dom的缓存样式，相比computedStyle可以直接用，比如color被缓存为style字符串
     * @param dx
     * @param dy
     */


    _createClass(TextBox, [{
      key: "render",
      value: function render(renderMode, ctx, computedStyle, cacheStyle, dx, dy) {
        var content = this.content,
            x = this.x,
            y = this.y,
            parent = this.parent,
            wList = this.wList,
            width = this.width;
        var ox = parent.ox,
            oy = parent.oy;
        y += css.getBaseLine(computedStyle);
        x += ox + dx;
        y += oy + dy;
        this.__endX = x + width;
        this.__endY = y;
        var letterSpacing = computedStyle[LETTER_SPACING$1],
            textStrokeWidth = computedStyle[TEXT_STROKE_WIDTH$1],
            textStrokeColor = computedStyle[TEXT_STROKE_COLOR$1];
        var i = 0,
            length = content.length;

        if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
          var overFill = computedStyle[TEXT_STROKE_OVER$1] === 'fill';

          if (letterSpacing) {
            for (; i < length; i++) {
              if (overFill) {
                ctx.fillText(content.charAt(i), x, y);
              }

              if (textStrokeWidth && (textStrokeColor[3] > 0 || textStrokeColor.length === 3)) {
                ctx.strokeText(content.charAt(i), x, y);
              }

              if (!overFill) {
                ctx.fillText(content.charAt(i), x, y);
              }

              x += wList[i] + letterSpacing;
            }
          } else {
            if (overFill) {
              ctx.fillText(content, x, y);
            }

            if (textStrokeWidth && (textStrokeColor[3] > 0 || textStrokeColor.length === 3)) {
              ctx.strokeText(content, x, y);
            }

            if (!overFill) {
              ctx.fillText(content, x, y);
            }
          }
        } else if (renderMode === mode.SVG) {
          var props = [['x', x], ['y', y], ['fill', cacheStyle[COLOR$1]], ['font-family', computedStyle[FONT_FAMILY$1]], ['font-weight', computedStyle[FONT_WEIGHT$1]], ['font-style', computedStyle[FONT_STYLE$1]], ['font-size', computedStyle[FONT_SIZE$3] + 'px']]; // svg无法定义stroke的over

          if (textStrokeWidth && (textStrokeColor[3] > 0 || textStrokeColor.length === 3)) {
            props.push(['stroke', cacheStyle[TEXT_STROKE_COLOR$1]]);
            props.push(['stroke-width', computedStyle[TEXT_STROKE_WIDTH$1]]);
          }

          if (letterSpacing) {
            props.push(['letter-spacing', letterSpacing]);
          }

          this.__virtualDom = {
            type: 'item',
            tagName: 'text',
            props: props,
            content: util.encodeHtml(content)
          };
        }
      }
    }, {
      key: "__offsetX",
      value: function __offsetX(diff) {
        this.__x += diff;
      }
    }, {
      key: "__offsetY",
      value: function __offsetY(diff) {
        this.__y += diff;
      }
    }, {
      key: "x",
      get: function get() {
        return this.__x;
      }
    }, {
      key: "y",
      get: function get() {
        return this.__y;
      }
    }, {
      key: "endX",
      get: function get() {
        return this.__endX;
      }
    }, {
      key: "endY",
      get: function get() {
        return this.__endY;
      }
    }, {
      key: "width",
      get: function get() {
        return this.__width;
      }
    }, {
      key: "outerWidth",
      get: function get() {
        return this.__width;
      }
    }, {
      key: "height",
      get: function get() {
        return this.__height;
      }
    }, {
      key: "outerHeight",
      get: function get() {
        return this.__height;
      }
    }, {
      key: "content",
      get: function get() {
        return this.__content;
      }
    }, {
      key: "baseLine",
      get: function get() {
        return this.parent.baseLine;
      }
    }, {
      key: "virtualDom",
      get: function get() {
        return this.__virtualDom;
      }
    }, {
      key: "parent",
      get: function get() {
        return this.__parent;
      }
    }, {
      key: "parentLineBox",
      get: function get() {
        return this.__parentLineBox;
      }
    }, {
      key: "wList",
      get: function get() {
        return this.__wList;
      }
    }]);

    return TextBox;
  }();

  var SIZE = [8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192];
  var NUMBER$2 = [128, 64, 32, 16, 8, 4, 2, 1, 1, 1, 1];
  var MAX = SIZE[SIZE.length - 1];
  var HASH_CANVAS = {};
  var uuid = 0;

  var Page = /*#__PURE__*/function () {
    function Page(size, number) {
      _classCallCheck(this, Page);

      this.__size = size;
      this.__number = number;
      this.__free = this.__total = number * number;
      size *= number;
      this.__width = size;
      this.__height = size;
      var offscreen = this.__canvas = inject.getCacheCanvas(size, size, null, number);

      if (offscreen) {
        this.__offscreen = offscreen;
      } // 1/0标识n*n个单元格是否空闲可用，一维数组表示


      this.__grid = [];

      for (var i = 0; i < this.__total; i++) {
        this.__grid.push(1);
      }

      this.__uuid = uuid++; // webgl贴图缓存使用，一旦更新则标识记录，绑定某号纹理单元查看变化才更新贴图

      this.__update = false;
      this.time = 0;
    }

    _createClass(Page, [{
      key: "add",
      value: function add() {
        var number = this.number,
            grid = this.grid;

        for (var i = 0; i < number; i++) {
          for (var j = 0; j < number; j++) {
            var index = i * number + j;

            if (grid[index]) {
              grid[index] = 0;
              this.__free--;
              return index;
            }
          }
        } // 理论不可能进入，除非bug


        throw new Error('Can not find free page');
      }
    }, {
      key: "del",
      value: function del(pos) {
        if (!this.grid[pos]) {
          this.grid[pos] = 1;
          this.__free++;
        }
      }
    }, {
      key: "getCoords",
      value: function getCoords(pos) {
        var size = this.size,
            number = this.number;
        var x = pos % number;
        var y = Math.floor(pos / number);
        return [x * size, y * size];
      }
    }, {
      key: "uuid",
      get: function get() {
        return this.__uuid;
      }
    }, {
      key: "size",
      get: function get() {
        return this.__size;
      }
    }, {
      key: "width",
      get: function get() {
        return this.__width;
      }
    }, {
      key: "height",
      get: function get() {
        return this.__height;
      }
    }, {
      key: "number",
      get: function get() {
        return this.__number;
      }
    }, {
      key: "total",
      get: function get() {
        return this.__total;
      }
    }, {
      key: "free",
      get: function get() {
        return this.__free;
      }
    }, {
      key: "grid",
      get: function get() {
        return this.__grid;
      }
    }, {
      key: "offscreen",
      get: function get() {
        return this.__offscreen;
      }
    }, {
      key: "canvas",
      get: function get() {
        return this.offscreen.canvas;
      }
    }, {
      key: "ctx",
      get: function get() {
        return this.offscreen.ctx;
      }
    }, {
      key: "update",
      get: function get() {
        return this.__update;
      },
      set: function set(v) {
        this.__update = v;
      }
    }], [{
      key: "getInstance",
      value: function getInstance(size) {
        if (size > MAX) {
          return;
        }

        var s = SIZE[0];
        var n = NUMBER$2[0]; // 使用刚好满足的尺寸

        for (var i = 0, len = SIZE.length; i < len; i++) {
          s = SIZE[i];
          n = NUMBER$2[i];

          if (SIZE[i] >= size) {
            break;
          }
        }

        var list = HASH_CANVAS[s] = HASH_CANVAS[s] || []; // 从hash列表中尝试取可用的一页，找不到就生成新的页

        var page;

        for (var _i = 0, _len = list.length; _i < _len; _i++) {
          var item = list[_i];

          if (item.free) {
            page = item;
            break;
          }
        }

        if (!page) {
          page = new Page(s, n);

          if (!page.offscreen) {
            inject.error('Can not create off-screen for page');
            return;
          }

          list.push(page);
        }

        var pos = page.add();
        return {
          page: page,
          pos: pos
        };
      }
    }, {
      key: "CONFIG",
      get: function get() {
        return {
          SIZE: SIZE,
          NUMBER: NUMBER$2
        };
      },
      set: function set(v) {
        if (!v || !Array.isArray(v.SIZE) || !Array.isArray(v.NUMBER)) {
          return;
        }

        SIZE = v.SIZE;
        NUMBER$2 = v.NUMBER;
        MAX = SIZE[SIZE.length - 1];
      }
    }, {
      key: "MAX",
      get: function get() {
        return MAX;
      }
    }, {
      key: "genUuid",
      value: function genUuid() {
        return uuid++;
      }
    }]);

    return Page;
  }();

  function calDeg(x1, y1, x2, y2) {
    var dx = x2 - x1;
    var dy = y2 - y1;
    var atan = Math.atan(Math.abs(dy) / Math.abs(dx)); // 2象限

    if (dx < 0 && dy >= 0) {
      return Math.PI - atan;
    } // 3象限


    if (dx < 0 && dy < 0) {
      return atan - Math.PI;
    } // 1象限


    if (dx >= 0 && dy >= 0) {
      return atan;
    } // 4象限，顺时针正好


    return -atan;
  }

  function rotate(theta) {
    var sin = Math.sin(theta);
    var cos = Math.cos(theta);
    var t = mx.identity();
    t[0] = t[5] = cos;
    t[1] = sin;
    t[4] = -sin;
    return t;
  }
  /**
   * 确保3个点中，a点在三角形左上方，b/c在右方，同时ab到ac要顺时针旋转
   * @param points
   */


  function pointIndex(points) {
    var _points = _slicedToArray(points, 6),
        x1 = _points[0],
        y1 = _points[1],
        x2 = _points[2],
        y2 = _points[3],
        x3 = _points[4],
        y3 = _points[5];

    var index = [0, 1, 2]; // 将a点放入最左

    if (x2 < x1 && x2 < x3) {
      var _ref = [x2, y2, x1, y1];
      x1 = _ref[0];
      y1 = _ref[1];
      x2 = _ref[2];
      y2 = _ref[3];
      index[0] = 1;
      index[1] = 0;
    } else if (x3 < x2 && x3 < x1) {
      var _ref2 = [x3, y3, x1, y1];
      x1 = _ref2[0];
      y1 = _ref2[1];
      x3 = _ref2[2];
      y3 = _ref2[3];
      index[0] = 2;
      index[2] = 0;
    } // 有可能出现2个并列的情况，判断取上面那个


    if (x1 === x2) {
      if (y1 > y2) {
        var _ref3 = [x2, y2, x1, y1];
        x1 = _ref3[0];
        y1 = _ref3[1];
        x2 = _ref3[2];
        y2 = _ref3[3];
        var t = index[0];
        index[0] = index[1];
        index[1] = t;
      }
    } else if (x1 === x3) {
      if (y1 > y3) {
        var _ref4 = [x3, y3, x1, y1];
        x1 = _ref4[0];
        y1 = _ref4[1];
        x3 = _ref4[2];
        y3 = _ref4[3];
        var _t = index[0];
        index[0] = index[2];
        index[2] = _t;
      }
    } // ab到ac要顺时针旋转，即2个向量夹角为正，用向量叉乘判断正负


    var cross = (x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1);

    if (cross < 0) {
      var _ref5 = [x3, y3, x2, y2];
      x2 = _ref5[0];
      y2 = _ref5[1];
      x3 = _ref5[2];
      y3 = _ref5[3];
      var _t2 = index[1];
      index[1] = index[2];
      index[2] = _t2;
    }

    return [x1, y1, x2, y2, x3, y3, index];
  }
  /**
   * 第2个点根据第一个点的交换顺序交换
   * @param points
   * @param index
   * @returns {[]}
   */


  function pointByIndex(points, index) {
    var res = [];

    for (var i = 0, len = index.length; i < len; i++) {
      var j = index[i];
      res.push(points[j * 2]);
      res.push(points[j * 2 + 1]);
    }

    return res;
  }
  /**
   * 确保3个点中，a点在三角形左上方，b/c在右方，同时ab到ac要顺时针旋转
   * @param source 源3个点
   * @param target 目标3个点
   * @returns 交换顺序后的点坐标
   */


  function exchangeOrder(source, target) {
    var _pointIndex = pointIndex(source),
        _pointIndex2 = _slicedToArray(_pointIndex, 7),
        sx1 = _pointIndex2[0],
        sy1 = _pointIndex2[1],
        sx2 = _pointIndex2[2],
        sy2 = _pointIndex2[3],
        sx3 = _pointIndex2[4],
        sy3 = _pointIndex2[5],
        index = _pointIndex2[6];

    var _pointByIndex = pointByIndex(target, index),
        _pointByIndex2 = _slicedToArray(_pointByIndex, 6),
        tx1 = _pointByIndex2[0],
        ty1 = _pointByIndex2[1],
        tx2 = _pointByIndex2[2],
        ty2 = _pointByIndex2[3],
        tx3 = _pointByIndex2[4],
        ty3 = _pointByIndex2[5];

    return [[sx1, sy1, sx2, sy2, sx3, sy3], [tx1, ty1, tx2, ty2, tx3, ty3]];
  }
  /**
   * 存在一种情况，变换结果使得三角形镜像相反了，即顶点a越过bc线，判断是否溢出
   * @param source
   * @param target
   * @returns {boolean}是否溢出
   */


  function isOverflow(source, target) {
    var _source = _slicedToArray(source, 6),
        sx1 = _source[0],
        sy1 = _source[1],
        sx2 = _source[2],
        sy2 = _source[3],
        sx3 = _source[4],
        sy3 = _source[5];

    var _target = _slicedToArray(target, 6),
        tx1 = _target[0],
        ty1 = _target[1],
        tx2 = _target[2],
        ty2 = _target[3],
        tx3 = _target[4],
        ty3 = _target[5];

    var cross1 = (sx2 - sx1) * (sy3 - sy1) - (sx3 - sx1) * (sy2 - sy1);
    var cross2 = (tx2 - tx1) * (ty3 - ty1) - (tx3 - tx1) * (ty2 - ty1);
    return cross1 > 0 && cross2 < 0 || cross1 < 0 && cross2 > 0;
  }

  function transform(source, target) {
    var _source2 = _slicedToArray(source, 6),
        sx1 = _source2[0],
        sy1 = _source2[1],
        sx2 = _source2[2],
        sy2 = _source2[3],
        sx3 = _source2[4],
        sy3 = _source2[5];

    var _target2 = _slicedToArray(target, 6),
        tx1 = _target2[0],
        ty1 = _target2[1],
        tx2 = _target2[2],
        ty2 = _target2[3],
        tx3 = _target2[4],
        ty3 = _target2[5]; // 记录翻转


    var overflow = isOverflow(source, target); // 第0步，将源三角第1个a点移到原点

    var m = mx.identity();
    m[12] = -sx1;
    m[13] = -sy1;
    var t; // 第1步，以第1条边ab为基准，将其贴合x轴上，为后续倾斜不干扰做准备

    var theta = calDeg(sx1, sy1, sx2, sy2);

    if (theta !== 0) {
      t = rotate(-theta);
      m = mx.multiply(t, m);
    } // 第2步，以第1条边AB为基准，缩放x轴ab至目标相同长度，可与4步合并


    var ls = geom.pointsDistance(sx1, sy1, sx2, sy2);
    var lt = geom.pointsDistance(tx1, ty1, tx2, ty2); // if(ls !== lt) {
    // let scale = lt / ls;
    // t = matrix.identity();
    // t[0] = scale;
    // m = matrix.multiply(t, m);
    // }
    // 第3步，缩放y，先将目标三角形旋转到x轴平行，再变换坐标计算

    var n = mx.identity();
    n[12] = -tx1;
    n[13] = -ty1;
    theta = calDeg(tx1, ty1, tx2, ty2); // 记录下这个旋转角度，后面源三角形要反向旋转

    var alpha = theta;

    if (theta !== 0) {
      t = rotate(-theta);
      n = mx.multiply(t, n);
    } // 目标三角反向旋转至x轴后的坐标
    // 源三角目前的第3点坐标y值即为长度，因为a点在原点0无需减去


    var ls2 = Math.abs(mx.calPoint([sx3, sy3], m)[1]);
    var lt2 = Math.abs(mx.calPoint([tx3, ty3], n)[1]); // 缩放y
    // if(ls2 !== lt2) {
    // let scale = lt / ls;
    // t = matrix.identity();
    // t[3] = scale;
    // m = matrix.multiply(t, m);
    // }

    if (ls !== lt || ls2 !== lt2) {
      t = mx.identity();

      if (ls !== lt) {
        t[0] = lt / ls;
      }

      if (ls2 !== lt2) {
        t[5] = lt2 / ls2;
      }

      m = mx.multiply(t, m);
    } // 第4步，x轴倾斜，用余弦定理求目前a和A的夹角


    n = m;

    var _matrix$calPoint = mx.calPoint([sx1, sy1], n),
        _matrix$calPoint2 = _slicedToArray(_matrix$calPoint, 2),
        ax1 = _matrix$calPoint2[0],
        ay1 = _matrix$calPoint2[1];

    var _matrix$calPoint3 = mx.calPoint([sx2, sy2], n),
        _matrix$calPoint4 = _slicedToArray(_matrix$calPoint3, 2),
        ax2 = _matrix$calPoint4[0],
        ay2 = _matrix$calPoint4[1];

    var _matrix$calPoint5 = mx.calPoint([sx3, sy3], n),
        _matrix$calPoint6 = _slicedToArray(_matrix$calPoint5, 2),
        ax3 = _matrix$calPoint6[0],
        ay3 = _matrix$calPoint6[1];

    var ab = geom.pointsDistance(ax1, ay1, ax2, ay2);
    var ac = geom.pointsDistance(ax1, ay1, ax3, ay3);
    var bc = geom.pointsDistance(ax3, ay3, ax2, ay2);
    var AB = geom.pointsDistance(tx1, ty1, tx2, ty2);
    var AC = geom.pointsDistance(tx1, ty1, tx3, ty3);
    var BC = geom.pointsDistance(tx3, ty3, tx2, ty2);
    var a = geom.angleBySide(bc, ab, ac);
    var A = geom.angleBySide(BC, AB, AC); // 先至90°，再旋转至目标角，可以合并成tan相加，不知道为什么不能直接tan倾斜差值角度

    if (a !== A) {
      t = mx.identity();
      t[4] = Math.tan(a - Math.PI * 0.5) + Math.tan(Math.PI * 0.5 - A);
      m = mx.multiply(t, m);
    } // 发生翻转时特殊处理按x轴垂直翻转


    if (overflow) {
      m[1] = -m[1];
      m[5] = -m[5];
      m[13] = -m[13];
    } // 第5步，再次旋转，角度为目标旋转到x轴的负值，可与下步合并


    if (alpha !== 0) {
      t = rotate(alpha); // m = matrix.multiply(t, m);
    } else {
      t = mx.identity();
    } // 第6步，移动第一个点的差值
    // t = matrix.identity();


    t[12] = tx1;
    t[13] = ty1;
    return mx.multiply(t, m);
  }

  var tar = {
    exchangeOrder: exchangeOrder,
    isOverflow: isOverflow,
    transform: transform
  };

  /**
   * martinez v0.7.1
   * Martinez polygon clipping algorithm, does boolean operation on polygons (multipolygons, polygons with holes etc): intersection, union, difference, xor
   *
   * @author Alex Milevski <info@w8r.name>
   * @license MIT
   * @preserve
   */
  function DEFAULT_COMPARE(a, b) {
    return a > b ? 1 : a < b ? -1 : 0;
  }

  var SplayTree = function SplayTree(compare, noDuplicates) {
    if (compare === void 0) compare = DEFAULT_COMPARE;
    if (noDuplicates === void 0) noDuplicates = false;
    this._compare = compare;
    this._root = null;
    this._size = 0;
    this._noDuplicates = !!noDuplicates;
  };

  var prototypeAccessors = {
    size: {
      configurable: true
    }
  };

  SplayTree.prototype.rotateLeft = function rotateLeft(x) {
    var y = x.right;

    if (y) {
      x.right = y.left;

      if (y.left) {
        y.left.parent = x;
      }

      y.parent = x.parent;
    }

    if (!x.parent) {
      this._root = y;
    } else if (x === x.parent.left) {
      x.parent.left = y;
    } else {
      x.parent.right = y;
    }

    if (y) {
      y.left = x;
    }

    x.parent = y;
  };

  SplayTree.prototype.rotateRight = function rotateRight(x) {
    var y = x.left;

    if (y) {
      x.left = y.right;

      if (y.right) {
        y.right.parent = x;
      }

      y.parent = x.parent;
    }

    if (!x.parent) {
      this._root = y;
    } else if (x === x.parent.left) {
      x.parent.left = y;
    } else {
      x.parent.right = y;
    }

    if (y) {
      y.right = x;
    }

    x.parent = y;
  };

  SplayTree.prototype._splay = function _splay(x) {
    while (x.parent) {
      var p = x.parent;

      if (!p.parent) {
        if (p.left === x) {
          this.rotateRight(p);
        } else {
          this.rotateLeft(p);
        }
      } else if (p.left === x && p.parent.left === p) {
        this.rotateRight(p.parent);
        this.rotateRight(p);
      } else if (p.right === x && p.parent.right === p) {
        this.rotateLeft(p.parent);
        this.rotateLeft(p);
      } else if (p.left === x && p.parent.right === p) {
        this.rotateRight(p);
        this.rotateLeft(p);
      } else {
        this.rotateLeft(p);
        this.rotateRight(p);
      }
    }
  };

  SplayTree.prototype.splay = function splay(x) {
    var p, gp, ggp, l, r;

    while (x.parent) {
      p = x.parent;
      gp = p.parent;

      if (gp && gp.parent) {
        ggp = gp.parent;

        if (ggp.left === gp) {
          ggp.left = x;
        } else {
          ggp.right = x;
        }

        x.parent = ggp;
      } else {
        x.parent = null;
        this._root = x;
      }

      l = x.left;
      r = x.right;

      if (x === p.left) {
        // left
        if (gp) {
          if (gp.left === p) {
            /* zig-zig */
            if (p.right) {
              gp.left = p.right;
              gp.left.parent = gp;
            } else {
              gp.left = null;
            }

            p.right = gp;
            gp.parent = p;
          } else {
            /* zig-zag */
            if (l) {
              gp.right = l;
              l.parent = gp;
            } else {
              gp.right = null;
            }

            x.left = gp;
            gp.parent = x;
          }
        }

        if (r) {
          p.left = r;
          r.parent = p;
        } else {
          p.left = null;
        }

        x.right = p;
        p.parent = x;
      } else {
        // right
        if (gp) {
          if (gp.right === p) {
            /* zig-zig */
            if (p.left) {
              gp.right = p.left;
              gp.right.parent = gp;
            } else {
              gp.right = null;
            }

            p.left = gp;
            gp.parent = p;
          } else {
            /* zig-zag */
            if (r) {
              gp.left = r;
              r.parent = gp;
            } else {
              gp.left = null;
            }

            x.right = gp;
            gp.parent = x;
          }
        }

        if (l) {
          p.right = l;
          l.parent = p;
        } else {
          p.right = null;
        }

        x.left = p;
        p.parent = x;
      }
    }
  };

  SplayTree.prototype.replace = function replace(u, v) {
    if (!u.parent) {
      this._root = v;
    } else if (u === u.parent.left) {
      u.parent.left = v;
    } else {
      u.parent.right = v;
    }

    if (v) {
      v.parent = u.parent;
    }
  };

  SplayTree.prototype.minNode = function minNode(u) {
    if (u === void 0) u = this._root;

    if (u) {
      while (u.left) {
        u = u.left;
      }
    }

    return u;
  };

  SplayTree.prototype.maxNode = function maxNode(u) {
    if (u === void 0) u = this._root;

    if (u) {
      while (u.right) {
        u = u.right;
      }
    }

    return u;
  };

  SplayTree.prototype.insert = function insert(key, data) {
    var z = this._root;
    var p = null;
    var comp = this._compare;
    var cmp;

    if (this._noDuplicates) {
      while (z) {
        p = z;
        cmp = comp(z.key, key);

        if (cmp === 0) {
          return;
        } else if (comp(z.key, key) < 0) {
          z = z.right;
        } else {
          z = z.left;
        }
      }
    } else {
      while (z) {
        p = z;

        if (comp(z.key, key) < 0) {
          z = z.right;
        } else {
          z = z.left;
        }
      }
    }

    z = {
      key: key,
      data: data,
      left: null,
      right: null,
      parent: p
    };

    if (!p) {
      this._root = z;
    } else if (comp(p.key, z.key) < 0) {
      p.right = z;
    } else {
      p.left = z;
    }

    this.splay(z);
    this._size++;
    return z;
  };

  SplayTree.prototype.find = function find(key) {
    var z = this._root;
    var comp = this._compare;

    while (z) {
      var cmp = comp(z.key, key);

      if (cmp < 0) {
        z = z.right;
      } else if (cmp > 0) {
        z = z.left;
      } else {
        return z;
      }
    }

    return null;
  };
  /**
   * Whether the tree contains a node with the given key
   * @param{Key} key
   * @return {boolean} true/false
   */


  SplayTree.prototype.contains = function contains(key) {
    var node = this._root;
    var comparator = this._compare;

    while (node) {
      var cmp = comparator(key, node.key);

      if (cmp === 0) {
        return true;
      } else if (cmp < 0) {
        node = node.left;
      } else {
        node = node.right;
      }
    }

    return false;
  };

  SplayTree.prototype.remove = function remove(key) {
    var z = this.find(key);

    if (!z) {
      return false;
    }

    this.splay(z);

    if (!z.left) {
      this.replace(z, z.right);
    } else if (!z.right) {
      this.replace(z, z.left);
    } else {
      var y = this.minNode(z.right);

      if (y.parent !== z) {
        this.replace(y, y.right);
        y.right = z.right;
        y.right.parent = y;
      }

      this.replace(z, y);
      y.left = z.left;
      y.left.parent = y;
    }

    this._size--;
    return true;
  };

  SplayTree.prototype.removeNode = function removeNode(z) {
    if (!z) {
      return false;
    }

    this.splay(z);

    if (!z.left) {
      this.replace(z, z.right);
    } else if (!z.right) {
      this.replace(z, z.left);
    } else {
      var y = this.minNode(z.right);

      if (y.parent !== z) {
        this.replace(y, y.right);
        y.right = z.right;
        y.right.parent = y;
      }

      this.replace(z, y);
      y.left = z.left;
      y.left.parent = y;
    }

    this._size--;
    return true;
  };

  SplayTree.prototype.erase = function erase(key) {
    var z = this.find(key);

    if (!z) {
      return;
    }

    this.splay(z);
    var s = z.left;
    var t = z.right;
    var sMax = null;

    if (s) {
      s.parent = null;
      sMax = this.maxNode(s);
      this.splay(sMax);
      this._root = sMax;
    }

    if (t) {
      if (s) {
        sMax.right = t;
      } else {
        this._root = t;
      }

      t.parent = sMax;
    }

    this._size--;
  };
  /**
   * Removes and returns the node with smallest key
   * @return {?Node}
   */


  SplayTree.prototype.pop = function pop() {
    var node = this._root,
        returnValue = null;

    if (node) {
      while (node.left) {
        node = node.left;
      }

      returnValue = {
        key: node.key,
        data: node.data
      };
      this.remove(node.key);
    }

    return returnValue;
  };
  /* eslint-disable class-methods-use-this */

  /**
   * Successor node
   * @param{Node} node
   * @return {?Node}
   */


  SplayTree.prototype.next = function next(node) {
    var successor = node;

    if (successor) {
      if (successor.right) {
        successor = successor.right;

        while (successor && successor.left) {
          successor = successor.left;
        }
      } else {
        successor = node.parent;

        while (successor && successor.right === node) {
          node = successor;
          successor = successor.parent;
        }
      }
    }

    return successor;
  };
  /**
   * Predecessor node
   * @param{Node} node
   * @return {?Node}
   */


  SplayTree.prototype.prev = function prev(node) {
    var predecessor = node;

    if (predecessor) {
      if (predecessor.left) {
        predecessor = predecessor.left;

        while (predecessor && predecessor.right) {
          predecessor = predecessor.right;
        }
      } else {
        predecessor = node.parent;

        while (predecessor && predecessor.left === node) {
          node = predecessor;
          predecessor = predecessor.parent;
        }
      }
    }

    return predecessor;
  };
  /* eslint-enable class-methods-use-this */

  /**
   * @param{forEachCallback} callback
   * @return {SplayTree}
   */


  SplayTree.prototype.forEach = function forEach(callback) {
    var current = this._root;
    var s = [],
        done = false,
        i = 0;

    while (!done) {
      // Reach the left most Node of the current Node
      if (current) {
        // Place pointer to a tree node on the stack
        // before traversing the node's left subtree
        s.push(current);
        current = current.left;
      } else {
        // BackTrack from the empty subtree and visit the Node
        // at the top of the stack; however, if the stack is
        // empty you are done
        if (s.length > 0) {
          current = s.pop();
          callback(current, i++); // We have visited the node and its left
          // subtree. Now, it's right subtree's turn

          current = current.right;
        } else {
          done = true;
        }
      }
    }

    return this;
  };
  /**
   * Walk key range from `low` to `high`. Stops if `fn` returns a value.
   * @param{Key}    low
   * @param{Key}    high
   * @param{Function} fn
   * @param{*?}     ctx
   * @return {SplayTree}
   */


  SplayTree.prototype.range = function range(low, high, fn, ctx) {
    var Q = [];
    var compare = this._compare;
    var node = this._root,
        cmp;

    while (Q.length !== 0 || node) {
      if (node) {
        Q.push(node);
        node = node.left;
      } else {
        node = Q.pop();
        cmp = compare(node.key, high);

        if (cmp > 0) {
          break;
        } else if (compare(node.key, low) >= 0) {
          if (fn.call(ctx, node)) {
            return this;
          } // stop if smth is returned

        }

        node = node.right;
      }
    }

    return this;
  };
  /**
   * Returns all keys in order
   * @return {Array<Key>}
   */


  SplayTree.prototype.keys = function keys() {
    var current = this._root;
    var s = [],
        r = [],
        done = false;

    while (!done) {
      if (current) {
        s.push(current);
        current = current.left;
      } else {
        if (s.length > 0) {
          current = s.pop();
          r.push(current.key);
          current = current.right;
        } else {
          done = true;
        }
      }
    }

    return r;
  };
  /**
   * Returns `data` fields of all nodes in order.
   * @return {Array<Value>}
   */


  SplayTree.prototype.values = function values() {
    var current = this._root;
    var s = [],
        r = [],
        done = false;

    while (!done) {
      if (current) {
        s.push(current);
        current = current.left;
      } else {
        if (s.length > 0) {
          current = s.pop();
          r.push(current.data);
          current = current.right;
        } else {
          done = true;
        }
      }
    }

    return r;
  };
  /**
   * Returns node at given index
   * @param{number} index
   * @return {?Node}
   */


  SplayTree.prototype.at = function at(index) {
    // removed after a consideration, more misleading than useful
    // index = index % this.size;
    // if (index < 0) index = this.size - index;
    var current = this._root;
    var s = [],
        done = false,
        i = 0;

    while (!done) {
      if (current) {
        s.push(current);
        current = current.left;
      } else {
        if (s.length > 0) {
          current = s.pop();

          if (i === index) {
            return current;
          }

          i++;
          current = current.right;
        } else {
          done = true;
        }
      }
    }

    return null;
  };
  /**
   * Bulk-load items. Both array have to be same size
   * @param{Array<Key>}  keys
   * @param{Array<Value>}[values]
   * @param{Boolean}     [presort=false] Pre-sort keys and values, using
   *                                       tree's comparator. Sorting is done
   *                                       in-place
   * @return {AVLTree}
   */


  SplayTree.prototype.load = function load(keys, values, presort) {
    if (keys === void 0) keys = [];
    if (values === void 0) values = [];
    if (presort === void 0) presort = false;

    if (this._size !== 0) {
      throw new Error('bulk-load: tree is not empty');
    }

    var size = keys.length;

    if (presort) {
      sort(keys, values, 0, size - 1, this._compare);
    }

    this._root = loadRecursive(null, keys, values, 0, size);
    this._size = size;
    return this;
  };

  SplayTree.prototype.min = function min() {
    var node = this.minNode(this._root);

    if (node) {
      return node.key;
    } else {
      return null;
    }
  };

  SplayTree.prototype.max = function max() {
    var node = this.maxNode(this._root);

    if (node) {
      return node.key;
    } else {
      return null;
    }
  };

  SplayTree.prototype.isEmpty = function isEmpty() {
    return this._root === null;
  };

  prototypeAccessors.size.get = function () {
    return this._size;
  };
  /**
   * Create a tree and load it with items
   * @param{Array<Key>}        keys
   * @param{Array<Value>?}      [values]

   * @param{Function?}          [comparator]
   * @param{Boolean?}           [presort=false] Pre-sort keys and values, using
   *                                             tree's comparator. Sorting is done
   *                                             in-place
   * @param{Boolean?}           [noDuplicates=false] Allow duplicates
   * @return {SplayTree}
   */


  SplayTree.createTree = function createTree(keys, values, comparator, presort, noDuplicates) {
    return new SplayTree(comparator, noDuplicates).load(keys, values, presort);
  };

  Object.defineProperties(SplayTree.prototype, prototypeAccessors);

  function loadRecursive(parent, keys, values, start, end) {
    var size = end - start;

    if (size > 0) {
      var middle = start + Math.floor(size / 2);
      var key = keys[middle];
      var data = values[middle];
      var node = {
        key: key,
        data: data,
        parent: parent
      };
      node.left = loadRecursive(node, keys, values, start, middle);
      node.right = loadRecursive(node, keys, values, middle + 1, end);
      return node;
    }

    return null;
  }

  function sort(keys, values, left, right, compare) {
    if (left >= right) {
      return;
    }

    var pivot = keys[left + right >> 1];
    var i = left - 1;
    var j = right + 1;

    while (true) {
      do {
        i++;
      } while (compare(keys[i], pivot) < 0);

      do {
        j--;
      } while (compare(keys[j], pivot) > 0);

      if (i >= j) {
        break;
      }

      var tmp = keys[i];
      keys[i] = keys[j];
      keys[j] = tmp;
      tmp = values[i];
      values[i] = values[j];
      values[j] = tmp;
    }

    sort(keys, values, left, j, compare);
    sort(keys, values, j + 1, right, compare);
  }

  var NORMAL = 0;
  var NON_CONTRIBUTING = 1;
  var SAME_TRANSITION = 2;
  var DIFFERENT_TRANSITION = 3;
  var INTERSECTION = 0;
  var UNION = 1;
  var DIFFERENCE = 2;
  var XOR = 3;
  /**
   * @param  {SweepEvent} event
   * @param  {SweepEvent} prev
   * @param  {Operation} operation
   */

  function computeFields(event, prev, operation) {
    // compute inOut and otherInOut fields
    if (prev === null) {
      event.inOut = false;
      event.otherInOut = true; // previous line segment in sweepline belongs to the same polygon
    } else {
      if (event.isSubject === prev.isSubject) {
        event.inOut = !prev.inOut;
        event.otherInOut = prev.otherInOut; // previous line segment in sweepline belongs to the clipping polygon
      } else {
        event.inOut = !prev.otherInOut;
        event.otherInOut = prev.isVertical() ? !prev.inOut : prev.inOut;
      } // compute prevInResult field


      if (prev) {
        event.prevInResult = !inResult(prev, operation) || prev.isVertical() ? prev.prevInResult : prev;
      }
    } // check if the line segment belongs to the Boolean operation


    var isInResult = inResult(event, operation);

    if (isInResult) {
      event.resultTransition = determineResultTransition(event, operation);
    } else {
      event.resultTransition = 0;
    }
  }
  /* eslint-disable indent */


  function inResult(event, operation) {
    switch (event.type) {
      case NORMAL:
        switch (operation) {
          case INTERSECTION:
            return !event.otherInOut;

          case UNION:
            return event.otherInOut;

          case DIFFERENCE:
            // return (event.isSubject && !event.otherInOut) ||
            //         (!event.isSubject && event.otherInOut);
            return event.isSubject && event.otherInOut || !event.isSubject && !event.otherInOut;

          case XOR:
            return true;
        }

        break;

      case SAME_TRANSITION:
        return operation === INTERSECTION || operation === UNION;

      case DIFFERENT_TRANSITION:
        return operation === DIFFERENCE;

      case NON_CONTRIBUTING:
        return false;
    }

    return false;
  }
  /* eslint-enable indent */


  function determineResultTransition(event, operation) {
    var thisIn = !event.inOut;
    var thatIn = !event.otherInOut;
    var isIn;

    switch (operation) {
      case INTERSECTION:
        isIn = thisIn && thatIn;
        break;

      case UNION:
        isIn = thisIn || thatIn;
        break;

      case XOR:
        isIn = thisIn ^ thatIn;
        break;

      case DIFFERENCE:
        if (event.isSubject) {
          isIn = thisIn && !thatIn;
        } else {
          isIn = thatIn && !thisIn;
        }

        break;
    }

    return isIn ? +1 : -1;
  }

  var SweepEvent = function SweepEvent(point, left, otherEvent, isSubject, edgeType) {
    /**
     * Is left endpoint?
     * @type {Boolean}
     */
    this.left = left;
    /**
     * @type {Array.<Number>}
     */

    this.point = point;
    /**
     * Other edge reference
     * @type {SweepEvent}
     */

    this.otherEvent = otherEvent;
    /**
     * Belongs to source or clipping polygon
     * @type {Boolean}
     */

    this.isSubject = isSubject;
    /**
     * Edge contribution type
     * @type {Number}
     */

    this.type = edgeType || NORMAL;
    /**
     * In-out transition for the sweepline crossing polygon
     * @type {Boolean}
     */

    this.inOut = false;
    /**
     * @type {Boolean}
     */

    this.otherInOut = false;
    /**
     * Previous event in result?
     * @type {SweepEvent}
     */

    this.prevInResult = null;
    /**
     * Type of result transition (0 = not in result, +1 = out-in, -1, in-out)
     * @type {Number}
     */

    this.resultTransition = 0; // connection step

    /**
     * @type {Number}
     */

    this.otherPos = -1;
    /**
     * @type {Number}
     */

    this.outputContourId = -1;
    this.isExteriorRing = true; // TODO: Looks unused, remove?
  };

  var prototypeAccessors$1 = {
    inResult: {
      configurable: true
    }
  };
  /**
   * @param{Array.<Number>}p
   * @return {Boolean}
   */

  SweepEvent.prototype.isBelow = function isBelow(p) {
    var p0 = this.point,
        p1 = this.otherEvent.point;
    return this.left ? (p0[0] - p[0]) * (p1[1] - p[1]) - (p1[0] - p[0]) * (p0[1] - p[1]) > 0 // signedArea(this.point, this.otherEvent.point, p) > 0 :
    : (p1[0] - p[0]) * (p0[1] - p[1]) - (p0[0] - p[0]) * (p1[1] - p[1]) > 0; //signedArea(this.otherEvent.point, this.point, p) > 0;
  };
  /**
   * @param{Array.<Number>}p
   * @return {Boolean}
   */


  SweepEvent.prototype.isAbove = function isAbove(p) {
    return !this.isBelow(p);
  };
  /**
   * @return {Boolean}
   */


  SweepEvent.prototype.isVertical = function isVertical() {
    return this.point[0] === this.otherEvent.point[0];
  };
  /**
   * Does event belong to result?
   * @return {Boolean}
   */


  prototypeAccessors$1.inResult.get = function () {
    return this.resultTransition !== 0;
  };

  SweepEvent.prototype.clone = function clone() {
    var copy = new SweepEvent(this.point, this.left, this.otherEvent, this.isSubject, this.type);
    copy.contourId = this.contourId;
    copy.resultTransition = this.resultTransition;
    copy.prevInResult = this.prevInResult;
    copy.isExteriorRing = this.isExteriorRing;
    copy.inOut = this.inOut;
    copy.otherInOut = this.otherInOut;
    return copy;
  };

  Object.defineProperties(SweepEvent.prototype, prototypeAccessors$1);

  function equals(p1, p2) {
    if (p1[0] === p2[0]) {
      if (p1[1] === p2[1]) {
        return true;
      } else {
        return false;
      }
    }

    return false;
  } // const EPSILON = 1e-9;
  // const abs = Math.abs;
  // TODO https://github.com/w8r/martinez/issues/6#issuecomment-262847164
  // Precision problem.
  //
  // module.exports = function equals(p1, p2) {
  //   return abs(p1[0] - p2[0]) <= EPSILON && abs(p1[1] - p2[1]) <= EPSILON;
  // };


  var epsilon = 1.1102230246251565e-16;
  var splitter = 134217729;
  var resulterrbound = (3 + 8 * epsilon) * epsilon; // fast_expansion_sum_zeroelim routine from oritinal code

  function sum(elen, e, flen, f, h) {
    var Q, Qnew, hh, bvirt;
    var enow = e[0];
    var fnow = f[0];
    var eindex = 0;
    var findex = 0;

    if (fnow > enow === fnow > -enow) {
      Q = enow;
      enow = e[++eindex];
    } else {
      Q = fnow;
      fnow = f[++findex];
    }

    var hindex = 0;

    if (eindex < elen && findex < flen) {
      if (fnow > enow === fnow > -enow) {
        Qnew = enow + Q;
        hh = Q - (Qnew - enow);
        enow = e[++eindex];
      } else {
        Qnew = fnow + Q;
        hh = Q - (Qnew - fnow);
        fnow = f[++findex];
      }

      Q = Qnew;

      if (hh !== 0) {
        h[hindex++] = hh;
      }

      while (eindex < elen && findex < flen) {
        if (fnow > enow === fnow > -enow) {
          Qnew = Q + enow;
          bvirt = Qnew - Q;
          hh = Q - (Qnew - bvirt) + (enow - bvirt);
          enow = e[++eindex];
        } else {
          Qnew = Q + fnow;
          bvirt = Qnew - Q;
          hh = Q - (Qnew - bvirt) + (fnow - bvirt);
          fnow = f[++findex];
        }

        Q = Qnew;

        if (hh !== 0) {
          h[hindex++] = hh;
        }
      }
    }

    while (eindex < elen) {
      Qnew = Q + enow;
      bvirt = Qnew - Q;
      hh = Q - (Qnew - bvirt) + (enow - bvirt);
      enow = e[++eindex];
      Q = Qnew;

      if (hh !== 0) {
        h[hindex++] = hh;
      }
    }

    while (findex < flen) {
      Qnew = Q + fnow;
      bvirt = Qnew - Q;
      hh = Q - (Qnew - bvirt) + (fnow - bvirt);
      fnow = f[++findex];
      Q = Qnew;

      if (hh !== 0) {
        h[hindex++] = hh;
      }
    }

    if (Q !== 0 || hindex === 0) {
      h[hindex++] = Q;
    }

    return hindex;
  }

  function estimate(elen, e) {
    var Q = e[0];

    for (var i = 1; i < elen; i++) {
      Q += e[i];
    }

    return Q;
  }

  function vec(n) {
    return new Float64Array(n);
  }

  var ccwerrboundA = (3 + 16 * epsilon) * epsilon;
  var ccwerrboundB = (2 + 12 * epsilon) * epsilon;
  var ccwerrboundC = (9 + 64 * epsilon) * epsilon * epsilon;
  var B = vec(4);
  var C1 = vec(8);
  var C2 = vec(12);
  var D = vec(16);
  var u = vec(4);

  function orient2dadapt(ax, ay, bx, by, cx, cy, detsum) {
    var acxtail, acytail, bcxtail, bcytail;

    var bvirt, c, ahi, alo, bhi, blo, _i, _j, _0, s1, s0, t1, t0, u3;

    var acx = ax - cx;
    var bcx = bx - cx;
    var acy = ay - cy;
    var bcy = by - cy;
    s1 = acx * bcy;
    c = splitter * acx;
    ahi = c - (c - acx);
    alo = acx - ahi;
    c = splitter * bcy;
    bhi = c - (c - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acy * bcx;
    c = splitter * acy;
    ahi = c - (c - acy);
    alo = acy - ahi;
    c = splitter * bcx;
    bhi = c - (c - bcx);
    blo = bcx - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    B[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    B[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    B[2] = _j - (u3 - bvirt) + (_i - bvirt);
    B[3] = u3;
    var det = estimate(4, B);
    var errbound = ccwerrboundB * detsum;

    if (det >= errbound || -det >= errbound) {
      return det;
    }

    bvirt = ax - acx;
    acxtail = ax - (acx + bvirt) + (bvirt - cx);
    bvirt = bx - bcx;
    bcxtail = bx - (bcx + bvirt) + (bvirt - cx);
    bvirt = ay - acy;
    acytail = ay - (acy + bvirt) + (bvirt - cy);
    bvirt = by - bcy;
    bcytail = by - (bcy + bvirt) + (bvirt - cy);

    if (acxtail === 0 && acytail === 0 && bcxtail === 0 && bcytail === 0) {
      return det;
    }

    errbound = ccwerrboundC * detsum + resulterrbound * Math.abs(det);
    det += acx * bcytail + bcy * acxtail - (acy * bcxtail + bcx * acytail);

    if (det >= errbound || -det >= errbound) {
      return det;
    }

    s1 = acxtail * bcy;
    c = splitter * acxtail;
    ahi = c - (c - acxtail);
    alo = acxtail - ahi;
    c = splitter * bcy;
    bhi = c - (c - bcy);
    blo = bcy - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acytail * bcx;
    c = splitter * acytail;
    ahi = c - (c - acytail);
    alo = acytail - ahi;
    c = splitter * bcx;
    bhi = c - (c - bcx);
    blo = bcx - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    u[3] = u3;
    var C1len = sum(4, B, 4, u, C1);
    s1 = acx * bcytail;
    c = splitter * acx;
    ahi = c - (c - acx);
    alo = acx - ahi;
    c = splitter * bcytail;
    bhi = c - (c - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acy * bcxtail;
    c = splitter * acy;
    ahi = c - (c - acy);
    alo = acy - ahi;
    c = splitter * bcxtail;
    bhi = c - (c - bcxtail);
    blo = bcxtail - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    u[3] = u3;
    var C2len = sum(C1len, C1, 4, u, C2);
    s1 = acxtail * bcytail;
    c = splitter * acxtail;
    ahi = c - (c - acxtail);
    alo = acxtail - ahi;
    c = splitter * bcytail;
    bhi = c - (c - bcytail);
    blo = bcytail - bhi;
    s0 = alo * blo - (s1 - ahi * bhi - alo * bhi - ahi * blo);
    t1 = acytail * bcxtail;
    c = splitter * acytail;
    ahi = c - (c - acytail);
    alo = acytail - ahi;
    c = splitter * bcxtail;
    bhi = c - (c - bcxtail);
    blo = bcxtail - bhi;
    t0 = alo * blo - (t1 - ahi * bhi - alo * bhi - ahi * blo);
    _i = s0 - t0;
    bvirt = s0 - _i;
    u[0] = s0 - (_i + bvirt) + (bvirt - t0);
    _j = s1 + _i;
    bvirt = _j - s1;
    _0 = s1 - (_j - bvirt) + (_i - bvirt);
    _i = _0 - t1;
    bvirt = _0 - _i;
    u[1] = _0 - (_i + bvirt) + (bvirt - t1);
    u3 = _j + _i;
    bvirt = u3 - _j;
    u[2] = _j - (u3 - bvirt) + (_i - bvirt);
    u[3] = u3;
    var Dlen = sum(C2len, C2, 4, u, D);
    return D[Dlen - 1];
  }

  function orient2d(ax, ay, bx, by, cx, cy) {
    var detleft = (ay - cy) * (bx - cx);
    var detright = (ax - cx) * (by - cy);
    var det = detleft - detright;

    if (detleft === 0 || detright === 0 || detleft > 0 !== detright > 0) {
      return det;
    }

    var detsum = Math.abs(detleft + detright);

    if (Math.abs(det) >= ccwerrboundA * detsum) {
      return det;
    }

    return -orient2dadapt(ax, ay, bx, by, cx, cy, detsum);
  }
  /**
   * Signed area of the triangle (p0, p1, p2)
   * @param  {Array.<Number>} p0
   * @param  {Array.<Number>} p1
   * @param  {Array.<Number>} p2
   * @return {Number}
   */


  function signedArea(p0, p1, p2) {
    var res = orient2d(p0[0], p0[1], p1[0], p1[1], p2[0], p2[1]);

    if (res > 0) {
      return -1;
    }

    if (res < 0) {
      return 1;
    }

    return 0;
  }
  /**
   * @param  {SweepEvent} e1
   * @param  {SweepEvent} e2
   * @return {Number}
   */


  function compareEvents(e1, e2) {
    var p1 = e1.point;
    var p2 = e2.point; // Different x-coordinate

    if (p1[0] > p2[0]) {
      return 1;
    }

    if (p1[0] < p2[0]) {
      return -1;
    } // Different points, but same x-coordinate
    // Event with lower y-coordinate is processed first


    if (p1[1] !== p2[1]) {
      return p1[1] > p2[1] ? 1 : -1;
    }

    return specialCases(e1, e2, p1);
  }
  /* eslint-disable no-unused-vars */


  function specialCases(e1, e2, p1, p2) {
    // Same coordinates, but one is a left endpoint and the other is
    // a right endpoint. The right endpoint is processed first
    if (e1.left !== e2.left) {
      return e1.left ? 1 : -1;
    } // const p2 = e1.otherEvent.point, p3 = e2.otherEvent.point;
    // const sa = (p1[0] - p3[0]) * (p2[1] - p3[1]) - (p2[0] - p3[0]) * (p1[1] - p3[1])
    // Same coordinates, both events
    // are left endpoints or right endpoints.
    // not collinear


    if (signedArea(p1, e1.otherEvent.point, e2.otherEvent.point) !== 0) {
      // the event associate to the bottom segment is processed first
      return !e1.isBelow(e2.otherEvent.point) ? 1 : -1;
    }

    return !e1.isSubject && e2.isSubject ? 1 : -1;
  }
  /* eslint-enable no-unused-vars */

  /**
   * @param  {SweepEvent} se
   * @param  {Array.<Number>} p
   * @param  {Queue} queue
   * @return {Queue}
   */


  function divideSegment(se, p, queue) {
    var r = new SweepEvent(p, false, se, se.isSubject);
    var l = new SweepEvent(p, true, se.otherEvent, se.isSubject);
    /* eslint-disable no-console */

    if (equals(se.point, se.otherEvent.point)) {
      console.warn('what is that, a collapsed segment?', se);
    }
    /* eslint-enable no-console */


    r.contourId = l.contourId = se.contourId; // avoid a rounding error. The left event would be processed after the right event

    if (compareEvents(l, se.otherEvent) > 0) {
      se.otherEvent.left = true;
      l.left = false;
    } // avoid a rounding error. The left event would be processed after the right event
    // if (compareEvents(se, r) > 0) {}


    se.otherEvent.otherEvent = l;
    se.otherEvent = r;
    queue.push(l);
    queue.push(r);
    return queue;
  } //const EPS = 1e-9;

  /**
   * Finds the magnitude of the cross product of two vectors (if we pretend
   * they're in three dimensions)
   *
   * @param {Object} a First vector
   * @param {Object} b Second vector
   * @private
   * @returns {Number} The magnitude of the cross product
   */


  function crossProduct$2(a, b) {
    return a[0] * b[1] - a[1] * b[0];
  }
  /**
   * Finds the dot product of two vectors.
   *
   * @param {Object} a First vector
   * @param {Object} b Second vector
   * @private
   * @returns {Number} The dot product
   */


  function dotProduct$1(a, b) {
    return a[0] * b[0] + a[1] * b[1];
  }
  /**
   * Finds the intersection (if any) between two line segments a and b, given the
   * line segments' end points a1, a2 and b1, b2.
   *
   * This algorithm is based on Schneider and Eberly.
   * http://www.cimec.org.ar/~ncalvo/Schneider_Eberly.pdf
   * Page 244.
   *
   * @param {Array.<Number>} a1 point of first line
   * @param {Array.<Number>} a2 point of first line
   * @param {Array.<Number>} b1 point of second line
   * @param {Array.<Number>} b2 point of second line
   * @param {Boolean=}       noEndpointTouch whether to skip single touchpoints
   *                                         (meaning connected segments) as
   *                                         intersections
   * @returns {Array.<Array.<Number>>|Null} If the lines intersect, the point of
   * intersection. If they overlap, the two end points of the overlapping segment.
   * Otherwise, null.
   */


  function intersection(a1, a2, b1, b2, noEndpointTouch) {
    // The algorithm expects our lines in the form P + sd, where P is a point,
    // s is on the interval [0, 1], and d is a vector.
    // We are passed two points. P can be the first point of each pair. The
    // vector, then, could be thought of as the distance (in x and y components)
    // from the first point to the second point.
    // So first, let's make our vectors:
    var va = [a2[0] - a1[0], a2[1] - a1[1]];
    var vb = [b2[0] - b1[0], b2[1] - b1[1]]; // We also define a function to convert back to regular point form:

    /* eslint-disable arrow-body-style */

    function toPoint(p, s, d) {
      return [p[0] + s * d[0], p[1] + s * d[1]];
    }
    /* eslint-enable arrow-body-style */
    // The rest is pretty much a straight port of the algorithm.


    var e = [b1[0] - a1[0], b1[1] - a1[1]];
    var kross = crossProduct$2(va, vb);
    var sqrKross = kross * kross;
    var sqrLenA = dotProduct$1(va, va); //const sqrLenB  = dotProduct(vb, vb);
    // Check for line intersection. This works because of the properties of the
    // cross product -- specifically, two vectors are parallel if and only if the
    // cross product is the 0 vector. The full calculation involves relative error
    // to account for possible very small line segments. See Schneider & Eberly
    // for details.

    if (sqrKross > 0
    /* EPS * sqrLenB * sqLenA */
    ) {
        // If they're not parallel, then (because these are line segments) they
        // still might not actually intersect. This code checks that the
        // intersection point of the lines is actually on both line segments.
        var s = crossProduct$2(e, vb) / kross;

        if (s < 0 || s > 1) {
          // not on line segment a
          return null;
        }

        var t = crossProduct$2(e, va) / kross;

        if (t < 0 || t > 1) {
          // not on line segment b
          return null;
        }

        if (s === 0 || s === 1) {
          // on an endpoint of line segment a
          return noEndpointTouch ? null : [toPoint(a1, s, va)];
        }

        if (t === 0 || t === 1) {
          // on an endpoint of line segment b
          return noEndpointTouch ? null : [toPoint(b1, t, vb)];
        }

        return [toPoint(a1, s, va)];
      } // If we've reached this point, then the lines are either parallel or the
    // same, but the segments could overlap partially or fully, or not at all.
    // So we need to find the overlap, if any. To do that, we can use e, which is
    // the (vector) difference between the two initial points. If this is parallel
    // with the line itself, then the two lines are the same line, and there will
    // be overlap.
    //const sqrLenE = dotProduct(e, e);


    kross = crossProduct$2(e, va);
    sqrKross = kross * kross;

    if (sqrKross > 0
    /* EPS * sqLenB * sqLenE */
    ) {
        // Lines are just parallel, not the same. No overlap.
        return null;
      }

    var sa = dotProduct$1(va, e) / sqrLenA;
    var sb = sa + dotProduct$1(va, vb) / sqrLenA;
    var smin = Math.min(sa, sb);
    var smax = Math.max(sa, sb); // this is, essentially, the FindIntersection acting on floats from
    // Schneider & Eberly, just inlined into this function.

    if (smin <= 1 && smax >= 0) {
      // overlap on an end point
      if (smin === 1) {
        return noEndpointTouch ? null : [toPoint(a1, smin > 0 ? smin : 0, va)];
      }

      if (smax === 0) {
        return noEndpointTouch ? null : [toPoint(a1, smax < 1 ? smax : 1, va)];
      }

      if (noEndpointTouch && smin === 0 && smax === 1) {
        return null;
      } // There's overlap on a segment -- two points of intersection. Return both.


      return [toPoint(a1, smin > 0 ? smin : 0, va), toPoint(a1, smax < 1 ? smax : 1, va)];
    }

    return null;
  }
  /**
   * @param  {SweepEvent} se1
   * @param  {SweepEvent} se2
   * @param  {Queue}      queue
   * @return {Number}
   */


  function possibleIntersection(se1, se2, queue) {
    // that disallows self-intersecting polygons,
    // did cost us half a day, so I'll leave it
    // out of respect
    // if (se1.isSubject === se2.isSubject) return;
    var inter = intersection(se1.point, se1.otherEvent.point, se2.point, se2.otherEvent.point);
    var nintersections = inter ? inter.length : 0;

    if (nintersections === 0) {
      return 0;
    } // no intersection
    // the line segments intersect at an endpoint of both line segments


    if (nintersections === 1 && (equals(se1.point, se2.point) || equals(se1.otherEvent.point, se2.otherEvent.point))) {
      return 0;
    }

    if (nintersections === 2 && se1.isSubject === se2.isSubject) {
      // if(se1.contourId === se2.contourId){
      // console.warn('Edges of the same polygon overlap',
      //   se1.point, se1.otherEvent.point, se2.point, se2.otherEvent.point);
      // }
      //throw new Error('Edges of the same polygon overlap');
      return 0;
    } // The line segments associated to se1 and se2 intersect


    if (nintersections === 1) {
      // if the intersection point is not an endpoint of se1
      if (!equals(se1.point, inter[0]) && !equals(se1.otherEvent.point, inter[0])) {
        divideSegment(se1, inter[0], queue);
      } // if the intersection point is not an endpoint of se2


      if (!equals(se2.point, inter[0]) && !equals(se2.otherEvent.point, inter[0])) {
        divideSegment(se2, inter[0], queue);
      }

      return 1;
    } // The line segments associated to se1 and se2 overlap


    var events = [];
    var leftCoincide = false;
    var rightCoincide = false;

    if (equals(se1.point, se2.point)) {
      leftCoincide = true; // linked
    } else if (compareEvents(se1, se2) === 1) {
      events.push(se2, se1);
    } else {
      events.push(se1, se2);
    }

    if (equals(se1.otherEvent.point, se2.otherEvent.point)) {
      rightCoincide = true;
    } else if (compareEvents(se1.otherEvent, se2.otherEvent) === 1) {
      events.push(se2.otherEvent, se1.otherEvent);
    } else {
      events.push(se1.otherEvent, se2.otherEvent);
    }

    if (leftCoincide && rightCoincide || leftCoincide) {
      // both line segments are equal or share the left endpoint
      se2.type = NON_CONTRIBUTING;
      se1.type = se2.inOut === se1.inOut ? SAME_TRANSITION : DIFFERENT_TRANSITION;

      if (leftCoincide && !rightCoincide) {
        // honestly no idea, but changing events selection from [2, 1]
        // to [0, 1] fixes the overlapping self-intersecting polygons issue
        divideSegment(events[1].otherEvent, events[0].point, queue);
      }

      return 2;
    } // the line segments share the right endpoint


    if (rightCoincide) {
      divideSegment(events[0], events[1].point, queue);
      return 3;
    } // no line segment includes totally the other one


    if (events[0] !== events[3].otherEvent) {
      divideSegment(events[0], events[1].point, queue);
      divideSegment(events[1], events[2].point, queue);
      return 3;
    } // one line segment includes the other one


    divideSegment(events[0], events[1].point, queue);
    divideSegment(events[3].otherEvent, events[2].point, queue);
    return 3;
  }
  /**
   * @param  {SweepEvent} le1
   * @param  {SweepEvent} le2
   * @return {Number}
   */


  function compareSegments(le1, le2) {
    if (le1 === le2) {
      return 0;
    } // Segments are not collinear


    if (signedArea(le1.point, le1.otherEvent.point, le2.point) !== 0 || signedArea(le1.point, le1.otherEvent.point, le2.otherEvent.point) !== 0) {
      // If they share their left endpoint use the right endpoint to sort
      if (equals(le1.point, le2.point)) {
        return le1.isBelow(le2.otherEvent.point) ? -1 : 1;
      } // Different left endpoint: use the left endpoint to sort


      if (le1.point[0] === le2.point[0]) {
        return le1.point[1] < le2.point[1] ? -1 : 1;
      } // has the line segment associated to e1 been inserted
      // into S after the line segment associated to e2 ?


      if (compareEvents(le1, le2) === 1) {
        return le2.isAbove(le1.point) ? -1 : 1;
      } // The line segment associated to e2 has been inserted
      // into S after the line segment associated to e1


      return le1.isBelow(le2.point) ? -1 : 1;
    }

    if (le1.isSubject === le2.isSubject) {
      // same polygon
      var p1 = le1.point,
          p2 = le2.point;

      if (p1[0] === p2[0] && p1[1] === p2[1]
      /*equals(le1.point, le2.point)*/
      ) {
          p1 = le1.otherEvent.point;
          p2 = le2.otherEvent.point;

          if (p1[0] === p2[0] && p1[1] === p2[1]) {
            return 0;
          } else {
            return le1.contourId > le2.contourId ? 1 : -1;
          }
        }
    } else {
      // Segments are collinear, but belong to separate polygons
      return le1.isSubject ? -1 : 1;
    }

    return compareEvents(le1, le2) === 1 ? 1 : -1;
  }

  function subdivide(eventQueue, subject, clipping, sbbox, cbbox, operation) {
    var sweepLine = new SplayTree(compareSegments);
    var sortedEvents = [];
    var rightbound = Math.min(sbbox[2], cbbox[2]);
    var prev, next, begin;

    while (eventQueue.length !== 0) {
      var event = eventQueue.pop();
      sortedEvents.push(event); // optimization by bboxes for intersection and difference goes here

      if (operation === INTERSECTION && event.point[0] > rightbound || operation === DIFFERENCE && event.point[0] > sbbox[2]) {
        break;
      }

      if (event.left) {
        next = prev = sweepLine.insert(event);
        begin = sweepLine.minNode();

        if (prev !== begin) {
          prev = sweepLine.prev(prev);
        } else {
          prev = null;
        }

        next = sweepLine.next(next);
        var prevEvent = prev ? prev.key : null;
        var prevprevEvent = void 0;
        computeFields(event, prevEvent, operation);

        if (next) {
          if (possibleIntersection(event, next.key, eventQueue) === 2) {
            computeFields(event, prevEvent, operation);
            computeFields(event, next.key, operation);
          }
        }

        if (prev) {
          if (possibleIntersection(prev.key, event, eventQueue) === 2) {
            var prevprev = prev;

            if (prevprev !== begin) {
              prevprev = sweepLine.prev(prevprev);
            } else {
              prevprev = null;
            }

            prevprevEvent = prevprev ? prevprev.key : null;
            computeFields(prevEvent, prevprevEvent, operation);
            computeFields(event, prevEvent, operation);
          }
        }
      } else {
        event = event.otherEvent;
        next = prev = sweepLine.find(event);

        if (prev && next) {
          if (prev !== begin) {
            prev = sweepLine.prev(prev);
          } else {
            prev = null;
          }

          next = sweepLine.next(next);
          sweepLine.remove(event);

          if (next && prev) {
            possibleIntersection(prev.key, next.key, eventQueue);
          }
        }
      }
    }

    return sortedEvents;
  }

  var Contour = function Contour() {
    this.points = [];
    this.holeIds = [];
    this.holeOf = null;
    this.depth = null;
  };

  Contour.prototype.isExterior = function isExterior() {
    return this.holeOf == null;
  };
  /**
   * @param  {Array.<SweepEvent>} sortedEvents
   * @return {Array.<SweepEvent>}
   */


  function orderEvents(sortedEvents) {
    var event, i, len, tmp;
    var resultEvents = [];

    for (i = 0, len = sortedEvents.length; i < len; i++) {
      event = sortedEvents[i];

      if (event.left && event.inResult || !event.left && event.otherEvent.inResult) {
        resultEvents.push(event);
      }
    } // Due to overlapping edges the resultEvents array can be not wholly sorted


    var sorted = false;

    while (!sorted) {
      sorted = true;

      for (i = 0, len = resultEvents.length; i < len; i++) {
        if (i + 1 < len && compareEvents(resultEvents[i], resultEvents[i + 1]) === 1) {
          tmp = resultEvents[i];
          resultEvents[i] = resultEvents[i + 1];
          resultEvents[i + 1] = tmp;
          sorted = false;
        }
      }
    }

    for (i = 0, len = resultEvents.length; i < len; i++) {
      event = resultEvents[i];
      event.otherPos = i;
    } // imagine, the right event is found in the beginning of the queue,
    // when his left counterpart is not marked yet


    for (i = 0, len = resultEvents.length; i < len; i++) {
      event = resultEvents[i];

      if (!event.left) {
        tmp = event.otherPos;
        event.otherPos = event.otherEvent.otherPos;
        event.otherEvent.otherPos = tmp;
      }
    }

    return resultEvents;
  }
  /**
   * @param  {Number} pos
   * @param  {Array.<SweepEvent>} resultEvents
   * @param  {Object>}    processed
   * @return {Number}
   */


  function nextPos(pos, resultEvents, processed, origPos) {
    var newPos = pos + 1,
        p = resultEvents[pos].point,
        p1;
    var length = resultEvents.length;

    if (newPos < length) {
      p1 = resultEvents[newPos].point;
    }

    while (newPos < length && p1[0] === p[0] && p1[1] === p[1]) {
      if (!processed[newPos]) {
        return newPos;
      } else {
        newPos++;
      }

      p1 = resultEvents[newPos].point;
    }

    newPos = pos - 1;

    while (processed[newPos] && newPos > origPos) {
      newPos--;
    }

    return newPos;
  }

  function initializeContourFromContext(event, contours, contourId) {
    var contour = new Contour();

    if (event.prevInResult != null) {
      var prevInResult = event.prevInResult; // Note that it is valid to query the "previous in result" for its output contour id,
      // because we must have already processed it (i.e., assigned an output contour id)
      // in an earlier iteration, otherwise it wouldn't be possible that it is "previous in
      // result".

      var lowerContourId = prevInResult.outputContourId;
      var lowerResultTransition = prevInResult.resultTransition;

      if (lowerResultTransition > 0) {
        // We are inside. Now we have to check if the thing below us is another hole or
        // an exterior contour.
        var lowerContour = contours[lowerContourId];

        if (lowerContour.holeOf != null) {
          // The lower contour is a hole => Connect the new contour as a hole to its parent,
          // and use same depth.
          var parentContourId = lowerContour.holeOf;
          contours[parentContourId].holeIds.push(contourId);
          contour.holeOf = parentContourId;
          contour.depth = contours[lowerContourId].depth;
        } else {
          // The lower contour is an exterior contour => Connect the new contour as a hole,
          // and increment depth.
          contours[lowerContourId].holeIds.push(contourId);
          contour.holeOf = lowerContourId;
          contour.depth = contours[lowerContourId].depth + 1;
        }
      } else {
        // We are outside => this contour is an exterior contour of same depth.
        contour.holeOf = null;
        contour.depth = contours[lowerContourId].depth;
      }
    } else {
      // There is no lower/previous contour => this contour is an exterior contour of depth 0.
      contour.holeOf = null;
      contour.depth = 0;
    }

    return contour;
  }
  /**
   * @param  {Array.<SweepEvent>} sortedEvents
   * @return {Array.<*>} polygons
   */


  function connectEdges(sortedEvents) {
    var i, len;
    var resultEvents = orderEvents(sortedEvents); // "false"-filled array

    var processed = {};
    var contours = [];

    var loop = function loop() {
      if (processed[i]) {
        return;
      }

      var contourId = contours.length;
      var contour = initializeContourFromContext(resultEvents[i], contours, contourId); // Helper function that combines marking an event as processed with assigning its output contour ID

      var markAsProcessed = function markAsProcessed(pos) {
        processed[pos] = true;
        resultEvents[pos].outputContourId = contourId;
      };

      var pos = i;
      var origPos = i;
      var initial = resultEvents[i].point;
      contour.points.push(initial);
      /* eslint no-constant-condition: "off" */

      while (true) {
        markAsProcessed(pos);
        pos = resultEvents[pos].otherPos;
        markAsProcessed(pos);
        contour.points.push(resultEvents[pos].point);
        pos = nextPos(pos, resultEvents, processed, origPos);

        if (pos == origPos) {
          break;
        }
      }

      contours.push(contour);
    };

    for (i = 0, len = resultEvents.length; i < len; i++) {
      loop();
    }

    return contours;
  }

  var _tinyqueue_1_2_3_tinyqueue = TinyQueue;
  var default_1 = TinyQueue;

  function TinyQueue(data, compare) {
    if (!(this instanceof TinyQueue)) {
      return new TinyQueue(data, compare);
    }

    this.data = data || [];
    this.length = this.data.length;
    this.compare = compare || defaultCompare;

    if (this.length > 0) {
      for (var i = (this.length >> 1) - 1; i >= 0; i--) {
        this._down(i);
      }
    }
  }

  function defaultCompare(a, b) {
    return a < b ? -1 : a > b ? 1 : 0;
  }

  TinyQueue.prototype = {
    push: function push(item) {
      this.data.push(item);
      this.length++;

      this._up(this.length - 1);
    },
    pop: function pop() {
      if (this.length === 0) {
        return undefined;
      }

      var top = this.data[0];
      this.length--;

      if (this.length > 0) {
        this.data[0] = this.data[this.length];

        this._down(0);
      }

      this.data.pop();
      return top;
    },
    peek: function peek() {
      return this.data[0];
    },
    _up: function _up(pos) {
      var data = this.data;
      var compare = this.compare;
      var item = data[pos];

      while (pos > 0) {
        var parent = pos - 1 >> 1;
        var current = data[parent];

        if (compare(item, current) >= 0) {
          break;
        }

        data[pos] = current;
        pos = parent;
      }

      data[pos] = item;
    },
    _down: function _down(pos) {
      var data = this.data;
      var compare = this.compare;
      var halfLength = this.length >> 1;
      var item = data[pos];

      while (pos < halfLength) {
        var left = (pos << 1) + 1;
        var right = left + 1;
        var best = data[left];

        if (right < this.length && compare(data[right], best) < 0) {
          left = right;
          best = data[right];
        }

        if (compare(best, item) >= 0) {
          break;
        }

        data[pos] = best;
        pos = left;
      }

      data[pos] = item;
    }
  };
  _tinyqueue_1_2_3_tinyqueue["default"] = default_1;
  var max = Math.max;
  var min = Math.min;
  var contourId = 0;

  function processPolygon(contourOrHole, isSubject, depth, Q, bbox, isExteriorRing) {
    var i, len, s1, s2, e1, e2;

    for (i = 0, len = contourOrHole.length - 1; i < len; i++) {
      s1 = contourOrHole[i];
      s2 = contourOrHole[i + 1];
      e1 = new SweepEvent(s1, false, undefined, isSubject);
      e2 = new SweepEvent(s2, false, e1, isSubject);
      e1.otherEvent = e2;

      if (s1[0] === s2[0] && s1[1] === s2[1]) {
        continue; // skip collapsed edges, or it breaks
      }

      e1.contourId = e2.contourId = depth;

      if (!isExteriorRing) {
        e1.isExteriorRing = false;
        e2.isExteriorRing = false;
      }

      if (compareEvents(e1, e2) > 0) {
        e2.left = true;
      } else {
        e1.left = true;
      }

      var x = s1[0],
          y = s1[1];
      bbox[0] = min(bbox[0], x);
      bbox[1] = min(bbox[1], y);
      bbox[2] = max(bbox[2], x);
      bbox[3] = max(bbox[3], y); // Pushing it so the queue is sorted from left to right,
      // with object on the left having the highest priority.

      Q.push(e1);
      Q.push(e2);
    }
  }

  function fillQueue(subject, clipping, sbbox, cbbox, operation) {
    var eventQueue = new _tinyqueue_1_2_3_tinyqueue(null, compareEvents);
    var polygonSet, isExteriorRing, i, ii, j, jj; //, k, kk;

    for (i = 0, ii = subject.length; i < ii; i++) {
      polygonSet = subject[i];

      for (j = 0, jj = polygonSet.length; j < jj; j++) {
        isExteriorRing = j === 0;

        if (isExteriorRing) {
          contourId++;
        }

        processPolygon(polygonSet[j], true, contourId, eventQueue, sbbox, isExteriorRing);
      }
    }

    for (i = 0, ii = clipping.length; i < ii; i++) {
      polygonSet = clipping[i];

      for (j = 0, jj = polygonSet.length; j < jj; j++) {
        isExteriorRing = j === 0;

        if (operation === DIFFERENCE) {
          isExteriorRing = false;
        }

        if (isExteriorRing) {
          contourId++;
        }

        processPolygon(polygonSet[j], false, contourId, eventQueue, cbbox, isExteriorRing);
      }
    }

    return eventQueue;
  }

  var EMPTY = [];

  function trivialOperation(subject, clipping, operation) {
    var result = null;

    if (subject.length * clipping.length === 0) {
      if (operation === INTERSECTION) {
        result = EMPTY;
      } else if (operation === DIFFERENCE) {
        result = subject;
      } else if (operation === UNION || operation === XOR) {
        result = subject.length === 0 ? clipping : subject;
      }
    }

    return result;
  }

  function compareBBoxes(subject, clipping, sbbox, cbbox, operation) {
    var result = null;

    if (sbbox[0] > cbbox[2] || cbbox[0] > sbbox[2] || sbbox[1] > cbbox[3] || cbbox[1] > sbbox[3]) {
      if (operation === INTERSECTION) {
        result = EMPTY;
      } else if (operation === DIFFERENCE) {
        result = subject;
      } else if (operation === UNION || operation === XOR) {
        result = subject.concat(clipping);
      }
    }

    return result;
  }

  function _boolean(subject, clipping, operation) {
    if (typeof subject[0][0][0] === 'number') {
      subject = [subject];
    }

    if (typeof clipping[0][0][0] === 'number') {
      clipping = [clipping];
    }

    var trivial = trivialOperation(subject, clipping, operation);

    if (trivial) {
      return trivial === EMPTY ? null : trivial;
    }

    var sbbox = [Infinity, Infinity, -Infinity, -Infinity];
    var cbbox = [Infinity, Infinity, -Infinity, -Infinity]; // console.time('fill queue');

    var eventQueue = fillQueue(subject, clipping, sbbox, cbbox, operation); //console.timeEnd('fill queue');

    trivial = compareBBoxes(subject, clipping, sbbox, cbbox, operation);

    if (trivial) {
      return trivial === EMPTY ? null : trivial;
    } // console.time('subdivide edges');


    var sortedEvents = subdivide(eventQueue, subject, clipping, sbbox, cbbox, operation); //console.timeEnd('subdivide edges');
    // console.time('connect vertices');

    var contours = connectEdges(sortedEvents); //console.timeEnd('connect vertices');
    // Convert contours to polygons

    var polygons = [];

    for (var i = 0; i < contours.length; i++) {
      var contour = contours[i];

      if (contour.isExterior()) {
        // The exterior ring goes first
        var rings = [contour.points]; // Followed by holes if any

        for (var j = 0; j < contour.holeIds.length; j++) {
          var holeId = contour.holeIds[j];
          rings.push(contours[holeId].points);
        }

        polygons.push(rings);
      }
    }

    return polygons;
  }

  function union(subject, clipping) {
    return _boolean(subject, clipping, UNION);
  }

  function diff(subject, clipping) {
    return _boolean(subject, clipping, DIFFERENCE);
  }

  function xor(subject, clipping) {
    return _boolean(subject, clipping, XOR);
  }

  function intersection$1(subject, clipping) {
    return _boolean(subject, clipping, INTERSECTION);
  }

  var math = {
    matrix: mx,
    tar: tar,
    vector: vector,
    geom: geom,
    booleanOperations: {
      union: union,
      diff: diff,
      intersection: intersection$1,
      xor: xor
    }
  };

  var _enums$STYLE_KEY$4 = enums.STYLE_KEY,
      TRANSLATE_X$1 = _enums$STYLE_KEY$4.TRANSLATE_X,
      TRANSLATE_Y$1 = _enums$STYLE_KEY$4.TRANSLATE_Y,
      TRANSLATE_Z$1 = _enums$STYLE_KEY$4.TRANSLATE_Z,
      SCALE_X$1 = _enums$STYLE_KEY$4.SCALE_X,
      SCALE_Y$1 = _enums$STYLE_KEY$4.SCALE_Y,
      SCALE_Z$1 = _enums$STYLE_KEY$4.SCALE_Z,
      SKEW_X$1 = _enums$STYLE_KEY$4.SKEW_X,
      SKEW_Y$1 = _enums$STYLE_KEY$4.SKEW_Y,
      ROTATE_X$1 = _enums$STYLE_KEY$4.ROTATE_X,
      ROTATE_Y$1 = _enums$STYLE_KEY$4.ROTATE_Y,
      ROTATE_Z$1 = _enums$STYLE_KEY$4.ROTATE_Z,
      ROTATE_3D$1 = _enums$STYLE_KEY$4.ROTATE_3D,
      PERSPECTIVE$1 = _enums$STYLE_KEY$4.PERSPECTIVE,
      MATRIX$1 = _enums$STYLE_KEY$4.MATRIX,
      FONT_SIZE$4 = _enums$STYLE_KEY$4.FONT_SIZE;
  var PX$3 = o.PX,
      PERCENT$3 = o.PERCENT,
      REM$3 = o.REM,
      VW$3 = o.VW,
      VH$3 = o.VH,
      VMAX$3 = o.VMAX,
      VMIN$3 = o.VMIN;
  var matrix = math.matrix,
      geom$1 = math.geom;
  var identity$1 = matrix.identity,
      multiply$1 = matrix.multiply,
      isE$2 = matrix.isE;
  var d2r$2 = geom$1.d2r;

  function calSingle(t, k, v) {
    if (k === TRANSLATE_X$1) {
      t[12] = v;
    } else if (k === TRANSLATE_Y$1) {
      t[13] = v;
    } else if (k === TRANSLATE_Z$1) {
      t[14] = v;
    } else if (k === SCALE_X$1) {
      t[0] = v;
    } else if (k === SCALE_Y$1) {
      t[5] = v;
    } else if (k === SCALE_Z$1) {
      t[10] = v;
    } else if (k === SKEW_X$1) {
      v = d2r$2(v);
      t[4] = Math.tan(v);
    } else if (k === SKEW_Y$1) {
      v = d2r$2(v);
      t[1] = Math.tan(v);
    } else if (k === ROTATE_X$1) {
      v = d2r$2(v);
      var sin = Math.sin(v);
      var cos = Math.cos(v);
      t[5] = t[10] = cos;
      t[6] = sin;
      t[9] = -sin;
    } else if (k === ROTATE_Y$1) {
      v = d2r$2(v);

      var _sin = Math.sin(v);

      var _cos = Math.cos(v);

      t[0] = t[10] = _cos;
      t[8] = _sin;
      t[2] = -_sin;
    } else if (k === ROTATE_Z$1) {
      v = d2r$2(v);

      var _sin2 = Math.sin(v);

      var _cos2 = Math.cos(v);

      t[0] = t[5] = _cos2;
      t[1] = _sin2;
      t[4] = -_sin2;
    } else if (k === ROTATE_3D$1) {
      var _v = v,
          _v2 = _slicedToArray(_v, 4),
          x = _v2[0],
          y = _v2[1],
          z = _v2[2],
          r = _v2[3];

      r = d2r$2(r[0]);
      var s = Math.sin(r);
      var c = Math.cos(r);

      if (x && !y && !z) {
        if (x < 0) {
          s = -s;
        }

        t[5] = c;
        t[9] = -s;
        t[6] = s;
        t[10] = c;
      } else if (y && !x && !z) {
        if (y < 0) {
          s = -s;
        }

        t[0] = c;
        t[8] = s;
        t[2] = -s;
        t[10] = c;
      } else if (z && !x && !y) {
        if (z < 0) {
          s = -s;
        }

        t[0] = c;
        t[4] = -s;
        t[1] = s;
        t[5] = c;
      } else {
        var len = Math.sqrt(x * x + y * y + z * z);

        if (len !== 1) {
          var rlen = 1 / len;
          x *= rlen;
          y *= rlen;
          z *= rlen;
        }

        var nc = 1 - c;
        var xy = x * y;
        var yz = y * z;
        var zx = z * x;
        var xs = x * s;
        var ys = y * s;
        var zs = z * s;
        t[0] = x * x * nc + c;
        t[1] = xy * nc + zs;
        t[2] = zx * nc - ys;
        t[3] = 0;
        t[4] = xy * nc - zs;
        t[5] = y * y * nc + c;
        t[6] = yz * nc + xs;
        t[7] = 0;
        t[8] = zx * nc + ys;
        t[9] = yz * nc - xs;
        t[10] = z * z * nc + c;
        t[11] = 0;
        t[12] = 0;
        t[13] = 0;
        t[14] = 0;
        t[15] = 1;
      }
    } else if (k === PERSPECTIVE$1 && v > 0) {
      v = Math.max(v, 1);
      t[11] = -1 / v;
    } else if (k === MATRIX$1) {
      util.assignMatrix(t, v);
    }
  }

  function calMatrix(transform, ow, oh, root) {
    var list = normalize$1(transform, ow, oh, root);
    var m = identity$1();
    list.forEach(function (item) {
      var _item = _slicedToArray(item, 2),
          k = _item[0],
          v = _item[1];

      var t = identity$1();
      calSingle(t, k, v);
      m = multiply$1(m, t);
    });
    return m;
  } // 已有计算好的变换矩阵，根据tfo原点计算最终的matrix


  function calMatrixByOrigin(m, transformOrigin) {
    var _transformOrigin = _slicedToArray(transformOrigin, 2),
        ox = _transformOrigin[0],
        oy = _transformOrigin[1];

    var res = m.slice(0);

    if (ox === 0 && oy === 0 || isE$2(m)) {
      return res;
    }

    res = multiply$1([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ox, oy, 0, 1], res);
    res = multiply$1(res, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -ox, -oy, 0, 1]);
    return res;
  } // img缩放svg下专用，无rem


  function calMatrixWithOrigin(transform, transformOrigin, ow, oh) {
    var m = calMatrix(transform, ow, oh);
    return calMatrixByOrigin(m, transformOrigin);
  }

  function normalizeSingle(k, v, ow, oh, root) {
    if (k === TRANSLATE_X$1 || k === TRANSLATE_Z$1) {
      if (v[1] === PERCENT$3) {
        return v[0] * ow * 0.01;
      } else if (v[1] === REM$3) {
        return v[0] * root.computedStyle[FONT_SIZE$4];
      } else if (v[1] === VW$3) {
        return v[0] * root.width * 0.01;
      } else if (v[1] === VH$3) {
        return v[0] * root.height * 0.01;
      } else if (v[1] === VMAX$3) {
        return v[0] * Math.max(root.width, root.height) * 0.01;
      } else if (v[1] === VMIN$3) {
        return v[0] * Math.min(root.width, root.height) * 0.01;
      }
    } else if (k === TRANSLATE_Y$1) {
      if (v[1] === PERCENT$3) {
        return v[0] * oh * 0.01;
      } else if (v[1] === REM$3) {
        return v[0] * root.computedStyle[FONT_SIZE$4];
      } else if (v[1] === VW$3) {
        return v[0] * root.width * 0.01;
      } else if (v[1] === VH$3) {
        return v[0] * root.height * 0.01;
      } else if (v[1] === VMAX$3) {
        return v[0] * Math.max(root.width, root.height) * 0.01;
      } else if (v[1] === VMIN$3) {
        return v[0] * Math.min(root.width, root.height) * 0.01;
      }
    } else if (k === MATRIX$1) {
      return v;
    } else if (k === ROTATE_3D$1) {
      return v;
    }

    return v[0];
  }

  function normalize$1(transform, ow, oh, root) {
    var res = [];
    transform.forEach(function (item) {
      var _item2 = _slicedToArray(item, 2),
          k = _item2[0],
          v = _item2[1];

      res.push([k, normalizeSingle(k, v, ow, oh, root)]);
    });
    return res;
  }

  function calOrigin(transformOrigin, w, h, root) {
    var tfo = [];
    transformOrigin.forEach(function (item, i) {
      if (item[1] === PX$3) {
        tfo.push(item[0]);
      } else if (item[1] === PERCENT$3) {
        tfo.push(item[0] * (i ? h : w) * 0.01);
      } else if (item[1] === REM$3) {
        tfo.push(item[0] * root.computedStyle[FONT_SIZE$4]);
      } else if (item[1] === VW$3) {
        tfo.push(item[0] * root.width * 0.01);
      } else if (item[1] === VH$3) {
        tfo.push(item[0] * root.height * 0.01);
      } else if (item[1] === VMAX$3) {
        tfo.push(item[0] * Math.max(root.width, root.height) * 0.01);
      } else if (item[1] === VMIN$3) {
        tfo.push(item[0] * Math.min(root.width, root.height) * 0.01);
      }
    });
    return tfo;
  }

  function calMatrixByPerspective(m, pm) {
    if (!isE$2(pm)) {
      m = multiply$1(pm, m);
    }

    return m;
  }

  function calPerspectiveMatrix(ppt, po) {
    if (ppt && ppt > 0) {
      var res = identity$1();
      ppt = Math.max(ppt, 1);
      res[11] = -1 / ppt;

      var _po = _slicedToArray(po, 2),
          ox = _po[0],
          oy = _po[1];

      if (ox || oy) {
        res = multiply$1([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, ox, oy, 0, 1], res);
        res = multiply$1(res, [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -ox, -oy, 0, 1]);
      }

      return res;
    }
  } // 是否有透视矩阵应用


  function isPerspectiveMatrix(m) {
    if (!m) {
      return;
    }

    return !!(m[3] || m[7] || m[11]);
  }

  var transform$1 = {
    calMatrix: calMatrix,
    calOrigin: calOrigin,
    calMatrixByPerspective: calMatrixByPerspective,
    calPerspectiveMatrix: calPerspectiveMatrix,
    calMatrixByOrigin: calMatrixByOrigin,
    calMatrixWithOrigin: calMatrixWithOrigin,
    isPerspectiveMatrix: isPerspectiveMatrix
  };

  /**
   * https://www.w3.org/TR/2018/WD-filter-effects-1-20181218/#feGaussianBlurElement
   * 根据模糊参数sigma求卷积核尺寸
   * @param sigma
   * @returns {number}
   */
  function kernelSize(sigma) {
    if (sigma <= 0) {
      return 0;
    }

    var d = Math.floor(sigma * 3 * Math.sqrt(2 * Math.PI) / 4 + 0.5);

    if (d < 2) {
      d = 2;
    }

    if (d % 2 === 0) {
      d++;
    }

    return d;
  }
  /**
   * 根据sigma求模糊扩展尺寸，卷积核求得后为d，再求半径/2，然后因为算法要执行3次，所以*3
   * 比如本来d为5，半径2.5算上自身像素点则各方向扩展2，*3则扩展6
   * @param sigma
   * @returns {number}
   */


  function outerSize(sigma) {
    var d = kernelSize(sigma);
    return outerSizeByD(d);
  }

  function outerSizeByD(d) {
    return Math.floor(d * 0.5) * 3;
  }
  /**
   * 一维高斯正态分布，根据标准差和卷积核尺寸返回一维权重数组
   * @param sigma
   * @param d
   */


  function gaussianWeight(sigma, d) {
    var list = [];
    var len = Math.floor(d * 0.5);
    var total = 0;

    for (var i = len; i >= 0; i--) {
      var n = Math.pow(Math.E, -Math.pow(i, 2) / (2 * Math.pow(sigma, 2))) / (sigma * Math.sqrt(2 * Math.PI));
      list.push(n);
      total += n;
    }

    for (var _i = 1; _i <= len; _i++) {
      var _n = Math.pow(Math.E, -Math.pow(_i, 2) / (2 * Math.pow(sigma, 2))) / (sigma * Math.sqrt(2 * Math.PI));

      list.push(_n);
      total += _n;
    }

    if (total !== 1) {
      for (var _i2 = 0; _i2 < d; _i2++) {
        list[_i2] /= total;
      }
    }

    return list;
  }

  var blur = {
    kernelSize: kernelSize,
    outerSize: outerSize,
    outerSizeByD: outerSizeByD,
    gaussianWeight: gaussianWeight
  };

  var _enums$STYLE_KEY$5 = enums.STYLE_KEY,
      TRANSFORM_ORIGIN$2 = _enums$STYLE_KEY$5.TRANSFORM_ORIGIN,
      TRANSFORM$1 = _enums$STYLE_KEY$5.TRANSFORM; // 根据一个共享cache的信息，生成一个独立的离屏canvas，一般是filter,mask用

  function genSingle(cache, message) {
    var size = cache.size,
        sx1 = cache.sx1,
        sy1 = cache.sy1,
        width = cache.width,
        height = cache.height,
        bbox = cache.bbox;
    var offscreen = inject.getCacheCanvas(width, height, null, message);
    offscreen.x = 0;
    offscreen.y = 0;
    offscreen.bbox = bbox;
    offscreen.size = size;
    offscreen.sx1 = sx1;
    offscreen.sy1 = sy1;
    offscreen.dx = cache.dx;
    offscreen.dy = cache.dy;
    offscreen.dbx = cache.dbx;
    offscreen.dby = cache.dby;
    offscreen.width = width;
    offscreen.height = height;
    return offscreen;
  }

  var Cache = /*#__PURE__*/function () {
    function Cache(w, h, bbox, page, pos, x1, y1) {
      _classCallCheck(this, Cache);

      this.__init(w, h, bbox, page, pos, x1, y1);
    }

    _createClass(Cache, [{
      key: "__init",
      value: function __init(w, h, bbox, page, pos, x1, y1) {
        this.__width = w;
        this.__height = h;
        this.__bbox = bbox;
        this.__page = page;
        this.__pos = pos;

        var _page$getCoords = page.getCoords(pos),
            _page$getCoords2 = _slicedToArray(_page$getCoords, 2),
            x = _page$getCoords2[0],
            y = _page$getCoords2[1];

        this.__x = x;
        this.__y = y;

        this.__appendData(x1, y1);

        this.__isNew = true;

        if (page.canvas) {
          this.__enabled = true;
          var ctx = page.ctx;
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.globalAlpha = 1;

          if (debug.flag) {
            page.canvas.setAttribute && page.canvas.setAttribute('size', page.size);
          }
        }
      }
    }, {
      key: "__appendData",
      value: function __appendData(sx1, sy1) {
        this.sx1 = sx1; // 去除margin的左上角原点坐标

        this.sy1 = sy1;
        var bbox = this.bbox;
        this.dx = this.x - bbox[0]; // cache坐标和box原点的差值

        this.dy = this.y - bbox[1];
        this.dbx = sx1 - bbox[0]; // 原始x1/y1和box原点的差值

        this.dby = sy1 - bbox[1];
        this.update();
      }
    }, {
      key: "update",
      value: function update() {
        this.page.update = true;
      }
    }, {
      key: "clear",
      value: function clear() {
        if (this.available) {
          var ctx = this.ctx;
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          var size = this.page.size;
          ctx.clearRect(this.x, this.y, size, size);
          this.__available = false;
          this.__isNew = true;
        }
      }
    }, {
      key: "release",
      value: function release() {
        if (this.enabled) {
          this.clear();
          this.page.del(this.pos);
          this.__page = null;
          this.__enabled = false;
        }
      }
    }, {
      key: "reset",
      value: function reset(bbox, x1, y1) {
        // 尺寸没变复用之前的并清空
        if (util.equalArr(this.bbox, bbox) && this.enabled) {
          this.clear();
          return;
        }

        this.release();
        var w = Math.ceil(bbox[2] - bbox[0]);
        var h = Math.ceil(bbox[3] - bbox[1]);
        var res = Page.getInstance(Math.max(w, h));

        if (!res) {
          this.__enabled = false;
          return;
        }

        var page = res.page,
            pos = res.pos;

        this.__init(w, h, bbox, page, pos, x1, y1);
      } // 是否功能可用，生成离屏canvas及尺寸超限

    }, {
      key: "enabled",
      get: function get() {
        return this.__enabled;
      } // 是否有可用缓存内容

    }, {
      key: "available",
      get: function get() {
        return this.enabled && this.__available;
      }
    }, {
      key: "bbox",
      get: function get() {
        return this.__bbox;
      }
    }, {
      key: "page",
      get: function get() {
        return this.__page;
      }
    }, {
      key: "canvas",
      get: function get() {
        return this.page.canvas;
      }
    }, {
      key: "ctx",
      get: function get() {
        return this.page.ctx;
      }
    }, {
      key: "size",
      get: function get() {
        return this.page.size;
      }
    }, {
      key: "x",
      get: function get() {
        return this.__x;
      }
    }, {
      key: "y",
      get: function get() {
        return this.__y;
      }
    }, {
      key: "width",
      get: function get() {
        return this.__width;
      }
    }, {
      key: "height",
      get: function get() {
        return this.__height;
      }
    }, {
      key: "pos",
      get: function get() {
        return this.__pos;
      }
    }, {
      key: "isNew",
      get: function get() {
        return this.__isNew;
      }
    }], [{
      key: "MAX",
      get: function get() {
        return Page.MAX;
      }
    }, {
      key: "getInstance",
      value: function getInstance(bbox, x1, y1) {
        var w = Math.ceil(bbox[2] - bbox[0]);
        var h = Math.ceil(bbox[3] - bbox[1]);
        var res = Page.getInstance(Math.max(w, h));

        if (!res) {
          return;
        }

        var page = res.page,
            pos = res.pos;
        return new Cache(w, h, bbox, page, pos, x1, y1);
      }
      /**
       * 复制cache的一块出来单独作为cacheFilter，尺寸边距保持一致，用浏览器原生ctx.filter滤镜
       * @param cache
       * @param filter
       * @returns {{canvas: *, ctx: *, release(): void, available: boolean, draw()}}
       */

    }, {
      key: "genFilter",
      value: function genFilter(cache, filter) {
        var d = 0;
        filter.forEach(function (item) {
          var _item = _slicedToArray(item, 2),
              k = _item[0],
              v = _item[1];

          if (k === 'blur') {
            d = blur.outerSize(v);
          }
        });
        var x = cache.x,
            y = cache.y,
            size = cache.size,
            canvas = cache.canvas,
            sx1 = cache.sx1,
            sy1 = cache.sy1,
            width = cache.width,
            height = cache.height,
            bbox = cache.bbox;
        bbox = bbox.slice(0);
        bbox[0] -= d;
        bbox[1] -= d;
        bbox[2] += d;
        bbox[3] += d;
        var offscreen = inject.getCacheCanvas(width + d * 2, height + d * 2, null, 'filter');
        offscreen.ctx.filter = painter.canvasFilter(filter);
        offscreen.ctx.drawImage(canvas, x, y, width, height, d, d, width, height);
        offscreen.ctx.filter = 'none';
        offscreen.draw();
        offscreen.bbox = bbox;
        offscreen.x = 0;
        offscreen.y = 0;
        offscreen.size = size;
        offscreen.sx1 = sx1 - d;
        offscreen.sy1 = sy1 - d;
        offscreen.dx = cache.dx;
        offscreen.dy = cache.dy;
        offscreen.dbx = cache.dbx;
        offscreen.dby = cache.dby;
        offscreen.width = width + d * 2;
        offscreen.height = height + d * 2;
        return offscreen;
      }
    }, {
      key: "genMask",
      value: function genMask(target, node, cb) {
        var cacheMask = genSingle(target, 'mask1');
        var list = [];
        var _node$computedStyle = node.computedStyle,
            transform = _node$computedStyle[TRANSFORM$1],
            tfo = _node$computedStyle[TRANSFORM_ORIGIN$2];
        var next = node.next;
        var isClip = next.isClip;

        while (next && next.isMask) {
          list.push(next);
          next = next.next;
        }

        var x = cacheMask.x,
            y = cacheMask.y,
            ctx = cacheMask.ctx,
            dbx = cacheMask.dbx,
            dby = cacheMask.dby;
        tfo[0] += x + dbx + node.__sx1 - target.sx1;
        tfo[1] += y + dby + node.__sy1 - target.sy1;
        var inverse = transform$1.calMatrixByOrigin(transform, tfo); // 先将mask本身绘制到cache上，再设置模式绘制dom本身，因为都是img所以1个就够了

        list.forEach(function (item) {
          cb(item, cacheMask, inverse);
        });
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.globalAlpha = 1;
        ctx.globalCompositeOperation = isClip ? 'source-out' : 'source-in';
        Cache.drawCache(target, cacheMask);
        ctx.globalCompositeOperation = 'source-over';
        cacheMask.draw(ctx);
        return cacheMask;
      }
      /**
       * 如果不超过bbox，直接用已有的total/filter/mask，否则生成一个新的
       */

    }, {
      key: "genOverflow",
      value: function genOverflow(target, node) {
        var bbox = target.bbox;
        var sx = node.sx,
            sy = node.sy,
            outerWidth = node.outerWidth,
            outerHeight = node.outerHeight;
        var xe = sx + outerWidth;
        var ye = sy + outerHeight;

        if (bbox[0] < sx || bbox[1] < sy || bbox[2] > xe || bbox[3] > ye) {
          var cacheOverflow = genSingle(target, 'overflow');
          var ctx = cacheOverflow.ctx;
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.globalAlpha = 1;
          Cache.drawCache(target, cacheOverflow);
          cacheOverflow.draw(ctx);
          ctx.globalCompositeOperation = 'destination-in';
          ctx.fillStyle = '#FFF';
          ctx.beginPath();
          ctx.rect(sx - bbox[0], sy - bbox[1], outerWidth, outerHeight);
          ctx.fill();
          ctx.closePath();
          ctx.globalCompositeOperation = 'source-over';
          return cacheOverflow;
        }
      }
      /**
       * bbox变化时直接用老的cache内容重设bbox
       * @param cache
       * @param bbox
       */

    }, {
      key: "updateCache",
      value: function updateCache(cache, bbox) {
        var old = cache.bbox;

        if (!util.equalArr(bbox, old)) {
          var dx = old[0] - bbox[0];
          var dy = old[1] - bbox[1];
          var newCache = Cache.getInstance(bbox);

          if (newCache && newCache.enabled) {
            var ox = cache.x,
                oy = cache.y,
                canvas = cache.canvas,
                width = cache.width,
                height = cache.height;
            var nx = newCache.x,
                ny = newCache.y;
            newCache.sx1 = cache.sx1;
            newCache.sy1 = cache.sy1;
            newCache.dx = cache.dx + dx;
            newCache.dy = cache.dy + dy;
            newCache.dbx = cache.dbx + dx;
            newCache.dby = cache.dby + dy;
            newCache.ctx.drawImage(canvas, ox, oy, width, height, dx + nx, dy + ny, width, height);
            newCache.__available = true;
            cache.release();
            return newCache;
          }
        } else {
          return cache;
        }
      }
    }, {
      key: "drawCache",
      value: function drawCache(source, target, transform, matrix, tfo, parentMatrix, inverse) {
        var tx = target.x,
            ty = target.y,
            sx1 = target.sx1,
            sy1 = target.sy1,
            ctx = target.ctx,
            dbx = target.dbx,
            dby = target.dby;
        var x = source.x,
            y = source.y,
            canvas = source.canvas,
            sx2 = source.sx1,
            sy2 = source.sy1,
            dbx2 = source.dbx,
            dby2 = source.dby,
            width = source.width,
            height = source.height;
        var ox = tx + sx2 - sx1 + dbx - dbx2;
        var oy = ty + sy2 - sy1 + dby - dby2;

        if (transform && matrix && tfo) {
          tfo[0] += ox;
          tfo[1] += oy;
          var m = transform$1.calMatrixByOrigin(transform, tfo);
          matrix = mx.multiply(matrix, m);

          if (!mx.isE(parentMatrix)) {
            matrix = mx.multiply(parentMatrix, matrix);
          }

          if (inverse) {
            // 很多情况mask和target相同matrix，可简化计算
            if (util.equalArr(matrix, inverse)) {
              matrix = mx.identity();
            } else {
              inverse = mx.inverse(inverse);
              matrix = mx.multiply(inverse, matrix);
            }
          }

          ctx.setTransform(matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]);
        }

        ctx.drawImage(canvas, x, y, width, height, ox, oy, width, height);
      }
    }, {
      key: "draw",
      value: function draw(ctx, opacity, matrix, cache) {
        ctx.globalAlpha = opacity;
        ctx.setTransform(matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]);
        var x = cache.x,
            y = cache.y,
            canvas = cache.canvas,
            sx1 = cache.sx1,
            sy1 = cache.sy1,
            dbx = cache.dbx,
            dby = cache.dby,
            width = cache.width,
            height = cache.height;
        ctx.drawImage(canvas, x, y, width, height, sx1 - dbx, sy1 - dby, width, height);
      }
    }, {
      key: "getCache",
      value: function getCache(list) {
        for (var i = 0, len = list.length; i < len; i++) {
          var item = list[i];

          if (item && item.available) {
            return item;
          }
        }
      } // webgl专用

    }]);

    return Cache;
  }();

  _defineProperty(Cache, "NA", 0);

  _defineProperty(Cache, "LOCAL", 1);

  _defineProperty(Cache, "CHILD", 2);

  _defineProperty(Cache, "SELF", 3);

  var _TRANSFORMS;
  var STYLE_KEY$4 = enums.STYLE_KEY,
      _enums$STYLE_KEY$6 = enums.STYLE_KEY,
      TRANSLATE_X$2 = _enums$STYLE_KEY$6.TRANSLATE_X,
      TRANSLATE_Y$2 = _enums$STYLE_KEY$6.TRANSLATE_Y,
      TRANSLATE_Z$2 = _enums$STYLE_KEY$6.TRANSLATE_Z,
      OPACITY$1 = _enums$STYLE_KEY$6.OPACITY,
      FILTER$1 = _enums$STYLE_KEY$6.FILTER,
      PERSPECTIVE$2 = _enums$STYLE_KEY$6.PERSPECTIVE,
      PERSPECTIVE_ORIGIN$1 = _enums$STYLE_KEY$6.PERSPECTIVE_ORIGIN;
  var ENUM = {
    // 低位表示<repaint级别
    NONE: 0,
    //                                          0
    TRANSLATE_X: 1,
    //                                   1
    TRANSLATE_Y: 2,
    //                                  10
    TRANSLATE_Z: 4,
    //                                 100
    TRANSFORM: 8,
    //                                  1000
    TRANSFORM_ALL: 15,
    //                             1111
    OPACITY: 16,
    //                                  10000
    FILTER: 32,
    //                                  100000
    MIX_BLEND_MODE: 64,
    //                         1000000
    PERSPECTIVE: 128,
    //                          10000000
    REPAINT: 256,
    //                             100000000
    // 高位表示reflow
    REFLOW: 512,
    //                             1000000000
    // 特殊高位表示rebuild
    REBUILD: 1024 //                          10000000000

  };
  var TRANSFORMS = (_TRANSFORMS = {}, _defineProperty(_TRANSFORMS, STYLE_KEY$4.SCALE_X, true), _defineProperty(_TRANSFORMS, STYLE_KEY$4.SCALE_Y, true), _defineProperty(_TRANSFORMS, STYLE_KEY$4.SCALE_Z, true), _defineProperty(_TRANSFORMS, STYLE_KEY$4.ROTATE_X, true), _defineProperty(_TRANSFORMS, STYLE_KEY$4.ROTATE_Y, true), _defineProperty(_TRANSFORMS, STYLE_KEY$4.ROTATE_Z, true), _defineProperty(_TRANSFORMS, STYLE_KEY$4.ROTATE_3D, true), _defineProperty(_TRANSFORMS, STYLE_KEY$4.TRANSFORM, true), _defineProperty(_TRANSFORMS, STYLE_KEY$4.TRANSFORM_ORIGIN, true), _TRANSFORMS);
  var o$3 = Object.assign({
    contain: function contain(lv, value) {
      return (lv & value) > 0;
    },

    /**
     * 得出等级
     * @param k
     * @returns {number|*}
     */
    getLevel: function getLevel(k) {
      if (o$2.isIgnore(k)) {
        return ENUM.NONE;
      }

      if (k === TRANSLATE_X$2) {
        return ENUM.TRANSLATE_X;
      } else if (k === TRANSLATE_Y$2) {
        return ENUM.TRANSLATE_Y;
      } else if (k === TRANSLATE_Z$2) {
        return ENUM.TRANSLATE_Z;
      } else if (TRANSFORMS.hasOwnProperty(k)) {
        return ENUM.TRANSFORM;
      } else if (k === OPACITY$1) {
        return ENUM.OPACITY;
      } else if (k === FILTER$1) {
        return ENUM.FILTER;
      } else if (k === PERSPECTIVE$2 || k === PERSPECTIVE_ORIGIN$1) {
        return ENUM.PERSPECTIVE;
      } else if (o$2.isRepaint(k)) {
        return ENUM.REPAINT;
      }

      return ENUM.REFLOW;
    },
    isReflow: function isReflow(lv) {
      return !this.isRepaint(lv);
    },
    isRepaint: function isRepaint(lv) {
      return lv < ENUM.REFLOW;
    },
    isRebuild: function isRebuild(lv) {
      return lv >= ENUM.REBUILD;
    }
  }, ENUM);
  o$3.TRANSFORMS = TRANSFORMS;

  var _enums$STYLE_KEY$7 = enums.STYLE_KEY,
      DISPLAY$1 = _enums$STYLE_KEY$7.DISPLAY,
      LINE_HEIGHT$1 = _enums$STYLE_KEY$7.LINE_HEIGHT,
      FONT_SIZE$5 = _enums$STYLE_KEY$7.FONT_SIZE,
      FONT_FAMILY$2 = _enums$STYLE_KEY$7.FONT_FAMILY,
      FONT_STYLE$2 = _enums$STYLE_KEY$7.FONT_STYLE,
      FONT_WEIGHT$2 = _enums$STYLE_KEY$7.FONT_WEIGHT,
      COLOR$2 = _enums$STYLE_KEY$7.COLOR,
      VISIBILITY$1 = _enums$STYLE_KEY$7.VISIBILITY,
      LETTER_SPACING$2 = _enums$STYLE_KEY$7.LETTER_SPACING,
      OVERFLOW = _enums$STYLE_KEY$7.OVERFLOW,
      WHITE_SPACE$1 = _enums$STYLE_KEY$7.WHITE_SPACE,
      TEXT_OVERFLOW$1 = _enums$STYLE_KEY$7.TEXT_OVERFLOW,
      WIDTH$2 = _enums$STYLE_KEY$7.WIDTH,
      TEXT_STROKE_COLOR$2 = _enums$STYLE_KEY$7.TEXT_STROKE_COLOR,
      TEXT_STROKE_WIDTH$2 = _enums$STYLE_KEY$7.TEXT_STROKE_WIDTH,
      _enums$NODE_KEY$1 = enums.NODE_KEY,
      NODE_CACHE = _enums$NODE_KEY$1.NODE_CACHE,
      NODE_LIMIT_CACHE = _enums$NODE_KEY$1.NODE_LIMIT_CACHE,
      NODE_DOM_PARENT = _enums$NODE_KEY$1.NODE_DOM_PARENT,
      NODE_MATRIX_EVENT = _enums$NODE_KEY$1.NODE_MATRIX_EVENT,
      NODE_OPACITY = _enums$NODE_KEY$1.NODE_OPACITY,
      NODE_VIRTUAL_DOM = _enums$NODE_KEY$1.NODE_VIRTUAL_DOM,
      _enums$UPDATE_KEY = enums.UPDATE_KEY,
      UPDATE_NODE = _enums$UPDATE_KEY.UPDATE_NODE,
      UPDATE_MEASURE = _enums$UPDATE_KEY.UPDATE_MEASURE,
      UPDATE_FOCUS = _enums$UPDATE_KEY.UPDATE_FOCUS,
      UPDATE_CONFIG = _enums$UPDATE_KEY.UPDATE_CONFIG;
  var ELLIPSIS = textCache.ELLIPSIS;
  var AUTO$1 = o.AUTO,
      REM$4 = o.REM,
      VW$4 = o.VW,
      VH$4 = o.VH,
      VMAX$4 = o.VMAX,
      VMIN$4 = o.VMIN;

  var Text = /*#__PURE__*/function (_Node) {
    _inherits(Text, _Node);

    var _super = _createSuper(Text);

    function Text(content) {
      var _this;

      _classCallCheck(this, Text);

      _this = _super.call(this);
      _this.__content = util.isNil(content) ? '' : content.toString();
      _this.__textBoxes = [];
      _this.__charWidthList = [];
      _this.__charWidth = 0;
      _this.__textWidth = 0;
      return _this;
    }
    /**
     * 预先计算每个字的宽度，在每次布局渲染前做
     * @param renderMode
     * @param ctx
     * @private
     */


    _createClass(Text, [{
      key: "__computeMeasure",
      value: function __computeMeasure(renderMode, ctx) {
        var content = this.content,
            computedStyle = this.computedStyle,
            charWidthList = this.charWidthList; // 每次都要清空重新计算，计算会有缓存

        charWidthList.splice(0);
        var ffs = computedStyle[FONT_FAMILY$2].split(',');
        var ff = 'arial';

        for (var i = 0, len = ffs.length; i < len; i++) {
          if (inject.checkSupportFontFamily(ffs[i])) {
            ff = ffs[i];
            break;
          }
        }

        this.__ff = ff;
        var fs = computedStyle[FONT_SIZE$5];
        var fw = computedStyle[FONT_WEIGHT$2];
        var key = this.__key = computedStyle[FONT_SIZE$5] + ',' + ff + ',' + fw;
        var wait = textCache.data[key] = textCache.data[key] || {
          ff: ff,
          fs: fs,
          fw: fw,
          hash: {},
          s: ''
        };
        var cache = textCache.charWidth[key] = textCache.charWidth[key] || {};
        var sum = 0;
        var needMeasure = false; // text-overflow:ellipse需要，即便没有也要先测量，其基于最近非inline父节点的字体

        var bp = this.domParent;

        while (bp.currentStyle[DISPLAY$1] === 'inline') {
          bp = bp.domParent;
        }

        this.__bp = bp;
        var parentComputedStyle = bp.computedStyle;
        var pff = 'arial';

        for (var _i = 0, pffs = parentComputedStyle[FONT_FAMILY$2].split(','), _len = pffs.length; _i < _len; _i++) {
          if (inject.checkSupportFontFamily(pffs[_i])) {
            ff = ffs[_i];
            break;
          }
        }

        var pfs = parentComputedStyle[FONT_SIZE$5];
        var pfw = parentComputedStyle[FONT_WEIGHT$2];
        var pKey = this.__pKey = pfs + ',' + pff + ',' + pfw;
        var parentCache = textCache.charWidth[pKey] = textCache.charWidth[pKey] || {};

        if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
          if (renderMode === mode.WEBGL) {
            ctx = inject.getCacheCanvas(16, 16, '__$$CHECK_SUPPORT_FONT_FAMILY$$__').ctx;
          }

          if (!parentCache.hasOwnProperty(ELLIPSIS)) {
            ctx.font = css.setFontStyle(parentComputedStyle);
            parentCache[ELLIPSIS] = ctx.measureText(ELLIPSIS).width;
          }

          ctx.font = css.setFontStyle(computedStyle);
        } else if (renderMode === mode.SVG) {
          if (!parentCache.hasOwnProperty(ELLIPSIS)) {
            parentCache[ELLIPSIS] = 0;

            var _wait = textCache.data[pKey] = textCache.data[pKey] || {
              ff: pff,
              fs: pfs,
              fw: pfw,
              hash: {},
              s: ''
            };

            _wait.s += ELLIPSIS;
            needMeasure = true;
          }
        } // 逐字测量，canvas可瞬间得到信息，svg先预存统一进行


        for (var _i2 = 0, length = content.length; _i2 < length; _i2++) {
          var _char = content.charAt(_i2);

          var mw = void 0;

          if (cache.hasOwnProperty(_char)) {
            mw = cache[_char];
            charWidthList.push(mw);
            sum += mw;
            this.__charWidth = Math.max(this.charWidth, mw);
          } else if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
            mw = cache[_char] = ctx.measureText(_char).width;
            charWidthList.push(mw);
            sum += mw;
            this.__charWidth = Math.max(this.charWidth, mw);
          } else {
            if (!wait.hash.hasOwnProperty(_char)) {
              wait.s += _char;
            }

            wait.hash[_char] = true; // 先预存标识位-1，测量完后替换它

            charWidthList.push(-1);
            needMeasure = true;
          }
        }

        this.__textWidth = sum;

        if (needMeasure) {
          textCache.list.push(this);
        }
      }
    }, {
      key: "__measureCb",
      value: function __measureCb() {
        var content = this.content,
            charWidthList = this.charWidthList;
        var key = this.__key;
        var cache = textCache.charWidth[key];
        var sum = 0;

        for (var i = 0, len = charWidthList.length; i < len; i++) {
          if (charWidthList[i] < 0) {
            var mw = charWidthList[i] = cache[content.charAt(i)];
            sum += mw;
            this.__charWidth = Math.max(this.charWidth, mw);
          }
        }

        this.__textWidth = sum;
      }
      /**
       * text在virtual时和普通一样，无需特殊处理
       * endSpace由外界inline布局控制，末尾最后一行的空白mpb，包含递归情况，递归为多个嵌套末尾节点的空白mpb之和
       * 即便宽度不足，每行还是强制渲染一个字符，换行依据lx开始，因为x可能是从中间开始的，非inline则两个相等
       * 最后一个字符排版时要考虑末尾mpb，排不下的话回退删掉这个字符，如果最后一个字符另起开头，排不下也强制排，每行至少1个字符
       * 在textOverflow时很特殊，多个inline同行，回退可能到前一个inline节点，这个通过x和lx判断是否行首，决定至少1个字符规则
       * @param data
       * @private
       */

    }, {
      key: "__layout",
      value: function __layout(data) {
        var __cache = this.__config[NODE_CACHE];

        if (__cache) {
          __cache.release();
        }

        var x = data.x,
            y = data.y,
            w = data.w,
            _data$lx = data.lx,
            lx = _data$lx === void 0 ? x : _data$lx,
            lineBoxManager = data.lineBoxManager,
            _data$endSpace = data.endSpace,
            endSpace = _data$endSpace === void 0 ? 0 : _data$endSpace,
            _data$lineClamp = data.lineClamp,
            lineClamp = _data$lineClamp === void 0 ? 0 : _data$lineClamp,
            _data$lineClampCount = data.lineClampCount,
            lineClampCount = _data$lineClampCount === void 0 ? 0 : _data$lineClampCount;
        this.__x = this.__sx1 = x;
        this.__y = this.__sy1 = y;
        var isDestroyed = this.isDestroyed,
            content = this.content,
            currentStyle = this.currentStyle,
            computedStyle = this.computedStyle,
            textBoxes = this.textBoxes,
            charWidthList = this.charWidthList,
            root = this.root,
            __ff = this.__ff,
            __key = this.__key;
        textBoxes.splice(0);
        var __config = this.__config;
        __config[NODE_LIMIT_CACHE] = false; // 空内容w/h都为0可以提前跳出

        if (isDestroyed || currentStyle[DISPLAY$1] === 'none' || !content) {
          return lineClampCount;
        }

        this.__ox = this.__oy = 0; // 顺序尝试分割字符串为TextBox，形成多行，begin为每行起始索引，i是当前字符索引

        var begin = 0;
        var i = 0;
        var beginSpace = x - lx; // x>=lx，当第一行非起始处时前面被prev节点占据，这个差值可认为是count宽度

        var count = beginSpace;
        var length = content.length;
        var maxW = 0;
        var lineHeight = computedStyle[LINE_HEIGHT$1],
            letterSpacing = computedStyle[LETTER_SPACING$2],
            whiteSpace = computedStyle[WHITE_SPACE$1],
            fontSize = computedStyle[FONT_SIZE$5],
            fontWeight = computedStyle[FONT_WEIGHT$2]; // 特殊字体中特殊字符连续时需减少一定的padding量

        var padding = o$1.info[__ff].padding;
        var needReduce = !!padding;
        var lastChar;
        var ew = textCache.charWidth[this.__pKey][ELLIPSIS];
        var lineCount = 0; // 不换行特殊对待，同时考虑overflow和textOverflow

        if (whiteSpace === 'nowrap') {
          var isTextOverflow; // block的overflow:hidden和textOverflow:clip/ellipsis才生效，inline要看最近非inline父元素

          var bp = this.__bp;
          var _bp$currentStyle = bp.currentStyle,
              display = _bp$currentStyle[DISPLAY$1],
              overflow = _bp$currentStyle[OVERFLOW],
              width = _bp$currentStyle[WIDTH$2],
              textOverflow = _bp$currentStyle[TEXT_OVERFLOW$1]; // 只要是overflow隐藏，不管textOverflow如何（默认是clip等同于overflow:hidden的功能）都截取

          if (overflow === 'hidden') {
            while (i < length) {
              count += charWidthList[i] + letterSpacing;

              if (count > w) {
                // block/flex无需宽度，inline-block需要设置宽度才生效
                if (display === 'block' || display === 'flex') {
                  isTextOverflow = true;
                } else if (width[1] !== AUTO$1) {
                  isTextOverflow = true;
                }

                break;
              }

              i++;
            }
          } else {
            while (i < length) {
              count += charWidthList[i++] + letterSpacing;
            }
          } // ellipsis生效情况，本节点开始向前回退查找，尝试放下一部分字符


          if (isTextOverflow && textOverflow === 'ellipsis') {
            var _this$__lineBack = this.__lineBack(count, w, beginSpace, endSpace, ew, letterSpacing, begin, i, length, lineCount, lineHeight, lx, x, y, maxW, textBoxes, content, charWidthList, lineBoxManager);

            var _this$__lineBack2 = _slicedToArray(_this$__lineBack, 2);

            y = _this$__lineBack2[0];
            maxW = _this$__lineBack2[1];
          } // 默认clip跟随overflow:hidden，无需感知
          else {
              var textBox = new TextBox(this, textBoxes.length, x, y, count - beginSpace, lineHeight, content, charWidthList);
              textBoxes.push(textBox);
              lineBoxManager.addItem(textBox);
              maxW = count - beginSpace;
              y += lineHeight;
            }
        } // 普通换行，注意x和lx的区别，可能相同（block起始处）可能不同（非起始处），第1行从x开始，第2行及以后都从lx开始
        // 然后第一次换行还有特殊之处，可能同一行前半部行高很大，此时y增加并非自身的lineHeight，而是整体LineBox的
        else {
            while (i < length) {
              var cw = charWidthList[i] + letterSpacing;
              count += cw; // 连续字符减少padding，除了连续还需判断char是否在padding的hash中

              if (needReduce) {
                var _char2 = content[i];

                if (_char2 === lastChar && padding.hasOwnProperty(_char2) && padding[_char2]) {
                  var hasCache = void 0,
                      p = textCache.padding[__key] = textCache.padding[__key] || {};

                  if (textCache.padding.hasOwnProperty(__key)) {
                    if (p.hasOwnProperty(_char2)) {
                      hasCache = true;
                      count -= p[_char2];
                    }
                  }

                  if (!hasCache) {
                    var n = 0;

                    if (root.renderMode === mode.CANVAS) {
                      root.ctx.font = css.setFontStyle(computedStyle);
                      var w1 = root.ctx.measureText(_char2).width;
                      var w2 = root.ctx.measureText(_char2 + _char2).width;
                      n = w1 * 2 - w2;
                      n *= padding[_char2];
                    } else if (root.renderMode === mode.SVG) {
                      n = inject.measureTextSync(__key, __ff, fontSize, fontWeight, _char2);
                      n *= padding[_char2];
                    }

                    count -= n;
                    p[_char2] = n;
                  }
                }

                lastChar = _char2;
              } // 忽略零宽字符


              if (cw === 0) {
                i++;
                continue;
              } // 换行都要判断i不是0的时候，第1个字符强制不换行


              if (count === w) {
                // 多行文本截断，这里肯定需要回退
                if (lineClamp && lineCount + lineClampCount >= lineClamp - 1) {
                  var _this$__lineBack3 = this.__lineBack(count, w, beginSpace, endSpace, ew, letterSpacing, begin, i, length, lineCount, lineHeight, lx, x, y, maxW, textBoxes, content, charWidthList, lineBoxManager);

                  var _this$__lineBack4 = _slicedToArray(_this$__lineBack3, 2);

                  y = _this$__lineBack4[0];
                  maxW = _this$__lineBack4[1];
                  lineCount++;
                  break;
                }

                var _textBox = void 0; // 特殊情况，恰好最后一行最后一个排满，此时查看末尾mpb，要防止i为0的情况首个字符特殊不回退，无需看开头mpb


                if (i === length - 1 && count > w - endSpace && i) {
                  count -= charWidthList[i--];
                }

                i++;

                if (!lineCount) {
                  maxW = count - beginSpace;
                  _textBox = new TextBox(this, textBoxes.length, x, y, maxW, lineHeight, content.slice(begin, i), charWidthList.slice(begin, i));
                } else {
                  _textBox = new TextBox(this, textBoxes.length, lx, y, count, lineHeight, content.slice(begin, i), charWidthList.slice(begin, i));
                  maxW = Math.max(maxW, count);
                } // 必须先添加再设置y，当有diff的lineHeight时，第一个换行不影响，再换行时第2个换行即第3行会被第1行影响


                textBoxes.push(_textBox);
                lineBoxManager.addItem(_textBox, true);
                y += Math.max(lineHeight, lineBoxManager.lineHeight);
                begin = i;
                count = 0;
                lineCount++;
                lastChar = null; // 换行后连续字符reduce不生效重新计数
              } // 奇怪的精度问题，暂时不用相等判断，而是为原本w宽度加一点点冗余1e-10
              else if (count > w + 1e-10) {
                  // 多行文本截断，这里肯定需要回退
                  if (lineClamp && lineCount + lineClampCount >= lineClamp - 1) {
                    var _this$__lineBack5 = this.__lineBack(count, w, beginSpace, endSpace, ew, letterSpacing, begin, i, length, lineCount, lineHeight, lx, x, y, maxW, textBoxes, content, charWidthList, lineBoxManager);

                    var _this$__lineBack6 = _slicedToArray(_this$__lineBack5, 2);

                    y = _this$__lineBack6[0];
                    maxW = _this$__lineBack6[1];
                    lineCount++;
                    break;
                  } // 普通非多行文本阶段逻辑


                  var _width = void 0; // 宽度不足时无法跳出循环，至少也要塞个字符形成一行，无需判断第1行，因为是否放得下逻辑在dom中做过了，
                  // 如果第1行放不下，一定会另起一行，此时作为开头再放不下才会进这里，这个if只有0或1个字符的情况


                  if (i <= begin) {
                    _width = count;
                  } // 超过2个字符回退1个
                  else {
                      _width = count - charWidthList[i--];
                    }

                  i++; // 根据是否第一行分开处理行首空白

                  var _textBox2 = void 0;

                  if (!lineCount) {
                    maxW = _width - beginSpace;
                    _textBox2 = new TextBox(this, textBoxes.length, x, y, maxW, lineHeight, content.slice(begin, i), charWidthList.slice(begin, i));
                  } else {
                    _textBox2 = new TextBox(this, textBoxes.length, lx, y, _width, lineHeight, content.slice(begin, i), charWidthList.slice(begin, i));
                    maxW = Math.max(maxW, _width);
                  } // 必须先添加再设置y，同上


                  textBoxes.push(_textBox2);
                  lineBoxManager.addItem(_textBox2, true);
                  y += Math.max(lineHeight, lineBoxManager.lineHeight);
                  begin = i;
                  count = 0;
                  lineCount++;
                  lastChar = null;
                } else {
                  i++;
                }
            } // 换行后Text的x重设为lx


            if (lineCount) {
              this.__x = this.__sx1 = lx;
            } // 最后一行，只有一行未满时也进这里，需查看末尾mpb，排不下回退一个字符
            // 声明了lineClamp时特殊考虑，这里一定是最后一行，要对比行数不能超过，超过忽略掉这些文本


            if (begin < length && (!lineClamp || lineCount + lineClampCount < lineClamp)) {
              var _textBox3;

              if (!lineCount) {
                var needBack; // 防止开头第一个begin=0时回退，这在inline有padding且是第一个child时会发生

                if (begin && count > w - endSpace) {
                  needBack = true;
                  count -= charWidthList[length - 1];
                }

                maxW = count - beginSpace;
                _textBox3 = new TextBox(this, textBoxes.length, x, y, maxW, lineHeight, content.slice(begin, needBack ? length - 1 : length), charWidthList.slice(begin, needBack ? length - 1 : length));
                textBoxes.push(_textBox3);
                lineBoxManager.addItem(_textBox3);
                y += Math.max(lineHeight, lineBoxManager.lineHeight);

                if (needBack) {
                  var _width2 = charWidthList[length - 1];
                  _textBox3 = new TextBox(this, textBoxes.length, lx, y, _width2, lineHeight, content.slice(length - 1), charWidthList.slice(length - 1));
                  maxW = Math.max(maxW, _width2);
                  textBoxes.push(_textBox3);
                  lineBoxManager.setNewLine();
                  lineBoxManager.addItem(_textBox3);
                  y += lineHeight;
                  lineCount++;
                }
              } else {
                var _needBack; // 防止begin在结尾时回退，必须要有个字符，这在最后一行1个字符排不下时会出现


                if (count > w - endSpace && begin < length - 1) {
                  _needBack = true;
                  count -= charWidthList[length - 1];
                }

                _textBox3 = new TextBox(this, textBoxes.length, lx, y, count, lineHeight, content.slice(begin, _needBack ? length - 1 : length), charWidthList.slice(begin, _needBack ? length - 1 : length));
                maxW = Math.max(maxW, count);
                textBoxes.push(_textBox3);
                lineBoxManager.addItem(_textBox3);
                y += Math.max(lineHeight, lineBoxManager.lineHeight);

                if (_needBack) {
                  var _width3 = charWidthList[length - 1];
                  _textBox3 = new TextBox(this, textBoxes.length, lx, y, _width3, lineHeight, content.slice(length - 1), charWidthList.slice(length - 1));
                  maxW = Math.max(maxW, _width3);
                  textBoxes.push(_textBox3);
                  lineBoxManager.setNewLine();
                  lineBoxManager.addItem(_textBox3);
                  y += lineHeight;
                  lineCount++;
                }
              }
            }
          }

        this.__width = maxW;
        this.__height = y - data.y;
        this.__baseLine = css.getBaseLine(computedStyle);
        return lineCount;
      } // 末尾行因ellipsis的缘故向前回退字符生成textBox，可能会因不满足宽度导致无法生成，此时向前继续回退TextBox

    }, {
      key: "__lineBack",
      value: function __lineBack(count, w, beginSpace, endSpace, ew, letterSpacing, begin, i, length, lineCount, lineHeight, lx, x, y, maxW, textBoxes, content, charWidthList, lineBoxManager) {
        for (; i >= begin; i--) {
          count -= charWidthList[i] + letterSpacing;

          if (count + ew + endSpace <= w) {
            // 至少1个字符不用回退，到0也没找到需要回退
            if (i) {
              maxW = count - (lineCount ? 0 : beginSpace);
              var textBox = new TextBox(this, textBoxes.length, lineCount ? lx : x, y, maxW, lineHeight, content.slice(begin, i), charWidthList.slice(begin, i));
              textBoxes.push(textBox);
              lineBoxManager.addItem(textBox, true);
              y += Math.max(lineHeight, lineBoxManager.lineHeight);
              this.__ellipsis = true;
              break;
            }
          }
        } // 最后也没找到，看是否要查找前一个inline节点，还是本身是行首兜底首字母


        if (i < 0) {
          var lineBox = lineBoxManager.lineBox; // lineBox为空是行首，至少放1个字符

          if (!lineBox.size) {
            maxW = count - (lineCount ? 0 : beginSpace);

            var _textBox4 = new TextBox(this, textBoxes.length, lineCount ? lx : x, y, maxW, lineHeight, content.charAt(begin), charWidthList.slice(begin, begin + 1));

            textBoxes.push(_textBox4);
            lineBoxManager.addItem(_textBox4, true);
            y += Math.max(lineHeight, lineBoxManager.lineHeight);
            this.__ellipsis = true;
          } // 向前查找inline节点，可能会有前面inline嵌套，因此直接用lineBox，不会出现inlineBlock，
          // 这里和css不同，ib强制超限换行不会同行
          else {
              var list = lineBox.list;

              outer: for (var j = list.length - 1; j >= 0; j--) {
                var tb = list[j];
                var _content = tb.content,
                    wList = tb.wList,
                    width = tb.width; // 整体减去可以说明可能在这个tb中，只要最后发现不是空文本节点就行，否则继续；第0个强制进入保证1字符

                if (count - width + ew <= w || !j) {
                  // 找到可以跳出outer循环，找不到继续，注意第0个且1个字符判断
                  for (var k = wList.length - 1; k >= 0; k--) {
                    if (!k && !j || count + ew <= w) {
                      tb.__content = _content;
                      tb.__width = width;
                      tb.parent.__ellipsis = true;
                      break outer;
                    } else {
                      var w2 = wList[k];
                      tb.__endY -= w2;
                      width -= w2;
                      _content = _content.slice(0, k);
                      count -= w2;
                      wList.pop();
                    }
                  }
                } // 不够则看前一个tb并且删掉这个
                else {
                    count -= width;
                  }

                list.pop();
                tb.parent.textBoxes.pop();
              }
            }
        }

        return [y, maxW];
      }
    }, {
      key: "__offsetX",
      value: function __offsetX(diff, isLayout) {
        _get(_getPrototypeOf(Text.prototype), "__offsetX", this).call(this, diff, isLayout);

        if (isLayout) {
          this.textBoxes.forEach(function (item) {
            item.__offsetX(diff);
          });
        }

        this.__sx1 += diff;
      }
    }, {
      key: "__offsetY",
      value: function __offsetY(diff, isLayout) {
        _get(_getPrototypeOf(Text.prototype), "__offsetY", this).call(this, diff, isLayout);

        if (isLayout) {
          this.textBoxes.forEach(function (item) {
            item.__offsetY(diff);
          });
        }

        this.__sy1 += diff;
      }
    }, {
      key: "__tryLayInline",
      value: function __tryLayInline(w) {
        return w - this.charWidthList[0];
      }
    }, {
      key: "__inlineSize",
      value: function __inlineSize() {
        var minX, maxX;
        this.textBoxes.forEach(function (item, i) {
          if (i) {
            minX = Math.min(minX, item.x);
            maxX = Math.max(maxX, item.x + item.width);
          } else {
            minX = item.x;
            maxX = item.x + item.width;
          }
        });
        this.__x = minX;
        this.__sx = this.__sx1 = minX + this.ox;
        this.__width = maxX - minX;
      }
    }, {
      key: "__calMaxAndMinWidth",
      value: function __calMaxAndMinWidth() {
        var n = 0;
        this.charWidthList.forEach(function (item) {
          n = Math.max(n, item);
        });
        return {
          max: this.textWidth,
          min: n
        };
      }
    }, {
      key: "__calAbsWidth",
      value: function __calAbsWidth(x, y, w) {
        this.__layout({
          x: x,
          y: y,
          w: w
        }, true);

        return this.width;
      }
    }, {
      key: "render",
      value: function render(renderMode, lv, ctx, cache) {
        var dx = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var dy = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var isDestroyed = this.isDestroyed,
            computedStyle = this.computedStyle,
            textBoxes = this.textBoxes,
            cacheStyle = this.cacheStyle,
            __ellipsis = this.__ellipsis,
            __bp = this.__bp,
            __config = this.__config;

        if (renderMode === mode.SVG) {
          __config[NODE_VIRTUAL_DOM] = this.__virtualDom = {
            type: 'text',
            children: []
          };
        }

        if (isDestroyed || computedStyle[DISPLAY$1] === 'none' || computedStyle[VISIBILITY$1] === 'hidden' || !textBoxes.length) {
          return;
        }

        if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
          // webgl借用离屏canvas绘制文本，cache标识为true是普通绘制，否则是超限降级情况
          if (renderMode === mode.WEBGL) {
            if (cache) {
              var sx = this.sx,
                  sy = this.sy,
                  bbox = this.bbox;
              var __cache = __config[NODE_CACHE];

              if (__cache) {
                __cache.reset(bbox, sx, sy);
              } else {
                __cache = Cache.getInstance(bbox, sx, sy);
              }

              if (__cache && __cache.enabled) {
                __config[NODE_CACHE] = __cache;
                __cache.__available = true;
                ctx = __cache.ctx;
                dx += __cache.dx;
                dy += __cache.dy;
                __config[NODE_LIMIT_CACHE] = false;
              } else {
                __config[NODE_LIMIT_CACHE] = true;
                return;
              }
            } else {
              var _root = this.root;
              var c = inject.getCacheCanvas(_root.width, _root.height, '__$$OVERSIZE$$__');
              ctx = c.ctx;
              var _config$NODE_DOM_PAR = __config[NODE_DOM_PARENT].__config,
                  m = _config$NODE_DOM_PAR[NODE_MATRIX_EVENT],
                  opacity = _config$NODE_DOM_PAR[NODE_OPACITY];
              ctx.setTransform(m[0], m[1], m[4], m[5], m[12], m[13]);
              ctx.globalAlpha = opacity;
            }
          }

          var _font = css.setFontStyle(computedStyle);

          if (ctx.font !== _font) {
            ctx.font = _font;
          }

          var color = cacheStyle[COLOR$2];

          if (ctx.fillStyle !== color) {
            ctx.fillStyle = color;
          }

          var strokeWidth = computedStyle[TEXT_STROKE_WIDTH$2];

          if (ctx.lineWidth !== strokeWidth) {
            ctx.lineWidth = strokeWidth;
          }

          var strokeColor = cacheStyle[TEXT_STROKE_COLOR$2];

          if (ctx.strokeStyle !== strokeColor) {
            ctx.strokeStyle = strokeColor;
          }
        } // 可能为空，整个是个ellipsis


        textBoxes.forEach(function (item) {
          item.render(renderMode, ctx, computedStyle, cacheStyle, dx, dy);
        });

        if (renderMode === mode.SVG) {
          this.virtualDom.children = textBoxes.map(function (textBox) {
            return textBox.virtualDom;
          });
        } // textOverflow的省略号font使用最近非inline的父节点


        if (__ellipsis) {
          var last = textBoxes[textBoxes.length - 1];
          var endX = last.endX,
              endY = last.endY;
          var _computedStyle = __bp.computedStyle;

          if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
            var _font2 = css.setFontStyle(_computedStyle);

            if (ctx.font !== _font2) {
              ctx.font = _font2;
            }

            var _color = __bp.__cacheStyle[COLOR$2];

            if (ctx.fillStyle !== _color) {
              ctx.fillStyle = _color;
            }

            ctx.fillText(ELLIPSIS, endX, endY);
          } else if (renderMode === mode.SVG) {
            var props = [['x', endX], ['y', endY], ['fill', __bp.__cacheStyle[COLOR$2]], ['font-family', _computedStyle[FONT_FAMILY$2]], ['font-weight', _computedStyle[FONT_WEIGHT$2]], ['font-style', _computedStyle[FONT_STYLE$2]], ['font-size', _computedStyle[FONT_SIZE$5] + 'px']];
            this.virtualDom.children.push({
              type: 'item',
              tagName: 'text',
              props: props,
              content: ELLIPSIS
            });
          }
        }
      }
    }, {
      key: "__deepScan",
      value: function __deepScan(cb) {
        cb(this);
      }
    }, {
      key: "__destroy",
      value: function __destroy() {
        if (this.isDestroyed) {
          return;
        }

        _get(_getPrototypeOf(Text.prototype), "__destroy", this).call(this);

        var __cache = this.__config[NODE_CACHE];

        if (__cache) {
          __cache.release();
        }
      }
    }, {
      key: "getComputedStyle",
      value: function getComputedStyle(key) {
        return this.domParent.getComputedStyle(key);
      }
    }, {
      key: "updateContent",
      value: function updateContent(s, cb) {
        var self = this;

        if (s === self.__content) {
          if (util.isFunction(cb)) {
            cb(-1);
          }

          return;
        }

        root.delRefreshTask(self.__task);
        root.addRefreshTask(self.__task = {
          __before: function __before() {
            self.__content = s;
            var res = {};
            var vd = self.domParent;
            res[UPDATE_NODE] = vd;
            res[UPDATE_MEASURE] = true;
            res[UPDATE_FOCUS] = o$3.REFLOW;
            res[UPDATE_CONFIG] = vd.__config;
            var root = vd.root;

            root.__addUpdate(vd, vd.__config, root, root.__config, res);
          },
          __after: function __after(diff) {
            if (util.isFunction(cb)) {
              cb(diff);
            }
          }
        });
      }
    }, {
      key: "content",
      get: function get() {
        return this.__content;
      },
      set: function set(v) {
        this.__content = v;
      }
    }, {
      key: "textBoxes",
      get: function get() {
        return this.__textBoxes;
      }
    }, {
      key: "charWidthList",
      get: function get() {
        return this.__charWidthList;
      }
    }, {
      key: "charWidth",
      get: function get() {
        return this.__charWidth;
      }
    }, {
      key: "firstCharWidth",
      get: function get() {
        return this.charWidthList[0] || 0;
      }
    }, {
      key: "textWidth",
      get: function get() {
        return this.__textWidth;
      }
    }, {
      key: "baseLine",
      get: function get() {
        return this.__baseLine;
      }
    }, {
      key: "root",
      get: function get() {
        return this.domParent.root;
      }
    }, {
      key: "currentStyle",
      get: function get() {
        return this.domParent.currentStyle;
      }
    }, {
      key: "style",
      get: function get() {
        return this.__style;
      }
    }, {
      key: "computedStyle",
      get: function get() {
        return this.domParent.computedStyle;
      }
    }, {
      key: "cacheStyle",
      get: function get() {
        return this.domParent.__cacheStyle;
      }
    }, {
      key: "bbox",
      get: function get() {
        var sx = this.__sx1,
            sy = this.__sy1,
            width = this.width,
            height = this.height,
            root = this.root,
            textStrokeWidth = this.currentStyle[TEXT_STROKE_WIDTH$2];
        var half = 0;

        if (textStrokeWidth[1] === REM$4) {
          half = Math.max(textStrokeWidth[0] * root.computedStyle[FONT_SIZE$5] * 0.5, half);
        } else if (textStrokeWidth[1] === VW$4) {
          half = Math.max(textStrokeWidth[0] * root.width * 0.01 * 0.5, half);
        } else if (textStrokeWidth[1] === VH$4) {
          half = Math.max(textStrokeWidth[0] * root.height * 0.01 * 0.5, half);
        } else if (textStrokeWidth[1] === VMAX$4) {
          half = Math.max(textStrokeWidth[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
        } else if (textStrokeWidth[1] === VMIN$4) {
          half = Math.max(textStrokeWidth[0] * Math.min(root.width, root.height) * 0.01 * 0.5, half);
        } else {
          half = Math.max(textStrokeWidth[0] * 0.5, half);
        }

        half += 1;
        return [sx - half, sy - half, sx + width + half, sy + height + half];
      }
    }, {
      key: "isShadowRoot",
      get: function get() {
        return !this.parent && this.host && this.host !== this.root;
      }
    }, {
      key: "matrix",
      get: function get() {
        return this.domParent.matrix;
      }
    }, {
      key: "matrixEvent",
      get: function get() {
        return this.domParent.matrixEvent;
      }
    }]);

    return Text;
  }(Node);

  Text.prototype.__renderByMask = Text.prototype.render;

  var TYPE_VD$1 = $$type.TYPE_VD,
      TYPE_GM$1 = $$type.TYPE_GM,
      TYPE_CP$1 = $$type.TYPE_CP;
  /**
   * 2. 打平children中的数组，变成一维
   * 3. 合并相连的Text节点，即string内容
   */

  function flattenJson(parent) {
    if (Array.isArray(parent)) {
      return parent.map(function (item) {
        return flattenJson(item);
      });
    } else if (!parent || [TYPE_VD$1, TYPE_GM$1, TYPE_CP$1].indexOf(parent.$$type) === -1 || !Array.isArray(parent.children)) {
      return parent;
    }

    var list = [];
    traverseJson(list, parent.children, {
      lastText: null
    });
    parent.children = list;
    return parent;
  }

  function traverseJson(list, children, options) {
    if (Array.isArray(children)) {
      children.forEach(function (item) {
        traverseJson(list, item, options);
      });
    } else if (children && (children.$$type === TYPE_VD$1 || children.$$type === TYPE_GM$1)) {
      if (['canvas', 'svg', 'webgl'].indexOf(children.tagName) > -1) {
        throw new Error('Can not nest canvas/svg/webgl');
      }

      if (children.$$type === TYPE_VD$1) {
        flattenJson(children);
      }

      list.push(children);
      options.lastText = null;
    } else if (children && children.$$type === TYPE_CP$1) {
      list.push(children); // 强制component即便返回text也形成一个独立的节点，合并在layout布局中做

      options.lastText = null;
    } // 排除掉空的文本，连续的text合并
    else if (!util.isNil(children) && children !== '') {
        if (options.lastText !== null) {
          list[list.length - 1] = options.lastText += children;
        } else {
          list.push(children);
        }
      }
  }

  var _enums$NODE_KEY$2 = enums.NODE_KEY,
      NODE_DOM_PARENT$1 = _enums$NODE_KEY$2.NODE_DOM_PARENT,
      NODE_STYLE = _enums$NODE_KEY$2.NODE_STYLE,
      NODE_CURRENT_STYLE = _enums$NODE_KEY$2.NODE_CURRENT_STYLE,
      NODE_COMPUTED_STYLE = _enums$NODE_KEY$2.NODE_COMPUTED_STYLE,
      NODE_MATRIX = _enums$NODE_KEY$2.NODE_MATRIX,
      NODE_MATRIX_EVENT$1 = _enums$NODE_KEY$2.NODE_MATRIX_EVENT;
  var TYPE_VD$2 = $$type.TYPE_VD,
      TYPE_GM$2 = $$type.TYPE_GM,
      TYPE_CP$2 = $$type.TYPE_CP;
  var Xom, Dom, Img, Geom, Component;

  function initRoot(cd, root) {
    var c = flattenJson({
      tagName: root.tagName,
      props: {},
      children: cd,
      $$type: TYPE_VD$2
    });
    root.__json = c;
    root.__host = root;
    var children = build(c.children, root, root);
    return relation(root, children);
  }

  function initDom(json, root, host, parent) {
    var vd = build(json, root, host);
    return relation(parent, vd);
  }

  function initCp(json, root, host) {
    if (util.isObject(json)) {
      // cp的flatten在__init中自己做
      return build(json, root, host);
    } // text的relation会由上层如Root设置
    else {
        return new Text(json);
      }
  }

  function initCp2(json, root, host, parent) {
    var vd = new json.klass(json.props);
    vd.__tagName = json.tagName || vd.__tagName;
    vd.__root = root;
    vd.__host = host;
    vd.__json = json;

    vd.__init();

    return relation(parent, vd);
  }
  /**
   * 将初始json文件生成virtualDom
   * @param json
   * @param root
   * @param host
   * @param hasP 出现过p标签
   * @returns vd
   */


  function build(json, root, host, hasP) {
    if (Array.isArray(json)) {
      return json.map(function (item) {
        return build(item, root, host, hasP);
      });
    }

    var vd;

    if (util.isObject(json) && json.$$type) {
      var tagName = json.tagName,
          props = json.props,
          children = json.children,
          klass = json.klass,
          _$$type = json.$$type,
          __inheritAnimate = json.__inheritAnimate,
          __animateRecords = json.__animateRecords; // 更新过程中无变化的cp直接使用原来生成的

      if (_$$type === TYPE_CP$2 && json.__placeholder) {
        return json.__placeholder;
      }

      if (_$$type === TYPE_VD$2) {
        if (tagName === 'img') {
          vd = new Img(tagName, props);

          if (Array.isArray(children) && children.length) {
            throw new Error('Img can not contain children');
          }
        } else {
          vd = new Dom(tagName, props);
        } // 检查p不能包含div


        if (tagName === 'p') {
          hasP = true;
        } else if (tagName === 'div' && hasP) {
          throw new Error('Markup p can not contain div');
        }

        if (Array.isArray(children)) {
          children = relation(vd, build(children, root, host, hasP));
        } else {
          children = [];
        }

        vd.__children = children;
      } else if (_$$type === TYPE_GM$2) {
        var _klass = Geom.getRegister(tagName);

        vd = new _klass(tagName, props);
      } else if (_$$type === TYPE_CP$2) {
        vd = new klass(props);
        vd.__tagName = tagName || vd.__tagName;
      } else {
        return new Text(json);
      } // 根parse需要用到真正的vd引用，然后vd也要引用json，用以做domApi


      json.vd = vd;
      vd.__json = json; // 递归parse中的动画记录需特殊处理，将target改为真正的vd引用

      if (__animateRecords) {
        vd.__animateRecords = __animateRecords;

        __animateRecords.list.forEach(function (item) {
          item.target = item.target.vd;
        });

        delete json.__animateRecords;
      } // 更新过程中key相同或者普通相同的vd继承动画


      if (__inheritAnimate) {
        util.extendAnimate(__inheritAnimate, vd);
        delete json.__inheritAnimate;
      }

      vd.__root = root;
      vd.__host = host;

      if (_$$type === TYPE_CP$2) {
        vd.__init();
      }

      var ref = props.ref;

      if (util.isString(ref) && ref || util.isNumber(ref)) {
        host.ref[ref] = vd;
      } else if (util.isFunction(ref)) {
        ref(vd);
      }

      return vd;
    }

    return new Text(json);
  }
  /**
   * 设置关系，父子和兄弟
   * @param parent
   * @param children
   * @param options
   * @returns {Xom|Text|Component}
   */


  function relation(parent, children) {
    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

    if (Array.isArray(children)) {
      children.forEach(function (item) {
        relation(parent, item, options);
      });
    } else if (children instanceof Xom || children instanceof Component || children instanceof Text) {
      children.__parent = parent;
      children.__domParent = parent; // 极为恶心，为了v8的性能优化，text复用parent的__config部分，但domParent重设

      if (children instanceof Text) {
        [NODE_STYLE, NODE_CURRENT_STYLE, NODE_COMPUTED_STYLE, NODE_MATRIX, NODE_MATRIX_EVENT$1].forEach(function (k) {
          children.__config[k] = parent.__config[k];
        });
      }

      if (children.__config) {
        children.__config[NODE_DOM_PARENT$1] = parent;
      }

      if (options.prev) {
        options.prev.__next = children;
        children.__prev = options.prev;
      }

      options.prev = children; // 文字视作为父节点的直接文字子节点

      if (children instanceof Component) {
        var sr = children.shadowRoot;

        if (sr instanceof Text) {
          sr.__parent = parent;
          [NODE_STYLE, NODE_CURRENT_STYLE, NODE_COMPUTED_STYLE, NODE_MATRIX, NODE_MATRIX_EVENT$1].forEach(function (k) {
            children.__config[k] = parent.__config[k];
          });
        }

        sr.__domParent = parent;

        if (sr.__config) {
          sr.__config[NODE_DOM_PARENT$1] = parent;
        }
      }
    }

    return children;
  }

  var builder = {
    ref: function ref(o) {
      Xom = o.Xom;
      Dom = o.Dom;
      Img = o.Img;
      Geom = o.Geom;
      Component = o.Component;
    },
    initRoot: initRoot,
    initDom: initDom,
    initCp: initCp,
    initCp2: initCp2,
    relation: relation
  };

  var isFunction$1 = util.isFunction;

  var Event = /*#__PURE__*/function () {
    function Event() {
      _classCallCheck(this, Event);

      this.__eHash = {};
    }

    _createClass(Event, [{
      key: "on",
      value: function on(id, handle) {
        if (!isFunction$1(handle)) {
          return;
        }

        var self = this;

        if (Array.isArray(id)) {
          for (var i = 0, len = id.length; i < len; i++) {
            self.on(id[i], handle);
          }
        } else {
          if (!self.__eHash.hasOwnProperty(id)) {
            self.__eHash[id] = [];
          } // 遍历防止此handle被侦听过了


          for (var _i = 0, item = self.__eHash[id], _len = item.length; _i < _len; _i++) {
            if (item[_i] === handle) {
              return self;
            }
          }

          self.__eHash[id].push(handle);
        }

        return self;
      }
    }, {
      key: "once",
      value: function once(id, handle) {
        if (!isFunction$1(handle)) {
          return;
        }

        var self = this; // 包裹一层会导致添加后删除对比引用删不掉，需保存原有引用进行对比

        function cb() {
          for (var _len2 = arguments.length, data = new Array(_len2), _key = 0; _key < _len2; _key++) {
            data[_key] = arguments[_key];
          }

          handle.apply(self, data);
          self.off(id, cb);
        }

        cb.__karasEventCb = handle;

        if (Array.isArray(id)) {
          for (var i = 0, len = id.length; i < len; i++) {
            self.once(id[i], handle);
          }
        } else if (handle) {
          self.on(id, cb);
        }

        return this;
      }
    }, {
      key: "off",
      value: function off(id, handle) {
        var self = this;

        if (Array.isArray(id)) {
          for (var i = 0, len = id.length; i < len; i++) {
            self.off(id[i], handle);
          }
        } else if (self.__eHash.hasOwnProperty(id)) {
          if (handle) {
            for (var _i2 = 0, item = self.__eHash[id], _len3 = item.length; _i2 < _len3; _i2++) {
              // 需考虑once包裹的引用对比
              if (item[_i2] === handle || item[_i2].__karasEventCb === handle) {
                item.splice(_i2, 1);
                break;
              }
            }
          } // 未定义为全部清除
          else {
              delete self.__eHash[id];
            }
        }

        return this;
      }
    }, {
      key: "emit",
      value: function emit(id) {
        var self = this;

        for (var _len4 = arguments.length, data = new Array(_len4 > 1 ? _len4 - 1 : 0), _key2 = 1; _key2 < _len4; _key2++) {
          data[_key2 - 1] = arguments[_key2];
        }

        if (Array.isArray(id)) {
          for (var i = 0, len = id.length; i < len; i++) {
            self.emit(id[i], data);
          }
        } else {
          if (self.__eHash.hasOwnProperty(id)) {
            var list = self.__eHash[id];

            if (list.length) {
              list = list.slice();

              for (var _i3 = 0, _len5 = list.length; _i3 < _len5; _i3++) {
                var cb = list[_i3];

                if (isFunction$1(cb)) {
                  cb.apply(self, data);
                }
              }
            }
          }
        }

        return this;
      }
    }], [{
      key: "mix",
      value: function mix() {
        for (var i = arguments.length - 1; i >= 0; i--) {
          var o = i < 0 || arguments.length <= i ? undefined : arguments[i];
          var event = new Event();
          o.__eHash = {};
          var fns = ['on', 'once', 'off', 'emit'];

          for (var j = fns.length - 1; j >= 0; j--) {
            var fn = fns[j];
            o[fn] = event[fn];
          }
        }
      }
    }]);

    return Event;
  }();

  _defineProperty(Event, "REFRESH", 'refresh');

  _defineProperty(Event, "PAUSE", 'pause');

  _defineProperty(Event, "PLAY", 'play');

  _defineProperty(Event, "FRAME", 'frame');

  _defineProperty(Event, "FINISH", 'finish');

  _defineProperty(Event, "CANCEL", 'cancel');

  _defineProperty(Event, "BEGIN", 'begin');

  _defineProperty(Event, "END", 'end');

  var isNil$4 = util.isNil,
      isFunction$2 = util.isFunction,
      clone$1 = util.clone,
      extend$1 = util.extend;
  var REGISTER = {};
  /**
   * 向上设置cp类型叶子节点，表明从root到本节点这条链路有更新，使得无链路更新的节约递归
   * 在check时树递归会用到，判断是否需要查找cp更新
   * @param cp
   */

  function setUpdateFlag(cp) {
    // 去重
    if (cp.__hasUpdate) {
      return;
    }

    cp.__hasUpdate = true;
    var host = cp.host;

    if (host) {
      setUpdateFlag(host);
    }
  }

  var Component$1 = /*#__PURE__*/function (_Event) {
    _inherits(Component, _Event);

    var _super = _createSuper(Component);

    function Component() {
      var _this;

      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Component);

      _this = _super.call(this);
      _this.__tagName = /(?:function|class)\s+([\w$]+)/.exec(_this.constructor.toString())[1]; // 构建工具中都是arr，手写可能出现hash情况

      if (Array.isArray(props)) {
        _this.props = util.arr2hash(props);
      } else {
        _this.props = props;
      }

      _this.__parent = null;
      _this.__host = null;
      _this.__ref = {};
      _this.state = {};
      _this.__isMounted = false;
      _this.__taskList = [];
      return _this;
    }

    _createClass(Component, [{
      key: "setState",
      value: function setState(n, cb) {
        var _this2 = this;

        var self = this;

        if (isNil$4(n)) {
          n = {};
        } else if (isFunction$2(n)) {
          return;
        } else {
          if (Object.keys(n).length === 0) {
            if (isFunction$2(cb)) {
              cb.call(self);
            }

            return;
          }

          var state = clone$1(self.state);
          n = extend$1(state, n);
        }

        var root = self.root;

        if (root && self.__isMounted) {
          // 一帧之内多次调用，需合并
          if (self.__nextState) {
            Object.assign(self.__nextState, n);

            self.__taskList.push(cb);
          } else {
            self.__nextState = n;
            self.__taskList = [cb]; // 回调更新列表，before执行时splice出来供after执行，防止中途产生的后续setState干扰

            var list = [];
            var t = self.__task = {
              __before: function __before() {
                list = self.__taskList.splice(0); // 标识更新

                setUpdateFlag(_this2);
              },
              __after: function __after() {
                // self.__nextState = null; 由updater.js每次refresh前同步执行清空，这里不能异步清除，否则frame动画会乱序
                list.forEach(function (cb) {
                  if (isFunction$2(cb)) {
                    cb.call(self);
                  }
                });
              }
            };
            root.addRefreshCp(t);
          }
        } // 构造函数中调用还未render，
        else if (isFunction$2(cb)) {
            self.state = n;
            cb.call(self);
          }
      }
      /**
       * build中调用初始化，json有值时是update过程才有，且处理过flatten
       * @param json
       * @private
       */

    }, {
      key: "__init",
      value: function __init(json) {
        var _this3 = this;

        this.__ref = {};
        var root = this.root;
        var cd = json || flattenJson(this.render());
        var sr = builder.initCp(cd, root, this);
        this.__cd = cd;

        if (sr instanceof Text) ; else if (sr instanceof Node) {
          var style = css.normalize(this.props.style);
          var keys = Object.keys(style);
          extend$1(sr.style, style, keys);
          extend$1(sr.currentStyle, style, keys); // 事件添加到sr

          Object.keys(this.props).forEach(function (k) {
            var v = _this3.props[k];

            if (/^on[a-zA-Z]/.test(k)) {
              k = k.slice(2).toLowerCase();
              sr.listener[k] = v;
            }
          });
        } else if (!(sr instanceof Component)) {
          // 本身build是递归的，子cp已经初始化了
          throw new Error('Component render() must return a dom/text: ' + this);
        } // 自定义事件无视返回强制添加


        Object.keys(this.props).forEach(function (k) {
          var v = _this3.props[k];

          if (/^on-[a-zA-Z\d_$]/.test(k)) {
            k = k.slice(3);

            _this3.on(k, v);
          }
        }); // shadow指向直接renderRoot，shadowRoot考虑到返回Component的递归即hoc高阶组件
        // host是直接所属，hostRoot同考虑到高阶组件

        this.__shadow = sr;
        sr.__host = this; // 递归下去，多层级时执行顺序由里到外，最终会被最上层执行替换

        while (sr instanceof Component) {
          sr.__hostRoot = this;
          sr.shadow.__host = sr;
          sr = sr.shadow;
        }

        this.__shadowRoot = sr;
        sr.__hostRoot = this;

        if (!this.__isMounted) {
          this.__isMounted = true;

          if (isFunction$2(this.componentDidMount)) {
            root.once(Event.REFRESH, function () {
              _this3.componentDidMount();
            });
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        inject.warn('Component must implement render()');
      }
    }, {
      key: "__destroy",
      value: function __destroy() {
        if (this.isDestroyed) {
          return;
        }

        this.__isDestroyed = true;
        this.__isMounted = false;

        if (isFunction$2(this.componentWillUnmount)) {
          this.componentWillUnmount();
        }

        this.root.delRefreshTask(this.__task);

        if (this.shadowRoot) {
          this.shadowRoot.__destroy();
        }

        this.__parent = null;
      }
    }, {
      key: "__emitEvent",
      value: function __emitEvent(e, force) {
        var sr = this.shadowRoot;

        if (sr instanceof Text) {
          return;
        }

        var res = sr.__emitEvent(e, force);

        if (res) {
          e.target = this;
          return true;
        }
      }
    }, {
      key: "tagName",
      get: function get() {
        return this.__tagName;
      }
    }, {
      key: "shadow",
      get: function get() {
        return this.__shadow;
      }
    }, {
      key: "shadowRoot",
      get: function get() {
        return this.__shadowRoot;
      }
    }, {
      key: "root",
      get: function get() {
        return this.__root;
      }
    }, {
      key: "host",
      get: function get() {
        return this.__host;
      }
    }, {
      key: "hostRoot",
      get: function get() {
        return this.__hostRoot;
      }
    }, {
      key: "parent",
      get: function get() {
        return this.__parent;
      }
    }, {
      key: "prev",
      get: function get() {
        return this.__prev;
      }
    }, {
      key: "next",
      get: function get() {
        return this.__next;
      }
    }, {
      key: "ref",
      get: function get() {
        return this.__ref;
      }
    }, {
      key: "domParent",
      get: function get() {
        return this.__domParent;
      }
    }, {
      key: "state",
      get: function get() {
        return this.__state;
      },
      set: function set(v) {
        this.__state = v;
      }
    }, {
      key: "isDestroyed",
      get: function get() {
        return this.__isDestroyed;
      }
    }], [{
      key: "REGISTER",
      get: function get() {
        return REGISTER;
      }
    }, {
      key: "getRegister",
      value: function getRegister(name) {
        if (!name || !util.isString(name) || !/^[A-Z]/.test(name)) {
          throw new Error('Invalid param');
        }

        if (!REGISTER.hasOwnProperty(name)) {
          throw new Error("Component has not register: ".concat(name));
        }

        return REGISTER[name];
      }
    }, {
      key: "register",
      value: function register(name, obj) {
        if (!name || !util.isString(name) || !/^[A-Z]/.test(name) || !obj.prototype || !(obj.prototype instanceof Component)) {
          throw new Error('Invalid param: Component register');
        }

        if (Component.hasRegister(name)) {
          throw new Error("Component has already register: ".concat(name));
        }

        REGISTER[name] = obj;
      }
    }, {
      key: "hasRegister",
      value: function hasRegister(name) {
        return name && REGISTER.hasOwnProperty(name);
      }
    }, {
      key: "delRegister",
      value: function delRegister(name) {
        if (Component.hasRegister(name)) {
          delete REGISTER[name];
        }
      }
    }]);

    return Component;
  }(Event);

  Object.keys(o$2.GEOM).concat(['x', 'y', 'ox', 'oy', 'sx', 'sy', // '__sx1',
  // '__sx2',
  // '__sx3',
  // '__sx4',
  // '__sx5',
  // '__sx6',
  // '__sy1',
  // '__sy2',
  // '__sy3',
  // '__sy4',
  // '__sy5',
  // '__sy6',
  'width', 'height', 'outerWidth', 'outerHeight', 'clientWidth', 'clientHeight', 'offsetWidth', 'offsetHeight', 'style', 'animationList', 'animateStyle', 'currentStyle', 'computedStyle', 'currentProps', 'baseLine', 'virtualDom', 'mask', 'maskId', 'textWidth', 'content', 'lineBoxes', 'charWidthList', 'charWidth', '__layoutData', 'availableAnimating', 'effectiveAnimating', 'displayAnimating', 'visibilityAnimating', 'bbox', '__config', 'contentBoxList', 'listener', 'matrix', 'matrixEvent']).forEach(function (fn) {
    Object.defineProperty(Component$1.prototype, fn, {
      get: function get() {
        var sr = this.shadowRoot;

        if (sr) {
          return sr[fn];
        }
      }
    });
  });
  ['__layout', '__layoutAbs', '__layoutNone', '__tryLayInline', '__offsetX', '__offsetY', '__calAutoBasis', '__calMp', '__calAbs', '__renderAsMask', '__renderByMask', '__mp', 'animate', 'removeAnimate', 'clearAnimate', 'updateStyle', 'getBoundingClientRect', 'getComputedStyle', '__deepScan', 'clearCache', '__structure', '__modifyStruct', '__updateStruct', 'flowChildren', 'absChildren', '__isRealInline', '__calBasis', '__calMinMax', '__computeMeasure', 'appendChild', 'prependChild', 'insertBefore', 'insertAfter', 'removeChild', 'remove'].forEach(function (fn) {
    Component$1.prototype[fn] = function () {
      var sr = this.shadowRoot;

      if (sr && isFunction$2(sr[fn])) {
        return sr[fn].apply(sr, arguments);
      }
    };
  });

  var _enums$STYLE_KEY$8 = enums.STYLE_KEY,
      SCALE_X$2 = _enums$STYLE_KEY$8.SCALE_X,
      SCALE_Y$2 = _enums$STYLE_KEY$8.SCALE_Y;
  var PERCENT$4 = o.PERCENT,
      NUMBER$3 = o.NUMBER;

  function matrixResize(imgWidth, imgHeight, targetWidth, targetHeight, x, y, w, h) {
    if (imgWidth === targetWidth && imgHeight === targetHeight) {
      return;
    }

    var list = [[SCALE_X$2, [targetWidth / imgWidth, NUMBER$3]], [SCALE_Y$2, [targetHeight / imgHeight, NUMBER$3]]];
    var tfo = transform$1.calOrigin([[0, PERCENT$4], [0, PERCENT$4]], w, h);
    tfo[0] += x;
    tfo[1] += y;
    return transform$1.calMatrixWithOrigin(list, tfo, w, h);
  }

  var image = {
    matrixResize: matrixResize
  };

  var _enums$STYLE_KEY$9 = enums.STYLE_KEY,
      BACKGROUND_POSITION_X$1 = _enums$STYLE_KEY$9.BACKGROUND_POSITION_X,
      BACKGROUND_POSITION_Y$1 = _enums$STYLE_KEY$9.BACKGROUND_POSITION_Y,
      FONT_SIZE$6 = _enums$STYLE_KEY$9.FONT_SIZE,
      NODE_DEFS_CACHE$1 = enums.NODE_KEY.NODE_DEFS_CACHE;
  var clone$2 = util.clone,
      joinArr$1 = util.joinArr;
  var canvasPolygon$3 = painter.canvasPolygon,
      svgPolygon$3 = painter.svgPolygon;
  var AUTO$2 = o.AUTO,
      PX$4 = o.PX,
      PERCENT$5 = o.PERCENT,
      STRING$1 = o.STRING,
      REM$5 = o.REM,
      VW$5 = o.VW,
      VH$5 = o.VH,
      VMAX$5 = o.VMAX,
      VMIN$5 = o.VMIN;

  function renderBgc(xom, renderMode, ctx, color, list, x, y, w, h, btlr, btrr, bbrr, bblr) {
    var method = arguments.length > 13 && arguments[13] !== undefined ? arguments[13] : 'fill';
    var isInline = arguments.length > 14 && arguments[14] !== undefined ? arguments[14] : false;
    var dx = arguments.length > 15 && arguments[15] !== undefined ? arguments[15] : 0;
    var dy = arguments.length > 16 && arguments[16] !== undefined ? arguments[16] : 0;
    // radial渐变ellipse形状会有matrix，用以从圆缩放到椭圆
    var matrix, cx, cy;

    if (Array.isArray(color)) {
      matrix = color[1];
      cx = color[2];
      cy = color[3];
      color = color[0];
    } // border-radius使用三次贝塞尔曲线模拟1/4圆角，误差在[0, 0.000273]之间


    list = list || border.calRadius(x, y, w, h, btlr, btrr, bbrr, bblr);

    if (!list) {
      list = [[x, y], [x + w, y], [x + w, y + h], [x, y + h], [x, y]];
    } // 椭圆有matrix，用逆矩阵变化点来完成


    if (matrix) {
      var tfo = [cx, cy];
      matrix = transform$1.calMatrixByOrigin(matrix, tfo);
      var t = mx.inverse(matrix);
      list = list.map(function (item) {
        if (!item || !item.length) {
          return null;
        }

        var arr = [];

        for (var i = 0, len = item.length; i < len; i += 2) {
          var p = mx.calPoint([item[i], item[i + 1]], t);
          arr.push(p[0]);
          arr.push(p[1]);
        }

        return arr;
      });
    }

    if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
      if (matrix) {
        ctx.save();
        var me = xom.matrixEvent;
        matrix = mx.multiply(me, matrix);
        ctx.setTransform(matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]);
      }

      ctx.beginPath();

      if (ctx.fillStyle !== color) {
        ctx.fillStyle = color;
      }

      canvasPolygon$3(ctx, list, dx, dy);
      ctx[method]();
      ctx.closePath();

      if (matrix) {
        ctx.restore();
      }
    } else if (renderMode === mode.SVG) {
      var d = svgPolygon$3(list);

      if (isInline) {
        var v = {
          tagName: 'symbol',
          props: [],
          children: [{
            type: 'item',
            tagName: 'path',
            props: [['d', d], ['fill', color]]
          }]
        };

        xom.__config[NODE_DEFS_CACHE$1].push(v);

        return ctx.add(v);
      } else {
        xom.virtualDom.bb.push({
          type: 'item',
          tagName: 'path',
          props: [['d', d], ['fill', color]]
        }); // 椭圆渐变独有

        if (matrix) {
          var bb = xom.virtualDom.bb;
          bb[bb.length - 1].props.push(['transform', "matrix(".concat(joinArr$1(mx.m2m6(matrix), ','), ")")]);
        }
      }
    }
  }

  function calBackgroundSize(value, w, h, root) {
    var res = [];
    value.forEach(function (item, i) {
      if (item[1] === PX$4) {
        res.push(item[0]);
      } else if (item[1] === PERCENT$5) {
        res.push(item[0] * (i ? h : w) * 0.01);
      } else if (item[1] === REM$5) {
        res.push(item[0] * root.computedStyle[FONT_SIZE$6]);
      } else if (item[1] === VW$5) {
        res.push(item[0] * root.width * 0.01);
      } else if (item[1] === VH$5) {
        res.push(item[0] * root.height * 0.01);
      } else if (item[1] === VMAX$5) {
        res.push(item[0] * Math.max(root.width, root.height) * 0.01);
      } else if (item[1] === VMIN$5) {
        res.push(item[0] * Math.min(root.width, root.height) * 0.01);
      } else if (item[1] === AUTO$2) {
        res.push(-1);
      } else if (item[1] === STRING$1) {
        res.push(item[0] === 'contain' ? -2 : -3);
      }
    });
    return res;
  }

  function calBackgroundPosition(position, container, size, root) {
    if (Array.isArray(position)) {
      if (position[1] === PX$4) {
        return position[0];
      } else if (position[1] === PERCENT$5) {
        return (container - size) * position[0] * 0.01;
      } else if (position[1] === REM$5) {
        return position[0] * root.computedStyle[FONT_SIZE$6];
      } else if (position[1] === VW$5) {
        return position[0] * root.width * 0.01;
      } else if (position[1] === VH$5) {
        return position[0] * root.height * 0.01;
      } else if (position[1] === VMAX$5) {
        return position[0] * Math.max(root.width, root.height) * 0.01;
      } else if (position[1] === VMIN$5) {
        return position[0] * Math.min(root.width, root.height) * 0.01;
      }
    }

    return 0;
  }

  function renderImage(xom, renderMode, ctx, loadBgi, bx1, by1, bx2, by2, btlr, btrr, bbrr, bblr, currentStyle, i, backgroundSize, backgroundRepeat, __config, isInline) {
    var dx = arguments.length > 18 && arguments[18] !== undefined ? arguments[18] : 0;
    var dy = arguments.length > 19 && arguments[19] !== undefined ? arguments[19] : 0;
    var source = loadBgi.source; // 无source不绘制，可能错误或加载中

    if (source) {
      bx1 += dx;
      by1 += dy;
      bx2 += dx;
      by2 += dy;
      var bgW = bx2 - bx1;
      var bgH = by2 - by1;
      var width = loadBgi.width,
          height = loadBgi.height;

      var _ref = backgroundSize[i] || [],
          _ref2 = _slicedToArray(_ref, 2),
          w = _ref2[0],
          h = _ref2[1]; // -1为auto，-2为contain，-3为cover


      if (w === -1 && h === -1) {
        w = width;
        h = height;
      } else if (w === -2) {
        if (width > bgW && height > bgH) {
          w = width / bgW;
          h = height / bgH;

          if (w >= h) {
            w = bgW;
            h = w * height / width;
          } else {
            h = bgH;
            w = h * width / height;
          }
        } else if (width > bgW) {
          w = bgW;
          h = w * height / width;
        } else if (height > bgH) {
          h = bgH;
          w = h * width / height;
        } else {
          w = width;
          h = height;
        }
      } else if (w === -3) {
        if (bgW > width && bgH > height) {
          w = width / bgW;
          h = height / bgH;

          if (w <= h) {
            w = bgW;
            h = w * height / width;
          } else {
            h = bgH;
            w = h * width / height;
          }
        } else if (bgW > width) {
          w = bgW;
          h = w * height / width;
        } else if (bgH > height) {
          h = bgH;
          w = h * width / height;
        } else {
          w = width / bgW;
          h = height / bgH;

          if (w <= h) {
            w = bgW;
            h = w * height / width;
          } else {
            h = bgH;
            w = h * width / height;
          }
        }
      } else if (w === -1) {
        w = h * width / height;
      } else if (h === -1) {
        h = w * height / width;
      }

      var bgX = bx1 + calBackgroundPosition(currentStyle[BACKGROUND_POSITION_X$1][i], bgW, w, xom.root);
      var bgY = by1 + calBackgroundPosition(currentStyle[BACKGROUND_POSITION_Y$1][i], bgH, h, xom.root); // 超出尺寸模拟mask截取

      var needMask = bgX < bx1 || bgY < by1 || bgX + w > bx1 + bgW || bgY + h > by1 + bgH; // 计算因为repeat，需要向4个方向扩展渲染几个数量图片

      var xnl = 0;
      var xnr = 0;
      var ynt = 0;
      var ynb = 0; // repeat-x

      if (['repeat-x', 'repeatX', 'repeat'].indexOf(backgroundRepeat[i]) > -1) {
        var diff = bgX - bx1;

        if (diff > 0) {
          xnl = Math.ceil(diff / w);
        }

        diff = bx1 + bgW - bgX - w;

        if (diff > 0) {
          xnr = Math.ceil(diff / w);
        }
      } // repeat-y


      if (['repeat-y', 'repeatY', 'repeat'].indexOf(backgroundRepeat[i]) > -1) {
        var _diff = bgY - by1;

        if (_diff > 0) {
          ynt = Math.ceil(_diff / h);
        }

        _diff = by1 + bgH - bgY - h;

        if (_diff > 0) {
          ynb = Math.ceil(_diff / h);
        }
      } // 分同行列和4个角分别判断，先看同行同列，再看4个角的象限


      var repeat = [];

      if (xnl > 0) {
        for (var _i = 0; _i < xnl; _i++) {
          var x = bgX - (_i + 1) * w;
          repeat.push([x, bgY]); // 看最左边超过没有

          if (!needMask && _i === 0 && x < bx1) {
            needMask = true;
          }
        }
      }

      if (xnr > 0) {
        for (var _i2 = 0; _i2 < xnr; _i2++) {
          var _x = bgX + (_i2 + 1) * w;

          repeat.push([_x, bgY]); // 看最右边超过没有

          if (!needMask && _i2 === xnr - 1 && _x + w > bx1 + bgW) {
            needMask = true;
          }
        }
      }

      if (ynt > 0) {
        for (var _i3 = 0; _i3 < ynt; _i3++) {
          var y = bgY - (_i3 + 1) * h;
          repeat.push([bgX, y]); // 看最上边超过没有

          if (!needMask && _i3 === 0 && y < by1) {
            needMask = true;
          }
        }
      }

      if (ynb > 0) {
        for (var _i4 = 0; _i4 < ynb; _i4++) {
          var _y = bgY + (_i4 + 1) * h;

          repeat.push([bgX, _y]); // 看最下边超过没有

          if (!needMask && _i4 === ynb - 1 && _y + w > by1 + bgH) {
            needMask = true;
          }
        }
      } // 原点和同行列十字画完，看4个角的情况


      if (xnl > 0 && ynt > 0) {
        for (var _i5 = 0; _i5 < xnl; _i5++) {
          for (var j = 0; j < ynt; j++) {
            repeat.push([bgX - (_i5 + 1) * w, bgY - (j + 1) * h]);
          }
        }
      }

      if (xnr > 0 && ynt > 0) {
        for (var _i6 = 0; _i6 < xnr; _i6++) {
          for (var _j = 0; _j < ynt; _j++) {
            repeat.push([bgX + (_i6 + 1) * w, bgY - (_j + 1) * h]);
          }
        }
      }

      if (xnl > 0 && ynb > 0) {
        for (var _i7 = 0; _i7 < xnl; _i7++) {
          for (var _j2 = 0; _j2 < ynb; _j2++) {
            repeat.push([bgX - (_i7 + 1) * w, bgY + (_j2 + 1) * h]);
          }
        }
      }

      if (xnr > 0 && ynb > 0) {
        for (var _i8 = 0; _i8 < xnr; _i8++) {
          for (var _j3 = 0; _j3 < ynb; _j3++) {
            repeat.push([bgX + (_i8 + 1) * w, bgY + (_j3 + 1) * h]);
          }
        }
      }

      if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
        if (needMask) {
          ctx.save();
          renderBgc(this, renderMode, ctx, '#FFF', null, bx1, by1, bgW, bgH, btlr, btrr, bbrr, bblr, 'clip');
        } // 先画不考虑repeat的中心声明的


        ctx.drawImage(source, bgX, bgY, w, h); // 再画重复的十字和4角象限

        repeat.forEach(function (item) {
          ctx.drawImage(source, item[0], item[1], w, h);
        });

        if (needMask) {
          ctx.restore();
        }
      } else if (renderMode === mode.SVG) {
        var matrix = image.matrixResize(width, height, w, h, bgX, bgY, bgW, bgH);
        var props = [['xlink:href', loadBgi.url], ['x', bgX], ['y', bgY], ['width', width], ['height', height]];
        var needResize;

        if (matrix && !mx.isE(matrix)) {
          needResize = true;
          props.push(['transform', 'matrix(' + joinArr$1(mx.m2m6(matrix), ',') + ')']);
        }

        if (needMask) {
          var p1 = [bx1, by1];
          var p2 = [bx2, by2];

          if (needResize) {
            var inverse = mx.inverse(matrix);
            p1 = mx.calPoint(p1, inverse);
            p2 = mx.calPoint(p2, inverse);
          }

          var v = {
            tagName: 'clipPath',
            children: [{
              tagName: 'path',
              props: [['d', "M".concat(p1[0], ",").concat(p1[1], "L").concat(p2[0], ",").concat(p1[1], "L").concat(p2[0], ",").concat(p2[1], "L").concat(p1[0], ",").concat(p2[1], "L").concat(p1[0], ",").concat(p1[1])], ['fill', '#FFF']]
            }]
          };
          var id = ctx.add(v);

          __config[NODE_DEFS_CACHE$1].push(v);

          props.push(['clip-path', 'url(#' + id + ')']);
        }

        if (isInline) {
          var _v = {
            tagName: 'symbol',
            props: [],
            children: [{
              type: 'img',
              tagName: 'image',
              props: props
            }]
          };

          xom.__config[NODE_DEFS_CACHE$1].push(_v);

          repeat.forEach(function (item) {
            var copy = clone$2(props);

            if (needResize) {
              var _matrix = image.matrixResize(width, height, w, h, item[0], item[1], bgW, bgH);

              if (_matrix && !mx.isE(_matrix)) {
                copy[5][1] = 'matrix(' + joinArr$1(mx.m2m6(_matrix), ',') + ')';
              }
            }

            copy[1][1] = item[0];
            copy[2][1] = item[1];

            _v.children.push({
              type: 'img',
              tagName: 'image',
              props: copy
            });
          });
          return ctx.add(_v);
        } else {
          // 先画不考虑repeat的中心声明的
          xom.virtualDom.bb.push({
            type: 'img',
            tagName: 'image',
            props: props
          }); // 再画重复的十字和4角象限

          repeat.forEach(function (item) {
            var copy = clone$2(props);

            if (needResize) {
              var _matrix2 = image.matrixResize(width, height, w, h, item[0], item[1], bgW, bgH);

              if (_matrix2 && !mx.isE(_matrix2)) {
                copy[5][1] = 'matrix(' + joinArr$1(mx.m2m6(_matrix2), ',') + ')';
              }
            }

            copy[1][1] = item[0];
            copy[2][1] = item[1];
            xom.virtualDom.bb.push({
              type: 'img',
              tagName: 'image',
              props: copy
            });
          });
        }
      }
    }
  }

  var bg = {
    renderBgc: renderBgc,
    renderImage: renderImage,
    calBackgroundSize: calBackgroundSize
  };

  var isFunction$3 = util.isFunction;

  function traversal(list, length, diff, after) {
    if (after) {
      for (var i = 0; i < length; i++) {
        var item = list[i];

        if (item[1]) {
          item[1](diff);
        } else {
          item.__after && item.__after(diff);
        }
      }
    } else {
      for (var _i = 0; _i < length; _i++) {
        var _item = list[_i];

        if (_item[0]) {
          _item[0](diff);
        } else {
          _item.__before && _item.__before(diff);
        }
      }
    }
  }

  var isPause;

  var Frame = /*#__PURE__*/function () {
    function Frame() {
      _classCallCheck(this, Frame);

      this.__hookTask = []; // 动画刷新后，每个root注册的刷新回调执行

      this.__task = [];
      this.__taskCp = []; // 区别于task，component专用，和animate等其它不同流水线，在最后执行，防止混了 #122

      this.__now = null;
    }

    _createClass(Frame, [{
      key: "__init",
      value: function __init() {
        var self = this;
        var task = self.task,
            taskCp = self.taskCp;
        inject.cancelAnimationFrame(self.id);
        var last = self.__now = inject.now();

        function cb() {
          // 必须清除，可能会发生重复，当动画finish回调中gotoAndPlay(0)，下方结束判断发现aTask还有值会继续，新的init也会进入再次执行
          inject.cancelAnimationFrame(self.id);
          self.id = inject.requestAnimationFrame(function () {
            if (isPause || !task.length && !taskCp.length) {
              return;
            }

            var now = self.__now = inject.now();
            var diff = now - last;
            diff = Math.max(diff, 0); // let delta = diff * 0.06; // 比例是除以1/60s，等同于*0.06

            last = now; // 优先动画计算

            var clone = task.slice(0);
            var cloneCp = taskCp.splice(0); // task要常驻，taskCp只1次直接splice清空

            var length = clone.length;
            var lengthCp = cloneCp.length;
            traversal(clone, length, diff, false);
            traversal(cloneCp, lengthCp, diff, false); // 执行动画造成的每个Root的刷新并清空

            var list = self.__hookTask.splice(0);

            for (var i = 0, len = list.length; i < len; i++) {
              var item = list[i];
              item && item();
            } // 普通的before/after


            traversal(clone, length, diff, true);
            traversal(cloneCp, lengthCp, diff, true); // 还有则继续，没有则停止节省性能

            if (task.length || taskCp.length) {
              cb();
            }
          });
        }

        cb();
      }
    }, {
      key: "onFrame",
      value: function onFrame(handle) {
        if (!handle) {
          return;
        }

        var task = this.task;

        if (!task.length) {
          this.__init();
        }

        if (isFunction$3(handle)) {
          handle = {
            __after: handle,
            __karasFramecb: handle
          };
        }

        task.push(handle);
      }
    }, {
      key: "offFrame",
      value: function offFrame(handle) {
        if (!handle) {
          return;
        }

        var task = this.task;

        for (var i = 0, len = task.length; i < len; i++) {
          var item = task[i]; // 需考虑nextFrame包裹的引用对比

          if (item === handle || item.__karasFramecb === handle) {
            task.splice(i, 1);
            break;
          }
        }

        if (!task.length) {
          inject.cancelAnimationFrame(this.id);
          this.__now = null;
        }
      }
    }, {
      key: "nextFrame",
      value: function nextFrame(handle) {
        var _this = this;

        if (!handle) {
          return;
        } // 包裹一层会导致添加后删除对比引用删不掉，需保存原有引用进行对比


        var cb = isFunction$3(handle) ? {
          __after: function __after(diff) {
            handle(diff);

            _this.offFrame(cb);
          }
        } : {
          __before: handle.__before,
          __after: function __after(diff) {
            handle.__after && handle.__after(diff);

            _this.offFrame(cb);
          }
        };
        cb.__karasFramecb = handle;
        this.onFrame(cb);
      }
    }, {
      key: "__nextFrameCp",
      value: function __nextFrameCp(handle) {
        var task = this.task,
            taskCp = this.taskCp;

        if (!task.length && !taskCp.length) {
          this.__init();
        }

        taskCp.push(handle);
      }
    }, {
      key: "pause",
      value: function pause() {
        isPause = true;
      }
    }, {
      key: "resume",
      value: function resume() {
        if (isPause) {
          this.__init();

          isPause = false;
        }
      }
    }, {
      key: "task",
      get: function get() {
        return this.__task;
      }
    }, {
      key: "taskCp",
      get: function get() {
        return this.__taskCp;
      }
    }]);

    return Frame;
  }();

  var frame = new Frame();

  /**
   * https://github.com/gre/bezier-easing
   * BezierEasing - use bezier curve for transition easing function
   * by Gaëtan Renaudeau 2014 - 2015 – MIT License
   */
  // These values are established by empiricism with tests (tradeoff: performance VS precision)
  var NEWTON_ITERATIONS = 4;
  var NEWTON_MIN_SLOPE = 0.001;
  var SUBDIVISION_PRECISION = 0.0000001;
  var SUBDIVISION_MAX_ITERATIONS = 10;
  var kSplineTableSize = 11;
  var kSampleStepSize = 1.0 / (kSplineTableSize - 1.0);
  var float32ArraySupported = typeof Float32Array === 'function';

  function A(aA1, aA2) {
    return 1.0 - 3.0 * aA2 + 3.0 * aA1;
  }

  function B$1(aA1, aA2) {
    return 3.0 * aA2 - 6.0 * aA1;
  }

  function C(aA1) {
    return 3.0 * aA1;
  } // Returns x(t) given t, x1, and x2, or y(t) given t, y1, and y2.


  function calcBezier(aT, aA1, aA2) {
    return ((A(aA1, aA2) * aT + B$1(aA1, aA2)) * aT + C(aA1)) * aT;
  } // Returns dx/dt given t, x1, and x2, or dy/dt given t, y1, and y2.


  function getSlope(aT, aA1, aA2) {
    return 3.0 * A(aA1, aA2) * aT * aT + 2.0 * B$1(aA1, aA2) * aT + C(aA1);
  }

  function binarySubdivide(aX, aA, aB, mX1, mX2) {
    var currentX,
        currentT,
        i = 0;

    do {
      currentT = aA + (aB - aA) / 2.0;
      currentX = calcBezier(currentT, mX1, mX2) - aX;

      if (currentX > 0.0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);

    return currentT;
  }

  function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
    for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
      var currentSlope = getSlope(aGuessT, mX1, mX2);

      if (currentSlope === 0.0) {
        return aGuessT;
      }

      var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
      aGuessT -= currentX / currentSlope;
    }

    return aGuessT;
  }

  function LinearEasing(x) {
    return x;
  }

  function bezier(mX1, mY1, mX2, mY2) {
    if (!(0 <= mX1 && mX1 <= 1 && 0 <= mX2 && mX2 <= 1)) {
      throw new Error('bezier x values must be in [0, 1] range');
    }

    if (mX1 === mY1 && mX2 === mY2) {
      return LinearEasing;
    } // Precompute samples table


    var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);

    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }

    function getTForX(aX) {
      var intervalStart = 0.0;
      var currentSample = 1;
      var lastSample = kSplineTableSize - 1;

      for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
        intervalStart += kSampleStepSize;
      }

      --currentSample; // Interpolate to provide an initial guess for t

      var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
      var guessForT = intervalStart + dist * kSampleStepSize;
      var initialSlope = getSlope(guessForT, mX1, mX2);

      if (initialSlope >= NEWTON_MIN_SLOPE) {
        return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
      } else if (initialSlope === 0.0) {
        return guessForT;
      } else {
        return binarySubdivide(aX, intervalStart, intervalStart + kSampleStepSize, mX1, mX2);
      }
    }

    return function BezierEasing(x) {
      // Because JavaScript number are imprecise, we should guarantee the extremes are right.
      if (x === 0 || x === 1) {
        return x;
      }

      return calcBezier(getTForX(x), mY1, mY2);
    };
  }

  var easing = {
    linear: bezier(1, 1, 0, 0),
    easeIn: bezier(0.42, 0, 1, 1),
    easeOut: bezier(0, 0, 0.58, 1),
    ease: bezier(0.25, 0.1, 0.25, 1),
    easeInOut: bezier(0.42, 0, 0.58, 1),
    cubicBezier: bezier,
    getEasing: function getEasing(v, v1, v2, v3) {
      if (arguments.length === 4) {
        return bezier(v, v1, v2, v3);
      } else if (Array.isArray(v) && v.length === 4) {
        return bezier(v[0], v[1], v[2], v[3]);
      } else if (v) {
        v = v.toString();
        var timingFunction;

        if (/^\s*(?:cubic-bezier\s*)?\(\s*[\d.]+\s*,\s*[-\d.]+\s*,\s*[\d.]+\s*,\s*[-\d.]+\s*\)\s*$/i.test(v)) {
          v = v.match(/[\d.]+/g);
          timingFunction = bezier(v[0], v[1], v[2], v[3]);
        } else if (v !== 'getEasing') {
          timingFunction = this[v];
        }

        return timingFunction;
      }
    }
  };
  easing['ease-in'] = easing.easeIn;
  easing['ease-out'] = easing.easeOut;
  easing['ease-in-out'] = easing.easeInOut;

  var _enums$STYLE_KEY$a = enums.STYLE_KEY,
      FILTER$2 = _enums$STYLE_KEY$a.FILTER,
      TRANSFORM_ORIGIN$3 = _enums$STYLE_KEY$a.TRANSFORM_ORIGIN,
      PERSPECTIVE_ORIGIN$2 = _enums$STYLE_KEY$a.PERSPECTIVE_ORIGIN,
      BACKGROUND_CLIP$1 = _enums$STYLE_KEY$a.BACKGROUND_CLIP,
      BACKGROUND_POSITION_X$2 = _enums$STYLE_KEY$a.BACKGROUND_POSITION_X,
      BACKGROUND_POSITION_Y$2 = _enums$STYLE_KEY$a.BACKGROUND_POSITION_Y,
      BOX_SHADOW$1 = _enums$STYLE_KEY$a.BOX_SHADOW,
      TRANSLATE_X$3 = _enums$STYLE_KEY$a.TRANSLATE_X,
      TRANSLATE_Y$3 = _enums$STYLE_KEY$a.TRANSLATE_Y,
      TRANSLATE_Z$3 = _enums$STYLE_KEY$a.TRANSLATE_Z,
      BACKGROUND_SIZE$1 = _enums$STYLE_KEY$a.BACKGROUND_SIZE,
      FONT_SIZE$7 = _enums$STYLE_KEY$a.FONT_SIZE,
      FLEX_BASIS$1 = _enums$STYLE_KEY$a.FLEX_BASIS,
      FLEX_DIRECTION$1 = _enums$STYLE_KEY$a.FLEX_DIRECTION,
      WIDTH$3 = _enums$STYLE_KEY$a.WIDTH,
      HEIGHT$2 = _enums$STYLE_KEY$a.HEIGHT,
      TOP = _enums$STYLE_KEY$a.TOP,
      BOTTOM = _enums$STYLE_KEY$a.BOTTOM,
      LINE_HEIGHT$2 = _enums$STYLE_KEY$a.LINE_HEIGHT,
      OPACITY$2 = _enums$STYLE_KEY$a.OPACITY,
      Z_INDEX$1 = _enums$STYLE_KEY$a.Z_INDEX,
      TRANSFORM$2 = _enums$STYLE_KEY$a.TRANSFORM,
      COLOR$3 = _enums$STYLE_KEY$a.COLOR,
      FONT_WEIGHT$3 = _enums$STYLE_KEY$a.FONT_WEIGHT,
      FONT_STYLE$3 = _enums$STYLE_KEY$a.FONT_STYLE,
      FONT_FAMILY$3 = _enums$STYLE_KEY$a.FONT_FAMILY,
      TEXT_ALIGN$1 = _enums$STYLE_KEY$a.TEXT_ALIGN,
      MATRIX$2 = _enums$STYLE_KEY$a.MATRIX,
      ROTATE_3D$2 = _enums$STYLE_KEY$a.ROTATE_3D,
      TRANSLATE_PATH$1 = _enums$STYLE_KEY$a.TRANSLATE_PATH,
      TEXT_STROKE_COLOR$3 = _enums$STYLE_KEY$a.TEXT_STROKE_COLOR,
      TEXT_STROKE_OVER$2 = _enums$STYLE_KEY$a.TEXT_STROKE_OVER,
      _enums$UPDATE_KEY$1 = enums.UPDATE_KEY,
      UPDATE_NODE$1 = _enums$UPDATE_KEY$1.UPDATE_NODE,
      UPDATE_STYLE = _enums$UPDATE_KEY$1.UPDATE_STYLE,
      UPDATE_KEYS = _enums$UPDATE_KEY$1.UPDATE_KEYS,
      UPDATE_CONFIG$1 = _enums$UPDATE_KEY$1.UPDATE_CONFIG,
      _enums$KEY_FRAME_KEY = enums.KEY_FRAME_KEY,
      FRAME_STYLE = _enums$KEY_FRAME_KEY.FRAME_STYLE,
      FRAME_TIME = _enums$KEY_FRAME_KEY.FRAME_TIME,
      FRAME_EASING = _enums$KEY_FRAME_KEY.FRAME_EASING,
      FRAME_TRANSITION = _enums$KEY_FRAME_KEY.FRAME_TRANSITION,
      _enums$ANIMATE_KEY = enums.ANIMATE_KEY,
      I_ASSIGNING = _enums$ANIMATE_KEY.I_ASSIGNING,
      I_IN_FPS = _enums$ANIMATE_KEY.I_IN_FPS,
      I_IS_DELAY = _enums$ANIMATE_KEY.I_IS_DELAY,
      I_BEGIN = _enums$ANIMATE_KEY.I_BEGIN,
      I_END = _enums$ANIMATE_KEY.I_END,
      I_FINISHED = _enums$ANIMATE_KEY.I_FINISHED,
      I_NEXT_END = _enums$ANIMATE_KEY.I_NEXT_END,
      I_FIRST_PLAY = _enums$ANIMATE_KEY.I_FIRST_PLAY,
      I_FRAME_CB = _enums$ANIMATE_KEY.I_FRAME_CB,
      I_PLAY_CB = _enums$ANIMATE_KEY.I_PLAY_CB,
      I_TARGET = _enums$ANIMATE_KEY.I_TARGET,
      I_ROOT = _enums$ANIMATE_KEY.I_ROOT,
      I_FRAMES = _enums$ANIMATE_KEY.I_FRAMES,
      I_FRAMES_R = _enums$ANIMATE_KEY.I_FRAMES_R,
      I_CURRENT_TIME = _enums$ANIMATE_KEY.I_CURRENT_TIME,
      I_NEXT_TIME = _enums$ANIMATE_KEY.I_NEXT_TIME,
      I_STYLE = _enums$ANIMATE_KEY.I_STYLE,
      I_DURATION = _enums$ANIMATE_KEY.I_DURATION,
      I_ITERATIONS = _enums$ANIMATE_KEY.I_ITERATIONS,
      I_FILL = _enums$ANIMATE_KEY.I_FILL,
      I_PLAYBACK_RATE = _enums$ANIMATE_KEY.I_PLAYBACK_RATE,
      I_PLAY_COUNT = _enums$ANIMATE_KEY.I_PLAY_COUNT,
      I_PLAY_STATE = _enums$ANIMATE_KEY.I_PLAY_STATE,
      I_DESTROYED = _enums$ANIMATE_KEY.I_DESTROYED,
      I_START_TIME = _enums$ANIMATE_KEY.I_START_TIME,
      I_FPS_TIME = _enums$ANIMATE_KEY.I_FPS_TIME,
      I_EASING = _enums$ANIMATE_KEY.I_EASING,
      I_ENTER_FRAME = _enums$ANIMATE_KEY.I_ENTER_FRAME,
      I_DELAY = _enums$ANIMATE_KEY.I_DELAY,
      I_END_DELAY = _enums$ANIMATE_KEY.I_END_DELAY,
      I_KEYS = _enums$ANIMATE_KEY.I_KEYS,
      I_ORIGIN_STYLE = _enums$ANIMATE_KEY.I_ORIGIN_STYLE,
      I_CURRENT_FRAMES = _enums$ANIMATE_KEY.I_CURRENT_FRAMES,
      I_CURRENT_FRAME = _enums$ANIMATE_KEY.I_CURRENT_FRAME,
      I_SPF_LIMIT = _enums$ANIMATE_KEY.I_SPF_LIMIT,
      I_FPS = _enums$ANIMATE_KEY.I_FPS,
      I_DIRECTION = _enums$ANIMATE_KEY.I_DIRECTION,
      I_FIRST_ENTER = _enums$ANIMATE_KEY.I_FIRST_ENTER,
      I_STAY_BEGIN = _enums$ANIMATE_KEY.I_STAY_BEGIN,
      I_STAY_END = _enums$ANIMATE_KEY.I_STAY_END,
      I_IS2 = _enums$ANIMATE_KEY.I_IS2,
      I_END_TIME = _enums$ANIMATE_KEY.I_END_TIME,
      I_NODE_CONFIG = _enums$ANIMATE_KEY.I_NODE_CONFIG,
      I_ROOT_CONFIG = _enums$ANIMATE_KEY.I_ROOT_CONFIG,
      I_OUT_BEGIN_DELAY = _enums$ANIMATE_KEY.I_OUT_BEGIN_DELAY,
      I_TIME_STAMP = _enums$ANIMATE_KEY.I_TIME_STAMP;
  var AUTO$3 = o.AUTO,
      PX$5 = o.PX,
      PERCENT$6 = o.PERCENT,
      INHERIT$3 = o.INHERIT,
      RGBA$1 = o.RGBA,
      STRING$2 = o.STRING,
      NUMBER$4 = o.NUMBER,
      REM$6 = o.REM,
      VW$6 = o.VW,
      VH$6 = o.VH,
      VMAX$6 = o.VMAX,
      VMIN$6 = o.VMIN,
      calUnit$2 = o.calUnit;
  var isNil$5 = util.isNil,
      isFunction$4 = util.isFunction,
      isNumber$1 = util.isNumber,
      isObject$1 = util.isObject,
      isString$1 = util.isString,
      clone$3 = util.clone,
      equalArr$2 = util.equalArr;
  var linear = easing.linear;
  var cloneStyle$1 = css.cloneStyle;
  var isGeom$1 = o$2.isGeom,
      GEOM$3 = o$2.GEOM;
  var COLOR_HASH$2 = key.COLOR_HASH,
      LENGTH_HASH$2 = key.LENGTH_HASH,
      RADIUS_HASH$2 = key.RADIUS_HASH,
      GRADIENT_HASH$2 = key.GRADIENT_HASH,
      EXPAND_HASH$2 = key.EXPAND_HASH,
      GRADIENT_TYPE$2 = key.GRADIENT_TYPE;
  var NUM_CAL_HASH = {};
  Object.assign(NUM_CAL_HASH, LENGTH_HASH$2);
  Object.assign(NUM_CAL_HASH, EXPAND_HASH$2);

  function unify(frames, target) {
    var hash = {};
    var keys = []; // 获取所有关键帧的属性

    frames.forEach(function (item) {
      var style = item[FRAME_STYLE];
      Object.keys(style).forEach(function (k) {
        var v = style[k]; // 未定义的过滤掉，null空有意义

        if (v !== undefined && !hash.hasOwnProperty(k)) {
          hash[k] = true; // geom为属性字符串，style都为枚举int

          if (!GEOM$3.hasOwnProperty(k)) {
            k = parseInt(k);
          } // path动画要转为translateXY，所以手动添加，使2帧之间存在过渡，有可能之前已存在这个动画，可忽视


          if (k === TRANSLATE_PATH$1) {
            if (!hash.hasOwnProperty(TRANSLATE_X$3)) {
              keys.push(TRANSLATE_X$3);
            }

            if (!hash.hasOwnProperty(TRANSLATE_Y$3)) {
              keys.push(TRANSLATE_Y$3);
            }

            hash[TRANSLATE_X$3] = hash[TRANSLATE_Y$3] = true;
          }

          keys.push(k);
        }
      });
    }); // 添补没有声明完全的关键帧属性为节点当前值

    frames.forEach(function (item) {
      var style = item[FRAME_STYLE];
      keys.forEach(function (k) {
        if (!style.hasOwnProperty(k) || isNil$5(style[k])) {
          if (GEOM$3.hasOwnProperty(k)) {
            style[k] = target.getProps(k);
          } else {
            style[k] = target.currentStyle[k];
          }
        }
      });
    });
    return keys;
  } // 每次初始化时处理继承值，以及转换transform为单matrix矩阵


  function inherit(frames, keys, target) {
    var computedStyle = target.computedStyle;
    frames.forEach(function (item) {
      var style = item[FRAME_STYLE];
      keys.forEach(function (k) {
        var v = style[k]; // geom的属性可能在帧中没有

        if (isNil$5(v)) {
          return;
        }

        if (k === TRANSFORM$2) {
          var ow = target.outerWidth;
          var oh = target.outerHeight;
          var m = transform$1.calMatrix(v, ow, oh);
          style[k] = [[MATRIX$2, m]];
        } else if (v[1] === INHERIT$3) {
          if (k === COLOR$3 || k === TEXT_STROKE_COLOR$3) {
            style[k] = [util.rgba2int(computedStyle[k]), RGBA$1];
          } else if (LENGTH_HASH$2.hasOwnProperty(k)) {
            style[k] = [computedStyle[k], PX$5];
          } else if (k === FONT_WEIGHT$3) {
            style[k] = [computedStyle[k], NUMBER$4];
          } else if (k === FONT_STYLE$3 || k === FONT_FAMILY$3 || k === TEXT_ALIGN$1 || k === TEXT_STROKE_OVER$2) {
            style[k] = [computedStyle[k], STRING$2];
          }
        }
      });
    });
  }
  /**
   * 通知root更新当前动画，需要根据frame的状态来决定是否是同步插入
   * 在异步时，因为动画本身是异步，需要addRefreshTask
   * 而如果此时frame在执行before过程中，说明帧动画本身是在before计算的，需要同步插入
   * @param style
   * @param keys 样式所有的key
   * @param __config
   * @param root
   * @param node
   */


  function genBeforeRefresh(style, keys, __config, root, node) {
    var res = {};
    res[UPDATE_NODE$1] = node;
    res[UPDATE_STYLE] = style;
    res[UPDATE_KEYS] = keys;
    res[UPDATE_CONFIG$1] = __config[I_NODE_CONFIG];

    root.__addUpdate(node, __config[I_NODE_CONFIG], root, __config[I_ROOT_CONFIG], res);

    __config[I_STYLE] = style;
    __config[I_ASSIGNING] = true; // frame每帧回调时，下方先执行计算好变更的样式，这里特殊插入一个hook，让root增加一个刷新操作
    // 多个动画调用因为相同root也只会插入一个，这样在所有动画执行完毕后frame里检查同步进行刷新，解决单异步问题

    root.__frameHook();
  }
  /**
   * 将每帧的样式格式化，提取出offset属性并转化为时间，提取出缓动曲线easing
   * @param style 关键帧样式
   * @param duration 动画时间长度
   * @param es options的easing曲线控制，frame没有自定义则使用全局的
   * @returns {{style: *, time: number, easing: *, transition: []}}
   */


  function framing(style, duration, es) {
    var _style = style,
        offset = _style.offset,
        easing = _style.easing; // 这两个特殊值提出来存储不干扰style

    delete style.offset;
    delete style.easing; // translatePath特殊对待，ae的曲线运动动画

    var translatePath = style.translatePath;
    style = css.normalize(style);

    if (Array.isArray(translatePath) && [6, 8].indexOf(translatePath.length) > -1) {
      style[TRANSLATE_PATH$1] = translatePath.map(function (item) {
        return calUnit$2(item);
      });
    }

    var res = [];
    res[FRAME_STYLE] = style;
    res[FRAME_TIME] = offset * duration;
    res[FRAME_EASING] = easing || es;
    res[FRAME_TRANSITION] = [];
    return res;
  }

  function calByUnit(p, n, container, root) {
    if (p[1] === PX$5) {
      if (n[1] === PERCENT$6) {
        return n[0] * 0.01 * container - p[0];
      } else if (n[1] === REM$6) {
        return n[0] * root.computedStyle[FONT_SIZE$7] - p[0];
      } else if (n[1] === VW$6) {
        return n[0] * root.width * 0.01 - p[0];
      } else if (n[1] === VH$6) {
        return n[0] * root.height * 0.01 - p[0];
      } else if (n[1] === VMAX$6) {
        return n[0] * Math.max(root.width, root.height) * 0.01 - p[0];
      } else if (n[1] === VMIN$6) {
        return n[0] * Math.min(root.width, root.height) * 0.01 - p[0];
      }
    } else if (p[1] === PERCENT$6) {
      if (n[1] === PX$5) {
        return n[0] * 100 / container - p[0];
      } else if (n[1] === REM$6) {
        return n[0] * root.computedStyle[FONT_SIZE$7] * 100 / container - p[0];
      } else if (n[1] === VW$6) {
        return n[0] * root.width / container - p[0];
      } else if (n[1] === VH$6) {
        return n[0] * root.height / container - p[0];
      } else if (n[1] === VMAX$6) {
        return n[0] * Math.max(root.width, root.height) / container - p[0];
      } else if (n[1] === VMIN$6) {
        return n[0] * Math.min(root.width, root.height) / container - p[0];
      }
    } else if (p[1] === REM$6) {
      if (n[1] === PX$5) {
        return n[0] / root.computedStyle[FONT_SIZE$7] - p[0];
      } else if (n[1] === PERCENT$6) {
        return n[0] * 0.01 * container / root.computedStyle[FONT_SIZE$7] - p[0];
      } else if (n[1] === VW$6) {
        return n[0] * root.width * 0.01 / root.computedStyle[FONT_SIZE$7] - p[0];
      } else if (n[1] === VH$6) {
        return n[0] * root.height * 0.01 / root.computedStyle[FONT_SIZE$7] - p[0];
      } else if (n[1] === VMAX$6) {
        return n[0] * Math.max(root.width, root.height) * 0.01 / root.computedStyle[FONT_SIZE$7] - p[0];
      } else if (n[1] === VMIN$6) {
        return n[0] * Math.min(root.width, root.height) * 0.01 / root.computedStyle[FONT_SIZE$7] - p[0];
      }
    } else if (p[1] === VW$6) {
      if (n[1] === PX$5) {
        return n[0] * 100 / root.width - p[0];
      } else if (n[1] === REM$6) {
        return n[0] * 100 * root.computedStyle[FONT_SIZE$7] / root.width - p[0];
      } else if (n[1] === PERCENT$6) {
        return n[0] * container / root.width - p[0];
      } else if (n[1] === VH$6) {
        return n[0] * root.height / root.width - p[0];
      } else if (n[1] === VMAX$6) {
        return n[0] * Math.max(root.width, root.height) / root.width - p[0];
      } else if (n[1] === VMIN$6) {
        return n[0] * Math.min(root.width, root.height) / root.width - p[0];
      }
    } else if (p[1] === VH$6) {
      if (n[1] === PX$5) {
        return n[0] * 100 / root.height - p[0];
      } else if (n[1] === REM$6) {
        return n[0] * 100 * root.computedStyle[FONT_SIZE$7] / root.height - p[0];
      } else if (n[1] === VW$6) {
        return n[0] * root.width / root.height - p[0];
      } else if (n[1] === PERCENT$6) {
        return n[0] * container / root.height - p[0];
      } else if (n[1] === VMAX$6) {
        return n[0] * Math.max(root.width, root.height) / root.height - p[0];
      } else if (n[1] === VMIN$6) {
        return n[0] * Math.min(root.width, root.height) / root.height - p[0];
      }
    } else if (p[1] === VMAX$6) {
      if (n[1] === PX$5) {
        return n[0] * 100 / Math.max(root.width, root.height) - p[0];
      } else if (n[1] === REM$6) {
        return n[0] * 100 * root.computedStyle[FONT_SIZE$7] / Math.max(root.width, root.height) - p[0];
      } else if (n[1] === PERCENT$6) {
        return n[0] * container / Math.max(root.width, root.height) - p[0];
      } else if (n[1] === VW$6) {
        return n[0] * root.width / Math.max(root.width, root.height) - p[0];
      } else if (n[1] === VH$6) {
        return n[0] * root.height / Math.max(root.width, root.height) - p[0];
      } else if (n[1] === VMIN$6) {
        return n[0] * Math.min(root.width, root.height) / Math.max(root.width, root.height) - p[0];
      }
    } else if (p[1] === VMIN$6) {
      if (n[1] === PX$5) {
        return n[0] * 100 / Math.min(root.width, root.height) - p[0];
      } else if (n[1] === REM$6) {
        return n[0] * 100 * root.computedStyle[FONT_SIZE$7] / Math.min(root.width, root.height) - p[0];
      } else if (n[1] === PERCENT$6) {
        return n[0] * container / Math.min(root.width, root.height) - p[0];
      } else if (n[1] === VW$6) {
        return n[0] * root.width / Math.min(root.width, root.height) - p[0];
      } else if (n[1] === VH$6) {
        return n[0] * root.height / Math.min(root.width, root.height) - p[0];
      } else if (n[1] === VMAX$6) {
        return n[0] * Math.max(root.width, root.height) / Math.min(root.width, root.height) - p[0];
      }
    }
  }
  /**
   * 计算两帧之间的差，单位不同的以后面为准，返回的v表示差值
   * 没有变化返回空
   * auto等无法比较的不参与计算，不返回来标识无过度效果
   * @param prev 上一帧样式
   * @param next 下一帧样式
   * @param k 比较的样式名
   * @param target dom对象
   * @param tagName dom名
   * @returns {{k: *, v: *}}
   */


  function calDiff(prev, next, k, target, tagName) {
    var res = [k];
    var p = prev[k];
    var n = next[k];

    if (k === TRANSFORM$2) {
      // transform因默认值null很特殊，不存在时需给默认矩阵
      if (!p && !n) {
        return;
      }

      var pm, nm;

      if (p) {
        pm = p[0][1];
      } else {
        pm = mx.identity();
      }

      if (n) {
        nm = n[0][1];
      } else {
        nm = mx.identity();
      } // transform特殊被初始化转成matrix矩阵，直接计算差值


      if (equalArr$2(pm, nm)) {
        return;
      }

      res[1] = [nm[0] - pm[0], nm[1] - pm[1], nm[2] - pm[2], nm[3] - pm[3], nm[4] - pm[4], nm[5] - pm[5], nm[6] - pm[6], nm[7] - pm[7], nm[8] - pm[8], nm[9] - pm[9], nm[10] - pm[10], nm[11] - pm[11], nm[12] - pm[12], nm[13] - pm[13], nm[14] - pm[14], nm[15] - pm[15]];
      return res;
    } else if (k === ROTATE_3D$2) {
      if (equalArr$2(p, n)) {
        return;
      }

      res[1] = [n[0] - n[0], n[1] - p[1], n[2] - p[2], [n[3][0] - p[3][0], n[3][1]]];
    } else if (k === FILTER$2) {
      // filter很特殊，里面有多个滤镜，忽视顺序按hash计算，为空视为默认值，如blur默认0，brightness默认1
      var pHash = {},
          nHash = {},
          keyHash = {};

      if (p) {
        p.forEach(function (item) {
          keyHash[item[0]] = true;
          pHash[item[0]] = item[1];
        });
      }

      if (n) {
        n.forEach(function (item) {
          keyHash[item[0]] = true;
          nHash[item[0]] = item[1];
        });
      }

      var v = {},
          hasChange; // 只有blur支持px/rem/vw/vh/vmax/vmin，其余都是特殊固定单位

      Object.keys(keyHash).forEach(function (k) {
        if (k === 'blur') {
          if (!pHash[k]) {
            v[k] = nHash[k].slice(0);
            hasChange = true;
          } else if (!nHash[k]) {
            v[k] = [-pHash[k][0], pHash[k][1]];
            hasChange = true;
          } else {
            var v2 = calByUnit(pHash[k], nHash[k], 0, target.root);
            v[k] = [v2, pHash[k][1]];
            hasChange = true;
          }
        } else if (k === 'hue-rotate') {
          var nv = isNil$5(nHash[k]) ? 0 : nHash[k][0];
          var pv = isNil$5(pHash[k]) ? 0 : pHash[k][0];

          if (pv !== nv) {
            v[k] = [nv - pv, PERCENT$6];
            hasChange = true;
          }
        } else if (k === 'saturate' || k === 'brightness' || k === 'contrast') {
          var _nv = isNil$5(nHash[k]) ? 100 : nHash[k][0];

          var _pv = isNil$5(pHash[k]) ? 100 : pHash[k][0];

          if (_pv !== _nv) {
            v[k] = [_nv - _pv, PERCENT$6];
            hasChange = true;
          }
        } else if (k === 'grayscale') {
          var _nv2 = isNil$5(nHash[k]) ? 0 : nHash[k][0];

          var _pv2 = isNil$5(pHash[k]) ? 0 : pHash[k][0];

          if (_pv2 !== _nv2) {
            v[k] = [_nv2 - _pv2, PERCENT$6];
            hasChange = true;
          }
        }
      });

      if (!hasChange) {
        return;
      }

      res[1] = v;
    } else if (k === TRANSFORM_ORIGIN$3 || k === PERSPECTIVE_ORIGIN$2) {
      res[1] = [];

      for (var i = 0; i < 2; i++) {
        var pi = p[i];
        var ni = n[i];

        if (pi[1] === ni[1]) {
          res[1].push(ni[0] - pi[0]);
        } else {
          var _v = calByUnit(pi, ni, target[i ? 'outerHeight' : 'outerWidth'], target.root);

          res[1].push(_v || 0);
        }
      }

      if (equalArr$2(res[1], [0, 0])) {
        return;
      }
    } else if (k === BACKGROUND_POSITION_X$2 || k === BACKGROUND_POSITION_Y$2) {
      res[1] = [];
      var length = Math.min(p.length, n.length);

      for (var _i = 0; _i < length; _i++) {
        var _pi = p[_i],
            _ni = n[_i];

        if (!_pi || !_ni) {
          res[1].push(null);
          continue;
        }

        if (_pi[1] === _ni[1]) {
          var _v2 = _ni[0] - _pi[0];

          if (!_v2) {
            res[1].push(null);
            return;
          }

          res[1].push(_v2);
        } else {
          var k2 = k === BACKGROUND_POSITION_X$2 ? 'offsetWidth' : 'offsetHeight';

          if (['padding-box', 'paddingBox'].indexOf(target.computedStyle[BACKGROUND_CLIP$1]) > -1) {
            k2 = k === BACKGROUND_POSITION_X$2 ? 'clientWidth' : 'clientHeight';
          } else if (['content-box', 'contentBox'].indexOf(target.computedStyle[BACKGROUND_CLIP$1]) > -1) {
            k2 = k === BACKGROUND_POSITION_X$2 ? 'width' : 'height';
          }

          var _v3 = calByUnit(_pi, _ni, target[k2], target.root);

          if (!_v3) {
            res[1].push(null);
            return;
          }

          res[1].push(_v3);
        }
      }
    } else if (k === BOX_SHADOW$1) {
      res[1] = [];

      for (var _i2 = 0, len = Math.min(p.length, n.length); _i2 < len; _i2++) {
        var a = p[_i2];
        var b = n[_i2];
        var _v4 = []; // x/y/blur/spread

        for (var j = 0; j < 4; j++) {
          _v4.push(b[j] - a[j]);
        } // rgba


        var c = [];

        for (var _j = 0; _j < 4; _j++) {
          c.push(b[4][_j] - a[4][_j]);
        }

        _v4.push(c);

        res[1].push(_v4);
      }
    } else if (EXPAND_HASH$2.hasOwnProperty(k)) {
      if (p[1] === n[1]) {
        var _v5 = n[0] - p[0];

        if (_v5 === 0) {
          return;
        }

        res[1] = _v5;
      } else {
        var _v6 = calByUnit(p, n, target[k === TRANSLATE_X$3 || k === TRANSLATE_Z$3 ? 'outerWidth' : 'outerHeight'], target.root);

        if (!_v6) {
          return;
        }

        res[1] = _v6;
      }
    } else if (k === BACKGROUND_SIZE$1) {
      res[1] = [];

      var _length = Math.min(p.length, n.length);

      var has;

      for (var _i3 = 0; _i3 < _length; _i3++) {
        var _pi2 = p[_i3],
            _ni2 = n[_i3];

        if (!_pi2 || !_ni2) {
          res[1].push(null);
          continue;
        }

        var temp = [];

        for (var _j2 = 0; _j2 < 2; _j2++) {
          var pp = _pi2[_j2],
              nn = _ni2[_j2];

          if (pp[1] === nn[1]) {
            temp.push(nn[0] - pp[0]);
          } else {
            var _k = _i3 ? 'offsetWidth' : 'offsetHeight';

            if (['padding-box', 'paddingBox'].indexOf(target.computedStyle[BACKGROUND_CLIP$1]) > -1) {
              _k = _i3 ? 'clientWidth' : 'clientHeight';
            } else if (['content-box', 'contentBox'].indexOf(target.computedStyle[BACKGROUND_CLIP$1]) > -1) {
              _k = _i3 ? 'width' : 'height';
            }

            var _v7 = calByUnit(pp, nn, target[_k], target.root);

            temp.push(_v7 || 0);
          }
        }

        if (equalArr$2(temp, [0, 0])) {
          res[1].push(null);
        } else {
          res[1].push(temp);
          has = true;
        }
      }

      if (!has) {
        return;
      }
    } else if (GRADIENT_HASH$2.hasOwnProperty(k)) {
      // backgroundImage发生了渐变色和图片的变化，fill发生渐变色和纯色的变化等
      res[1] = [];

      var _length2 = Math.min(p.length, n.length);

      for (var _i4 = 0; _i4 < _length2; _i4++) {
        var _pi3 = p[_i4],
            _ni3 = n[_i4];

        if (!_pi3 || !_ni3 || isString$1(_pi3) || isString$1(_ni3)) {
          res[1].push(null);
          continue;
        }

        if (_pi3.k !== _ni3.k) {
          res[1].push(null);
          continue;
        }

        var _temp = []; // 渐变

        if (_pi3.k === 'linear' || _pi3.k === 'radial' || _pi3.k === 'conic') {
          var pv = _pi3.v;
          var nv = _ni3.v;
          _temp[0] = [];
          var clientWidth = target.clientWidth;
          var eq = equalArr$2(pv, nv);

          for (var _i5 = 0, _len = Math.min(pv.length, nv.length); _i5 < _len; _i5++) {
            var _a = pv[_i5];
            var _b = nv[_i5];
            var t = [];
            t.push([_b[0][0] - _a[0][0], _b[0][1] - _a[0][1], _b[0][2] - _a[0][2], _b[0][3] - _a[0][3]]);

            if (_a[1] && _b[1]) {
              if (_a[1][1] === _b[1][1]) {
                t.push(_b[1][0] - _a[1][0]);
              } else {
                var _v8 = calByUnit(_a[1], _b[1], clientWidth, target.root);

                t.push(_v8 || 0);
              }
            }

            _temp[0].push(t);
          } // 线性渐变有角度差值变化


          if (_pi3.k === 'linear') {
            var isArrP = Array.isArray(_pi3.d);
            var isArrN = Array.isArray(_ni3.d);

            if (isArrN !== isArrP) {
              res[1].push(null);
              continue;
            }

            if (isArrP) {
              var _v9 = [_ni3.d[0] - _pi3.d[0], _ni3.d[1] - _pi3.d[1], _ni3.d[2] - _pi3.d[2], _ni3.d[3] - _pi3.d[3]];

              if (eq && equalArr$2(_v9, [0, 0, 0, 0])) {
                res[1].push(null);
                continue;
              }

              _temp[1] = _v9;
            } else {
              var _v10 = _ni3.d - _pi3.d;

              if (eq && _v10 === 0) {
                res[1].push(null);
                continue;
              }

              _temp[1] = _v10;
            }
          } // 径向渐变的位置
          else if (_pi3.k === 'radial') {
              var _isArrP = Array.isArray(_pi3.z);

              var _isArrN = Array.isArray(_ni3.z);

              if (_isArrN !== _isArrP) {
                res[1].push(null);
                continue;
              }

              if (_isArrP) {
                _temp[2] = [];

                for (var _i6 = 0; _i6 < 5; _i6++) {
                  var pz = _pi3.z[_i6]; // 半径比例省略为1

                  if (pz === undefined) {
                    pz = 1;
                  }

                  var nz = _ni3.z[_i6];

                  if (nz === undefined) {
                    nz = 1;
                  }

                  _temp[2].push(nz - pz);
                }

                if (eq && equalArr$2(res[4], [0, 0, 0, 0, 0])) {
                  res[1].push(null);
                }
              } else {
                _temp[2] = [];

                for (var _i7 = 0; _i7 < 2; _i7++) {
                  var _pp = _pi3.p[_i7];
                  var np = _ni3.p[_i7];

                  if (_pp[1] === np[1]) {
                    _temp[2].push(np[0] - _pp[0]);
                  } else {
                    var _v11 = calByUnit(_pp, np, target[_i7 ? 'clientWidth' : 'clientHeight'], target.root);

                    _temp[2].push(_v11 || 0);
                  }
                }

                if (eq && equalArr$2(res[3], [0, 0])) {
                  res[1].push(null);
                }
              }
            } else if (_pi3.k === 'conic') {
              _temp[1].push(n.d - p.d);

              _temp[2] = [];

              for (var _i8 = 0; _i8 < 2; _i8++) {
                var _pp2 = p.p[_i8];
                var _np = n.p[_i8];

                if (_pp2[1] === _np[1]) {
                  _temp[2].push(_np[0] - _pp2[0]);
                } else {
                  var _v12 = calByUnit(_pp2, _np, target[_i8 ? 'clientWidth' : 'clientHeight'], target.root);

                  _temp[2].push(_v12 || 0);
                }
              }

              if (eq && res[2] !== 0 && equalArr$2(res[3], [0, 0])) {
                res[1].push(null);
              }
            }
        } // 纯色
        else {
            if (equalArr$2(n, _pi3)) {
              res[1].push(null);
            }

            _temp[0] = [_ni3[0] - _pi3[0], _ni3[1] - _pi3[1], _ni3[2] - _pi3[2], _ni3[3] - _pi3[3]];
          }

        res[1].push(_temp);
      }
    } else if (COLOR_HASH$2.hasOwnProperty(k)) {
      n = n[0];
      p = p[0];

      if (equalArr$2(n, p) || n[3] === 0 && p[3] === 0) {
        return;
      }

      res[1] = [n[0] - p[0], n[1] - p[1], n[2] - p[2], n[3] - p[3]];
    } else if (RADIUS_HASH$2.hasOwnProperty(k)) {
      // x/y都相等无需
      if (n[0][0] === p[0][0] && n[0][1] === p[0][1] && n[1][0] === p[1][0] && n[1][1] === p[1][1]) {
        return;
      }

      res[1] = [];

      for (var _i9 = 0; _i9 < 2; _i9++) {
        if (n[_i9][1] === p[_i9][1]) {
          res[1].push(n[_i9][0] - p[_i9][0]);
        } else {
          var _v13 = calByUnit(p[_i9], n[_i9], target[_i9 ? 'outerHeight' : 'outerWidth'], target.root);

          res[1].push(_v13 || 0);
        }
      }
    } else if (LENGTH_HASH$2.hasOwnProperty(k)) {
      // auto不做动画
      if (p[1] === AUTO$3 || n[1] === AUTO$3) {
        return;
      }

      var computedStyle = target.computedStyle;
      var parentComputedStyle = (target.domParent || target).computedStyle;
      var diff = 0;

      if (p[1] === n[1]) {
        diff = n[0] - p[0];
      } // lineHeight奇怪的单位变化，%相对于fontSize
      else if (k === LINE_HEIGHT$2) {
          diff = calByUnit(p, n, computedStyle[FONT_SIZE$7], target.root);
        } // fontSize的%相对于parent的
        else if (k === FONT_SIZE$7) {
            diff = calByUnit(p, n, parentComputedStyle[FONT_SIZE$7], target.root);
          } // 相对于父height的特殊属性
          else if (k === FLEX_BASIS$1 && ['column', 'column-reverse', 'columnReverse'].indexOf(computedStyle[FLEX_DIRECTION$1]) > -1 || [HEIGHT$2, TOP, BOTTOM].indexOf(k) > -1) {
              if (p[1] !== AUTO$3 && n[1] !== AUTO$3) {
                diff = calByUnit(p, n, parentComputedStyle[HEIGHT$2], target.root);
              }
            } // 其余都是相对于父width的
            else {
                if (p[1] !== AUTO$3 && n[1] !== AUTO$3) {
                  diff = calByUnit(p, n, parentComputedStyle[WIDTH$3], target.root);
                }
              } // 兜底NaN非法


      if (diff === 0 || isNaN(diff)) {
        return;
      }

      res[1] = diff;
    } else if (GEOM$3.hasOwnProperty(k)) {
      if (isNil$5(p)) {
        return;
      } else if (GEOM$3[k][tagName] && isFunction$4(GEOM$3[k][tagName].calDiff)) {
        var fn = GEOM$3[k][tagName].calDiff;

        if (target.isMulti) {
          var arr = [];

          for (var _i10 = 0, _len2 = Math.min(p.length, n.length); _i10 < _len2; _i10++) {
            arr.push(fn(p[_i10], n[_i10]));
          }

          return arr;
        } else {
          res[1] = fn(p, n);
        }
      } // 特殊处理multi
      else if (target.isMulti) {
          if (k === 'points' || k === 'controls') {
            if (isNil$5(n) || !n.length || isNil$5(p) || !p.length || equalArr$2(p, n)) {
              return;
            }

            res[1] = [];

            for (var _i11 = 0, _len3 = Math.min(p.length, n.length); _i11 < _len3; _i11++) {
              var _pv3 = p[_i11];
              var _nv3 = n[_i11];

              if (isNil$5(_pv3) || !_pv3.length || isNil$5(_nv3) || !_nv3.length) {
                res[1].push(null);
              } else {
                var v2 = [];

                for (var _j3 = 0, len2 = Math.min(_pv3.length, _nv3.length); _j3 < len2; _j3++) {
                  var pv2 = _pv3[_j3];
                  var nv2 = _nv3[_j3];

                  if (isNil$5(pv2) || isNil$5(nv2)) {
                    v2.push(null);
                  } else {
                    var v3 = [];

                    for (var _k2 = 0, len3 = Math.max(pv2.length, nv2.length); _k2 < len3; _k2++) {
                      var pv3 = pv2[_k2];
                      var nv3 = nv2[_k2]; // control由4点变2点

                      if (isNil$5(pv3) || isNil$5(nv3)) {
                        v3.push(0);
                      } else {
                        v3.push(nv3 - pv3);
                      }
                    }

                    v2.push(v3);
                  }
                }

                res[1].push(v2);
              }
            }
          } else if (k === 'controlA' || k === 'controlB') {
            if (isNil$5(n) || !n.length || isNil$5(p) || !p.length || equalArr$2(p, n)) {
              return;
            }

            res[1] = [];

            for (var _i12 = 0, _len4 = Math.min(p.length, n.length); _i12 < _len4; _i12++) {
              var _pv4 = p[_i12];
              var _nv4 = n[_i12];

              if (isNil$5(_pv4) || !_pv4.length || isNil$5(_nv4) || !_nv4.length) {
                res[1].push(null);
              } else {
                res[1].push([_nv4[0] - _pv4[0], _nv4[1] - _pv4[1]]);
              }
            }
          } else {
            if (n === p || equalArr$2(n, p) || k === 'edge' || k === 'closure' || k === 'booleanOperations') {
              return;
            }

            var _v14 = [];

            for (var _i13 = 0, _len5 = Math.min(p.length, n.length); _i13 < _len5; _i13++) {
              var _pv5 = p[_i13];
              var _nv5 = n[_i13];

              if (isNil$5(_pv5) || isNil$5(_nv5)) {
                _v14.push(0);
              }

              _v14.push(_nv5 - _pv5);
            }

            res[1] = _v14;
          }
        } // 非multi特殊处理这几类数组类型数据
        else if (k === 'points' || k === 'controls') {
            if (isNil$5(n) || !n.length || isNil$5(p) || !p.length || equalArr$2(p, n)) {
              return;
            }

            res[1] = [];

            for (var _i14 = 0, _len6 = Math.min(p.length, n.length); _i14 < _len6; _i14++) {
              var _pv6 = p[_i14];
              var _nv6 = n[_i14];

              if (isNil$5(_pv6) || !_pv6.length || isNil$5(_nv6) || !_nv6.length) {
                res[1].push(null);
              } else {
                var _v15 = [];

                for (var _j4 = 0, _len7 = Math.max(_pv6.length, _nv6.length); _j4 < _len7; _j4++) {
                  var _pv7 = _pv6[_j4];
                  var _nv7 = _nv6[_j4]; // control由4点变2点

                  if (isNil$5(_pv7) || isNil$5(_nv7)) {
                    _v15.push(0);
                  } else {
                    _v15.push(_nv7 - _pv7);
                  }
                }

                res[1].push(_v15);
              }
            }
          } else if (k === 'controlA' || k === 'controlB') {
            if (isNil$5(n) || !n.length || isNil$5(p) || !p.length || equalArr$2(p, n)) {
              return;
            }

            res[1] = [n[0] - p[0], n[1] - p[1]];
          } // 其它简单数据，除了edge/closure/booleanOperations没有增量
          else {
              if (n === p || k === 'edge' || k === 'closure' || k === 'booleanOperations') {
                return;
              } else {
                res[1] = n - p;
              }
            }
    } else if (k === OPACITY$2 || k === Z_INDEX$1) {
      if (n === p) {
        return;
      }

      res[1] = n - p;
    } // 特殊的path，不存在style中但在动画某帧中，不会统一化所以可能反向计算frameR时后一帧没有
    else if (k === TRANSLATE_PATH$1 && p) {
        var k1 = 'offsetWidth',
            _k3 = 'offsetHeight';

        if (['padding-box', 'paddingBox'].indexOf(target.computedStyle[BACKGROUND_CLIP$1]) > -1) {
          k1 = 'clientWidth';
          _k3 = 'clientHeight';
        } else if (['content-box', 'contentBox'].indexOf(target.computedStyle[BACKGROUND_CLIP$1]) > -1) {
          k1 = 'width';
          _k3 = 'height';
        }

        res[1] = p.map(function (item, i) {
          var _item = _slicedToArray(item, 2),
              v = _item[0],
              u = _item[1];

          if (u === PERCENT$6) {
            if (i % 2 === 0) {
              return [(parseFloat(v) || 0) * 0.01 * target[k1], PX$5];
            } else {
              return [(parseFloat(v) || 0) * 0.01 * target[_k3], PX$5];
            }
          } else if (u === REM$6) {
            return [(parseFloat(v) || 0) * root.computedStyle[FONT_SIZE$7] * 100, PX$5];
          } else if (u === VW$6) {
            return [(parseFloat(v) || 0) * 0.01 * root.width, PX$5];
          } else if (u === VH$6) {
            return [(parseFloat(v) || 0) * 0.01 * root.height, PX$5];
          } else if (u === VMAX$6) {
            return [(parseFloat(v) || 0) * 0.01 * Math.max(root.width, root.height), PX$5];
          } else if (u === VMIN$6) {
            return [(parseFloat(v) || 0) * 0.01 * Math.min(root.width, root.height), PX$5];
          } else {
            return [parseFloat(v) || 0, PX$5];
          }
        });
      } // display等不能有增量过程的
      else {
          return;
        }

    return res;
  } // 计算两帧之间不相同的变化，存入transition，相同的忽略


  function calFrame(prev, next, keys, target, tagName) {
    keys.forEach(function (k) {
      var ts = calDiff(prev[FRAME_STYLE], next[FRAME_STYLE], k, target, tagName); // 可以形成过渡的才会产生结果返回

      if (ts) {
        prev[FRAME_TRANSITION].push(ts);
      }
    });
    return next;
  }

  function binarySearch(i, j, time, frames) {
    if (i === j) {
      var _frame = frames[i];

      if (_frame[FRAME_TIME] > time) {
        return i - 1;
      }

      return i;
    } else {
      var middle = i + (j - i >> 1);
      var _frame2 = frames[middle];

      if (_frame2[FRAME_TIME] === time) {
        return middle;
      } else if (_frame2[FRAME_TIME] > time) {
        return binarySearch(i, Math.max(middle - 1, i), time, frames);
      } else {
        return binarySearch(Math.min(middle + 1, j), j, time, frames);
      }
    }
  }

  function getEasing(ea) {
    var timingFunction;

    if (ea) {
      if (timingFunction = /^\s*steps\s*\(\s*(\d+)(?:\s*,\s*(\w+))?\s*\)/i.exec(ea)) {
        var steps = parseInt(timingFunction[1]);
        var stepsD = timingFunction[2];

        timingFunction = function timingFunction(percent) {
          // steps有效定义正整数
          if (steps && steps > 0) {
            var per = 1 / steps;
            var n = stepsD === 'start' ? Math.ceil(percent / per) : Math.floor(percent / per);
            return n / steps;
          }

          return percent;
        };
      } else {
        timingFunction = easing.getEasing(ea);
      }
    }

    return timingFunction;
  }
  /**
   * 根据百分比和缓动函数计算中间态样式
   * 当easing定义为steps时，优先计算
   * @param frame 当前帧
   * @param keys 所有样式key
   * @param percent 到下一帧时间的百分比
   * @param target vd
   * @returns {*}
   */


  function calIntermediateStyle(frame, keys, percent, target) {
    var style = cloneStyle$1(frame[FRAME_STYLE], keys);
    var timingFunction = getEasing(frame[FRAME_EASING]);

    if (timingFunction && timingFunction !== linear) {
      percent = timingFunction(percent);
    }

    var transition = frame[FRAME_TRANSITION];

    var _loop = function _loop(i, len) {
      var _transition$i = _slicedToArray(transition[i], 2),
          k = _transition$i[0],
          v = _transition$i[1];

      var st = style[k]; // transform特殊处理，只有1个matrix，有可能不存在，需给默认矩阵

      if (k === TRANSFORM$2) {
        if (!st) {
          st = style[k] = [[MATRIX$2, mx.identity()]];
        }

        for (var _i15 = 0; _i15 < 16; _i15++) {
          st[0][1][_i15] += v[_i15] * percent;
        }
      } // 特殊的曲线运动计算，转换为translateXY，出现在最后一定会覆盖原本的translate防重
      else if (k === TRANSLATE_PATH$1) {
          var t = 1 - percent;

          if (v.length === 8) {
            style[TRANSLATE_X$3] = [v[0][0] * t * t * t + 3 * v[2][0] * percent * t * t + 3 * v[4][0] * percent * percent * t + v[6][0] * percent * percent * percent, PX$5];
            style[TRANSLATE_Y$3] = [v[1][0] * t * t * t + 3 * v[3][0] * percent * t * t + 3 * v[5][0] * percent * percent * t + v[7][0] * percent * percent * percent, PX$5];
          } else if (v.length === 6) {
            style[TRANSLATE_X$3] = [v[0][0] * t * t + 2 * v[2][0] * percent * t + v[4][0] * percent * percent, PX$5];
            style[TRANSLATE_Y$3] = [v[1][0] * t * t + 3 * v[3][0] * percent * t + v[5][0] * percent * percent, PX$5];
          }
        } else if (k === ROTATE_3D$2) {
          st[0] += v[0] * percent;
          st[1] += v[1] * percent;
          st[2] += v[2] * percent;
          st[3][0] += v[3][0] * percent;
        } else if (NUM_CAL_HASH.hasOwnProperty(k)) {
          if (v) {
            st[0] += v * percent;
          }
        } else if (k === FILTER$2) {
          // 只有1个样式声明了filter另外一个为空，会造成无样式，需初始化数组并在下面计算出样式存入
          if (!st) {
            st = style[k] = [];
          } // 将已有的样式按key存入引用来操作


          var hash = {};
          st.forEach(function (item) {
            hash[item[0]] = item[1];
          });
          Object.keys(v).forEach(function (k) {
            if (hash.hasOwnProperty(k)) {
              hash[k][0] += v[k][0] * percent;
            } else {
              // 2个关键帧中有1个未声明，需新建样式存入
              if (k === 'blur' || k === 'hue-rotate' || k === 'grayscale') {
                var n = v[k].slice(0);
                n[0] *= percent;
                st.push([k, n]);
              } // 默认值是1而非0
              else if (k === 'saturate' || k === 'brightness' || k === 'contrast') {
                  var _n = v[k].slice(0);

                  _n[0] = 100 + _n[0] * percent;
                  st.push([k, _n]);
                }
            }
          });
        } else if (RADIUS_HASH$2.hasOwnProperty(k)) {
          for (var _i16 = 0; _i16 < 2; _i16++) {
            st[_i16][0] += v[_i16] * percent;
          }
        } else if (k === TRANSFORM_ORIGIN$3 || k === PERSPECTIVE_ORIGIN$2) {
          if (v[0] !== 0) {
            st[0][0] += v[0] * percent;
          }

          if (v[1] !== 0) {
            st[1][0] += v[1] * percent;
          }
        } else if (k === BOX_SHADOW$1) {
          for (var _i17 = 0, _len8 = Math.min(st.length, v.length); _i17 < _len8; _i17++) {
            // x/y/blur/spread
            for (var j = 0; j < 4; j++) {
              st[_i17][j] += v[_i17][j] * percent;
            } // rgba


            for (var _j5 = 0; _j5 < 4; _j5++) {
              st[_i17][4][_j5] += v[_i17][4][_j5] * percent;
            }
          }
        } else if (k === BACKGROUND_SIZE$1) {
          st.forEach(function (item, i) {
            if (v[i]) {
              item[0][0] += v[i][0] * percent;
              item[1][0] += v[i][1] * percent;
            }
          });
        } else if (k === BACKGROUND_POSITION_X$2 || k === BACKGROUND_POSITION_Y$2) {
          st.forEach(function (item, i) {
            if (v[i]) {
              item[0] += v[i] * percent;
            }
          });
        } else if (GRADIENT_HASH$2.hasOwnProperty(k)) {
          st.forEach(function (st2, i) {
            var v2 = v[i];

            if (!v2) {
              return;
            }

            var _v16 = _slicedToArray(v2, 4),
                c = _v16[0],
                d = _v16[1],
                p = _v16[2],
                z = _v16[3];

            if (GRADIENT_TYPE$2.hasOwnProperty(st2.k)) {
              for (var _i18 = 0, _len9 = Math.min(st2.v.length, c.length); _i18 < _len9; _i18++) {
                var a = st2.v[_i18];
                var b = c[_i18];
                a[0][0] += b[0][0] * percent;
                a[0][1] += b[0][1] * percent;
                a[0][2] += b[0][2] * percent;
                a[0][3] += b[0][3] * percent;

                if (a[1] && b[1]) {
                  a[1][0] += b[1] * percent;
                }
              }

              if (st2.k === 'linear' && st2.d !== undefined && d !== undefined) {
                if (Array.isArray(d)) {
                  st2.d[0] += d[0] * percent;
                  st2.d[1] += d[1] * percent;
                  st2.d[2] += d[2] * percent;
                  st2.d[3] += d[3] * percent;
                } else {
                  st2.d += d * percent;
                }
              }

              if (st2.k === 'radial') {
                if (st2.z !== undefined && z !== undefined) {
                  st2.z[0] += z[0] * percent;
                  st2.z[1] += z[1] * percent;
                  st2.z[2] += z[2] * percent;
                  st2.z[3] += z[3] * percent;
                  st2.z[4] += z[4] * percent;
                } else if (st2.p !== undefined && p !== undefined) {
                  st2.p[0][0] += p[0] * percent;
                  st2.p[1][0] += p[1] * percent;
                }
              } else if (st2.k === 'conic' && st2.d !== undefined && d !== undefined) {
                st2.d += d * percent;
                st2.p[0][0] += p[0] * percent;
                st2.p[1][0] += p[1] * percent;
              }
            } // fill纯色
            else {
                st2[0] += c[0] * percent;
                st2[1] += c[1] * percent;
                st2[2] += c[2] * percent;
                st2[3] += c[3] * percent;
              }
          });
        } // color可能超限[0,255]，但浏览器已经做了限制，无需关心
        else if (COLOR_HASH$2.hasOwnProperty(k)) {
            st = st[0];
            st[0] += v[0] * percent;
            st[1] += v[1] * percent;
            st[2] += v[2] * percent;
            st[3] += v[3] * percent;
          } else if (GEOM$3.hasOwnProperty(k)) {
            var _st = style[k];
            var tagName = target.tagName;

            if (GEOM$3[k][tagName] && isFunction$4(GEOM$3[k][tagName].calIncrease)) {
              var fn = GEOM$3[k][tagName].calIncrease;

              if (target.isMulti) {
                style[k] = _st.map(function (item, i) {
                  return fn(item, v[i], percent);
                });
              } else {
                style[k] = fn(_st, v, percent);
              }
            } else if (target.isMulti) {
              if (k === 'points' || k === 'controls') {
                for (var _i19 = 0, _len10 = Math.min(_st.length, v.length); _i19 < _len10; _i19++) {
                  var o = _st[_i19];
                  var n = v[_i19];

                  if (!isNil$5(o) && !isNil$5(n)) {
                    for (var _j6 = 0, len2 = Math.min(o.length, n.length); _j6 < len2; _j6++) {
                      var o2 = o[_j6];
                      var n2 = n[_j6];

                      if (!isNil$5(o2) && !isNil$5(n2)) {
                        for (var _k4 = 0, len3 = Math.min(o2.length, n2.length); _k4 < len3; _k4++) {
                          if (!isNil$5(o2[_k4]) && !isNil$5(n2[_k4])) {
                            o2[_k4] += n2[_k4] * percent;
                          }
                        }
                      }
                    }
                  }
                }
              } else if (k === 'controlA' || k === 'controlB') {
                v.forEach(function (item, i) {
                  var st2 = _st[i];

                  if (!isNil$5(item) && !isNil$5(st2)) {
                    for (var _i20 = 0, _len11 = Math.min(st2.length, item.length); _i20 < _len11; _i20++) {
                      var _o = st2[_i20];
                      var _n2 = item[_i20];

                      if (!isNil$5(_o) && !isNil$5(_n2)) {
                        st2[_i20] += _n2 * percent;
                      }
                    }
                  }
                });
              } else {
                v.forEach(function (item, i) {
                  if (!isNil$5(item) && !isNil$5(_st[i])) {
                    _st[i] += item * percent;
                  }
                });
              }
            } else {
              if (k === 'points' || k === 'controls') {
                for (var _i21 = 0, _len12 = Math.min(_st.length, v.length); _i21 < _len12; _i21++) {
                  var _o2 = _st[_i21];
                  var _n3 = v[_i21];

                  if (!isNil$5(_o2) && !isNil$5(_n3)) {
                    for (var _j7 = 0, _len13 = Math.min(_o2.length, _n3.length); _j7 < _len13; _j7++) {
                      if (!isNil$5(_o2[_j7]) && !isNil$5(_n3[_j7])) {
                        _o2[_j7] += _n3[_j7] * percent;
                      }
                    }
                  }
                }
              } else if (k === 'controlA' || k === 'controlB') {
                if (!isNil$5(_st[0]) && !isNil$5(v[0])) {
                  _st[0] += v[0] * percent;
                }

                if (!isNil$5(_st[1]) && !isNil$5(v[1])) {
                  _st[1] += v[1] * percent;
                }
              } else {
                if (!isNil$5(_st) && !isNil$5(v)) {
                  style[k] += v * percent;
                }
              }
            }
          } else if (k === OPACITY$2 || k === Z_INDEX$1) {
            style[k] += v * percent; // 精度问题可能会超过[0,1]区间

            if (k === OPACITY$2) {
              if (style[k] < 0) {
                style[k] = 0;
              } else if (style[k] > 1) {
                style[k] = 1;
              }
            }
          }
    };

    for (var i = 0, len = transition.length; i < len; i++) {
      _loop(i);
    }

    return style;
  }

  function gotoOverload(options, cb) {
    if (isFunction$4(options)) {
      cb = options;
      options = {};
    }

    return [options || {}, cb];
  }

  function calDiffTime(__config, diff) {
    var playbackRate = __config[I_PLAYBACK_RATE];
    var spfLimit = __config[I_SPF_LIMIT];
    var fps = __config[I_FPS];
    var v = __config[I_CURRENT_TIME] = __config[I_NEXT_TIME]; // 定帧限制每帧时间间隔最大为spf

    if (spfLimit) {
      if (spfLimit === true) {
        diff = Math.min(diff, 1000 / fps);
      } else if (spfLimit > 0) {
        diff = Math.min(diff, spfLimit);
      }
    } // 播放时间累加，并且考虑播放速度加成


    if (playbackRate !== 1 && playbackRate > 0) {
      diff *= playbackRate;
    }

    __config[I_NEXT_TIME] += diff;
    return [v, diff];
  }

  var uuid$1 = 0;

  var Animation = /*#__PURE__*/function (_Event) {
    _inherits(Animation, _Event);

    var _super = _createSuper(Animation);

    function Animation(target, list, options) {
      var _this;

      _classCallCheck(this, Animation);

      _this = _super.call(this);
      _this.__id = uuid$1++;
      list = clone$3(list || []);

      if (Array.isArray(list)) {
        list = list.filter(function (item) {
          return item && isObject$1(item);
        });
      } // 动画过程另外一种形式，object描述k-v形式
      else if (list && isObject$1(list)) {
          var nl = [];
          Object.keys(list).forEach(function (k) {
            var v = list[k];

            if (Array.isArray(v)) {
              for (var i = 0, len = v.length; i < len; i++) {
                var o = nl[i] = nl[i] || {
                  offset: i / (len - 1)
                };
                o[k] = v[i];
              }
            }
          });
          list = nl;
        } else {
          list = [];
        }

      if (isNumber$1(options)) {
        _this.__options = {
          duration: options
        };
        options = _this.__options;
      }

      var op = _this.__options = options || {
        duration: 0
      };
      var root = target.root;
      var config = _this.__config = [false, // assigning
      false, // inFps
      false, // isDelay
      false, // begin
      false, // end
      false, // finished
      false, // nextBegin
      true, // firstPlay
      _this.__frameCb, null, // playCb
      target, root, null, // frames
      null, // framesR
      0, // currentTime
      0, // nextTime
      {}, // style
      0, // duration
      1, // iterations
      'none', // fill
      1, // playbackRate
      0, // playCount
      'idle', false, // destroy
      0, // startTime
      0, // fpsTime
      op.easing, false, // enterFrame
      0, // delay
      0, // endDelay
      null, // keys,
      null, // originStyle,
      null, // currentFrames
      null, // currentFrame
      false, // spfLimit
      60, // fps
      'normal', // direction
      true, // firstEnter,
      false, // stayBegin
      false, // stayEnd
      false, // is2
      0, // endTime
      target.__config, // nodeConfig
      root && root.__config, // rootConfig，destroy后root可能为空
      false // outBeginDelay
      ];
      var iterations = _this.iterations = op.iterations;
      var duration = _this.duration = op.duration;

      var _this$__init = _this.__init(list, iterations, duration, op.easing, target),
          _this$__init2 = _slicedToArray(_this$__init, 4),
          frames = _this$__init2[0],
          framesR = _this$__init2[1],
          keys = _this$__init2[2],
          originStyle = _this$__init2[3];

      config[I_FRAMES] = frames;
      config[I_FRAMES_R] = framesR;
      config[I_KEYS] = keys;
      config[I_ORIGIN_STYLE] = originStyle;

      if (frames.length === 2) {
        config[I_IS2] = true;
        config[I_END_TIME] = frames[1][FRAME_TIME];
      }

      var fps = parseInt(op.fps) || 0;

      if (fps <= 0) {
        fps = 60;
      }

      _this.fps = fps;
      _this.spfLimit = op.spfLimit;
      _this.delay = op.delay;
      _this.endDelay = op.endDelay;
      _this.playbackRate = op.playbackRate;
      _this.fill = op.fill;
      _this.iterations = op.iterations;
      _this.direction = op.direction;
      config[I_CURRENT_FRAMES] = {
        reverse: true,
        'alternate-reverse': true
      }.hasOwnProperty(op.direction) ? framesR : frames; // 时间戳

      config[I_TIME_STAMP] = frame.__now; // 性能优化访问

      _this[0] = _this.__before;
      _this[1] = _this.__after;
      return _this;
    }

    _createClass(Animation, [{
      key: "__init",
      value: function __init(list, iterations, duration, easing, target) {
        if (list.length < 1) {
          return [[], [], [], {}];
        } // 过滤时间非法的，过滤后续offset<=前面的


        var offset = -1;
        var tagName = target.tagName;

        var _loop2 = function _loop2(_i22, _len14) {
          var current = list[_i22];

          if (current.hasOwnProperty('offset')) {
            current.offset = parseFloat(current.offset) || 0;
            current.offset = Math.max(0, current.offset);
            current.offset = Math.min(1, current.offset); // 超过区间[0,1]

            if (isNaN(current.offset) || current.offset < 0 || current.offset > 1) {
              list.splice(_i22, 1);
              _i22--;
              _len14--;
              i = _i22;
              len = _len14;
              return "continue";
            } // <=前面的
            else if (current.offset <= offset) {
                list.splice(_i22, 1);
                _i22--;
                _len14--;
                i = _i22;
                len = _len14;
                return "continue";
              }
          } // 缩写处理


          Object.keys(current).forEach(function (k) {
            if (abbr.hasOwnProperty(k)) {
              abbr.toFull(current, k);
            }
          }); // 检查key合法性

          Object.keys(current).forEach(function (k) {
            if (k !== 'easing' && k !== 'offset' && !o$2.isValid(tagName, k)) {
              delete current[k];
            }
          });
          i = _i22;
          len = _len14;
        };

        for (var i = 0, len = list.length; i < len; i++) {
          var _ret = _loop2(i, len);

          if (_ret === "continue") continue;
        } // 只有1帧复制出来变成2帧方便运行


        if (list.length === 1) {
          list[0] = clone$3(list[0]);

          if (list[0].offset === 1) {
            list.unshift({
              offset: 0
            });
          } else {
            var copy = clone$3(list[0]);
            copy.offset = 1;
            list.push(copy);
          }
        } // 强制clone防止同引用
        else {
            list.forEach(function (item, i) {
              list[i] = clone$3(item);
            });
          } // 首尾时间偏移强制为[0, 1]，不是的话前后加空帧


        var first = list[0];

        if (first.hasOwnProperty('offset') && first.offset > 0) {
          first = {
            offset: 0
          };
          list.unshift(first);
        } else {
          first.offset = 0;
        }

        var last = list[list.length - 1];

        if (last.hasOwnProperty('offset') && last.offset < 1) {
          last = {
            offset: 1
          };
          list.push(last);
        } else {
          last.offset = 1;
        } // 计算没有设置offset的时间


        for (var _i23 = 1, _len15 = list.length; _i23 < _len15; _i23++) {
          var start = list[_i23]; // 从i=1开始offset一定>0，找到下一个有offset的，均分中间无声明的

          if (!start.hasOwnProperty('offset')) {
            var end = void 0;
            var j = _i23 + 1;

            for (; j < _len15; j++) {
              end = list[j];

              if (end.hasOwnProperty('offset')) {
                break;
              }
            }

            var num = j - _i23 + 1;
            start = list[_i23 - 1];
            var per = (end.offset - start.offset) / num;

            for (var k = _i23; k < j; k++) {
              var item = list[k];
              item.offset = start.offset + per * (k + 1 - _i23);
            }

            _i23 = j;
          }
        }

        var frames = []; // 换算每一关键帧样式标准化

        list.forEach(function (item) {
          frames.push(framing(item, duration, easing));
        }); // 为方便两帧之间计算变化，强制统一所有帧的css属性相同，没有写的为节点的当前样式currentStyle

        var keys = unify(frames, target);
        inherit(frames, keys, target);
        var framesR = clone$3(frames).reverse(); // 存储原本样式以便恢复用

        var style = target.style,
            props = target.props;
        var originStyle = {};
        keys.forEach(function (k) {
          if (isGeom$1(tagName, k)) {
            originStyle[k] = props[k];
          }

          originStyle[k] = style[k];
        }); // 再计算两帧之间的变化，存入transition属性

        var length = frames.length;
        var prev = frames[0];

        for (var _i24 = 1; _i24 < length; _i24++) {
          var next = frames[_i24];
          prev = calFrame(prev, next, keys, target, tagName);
        } // 反向存储帧的倒排结果


        framesR.forEach(function (item) {
          item[FRAME_TIME] = duration - item[FRAME_TIME];
          item[FRAME_TRANSITION] = [];
        });
        prev = framesR[0];

        for (var _i25 = 1; _i25 < length; _i25++) {
          var _next = framesR[_i25];
          prev = calFrame(prev, _next, keys, target, tagName);
        }

        return [frames, framesR, keys, originStyle];
      }
    }, {
      key: "__clean",
      value: function __clean(isFinish) {
        var __config = this.__config;

        this.__cancelTask();

        __config[I_NEXT_TIME] = 0;
        var restore;
        var style = __config[I_STYLE];
        var keys = __config[I_KEYS];
        var target = __config[I_TARGET];

        if (isFinish) {
          // gotoAndStop到一个很大的时间的话，也需要防止超过
          __config[I_CURRENT_TIME] = __config[I_DELAY] + __config[I_DURATION] * __config[I_ITERATIONS] + __config[I_END_DELAY];

          if (__config[I_PLAY_STATE] === 'finish') {
            return;
          }

          __config[I_PLAY_STATE] = 'finish'; // cancel需要清除finish根据情况保留

          if (!__config[I_STAY_END]) {
            __config[I_STYLE] = {};
            restore = true;
          }
        } else {
          __config[I_PLAY_COUNT] = __config[I_CURRENT_TIME] = 0;

          if (__config[I_PLAY_STATE] === 'idle') {
            return;
          }

          __config[I_PLAY_STATE] = 'idle';
          __config[I_STYLE] = {};
          restore = true;
        } // 动画取消结束不停留在最后一帧需要还原target原本的样式，需要对比目前是否是由本动画赋值的


        if (restore) {
          keys.forEach(function (k) {
            if (GEOM$3.hasOwnProperty(k)) {
              if (target.__currentProps[k] === style[k]) {
                target.__currentProps[k] = target.props[k];
              }
            } else {
              if (target.__currentStyle[k] === style[k]) {
                target.__currentStyle[k] = target.style[k];
              }
            }
          });
        }
      }
    }, {
      key: "__frameCb",
      value: function __frameCb(__config, diff, isDelay) {
        this.emit(Event.FRAME, diff, isDelay);

        if (__config[I_FIRST_PLAY]) {
          __config[I_FIRST_PLAY] = false;
          this.emit(Event.PLAY);
        }

        if (isFunction$4(__config[I_PLAY_CB])) {
          __config[I_PLAY_CB].call(this, diff, isDelay);

          __config[I_PLAY_CB] = null;
        }
      }
    }, {
      key: "play",
      value: function play(cb) {
        var __config = this.__config;
        var isDestroyed = __config[I_DESTROYED];
        var duration = __config[I_DURATION];
        var playState = __config[I_PLAY_STATE];
        var frames = __config[I_FRAMES];

        if (isDestroyed || duration <= 0 || frames.length < 1) {
          return this;
        }

        if (playState === 'running') {
          return this;
        }

        this.__cancelTask();

        __config[I_PLAY_CB] = cb;
        __config[I_PLAY_STATE] = 'running'; // 每次play调用标识第一次运行，需响应play事件和回调

        __config[I_FIRST_PLAY] = true; // 防止finish/cancel事件重复触发，每次播放重置

        this.__hasFin = false;
        this.__hasCancel = false; // 只有第一次调用会进初始化，另外finish/cancel视为销毁也会重新初始化

        if (!__config[I_ENTER_FRAME]) {
          __config[I_ENTER_FRAME] = true;
          var framesR = __config[I_FRAMES_R];
          var direction = __config[I_DIRECTION]; // 初始化根据方向确定帧序列

          __config[I_CURRENT_FRAMES] = {
            reverse: true,
            'alternate-reverse': true
          }.hasOwnProperty(direction) ? framesR : frames;
          __config[I_CURRENT_TIME] = __config[I_NEXT_TIME] = __config[I_FPS_TIME] = 0;
        } // 添加每帧回调且立刻执行，本次执行调用refreshTask也是下一帧再渲染，frame的每帧都是下一帧


        frame.offFrame(this);
        frame.onFrame(this);
        __config[I_START_TIME] = frame.__now;
        __config[I_END] = false;
        return this;
      }
    }, {
      key: "__before",
      value: function __before(diff) {
        var __config = this.__config;
        __config[I_TIME_STAMP] = frame.__now;
        var target = __config[I_TARGET];
        var fps = __config[I_FPS];
        var playCount = 0;
        var currentFrames = __config[I_CURRENT_FRAMES];
        var iterations = __config[I_ITERATIONS];
        var stayBegin = __config[I_STAY_BEGIN];
        var stayEnd = __config[I_STAY_END];
        var delay = __config[I_DELAY];
        var root = __config[I_ROOT];
        var is2 = __config[I_IS2];
        var endTime = __config[I_END_TIME];
        var duration = __config[I_DURATION];
        var endDelay = __config[I_END_DELAY];
        var length = currentFrames.length; // 用本帧和上帧时间差，计算累加运行时间currentTime，以便定位当前应该处于哪个时刻

        var _calDiffTime = calDiffTime(__config, diff),
            _calDiffTime2 = _slicedToArray(_calDiffTime, 2),
            currentTime = _calDiffTime2[0],
            d = _calDiffTime2[1];

        diff = d; // 增加的fps功能，当<60时计算跳帧，每帧运行依旧累加时间，达到fps时重置，第一帧强制不跳

        if (!__config[I_FIRST_ENTER] && fps < 60) {
          diff = __config[I_FPS_TIME] += diff;

          if (diff < 1000 / fps) {
            __config[I_IN_FPS] = true;
            return;
          }

          __config[I_FPS_TIME] = 0;
        }

        __config[I_FIRST_ENTER] = false; // delay仅第一次生效等待

        if (currentTime < delay) {
          if (stayBegin) {
            var _currentFrame = __config[I_CURRENT_FRAME] = currentFrames[0];

            var _current = _currentFrame[FRAME_STYLE];
            genBeforeRefresh(_current, __config[I_KEYS], __config, root, target);
          } // 即便不刷新，依旧执行帧回调，同时标明让后续第一帧响应begin


          __config[I_OUT_BEGIN_DELAY] = true;
          __config[I_IS_DELAY] = true;
          return;
        } // 减去delay，计算在哪一帧


        currentTime -= delay;

        if (currentTime === 0 || __config[I_OUT_BEGIN_DELAY]) {
          __config[I_OUT_BEGIN_DELAY] = false;
          __config[I_BEGIN] = true;
        } // 超过duration非尾轮需处理回到开头，触发新一轮动画事件，这里可能时间间隔非常大直接跳过几轮


        var round;

        while (currentTime >= duration && playCount < iterations - 1) {
          currentTime -= duration;
          playCount++;
        }

        if (__config[I_PLAY_COUNT] < playCount) {
          __config[I_BEGIN] = true;
          round = true;
        }

        __config[I_PLAY_COUNT] = playCount; // 如果发生轮换，需重新确定正反向

        if (round) {
          var direction = __config[I_DIRECTION];
          var frames = __config[I_FRAMES];
          var framesR = __config[I_FRAMES_R];
          var isAlternate = {
            alternate: true,
            'alternate-reverse': true
          }.hasOwnProperty(direction); // 有正反向播放需要重设帧序列

          if (isAlternate) {
            var isEven = playCount % 2 === 0;

            if (direction === 'alternate') {
              currentFrames = __config[I_CURRENT_FRAMES] = isEven ? frames : framesR;
            } else {
              currentFrames = __config[I_CURRENT_FRAMES] = isEven ? framesR : frames;
            }
          }
        }

        var isLastCount = playCount >= iterations - 1; // 只有2帧可优化，否则2分查找当前帧

        var i, frameTime;

        if (is2) {
          i = currentTime < endTime ? 0 : 1;
          frameTime = endTime;
        } else {
          i = binarySearch(0, length - 1, currentTime, currentFrames);
          frameTime = currentFrames[i][FRAME_TIME];
        } // 最后一帧结束动画，仅最后一轮才会进入，需处理endDelay


        var isLastFrame = isLastCount && i === length - 1;
        var percent = 0;

        if (isLastFrame) ; // 否则根据目前到下一帧的时间差，计算百分比，再反馈到变化数值上
        else if (is2) {
            percent = currentTime / duration;
          } else {
            var total = currentFrames[i + 1][FRAME_TIME] - frameTime;
            percent = (currentTime - frameTime) / total;
          }

        var inEndDelay,
            currentFrame = currentFrames[i],
            current;
        __config[I_CURRENT_FRAME] = currentFrame;
        /** 这里要考虑全几种场景：
         * 1. 单次播放无endDelay且fill不停留（有/无差异，下同）
         * 2. 单次播放无endDelay且fill停留
         * 3. 单次播放有endDelay且fill不停留
         * 4. 单次播放有endDelay且fill停留
         * 5. 多次播放无endDelay且fill不停留（尾次/非尾次，下同）
         * 6. 多次播放无endDelay且fill停留
         * 7. 多次播放有endDelay且fill不停留
         * 8. 多次播放有endDelay且fill停留
         */

        var needClean;

        if (isLastFrame) {
          inEndDelay = currentTime < duration + endDelay; // 停留对比最后一帧，endDelay可能会多次进入这里，第二次进入样式相等不再重绘

          if (stayEnd) {
            current = cloneStyle$1(currentFrame[FRAME_STYLE], __config[I_KEYS]);
          } // 不停留或超过endDelay则计算还原，有endDelay且fill模式不停留会再次进入这里
          else {
              current = cloneStyle$1(__config[I_ORIGIN_STYLE], __config[I_KEYS]);
            } // 进入endDelay或结束阶段触发end事件，注意只触发一次，防重在触发的地方做


          __config[I_NEXT_END] = true;

          if (!inEndDelay) {
            __config[I_PLAY_COUNT]++;
            __config[I_FINISHED] = true;
            frame.offFrame(this);
            needClean = true;
            __config[I_NEXT_TIME] = 0;
          }
        } else {
          current = calIntermediateStyle(currentFrame, __config[I_KEYS], percent, target);
        } // 无论两帧之间是否有变化，都生成计算结果赋给style，去重在root做


        genBeforeRefresh(current, __config[I_KEYS], __config, root, target);

        if (needClean) {
          var playCb = __config[I_PLAY_CB];

          this.__clean(true); // 丑陋的做法，防止gotoAndStop()这样的cb被clean()掉


          if (playCb) {
            __config[I_PLAY_CB] = playCb;
          }
        }
      }
    }, {
      key: "__after",
      value: function __after(diff) {
        var __config = this.__config;
        __config[I_ASSIGNING] = false;

        if (__config[I_IN_FPS]) {
          __config[I_IN_FPS] = false;
          return;
        }

        __config[I_FRAME_CB].call(this, __config, diff, __config[I_IS_DELAY]);

        __config[I_IS_DELAY] = false;

        if (__config[I_BEGIN]) {
          __config[I_BEGIN] = false;
          this.emit(Event.BEGIN, __config[I_PLAY_COUNT]);
        } // end事件只触发一次，末轮进入endDelay或直接结束时


        if (__config[I_NEXT_END] && !__config[I_END]) {
          __config[I_END] = true;
          this.emit(Event.END, __config[I_PLAY_COUNT] - 1);
        }

        if (__config[I_FINISHED]) {
          __config[I_BEGIN] = __config[I_END] = __config[I_IS_DELAY] = __config[I_FINISHED] = __config[I_IN_FPS] = __config[I_ENTER_FRAME] = false;
          __config[I_PLAY_STATE] = 'finished';
          this.emit(Event.FINISH);
        }
      }
    }, {
      key: "pause",
      value: function pause(silence) {
        var __config = this.__config;
        var isDestroyed = __config[I_DESTROYED];
        var duration = __config[I_DURATION];
        var pending = this.pending;

        if (isDestroyed || duration <= 0 || pending) {
          return this;
        }

        __config[I_PLAY_STATE] = 'paused';

        this.__cancelTask();

        if (!silence) {
          this.emit(Event.PAUSE);
        }

        return this;
      }
    }, {
      key: "resume",
      value: function resume(cb) {
        var __config = this.__config;
        var isDestroyed = __config[I_DESTROYED];
        var duration = __config[I_DURATION];
        var playState = __config[I_PLAY_STATE];

        if (isDestroyed || duration <= 0 || playState !== 'paused') {
          return this;
        }

        return this.play(cb);
      }
    }, {
      key: "finish",
      value: function finish(cb) {
        var self = this;
        var __config = self.__config;
        var isDestroyed = __config[I_DESTROYED];
        var duration = __config[I_DURATION];
        var playState = __config[I_PLAY_STATE];
        var frames = __config[I_FRAMES];

        if (isDestroyed || duration <= 0 || frames.length < 1 || playState === 'finished' || playState === 'idle') {
          return self;
        } // 先清除所有回调任务，多次调用finish也会清除只留最后一次


        self.__cancelTask();

        var root = __config[I_ROOT];
        var originStyle = __config[I_ORIGIN_STYLE];

        if (root) {
          var current; // 停留在最后一帧

          if (__config[I_STAY_END]) {
            __config[I_CURRENT_FRAME] = frames[frames.length - 1];
            current = frames[frames.length - 1][FRAME_STYLE];
          } else {
            current = originStyle;
          }

          root.addRefreshTask({
            __before: function __before() {
              __config[I_ASSIGNING] = true;
              genBeforeRefresh(current, __config[I_KEYS], __config, root, __config[I_TARGET]);

              self.__clean(true);
            },
            __after: function __after(diff) {
              if (!self.__hasFin) {
                self.__hasFin = true;
                __config[I_ASSIGNING] = false;

                __config[I_FRAME_CB].call(self, __config, diff);

                __config[I_BEGIN] = __config[I_END] = __config[I_IS_DELAY] = __config[I_FINISHED] = __config[I_IN_FPS] = __config[I_ENTER_FRAME] = false;
                self.emit(Event.FINISH);
              }

              if (isFunction$4(cb)) {
                cb.call(self, diff);
              }
            }
          });
        }

        return self;
      }
    }, {
      key: "cancel",
      value: function cancel(cb) {
        var self = this;
        var __config = self.__config;
        var isDestroyed = __config[I_DESTROYED];
        var duration = __config[I_DURATION];
        var playState = __config[I_PLAY_STATE];
        var frames = __config[I_FRAMES];

        if (isDestroyed || duration <= 0 || playState === 'idle' || frames.length < 1) {
          return self;
        }

        self.__cancelTask();

        var root = __config[I_ROOT];
        var originStyle = __config[I_ORIGIN_STYLE];

        if (root) {
          root.addRefreshTask({
            __before: function __before() {
              __config[I_ASSIGNING] = true;
              genBeforeRefresh(originStyle, __config[I_KEYS], __config, root, __config[I_TARGET]);

              self.__clean();
            },
            __after: function __after(diff) {
              if (!self.__hasCancel) {
                self.__hasCancel = true;
                __config[I_ASSIGNING] = false;

                __config[I_FRAME_CB].call(self, __config, diff);

                __config[I_BEGIN] = __config[I_END] = __config[I_IS_DELAY] = __config[I_FINISHED] = __config[I_IN_FPS] = __config[I_ENTER_FRAME] = false;
                self.emit(Event.CANCEL);
              }

              if (isFunction$4(cb)) {
                cb.call(self, diff);
              }
            }
          });
        }

        return self;
      }
    }, {
      key: "gotoAndPlay",
      value: function gotoAndPlay(v, options, cb) {
        var __config = this.__config;
        var isDestroyed = __config[I_DESTROYED];
        var duration = __config[I_DURATION];
        var frames = __config[I_FRAMES];
        var delay = __config[I_DELAY];
        var endDelay = __config[I_END_DELAY];

        if (isDestroyed || duration <= 0 || frames.length < 1) {
          return this;
        }

        var _gotoOverload = gotoOverload(options, cb);

        var _gotoOverload2 = _slicedToArray(_gotoOverload, 2);

        options = _gotoOverload2[0];
        cb = _gotoOverload2[1];

        // 计算出时间点直接累加播放
        this.__goto(v, options.isFrame, options.excludeDelay);

        if (v > duration + delay + endDelay) {
          return this.finish(cb);
        }

        return this.play(cb);
      }
    }, {
      key: "gotoAndStop",
      value: function gotoAndStop(v, options, cb) {
        var _this2 = this;

        var __config = this.__config;
        var isDestroyed = __config[I_DESTROYED];
        var duration = __config[I_DURATION];
        var frames = __config[I_FRAMES];
        var delay = __config[I_DELAY];
        var endDelay = __config[I_END_DELAY];

        if (isDestroyed || duration <= 0 || frames.length < 1) {
          return this;
        }

        var _gotoOverload3 = gotoOverload(options, cb);

        var _gotoOverload4 = _slicedToArray(_gotoOverload3, 2);

        options = _gotoOverload4[0];
        cb = _gotoOverload4[1];
        v = this.__goto(v, options.isFrame, options.excludeDelay);

        if (v > duration + delay + endDelay) {
          return this.finish(cb);
        } // 先play一帧，回调里模拟暂停


        return this.play(function (diff) {
          __config[I_PLAY_STATE] = 'paused';

          _this2.__cancelTask();

          if (isFunction$4(cb)) {
            cb.call(_this2, diff);
          }
        });
      } // 同步赋予，用在extendAnimate

    }, {
      key: "assignCurrentStyle",
      value: function assignCurrentStyle() {
        var __config = this.__config;
        var style = __config[I_STYLE];
        var target = __config[I_TARGET];
        var keys = __config[I_KEYS];
        keys.forEach(function (i) {
          if (style.hasOwnProperty(i)) {
            var v = style[i]; // geom的属性变化

            if (GEOM$3.hasOwnProperty(i)) {
              target.currentProps[i] = v;
            } // 样式
            else {
                // 将动画样式直接赋给currentStyle
                target.currentStyle[i] = v;
              }
          }
        });
      } // 返回不包含delay且去除多轮的时间

    }, {
      key: "__goto",
      value: function __goto(v, isFrame, excludeDelay) {
        var __config = this.__config;
        var iterations = __config[I_ITERATIONS];
        var duration = __config[I_DURATION];
        __config[I_PLAY_STATE] = 'paused';

        this.__cancelTask();

        if (isNaN(v) || v < 0) {
          throw new Error('Param of gotoAnd(Play/Stop) is illegal: ' + v);
        }

        if (isFrame) {
          v = (v - 1) / this.spf;
        }

        if (excludeDelay) {
          v += __config[I_DELAY];
        } // 在时间范围内设置好时间，复用play直接跳到播放点


        __config[I_NEXT_TIME] = v;
        v -= __config[I_DELAY]; // 超过时间长度需要累加次数，这里可以超过iterations，因为设定也许会非常大

        var playCount = 0;

        while (v >= duration && playCount < iterations - 1) {
          playCount++;
          v -= duration;
        }

        __config[I_PLAY_COUNT] = playCount; // 防止play()重置时间和当前帧组，提前计算好

        __config[I_ENTER_FRAME] = true;
        var frames = __config[I_FRAMES];
        var framesR = __config[I_FRAMES_R];
        var direction = __config[I_DIRECTION];

        if ({
          alternate: true,
          'alternate-reverse': true
        }.hasOwnProperty(direction)) {
          var isEven = playCount % 2 === 0;

          if (direction === 'alternate') {
            __config[I_CURRENT_FRAMES] = isEven ? frames : framesR;
          } else {
            __config[I_CURRENT_FRAMES] = isEven ? framesR : frames;
          }
        }

        return v;
      }
    }, {
      key: "addControl",
      value: function addControl() {
        var ac = this.root.animateController;

        if (ac) {
          ac.add(this);
        }
      }
    }, {
      key: "removeControl",
      value: function removeControl() {
        var ac = this.root.animateController;

        if (ac) {
          ac.remove(this);
        }
      }
    }, {
      key: "__stayBegin",
      value: function __stayBegin() {
        return {
          backwards: true,
          both: true
        }.hasOwnProperty(this.fill);
      }
    }, {
      key: "__stayEnd",
      value: function __stayEnd() {
        return {
          forwards: true,
          both: true
        }.hasOwnProperty(this.fill);
      }
    }, {
      key: "__setTarget",
      value: function __setTarget(target) {
        this.__target = target;
        this.__config[I_TARGET] = target;
        this.__config[I_NODE_CONFIG] = target.__config;
      }
    }, {
      key: "__cancelTask",
      value: function __cancelTask() {
        frame.offFrame(this);
        this.__config[I_PLAY_CB] = null;
      }
    }, {
      key: "__destroy",
      value: function __destroy(sync) {
        var self = this;
        var __config = self.__config;

        if (__config[I_DESTROYED]) {
          return;
        }

        self.removeControl(); // clean异步执行，因为里面的样式还原需要等到下一帧，否则同步执行清除后，紧接着的新同步动画获取不到currentStyle

        if (sync) {
          self.__clean();

          __config[I_TARGET] = null;
        } else {
          frame.nextFrame({
            __before: function __before() {
              self.__clean();

              __config[I_TARGET] = null;
            }
          });
        }

        __config[I_START_TIME] = 0;
        __config[I_DESTROYED] = true;
      }
    }, {
      key: "__checkModify",
      value: function __checkModify() {
        var __config = this.__config;

        if (__config[I_PLAY_STATE] !== 'idle' && __config[I_PLAY_STATE] !== 'finished') {
          inject.warn('Modification will not come into effect when animation is running');
        }
      }
    }, {
      key: "id",
      get: function get() {
        return this.__id;
      }
    }, {
      key: "target",
      get: function get() {
        return this.__config[I_TARGET];
      }
    }, {
      key: "root",
      get: function get() {
        return this.__config[I_ROOT];
      }
    }, {
      key: "keys",
      get: function get() {
        return this.__config[I_KEYS];
      }
    }, {
      key: "style",
      get: function get() {
        return this.__config[I_STYLE];
      }
    }, {
      key: "options",
      get: function get() {
        return this.__options;
      }
    }, {
      key: "duration",
      get: function get() {
        return this.__config[I_DURATION];
      },
      set: function set(v) {
        v = Math.max(0, parseFloat(v) || 0);
        var __config = this.__config;

        if (__config[I_DURATION] !== v) {
          __config[I_DURATION] = v;
          __config[I_END_TIME] = v;

          this.__checkModify();
        }

        return v;
      }
    }, {
      key: "delay",
      get: function get() {
        return this.__config[I_DELAY];
      },
      set: function set(v) {
        v = Math.max(0, parseFloat(v) || 0);
        var __config = this.__config;

        if (__config[I_DELAY] !== v) {
          __config[I_DELAY] = v;

          this.__checkModify();
        }

        return v;
      }
    }, {
      key: "endDelay",
      get: function get() {
        return this.__config[I_END_DELAY];
      },
      set: function set(v) {
        v = Math.max(0, parseFloat(v) || 0);
        var __config = this.__config;

        if (__config[I_END_DELAY] !== v) {
          __config[I_END_DELAY] = v;

          this.__checkModify();
        }

        return v;
      }
    }, {
      key: "fps",
      get: function get() {
        return this.__config[I_FPS];
      },
      set: function set(v) {
        v = parseInt(v) || 60;
        var __config = this.__config;

        if (__config[I_FPS] !== v) {
          if (v <= 0) {
            v = 60;
          }

          __config[I_FPS] = v;
        }

        return v;
      }
    }, {
      key: "spf",
      get: function get() {
        return 1 / this.fps;
      }
    }, {
      key: "iterations",
      get: function get() {
        return this.__config[I_ITERATIONS];
      },
      set: function set(v) {
        if (v === Infinity || util.isString(v) && v.toLowerCase() === 'infinity') {
          v = Infinity;
        } else {
          v = parseInt(v);

          if (isNaN(v) || v < 0) {
            v = 1;
          }
        }

        var __config = this.__config;

        if (__config[I_ITERATIONS] !== v) {
          __config[I_ITERATIONS] = v;
        }

        return v;
      }
    }, {
      key: "fill",
      get: function get() {
        return this.__config[I_FILL];
      },
      set: function set(v) {
        v = v || 'none';
        var __config = this.__config;

        if (__config[I_FILL] !== v) {
          __config[I_FILL] = v;

          this.__checkModify();
        }

        __config[I_STAY_BEGIN] = {
          backwards: true,
          both: true
        }.hasOwnProperty(v);
        __config[I_STAY_END] = {
          forwards: true,
          both: true
        }.hasOwnProperty(v);
        return v;
      }
    }, {
      key: "direction",
      get: function get() {
        return this.__config[I_DIRECTION];
      },
      set: function set(v) {
        v = v || 'normal';
        var __config = this.__config;

        if (__config[I_DIRECTION] !== v) {
          __config[I_DIRECTION] = v;

          this.__checkModify();
        }

        return v;
      }
    }, {
      key: "frames",
      get: function get() {
        return this.__config[I_FRAMES];
      }
    }, {
      key: "framesR",
      get: function get() {
        return this.__config[I_FRAMES_R];
      }
    }, {
      key: "playbackRate",
      get: function get() {
        return this.__config[I_PLAYBACK_RATE];
      },
      set: function set(v) {
        v = parseFloat(v) || 1;

        if (v <= 0) {
          v = 1;
        }

        var __config = this.__config;

        if (__config[I_PLAYBACK_RATE] !== v) {
          __config[I_PLAYBACK_RATE] = v;
        }

        return v;
      }
    }, {
      key: "easing",
      get: function get() {
        return this.__config[I_EASING];
      }
    }, {
      key: "startTime",
      get: function get() {
        return this.__config[I_START_TIME];
      }
    }, {
      key: "currentTime",
      get: function get() {
        return this.__config[I_CURRENT_TIME];
      },
      set: function set(v) {
        v = Math.max(0, parseFloat(v) || 0);
        var __config = this.__config;

        if (__config[I_CURRENT_TIME] !== v) {
          __config[I_CURRENT_TIME] = v;
          __config[I_NEXT_TIME] = v;
        }

        return v;
      }
    }, {
      key: "nextTime",
      get: function get() {
        return this.__config[I_NEXT_TIME];
      },
      set: function set(v) {
        v = Math.max(0, parseFloat(v) || 0);
        var __config = this.__config;

        if (__config[I_NEXT_TIME] !== v) {
          __config[I_NEXT_TIME] = v;
        }

        return v;
      }
    }, {
      key: "timestamp",
      get: function get() {
        return this.__config[I_TIME_STAMP];
      }
    }, {
      key: "pending",
      get: function get() {
        return this.__config[I_PLAY_STATE] !== 'running';
      }
    }, {
      key: "finished",
      get: function get() {
        return this.__config[I_PLAY_STATE] === 'finished';
      }
    }, {
      key: "playState",
      get: function get() {
        return this.__config[I_PLAY_STATE];
      }
    }, {
      key: "playCount",
      get: function get() {
        return this.__config[I_PLAY_COUNT];
      },
      set: function set(v) {
        v = Math.max(0, parseInt(v) || 0);
        var __config = this.__config;

        if (__config[I_PLAY_COUNT] !== v) {
          __config[I_PLAY_COUNT] = v;
        }

        return v;
      }
    }, {
      key: "isDestroyed",
      get: function get() {
        return this.__config[I_DESTROYED];
      }
    }, {
      key: "animating",
      get: function get() {
        var __config = this.__config;
        var playState = __config[I_PLAY_STATE];

        if (playState === 'idle') {
          return false;
        }

        return playState !== 'finished' || __config[I_STAY_END] || __config[I_STAY_BEGIN];
      }
    }, {
      key: "spfLimit",
      get: function get() {
        var __config = this.__config;
        return __config[I_SPF_LIMIT];
      },
      set: function set(v) {
        if (util.isNumber(v) || /^\d/.test(v)) {
          v = Math.max(0, parseInt(v) || 0);
        } else {
          v = !!v;
        }

        var __config = this.__config;

        if (__config[I_SPF_LIMIT] !== v) {
          __config[I_SPF_LIMIT] = v;
        }

        return v;
      }
    }, {
      key: "assigning",
      get: function get() {
        return this.__config[I_ASSIGNING];
      }
    }]);

    return Animation;
  }(Event);

  var NODE_DEFS_CACHE$2 = enums.NODE_KEY.NODE_DEFS_CACHE;
  var int2rgba$1 = util.int2rgba;
  var canvasPolygon$4 = painter.canvasPolygon,
      svgPolygon$4 = painter.svgPolygon;

  function renderBoxShadow(xom, renderMode, ctx, data, x1, y1, x2, y2, w, h) {
    var dx = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 0;
    var dy = arguments.length > 11 && arguments[11] !== undefined ? arguments[11] : 0;
    x1 += dx;
    y1 += dy;
    x2 += dx;
    y2 += dy;

    var _data = _slicedToArray(data, 6),
        x = _data[0],
        y = _data[1],
        sigma = _data[2],
        spread = _data[3],
        color = _data[4],
        inset = _data[5];

    var c = int2rgba$1(color);
    var n = Math.abs(sigma) * 2 + Math.abs(spread) * 2 + Math.abs(x) * 2 + Math.abs(y) * 2; // box本身坐标顺时针

    var box = [[x1, y1], [x2, y1], [x2, y2], [x1, y2], [x1, y1]]; // 算上各种偏移/扩散的最外层坐标，且逆时针

    var outer = [[x1 - n, y1 - n], [x1 - n, y2 + n], [x2 + n, y2 + n], [x2 + n, y1 - n], [x1 - n, y1 - n]];

    if (color[3] > 0 && (sigma > 0 || spread > 0)) {
      if (renderMode === mode.CANVAS | renderMode === mode.WEBGL) {
        ctx.save();
        ctx.beginPath(); // inset裁剪box外面

        if (inset === 'inset') {
          var xa = x1 + x + spread;
          var ya = y1 + y + spread;
          var xb = x2 + x - spread;
          var yb = y2 + y - spread;
          var spreadBox = [[xa, ya], [xb, ya], [xb, yb], [xa, yb]]; // 是否相交判断需要绘制

          var cross = geom.getRectsIntersection([box[0][0], box[0][1], box[2][0], box[2][1]], [spreadBox[0][0], spreadBox[0][1], spreadBox[2][0], spreadBox[2][1]]);

          if (!cross) {
            return;
          }

          cross = [[cross[0], cross[1]], [cross[2], cross[1]], [cross[2], cross[3]], [cross[0], cross[3]], [cross[0], cross[1]]]; // 扩散区域类似边框填充

          if (spread) {
            canvasPolygon$4(ctx, cross);
            canvasPolygon$4(ctx, box.slice(0).reverse());
            ctx.clip();
            ctx.closePath();
            ctx.beginPath();

            if (ctx.fillStyle !== c) {
              ctx.fillStyle = c;
            }

            canvasPolygon$4(ctx, box);
            ctx.fill();
            ctx.closePath();
            ctx.restore();
            ctx.save();
            ctx.beginPath();
            canvasPolygon$4(ctx, cross);
            ctx.clip();
            ctx.closePath();
            ctx.beginPath();

            if (ctx.fillStyle !== '#FFF') {
              ctx.fillStyle = '#FFF';
            }

            ctx.shadowColor = c;
            ctx.shadowBlur = sigma; // 画在外围的空心矩形，宽度要比blur大，n考虑了这一情况取了最大值

            canvasPolygon$4(ctx, [[xa, ya], [xb, ya], [xb, yb], [x1 - n, yb], [x1 - n, y2 + n], [x2 + n, y2 + n], [x2 + n, y1 - n], [x1 - n, y1 - n], [x1 - n, yb], [xa, yb], [xa, ya]]);
          } else {
            canvasPolygon$4(ctx, box);
            ctx.clip();
            ctx.closePath();
            ctx.beginPath();

            if (ctx.fillStyle !== '#FFF') {
              ctx.fillStyle = '#FFF';
            }

            ctx.shadowOffsetX = x;
            ctx.shadowOffsetY = y;
            ctx.shadowColor = c;
            ctx.shadowBlur = sigma;
            canvasPolygon$4(ctx, [[x1, y1], [x2, y1], [x2, y2], [x1 - n, y2], [x1 - n, y2 + n], [x2 + n, y2 + n], [x2 + n, y1 - n], [x1 - n, y1 - n], [x1 - n, y2], [x1, y2], [x1, y1]]);
          }
        } // outset需裁减掉box本身的内容，clip()非零环绕显示box外的阴影内容，fill()绘制在内无效
        else {
            var _xa = x1 + x - spread;

            var _ya = y1 + y - spread;

            var _xb = x2 + x + spread;

            var _yb = y2 + y + spread;

            var blurBox = [[_xa, _ya], [_xb, _ya], [_xb, _yb], [_xa, _yb]];

            var _cross = geom.getRectsIntersection([box[0][0], box[0][1], box[2][0], box[2][1]], [blurBox[0][0], blurBox[0][1], blurBox[2][0], blurBox[2][1]]); // 分为是否有spread，因模糊成本spread区域将没有模糊


            if (spread) {
              // 扩散区域类似边框填充
              canvasPolygon$4(ctx, box);
              canvasPolygon$4(ctx, blurBox.slice(0).reverse());
              ctx.clip();
              ctx.closePath();
              ctx.beginPath();

              if (ctx.fillStyle !== c) {
                ctx.fillStyle = c;
              }

              canvasPolygon$4(ctx, blurBox);
              ctx.fill();
              ctx.closePath();
              ctx.restore();
              ctx.save();
              ctx.beginPath(); // 阴影部分看相交情况裁剪，有相交时逆时针绘制相交区域即可排除之

              if (_cross) {
                canvasPolygon$4(ctx, [[_cross[0], _cross[1]], [_cross[2], _cross[1]], [_cross[2], _cross[3]], [_cross[0], _cross[3]], [_cross[0], _cross[1]]].reverse());
              }

              canvasPolygon$4(ctx, box);
              canvasPolygon$4(ctx, blurBox);
              canvasPolygon$4(ctx, outer);
              ctx.clip();
              ctx.closePath();
              ctx.beginPath();

              if (ctx.fillStyle !== '#FFF') {
                ctx.fillStyle = '#FFF';
              }

              ctx.shadowColor = c;
              ctx.shadowBlur = sigma;
              canvasPolygon$4(ctx, blurBox);
            } else {
              canvasPolygon$4(ctx, box);
              canvasPolygon$4(ctx, outer);
              ctx.clip();
              ctx.closePath();
              ctx.beginPath();

              if (ctx.fillStyle !== '#FFF') {
                ctx.fillStyle = '#FFF';
              }

              ctx.shadowOffsetX = x;
              ctx.shadowOffsetY = y;
              ctx.shadowColor = c;
              ctx.shadowBlur = sigma;
              canvasPolygon$4(ctx, box);
            }
          }

        ctx.fill();
        ctx.closePath();
        ctx.restore();
      } else if (renderMode === mode.SVG) {
        var d = blur.outerSize(sigma);

        if (inset === 'inset') {
          var _xa2 = x1 + x + spread;

          var _ya2 = y1 + y + spread;

          var _xb2 = x2 + x - spread;

          var _yb2 = y2 + y - spread;

          var _spreadBox = [[_xa2, _ya2], [_xb2, _ya2], [_xb2, _yb2], [_xa2, _yb2]];

          var _cross2 = geom.getRectsIntersection([box[0][0], box[0][1], box[2][0], box[2][1]], [_spreadBox[0][0], _spreadBox[0][1], _spreadBox[2][0], _spreadBox[2][1]]);

          if (!_cross2) {
            return;
          }

          _cross2 = [[_cross2[0], _cross2[1]], [_cross2[2], _cross2[1]], [_cross2[2], _cross2[3]], [_cross2[0], _cross2[3]], [_cross2[0], _cross2[1]]];

          if (spread) {
            var v = {
              tagName: 'filter',
              props: [['x', -d / w], ['y', -d / h], ['width', 1 + d * 2 / w], ['height', 1 + d * 2 / h]],
              children: [{
                tagName: 'feDropShadow',
                props: [['dx', 0], ['dy', 0], ['stdDeviation', sigma * 0.5], ['flood-color', c]]
              }]
            };

            xom.__config[NODE_DEFS_CACHE$2].push(v);

            var filter = ctx.add(v);
            var v2 = {
              tagName: 'clipPath',
              children: [{
                tagName: 'path',
                props: [['d', svgPolygon$4(_cross2) + svgPolygon$4(box.slice(0).reverse())], ['fill', '#FFF']]
              }]
            };
            var clip = ctx.add(v2);

            xom.__config[NODE_DEFS_CACHE$2].push(v2);

            xom.virtualDom.bb.push({
              type: 'item',
              tagName: 'path',
              props: [['d', svgPolygon$4(box)], ['fill', c], ['clip-path', 'url(#' + clip + ')']]
            });
            v = {
              tagName: 'clipPath',
              children: [{
                tagName: 'path',
                props: [['d', svgPolygon$4(_cross2)], ['fill', '#FFF']]
              }]
            };
            clip = ctx.add(v);

            xom.__config[NODE_DEFS_CACHE$2].push(v);

            xom.virtualDom.bb.push({
              type: 'item',
              tagName: 'path',
              props: [['d', svgPolygon$4([[_xa2, _ya2], [_xb2, _ya2], [_xb2, _yb2], [x1 - n, _yb2], [x1 - n, y2 + n], [x2 + n, y2 + n], [x2 + n, y1 - n], [x1 - n, y1 - n], [x1 - n, _yb2], [_xa2, _yb2], [_xa2, _ya2]])], ['fill', '#FFF'], ['filter', 'url(#' + filter + ')'], ['clip-path', 'url(#' + clip + ')']]
            });
          } else {
            var _v = {
              tagName: 'filter',
              props: [['x', -d / w], ['y', -d / h], ['width', 1 + d * 2 / w], ['height', 1 + d * 2 / h]],
              children: [{
                tagName: 'feDropShadow',
                props: [['dx', x], ['dy', y], ['stdDeviation', sigma * 0.5], ['flood-color', c]]
              }]
            };

            var _filter = ctx.add(_v);

            xom.__config[NODE_DEFS_CACHE$2].push(_v);

            _v = {
              tagName: 'clipPath',
              children: [{
                tagName: 'path',
                props: [['d', svgPolygon$4(box)], ['fill', '#FFF']]
              }]
            };

            var _clip = ctx.add(_v);

            xom.__config[NODE_DEFS_CACHE$2].push(_v);

            xom.virtualDom.bb.push({
              type: 'item',
              tagName: 'path',
              props: [['d', svgPolygon$4([[x1, y1], [x2, y1], [x2, y2], [x1 - n, y2], [x1 - n, y2 + n], [x2 + n, y2 + n], [x2 + n, y1 - n], [x1 - n, y1 - n], [x1 - n, y2], [x1, y2], [x1, y1]])], ['fill', '#FFF'], ['filter', 'url(#' + _filter + ')'], ['clip-path', 'url(#' + _clip + ')']]
            });
          }
        } else {
          var _xa3 = x1 + x - spread;

          var _ya3 = y1 + y - spread;

          var _xb3 = x2 + x + spread;

          var _yb3 = y2 + y + spread;

          var _blurBox = [[_xa3, _ya3], [_xb3, _ya3], [_xb3, _yb3], [_xa3, _yb3]];

          var _cross3 = geom.getRectsIntersection([box[0][0], box[0][1], box[2][0], box[2][1]], [_blurBox[0][0], _blurBox[0][1], _blurBox[2][0], _blurBox[2][1]]);

          if (spread) {
            var _v2 = {
              tagName: 'filter',
              props: [['x', -d / w], ['y', -d / h], ['width', 1 + d * 2 / w], ['height', 1 + d * 2 / h]],
              children: [{
                tagName: 'feDropShadow',
                props: [['dx', 0], ['dy', 0], ['stdDeviation', sigma * 0.5], ['flood-color', c]]
              }]
            };

            var _filter2 = ctx.add(_v2);

            xom.__config[NODE_DEFS_CACHE$2].push(_v2);

            _v2 = {
              tagName: 'clipPath',
              children: [{
                tagName: 'path',
                props: [['d', svgPolygon$4(box) + svgPolygon$4(_blurBox.slice(0).reverse())], ['fill', '#FFF']]
              }]
            };

            var _clip2 = ctx.add(_v2);

            xom.__config[NODE_DEFS_CACHE$2].push(_v2);

            xom.virtualDom.bb.push({
              type: 'item',
              tagName: 'path',
              props: [['d', svgPolygon$4(_blurBox)], ['fill', c], ['clip-path', 'url(#' + _clip2 + ')']]
            });
            _v2 = {
              tagName: 'clipPath',
              children: [{
                tagName: 'path',
                props: [['d', (_cross3 ? svgPolygon$4([[_cross3[0], _cross3[1]], [_cross3[2], _cross3[1]], [_cross3[2], _cross3[3]], [_cross3[0], _cross3[3]], [_cross3[0], _cross3[1]]].reverse()) : '') + svgPolygon$4(box) + svgPolygon$4(_blurBox) + svgPolygon$4(outer)], ['fill', '#FFF']]
              }]
            };
            _clip2 = ctx.add(_v2);

            xom.__config[NODE_DEFS_CACHE$2].push(_v2);

            xom.virtualDom.bb.push({
              type: 'item',
              tagName: 'path',
              props: [['d', svgPolygon$4(_blurBox)], ['fill', '#FFF'], ['filter', 'url(#' + _filter2 + ')'], ['clip-path', 'url(#' + _clip2 + ')']]
            });
          } else {
            var _v3 = {
              tagName: 'filter',
              props: [['x', -d / w], ['y', -d / h], ['width', 1 + d * 2 / w], ['height', 1 + d * 2 / h]],
              children: [{
                tagName: 'feDropShadow',
                props: [['dx', x], ['dy', y], ['stdDeviation', sigma * 0.5], ['flood-color', c]]
              }]
            };

            var _filter3 = ctx.add(_v3);

            xom.__config[NODE_DEFS_CACHE$2].push(_v3);

            _v3 = {
              tagName: 'clipPath',
              children: [{
                tagName: 'path',
                props: [['d', svgPolygon$4(box) + svgPolygon$4(outer)], ['fill', '#FFF']]
              }]
            };

            var _clip3 = ctx.add(_v3);

            xom.__config[NODE_DEFS_CACHE$2].push(_v3);

            xom.virtualDom.bb.push({
              type: 'item',
              tagName: 'path',
              props: [['d', svgPolygon$4(box)], ['fill', '#FFF'], ['filter', 'url(#' + _filter3 + ')'], ['clip-path', 'url(#' + _clip3 + ')']]
            });
          }
        }
      }
    }
  }

  var bs = {
    renderBoxShadow: renderBoxShadow
  };

  var MBM_HASH = {
    multiply: true,
    screen: true,
    overlay: true,
    darken: true,
    lighten: true,
    'color-dodge': true,
    'color-burn': true,
    'hard-light': true,
    'soft-light': true,
    difference: true,
    exclusion: true,
    hue: true,
    saturation: true,
    color: true,
    luminosity: true
  };

  function mbmName(v) {
    if (v) {
      return v.replace(/[A-Z]/, function ($0) {
        return '-' + $0.toLowerCase();
      });
    }
  }

  function isValidMbm(v) {
    return MBM_HASH.hasOwnProperty(mbmName(v));
  }

  var mbm = {
    mbmName: mbmName,
    isValidMbm: isValidMbm
  };

  var _enums$STYLE_KEY$b = enums.STYLE_KEY,
      MARGIN_LEFT = _enums$STYLE_KEY$b.MARGIN_LEFT,
      MARGIN_RIGHT = _enums$STYLE_KEY$b.MARGIN_RIGHT,
      PADDING_LEFT$1 = _enums$STYLE_KEY$b.PADDING_LEFT,
      PADDING_RIGHT = _enums$STYLE_KEY$b.PADDING_RIGHT,
      BORDER_LEFT_WIDTH$2 = _enums$STYLE_KEY$b.BORDER_LEFT_WIDTH,
      BORDER_RIGHT_WIDTH$1 = _enums$STYLE_KEY$b.BORDER_RIGHT_WIDTH;
  /**
   * 获取inline的每一行内容的矩形坐标4个点，同时附带上border的矩形，比前面4个点尺寸大或相等（有无border/padding）
   * @param xom
   * @param contentBoxList
   * @param start
   * @param end
   * @param lineBox
   * @param baseLine
   * @param lineHeight
   * @param diffL
   * @param isStart
   * @param isEnd
   * @param backgroundClip
   * @param paddingTop
   * @param paddingRight
   * @param paddingBottom
   * @param paddingLeft
   * @param borderTopWidth
   * @param borderRightWidth
   * @param borderBottomWidth
   * @param borderLeftWidth
   * @returns {(*|number)[]}
   */

  function getInlineBox(xom, contentBoxList, start, end, lineBox, baseLine, lineHeight, diffL, isStart, isEnd, backgroundClip, paddingTop, paddingRight, paddingBottom, paddingLeft, borderTopWidth, borderRightWidth, borderBottomWidth, borderLeftWidth) {
    // 根据bgClip确定y伸展范围，inline渲染bg扩展到pb的位置不影响布局
    var eyt = 0,
        eyb = 0;

    if (backgroundClip === 'paddingBox' || backgroundClip === 'padding-box') {
      eyt = paddingTop;
      eyb = paddingBottom;
    } else if (backgroundClip !== 'contentBox' && backgroundClip !== 'content-box') {
      eyt = paddingTop + borderTopWidth;
      eyb = paddingBottom + borderBottomWidth;
    } // 同y的border伸展范围，其影响border渲染


    var pbt = paddingTop + borderTopWidth;
    var pbb = paddingBottom + borderBottomWidth; // inline的baseLine和lineBox的差值

    var diff = lineBox.baseLine - baseLine; // x坐标取首尾contentBox的左右2侧，clip布局时已算好；y是根据lineHeight和lineBox的高度以及baseLine对齐后计算的

    var x1 = start.x;
    var dom = start instanceof TextBox ? start.parent.domParent : start.domParent;

    while (dom !== xom) {
      var list = dom.contentBoxList;

      if (start === list[0]) {
        var _dom$computedStyle = dom.computedStyle,
            marginLeft = _dom$computedStyle[MARGIN_LEFT],
            _paddingLeft = _dom$computedStyle[PADDING_LEFT$1],
            _borderLeftWidth = _dom$computedStyle[BORDER_LEFT_WIDTH$2];
        x1 -= marginLeft + _paddingLeft + _borderLeftWidth;
      }

      dom = dom.domParent;
    }

    var bx1 = x1;

    if (isStart) {
      if (backgroundClip === 'paddingBox' || backgroundClip === 'padding-box') {
        x1 -= paddingLeft;
      } else if (backgroundClip !== 'contentBox' && backgroundClip !== 'content-box') {
        x1 -= paddingLeft + borderLeftWidth;
      }

      bx1 -= paddingLeft + borderLeftWidth;
    }

    var y1 = lineBox.y + diff - eyt;
    var by1 = lineBox.y + diff - pbt;
    var x2 = end.x + end.outerWidth; // TextBox的parent是Text，再是Dom，这里一定是inline，无嵌套就是xom本身，有则包含若干层最上层还是xom

    dom = end instanceof TextBox ? end.parent.domParent : end.domParent; // 从end开始，向上获取dom节点的尾部mpb进行累加，直到xom跳出

    while (dom !== xom) {
      var _list = dom.contentBoxList;

      if (end === _list[_list.length - 1]) {
        var _dom$computedStyle2 = dom.computedStyle,
            marginRight = _dom$computedStyle2[MARGIN_RIGHT],
            _paddingRight = _dom$computedStyle2[PADDING_RIGHT],
            _borderRightWidth = _dom$computedStyle2[BORDER_RIGHT_WIDTH$1];
        x2 += marginRight + _paddingRight + _borderRightWidth;
      }

      dom = dom.domParent;
    }

    var bx2 = x2;

    if (isEnd) {
      if (backgroundClip === 'paddingBox' || backgroundClip === 'padding-box') {
        x2 += paddingRight;
      } else if (backgroundClip !== 'contentBox' && backgroundClip !== 'content-box') {
        x2 += paddingRight + borderRightWidth;
      }

      bx2 += paddingRight + borderRightWidth;
    }

    var y2 = lineBox.y + diff + lineHeight - diffL + eyb;
    var by2 = lineBox.y + diff + lineHeight - diffL + pbb; // x要考虑xom的ox值

    x1 += xom.ox;
    x2 += xom.ox;
    bx1 += xom.ox;
    bx2 += xom.ox;
    y1 += xom.oy;
    y2 += xom.oy;
    by1 += xom.oy;
    by2 += xom.oy;
    return [x1, y1, x2, y2, bx1, by1, bx2, by2];
  }
  /**
   * 统计inline的所有contentBox排成一行时的总宽度，考虑嵌套的mpb
   * @param xom
   * @param contentBoxList
   * @returns {number}
   */


  function getInlineWidth(xom, contentBoxList) {
    var sum = 0;
    var length = contentBoxList.length;

    for (var i = 0; i < length; i++) {
      var contentBox = contentBoxList[i];
      sum += contentBox.width; // 嵌套时，首尾box考虑mpb

      var dom = contentBox instanceof TextBox ? contentBox.parent.domParent : contentBox.domParent;

      while (dom !== xom) {
        var list = dom.contentBoxList;

        if (contentBox === list[0]) {
          var _dom$computedStyle3 = dom.computedStyle,
              marginLeft = _dom$computedStyle3[MARGIN_LEFT],
              paddingLeft = _dom$computedStyle3[PADDING_LEFT$1],
              borderLeftWidth = _dom$computedStyle3[BORDER_LEFT_WIDTH$2];
          sum += marginLeft + paddingLeft + borderLeftWidth;
        }

        if (contentBox === list[list.length - 1]) {
          var _dom$computedStyle4 = dom.computedStyle,
              marginRight = _dom$computedStyle4[MARGIN_RIGHT],
              paddingRight = _dom$computedStyle4[PADDING_RIGHT],
              borderRightWidth = _dom$computedStyle4[BORDER_RIGHT_WIDTH$1];
          sum += marginRight + paddingRight + borderRightWidth;
        }

        dom = dom.domParent;
      }
    }

    return sum;
  }

  var inline = {
    getInlineBox: getInlineBox,
    getInlineWidth: getInlineWidth
  };

  var svgPolygon$5 = painter.svgPolygon;
  var CANVAS$1 = mode.CANVAS,
      SVG = mode.SVG,
      WEBGL$1 = mode.WEBGL;
  var LOCAL = Cache.LOCAL;
  var STYLE_KEY$5 = enums.STYLE_KEY,
      STYLE_RV_KEY$2 = enums.STYLE_RV_KEY,
      style2Upper$2 = enums.style2Upper,
      _enums$STYLE_KEY$c = enums.STYLE_KEY,
      BORDER_TOP_LEFT_RADIUS$1 = _enums$STYLE_KEY$c.BORDER_TOP_LEFT_RADIUS,
      BORDER_TOP_RIGHT_RADIUS$1 = _enums$STYLE_KEY$c.BORDER_TOP_RIGHT_RADIUS,
      BORDER_BOTTOM_LEFT_RADIUS$1 = _enums$STYLE_KEY$c.BORDER_BOTTOM_LEFT_RADIUS,
      BORDER_BOTTOM_RIGHT_RADIUS$1 = _enums$STYLE_KEY$c.BORDER_BOTTOM_RIGHT_RADIUS,
      PADDING_LEFT$2 = _enums$STYLE_KEY$c.PADDING_LEFT,
      PADDING_RIGHT$1 = _enums$STYLE_KEY$c.PADDING_RIGHT,
      PADDING_TOP$1 = _enums$STYLE_KEY$c.PADDING_TOP,
      PADDING_BOTTOM$1 = _enums$STYLE_KEY$c.PADDING_BOTTOM,
      MARGIN_LEFT$1 = _enums$STYLE_KEY$c.MARGIN_LEFT,
      MARGIN_TOP = _enums$STYLE_KEY$c.MARGIN_TOP,
      MARGIN_BOTTOM = _enums$STYLE_KEY$c.MARGIN_BOTTOM,
      MARGIN_RIGHT$1 = _enums$STYLE_KEY$c.MARGIN_RIGHT,
      BORDER_LEFT_WIDTH$3 = _enums$STYLE_KEY$c.BORDER_LEFT_WIDTH,
      BORDER_TOP_WIDTH$2 = _enums$STYLE_KEY$c.BORDER_TOP_WIDTH,
      BORDER_BOTTOM_WIDTH$2 = _enums$STYLE_KEY$c.BORDER_BOTTOM_WIDTH,
      BORDER_RIGHT_WIDTH$2 = _enums$STYLE_KEY$c.BORDER_RIGHT_WIDTH,
      TOP$1 = _enums$STYLE_KEY$c.TOP,
      RIGHT = _enums$STYLE_KEY$c.RIGHT,
      BOTTOM$1 = _enums$STYLE_KEY$c.BOTTOM,
      LEFT = _enums$STYLE_KEY$c.LEFT,
      POSITION$1 = _enums$STYLE_KEY$c.POSITION,
      DISPLAY$2 = _enums$STYLE_KEY$c.DISPLAY,
      WIDTH$4 = _enums$STYLE_KEY$c.WIDTH,
      HEIGHT$3 = _enums$STYLE_KEY$c.HEIGHT,
      MATRIX$3 = _enums$STYLE_KEY$c.MATRIX,
      TRANSLATE_X$4 = _enums$STYLE_KEY$c.TRANSLATE_X,
      TRANSLATE_Y$4 = _enums$STYLE_KEY$c.TRANSLATE_Y,
      TRANSLATE_Z$4 = _enums$STYLE_KEY$c.TRANSLATE_Z,
      TRANSFORM$3 = _enums$STYLE_KEY$c.TRANSFORM,
      SCALE_X$3 = _enums$STYLE_KEY$c.SCALE_X,
      SCALE_Y$3 = _enums$STYLE_KEY$c.SCALE_Y,
      SCALE_Z$2 = _enums$STYLE_KEY$c.SCALE_Z,
      ROTATE_X$2 = _enums$STYLE_KEY$c.ROTATE_X,
      ROTATE_Y$2 = _enums$STYLE_KEY$c.ROTATE_Y,
      ROTATE_Z$2 = _enums$STYLE_KEY$c.ROTATE_Z,
      SKEW_X$2 = _enums$STYLE_KEY$c.SKEW_X,
      SKEW_Y$2 = _enums$STYLE_KEY$c.SKEW_Y,
      PERSPECTIVE$3 = _enums$STYLE_KEY$c.PERSPECTIVE,
      PERSPECTIVE_ORIGIN$3 = _enums$STYLE_KEY$c.PERSPECTIVE_ORIGIN,
      ROTATE_3D$3 = _enums$STYLE_KEY$c.ROTATE_3D,
      TRANSFORM_ORIGIN$4 = _enums$STYLE_KEY$c.TRANSFORM_ORIGIN,
      BACKGROUND_POSITION_X$3 = _enums$STYLE_KEY$c.BACKGROUND_POSITION_X,
      BACKGROUND_POSITION_Y$3 = _enums$STYLE_KEY$c.BACKGROUND_POSITION_Y,
      BACKGROUND_SIZE$2 = _enums$STYLE_KEY$c.BACKGROUND_SIZE,
      BACKGROUND_COLOR$1 = _enums$STYLE_KEY$c.BACKGROUND_COLOR,
      BACKGROUND_IMAGE$1 = _enums$STYLE_KEY$c.BACKGROUND_IMAGE,
      BACKGROUND_REPEAT = _enums$STYLE_KEY$c.BACKGROUND_REPEAT,
      BOX_SHADOW$2 = _enums$STYLE_KEY$c.BOX_SHADOW,
      OPACITY$3 = _enums$STYLE_KEY$c.OPACITY,
      Z_INDEX$2 = _enums$STYLE_KEY$c.Z_INDEX,
      BORDER_TOP_STYLE = _enums$STYLE_KEY$c.BORDER_TOP_STYLE,
      BORDER_RIGHT_STYLE = _enums$STYLE_KEY$c.BORDER_RIGHT_STYLE,
      BORDER_BOTTOM_STYLE = _enums$STYLE_KEY$c.BORDER_BOTTOM_STYLE,
      BORDER_LEFT_STYLE = _enums$STYLE_KEY$c.BORDER_LEFT_STYLE,
      FILTER$3 = _enums$STYLE_KEY$c.FILTER,
      OVERFLOW$1 = _enums$STYLE_KEY$c.OVERFLOW,
      MIX_BLEND_MODE = _enums$STYLE_KEY$c.MIX_BLEND_MODE,
      TEXT_OVERFLOW$2 = _enums$STYLE_KEY$c.TEXT_OVERFLOW,
      BORDER_TOP_COLOR = _enums$STYLE_KEY$c.BORDER_TOP_COLOR,
      BORDER_BOTTOM_COLOR = _enums$STYLE_KEY$c.BORDER_BOTTOM_COLOR,
      BORDER_LEFT_COLOR = _enums$STYLE_KEY$c.BORDER_LEFT_COLOR,
      BORDER_RIGHT_COLOR = _enums$STYLE_KEY$c.BORDER_RIGHT_COLOR,
      FONT_STYLE$4 = _enums$STYLE_KEY$c.FONT_STYLE,
      COLOR$4 = _enums$STYLE_KEY$c.COLOR,
      VISIBILITY$2 = _enums$STYLE_KEY$c.VISIBILITY,
      POINTER_EVENTS$1 = _enums$STYLE_KEY$c.POINTER_EVENTS,
      BORDER_TOP = _enums$STYLE_KEY$c.BORDER_TOP,
      BORDER_RIGHT = _enums$STYLE_KEY$c.BORDER_RIGHT,
      BORDER_BOTTOM = _enums$STYLE_KEY$c.BORDER_BOTTOM,
      BORDER_LEFT = _enums$STYLE_KEY$c.BORDER_LEFT,
      BACKGROUND_CLIP$2 = _enums$STYLE_KEY$c.BACKGROUND_CLIP,
      FONT_SIZE$8 = _enums$STYLE_KEY$c.FONT_SIZE,
      FONT_FAMILY$4 = _enums$STYLE_KEY$c.FONT_FAMILY,
      LINE_HEIGHT$3 = _enums$STYLE_KEY$c.LINE_HEIGHT,
      TEXT_STROKE_COLOR$4 = _enums$STYLE_KEY$c.TEXT_STROKE_COLOR,
      TEXT_STROKE_WIDTH$3 = _enums$STYLE_KEY$c.TEXT_STROKE_WIDTH,
      TEXT_STROKE_OVER$3 = _enums$STYLE_KEY$c.TEXT_STROKE_OVER,
      _enums$UPDATE_KEY$2 = enums.UPDATE_KEY,
      UPDATE_NODE$2 = _enums$UPDATE_KEY$2.UPDATE_NODE,
      UPDATE_FOCUS$1 = _enums$UPDATE_KEY$2.UPDATE_FOCUS,
      UPDATE_STYLE$1 = _enums$UPDATE_KEY$2.UPDATE_STYLE,
      UPDATE_OVERWRITE = _enums$UPDATE_KEY$2.UPDATE_OVERWRITE,
      UPDATE_KEYS$1 = _enums$UPDATE_KEY$2.UPDATE_KEYS,
      UPDATE_CONFIG$2 = _enums$UPDATE_KEY$2.UPDATE_CONFIG,
      UPDATE_REMOVE_DOM = _enums$UPDATE_KEY$2.UPDATE_REMOVE_DOM,
      STRUCT_HAS_MASK = enums.STRUCT_KEY.STRUCT_HAS_MASK,
      _enums$NODE_KEY$3 = enums.NODE_KEY,
      NODE_TAG_NAME = _enums$NODE_KEY$3.NODE_TAG_NAME,
      NODE_CACHE_STYLE = _enums$NODE_KEY$3.NODE_CACHE_STYLE,
      NODE_CURRENT_STYLE$1 = _enums$NODE_KEY$3.NODE_CURRENT_STYLE,
      NODE_COMPUTED_STYLE$1 = _enums$NODE_KEY$3.NODE_COMPUTED_STYLE,
      NODE_STYLE$1 = _enums$NODE_KEY$3.NODE_STYLE,
      NODE_STRUCT$1 = _enums$NODE_KEY$3.NODE_STRUCT,
      NODE_OPACITY$1 = _enums$NODE_KEY$3.NODE_OPACITY,
      NODE_MATRIX_EVENT$2 = _enums$NODE_KEY$3.NODE_MATRIX_EVENT,
      NODE_MATRIX$1 = _enums$NODE_KEY$3.NODE_MATRIX,
      NODE_LIMIT_CACHE$1 = _enums$NODE_KEY$3.NODE_LIMIT_CACHE,
      NODE_HAS_CONTENT = _enums$NODE_KEY$3.NODE_HAS_CONTENT,
      NODE_REFRESH_LV = _enums$NODE_KEY$3.NODE_REFRESH_LV,
      NODE_CACHE$1 = _enums$NODE_KEY$3.NODE_CACHE,
      NODE_CACHE_TOTAL = _enums$NODE_KEY$3.NODE_CACHE_TOTAL,
      NODE_CACHE_FILTER = _enums$NODE_KEY$3.NODE_CACHE_FILTER,
      NODE_CACHE_MASK = _enums$NODE_KEY$3.NODE_CACHE_MASK,
      NODE_CACHE_OVERFLOW = _enums$NODE_KEY$3.NODE_CACHE_OVERFLOW,
      NODE_IS_DESTROYED$1 = _enums$NODE_KEY$3.NODE_IS_DESTROYED,
      NODE_DEFS_CACHE$3 = _enums$NODE_KEY$3.NODE_DEFS_CACHE,
      NODE_DOM_PARENT$2 = _enums$NODE_KEY$3.NODE_DOM_PARENT,
      NODE_IS_INLINE = _enums$NODE_KEY$3.NODE_IS_INLINE,
      NODE_PERSPECTIVE_MATRIX = _enums$NODE_KEY$3.NODE_PERSPECTIVE_MATRIX,
      NODE_IS_MASK = _enums$NODE_KEY$3.NODE_IS_MASK,
      NODE_VIRTUAL_DOM$1 = _enums$NODE_KEY$3.NODE_VIRTUAL_DOM,
      NODE_CACHE_AS_BITMAP = _enums$NODE_KEY$3.NODE_CACHE_AS_BITMAP;
  var AUTO$4 = o.AUTO,
      PX$6 = o.PX,
      PERCENT$7 = o.PERCENT,
      INHERIT$4 = o.INHERIT,
      NUMBER$5 = o.NUMBER,
      REM$7 = o.REM,
      VW$7 = o.VW,
      VH$7 = o.VH,
      VMAX$7 = o.VMAX,
      VMIN$7 = o.VMIN,
      DEG$2 = o.DEG;
  var int2rgba$2 = util.int2rgba,
      rgba2int$3 = util.rgba2int,
      joinArr$2 = util.joinArr,
      isNil$6 = util.isNil;
  var calRelative$1 = css.calRelative;
  var GEOM$4 = o$2.GEOM;
  var mbmName$1 = mbm.mbmName,
      isValidMbm$1 = mbm.isValidMbm;
  var point2d$1 = mx.point2d;
  var contain = o$3.contain,
      NONE = o$3.NONE,
      TF = o$3.TRANSFORM,
      REFLOW = o$3.REFLOW,
      REPAINT$1 = o$3.REPAINT,
      TX = o$3.TRANSLATE_X,
      TY = o$3.TRANSLATE_Y,
      TZ = o$3.TRANSLATE_Z;

  function getFirstEmptyInlineWidth(xom) {
    var n = 0;
    var flowChildren = xom.flowChildren;
    var length = flowChildren.length;

    for (var i = 0; i < length; i++) {
      var child = flowChildren[i];

      if (child instanceof Xom$1 || child instanceof Component$1 && child.shadowRoot instanceof Xom$1) {
        if (child.flowChildren.length) {
          n += getFirstEmptyInlineWidth(child);
          break;
        } else if (child.__config[NODE_IS_INLINE]) {
          n += child.outerWidth;
        }
      } else {
        break;
      }
    }

    return n;
  }

  function getLastEmptyInlineWidth(xom) {
    var n = 0;
    var flowChildren = xom.flowChildren;
    var length = flowChildren.length;

    for (var i = length - 1; i >= 0; i--) {
      var child = flowChildren[i];

      if (child instanceof Xom$1 || child instanceof Component$1 && child.shadowRoot instanceof Xom$1) {
        if (child.flowChildren.length) {
          n += getLastEmptyInlineWidth(child);
          break;
        } else {
          n += child.outerWidth;
        }
      } else {
        break;
      }
    }

    return n;
  }

  var Xom$1 = /*#__PURE__*/function (_Node) {
    _inherits(Xom, _Node);

    var _super = _createSuper(Xom);

    function Xom(tagName) {
      var _this;

      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Xom);

      _this = _super.call(this); // 构建工具中都是arr，手写可能出现hash情况

      if (Array.isArray(props)) {
        _this.props = util.arr2hash(props);
      } else {
        _this.props = props;
      }

      _this.__tagName = tagName;
      _this.__style = _this.props.style || {}; // style被解析后的k-v形式

      _this.__currentStyle = {}; // 动画过程中绘制一开始会merge动画样式

      _this.__computedStyle = {}; // 类似getComputedStyle()将currentStyle计算好数值赋给

      _this.__listener = {};
      Object.keys(_this.props).forEach(function (k) {
        var v = _this.props[k];

        if (/^on[a-zA-Z]/.test(k)) {
          k = k.slice(2).toLowerCase();
          _this.listener[k] = v;
        }
      });
      _this.__animationList = [];
      _this.__loadBgi = {
        // 刷新回调函数，用以destroy取消用
        cb: function cb() {}
      };
      _this.__cacheStyle = {}; // 是否缓存重新计算computedStyle的样式key

      _this.__cacheDefs = []; // svg专用，缓存渲染时使用已有的defs，diff过程用，否则会defs被清空

      var isClip = _this.__isClip = !!_this.props.clip;
      var isMask = _this.__isMask = isClip || !!_this.props.mask;
      var config = _this.__config;
      config[NODE_TAG_NAME] = tagName;
      config[NODE_CACHE_STYLE] = _this.__cacheStyle;
      config[NODE_CURRENT_STYLE$1] = _this.__currentStyle;
      config[NODE_COMPUTED_STYLE$1] = _this.__computedStyle;
      config[NODE_REFRESH_LV] = REFLOW;
      config[NODE_STYLE$1] = _this.__style;
      config[NODE_MATRIX$1] = [];
      config[NODE_MATRIX_EVENT$2] = [];
      config[NODE_DEFS_CACHE$3] = _this.__cacheDefs;
      config[NODE_IS_MASK] = isMask;
      _this.__frameAnimateList = [];
      _this.__contentBoxList = []; // inline存储内容用
      // this.__json domApi需要获取生成时的json引用，builder过程添加，如appendChild时json也需要跟着变更

      config[NODE_CACHE_AS_BITMAP] = _this.__cacheAsBitmap = !!_this.props.cacheAsBitmap;
      return _this;
    }

    _createClass(Xom, [{
      key: "__structure",
      value: function __structure(i, lv, j) {
        var res = _get(_getPrototypeOf(Xom.prototype), "__structure", this).call(this, i, lv, j);

        if (this.__hasMask) {
          res[STRUCT_HAS_MASK] = this.__hasMask;
        }

        this.__config[NODE_STRUCT$1] = res;
        return res;
      } // 设置margin/padding的实际值，layout时执行，inline的垂直方向仍然计算值，但在布局时被忽略

    }, {
      key: "__mp",
      value: function __mp(currentStyle, computedStyle, w) {
        var _this2 = this;

        ['Top', 'Right', 'Bottom', 'Left'].forEach(function (k) {
          var a = STYLE_KEY$5[style2Upper$2('margin' + k)];
          var b = STYLE_KEY$5[style2Upper$2('padding' + k)];
          computedStyle[a] = _this2.__mpWidth(currentStyle[a], w);
          computedStyle[b] = _this2.__mpWidth(currentStyle[b], w);
        });
      }
    }, {
      key: "__mpWidth",
      value: function __mpWidth(mp, w) {
        if (mp[1] === PX$6) {
          return mp[0];
        } else if (mp[1] === PERCENT$7) {
          return mp[0] * w * 0.01;
        } else if (mp[1] === REM$7) {
          return mp[0] * this.root.computedStyle[FONT_SIZE$8];
        } else if (mp[1] === VW$7) {
          return mp[0] * this.root.width * 0.01;
        } else if (mp[1] === VH$7) {
          return mp[0] * this.root.height * 0.01;
        } else if (mp[1] === VMAX$7) {
          return mp[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (mp[1] === VMIN$7) {
          return mp[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        return 0;
      } // dom常用的几种尺寸赋值

    }, {
      key: "__ioSize",
      value: function __ioSize(w, h) {
        var computedStyle = this.computedStyle;
        this.__clientWidth = w += computedStyle[PADDING_LEFT$2] + computedStyle[PADDING_RIGHT$1];
        this.__clientHeight = h += computedStyle[PADDING_TOP$1] + computedStyle[PADDING_BOTTOM$1];
        this.__offsetWidth = w += computedStyle[BORDER_LEFT_WIDTH$3] + computedStyle[BORDER_RIGHT_WIDTH$2];
        this.__offsetHeight = h += computedStyle[BORDER_TOP_WIDTH$2] + computedStyle[BORDER_BOTTOM_WIDTH$2];
        this.__outerWidth = w + computedStyle[MARGIN_LEFT$1] + computedStyle[MARGIN_RIGHT$1];
        this.__outerHeight = h + computedStyle[MARGIN_TOP] + computedStyle[MARGIN_BOTTOM];
      } // 换算margin/padding为px单位，onlyFixedValue只考虑绝对值，不考虑百分比等

    }, {
      key: "__calMp",
      value: function __calMp(v, w, onlyFixedValue) {
        var n = 0;

        if (v[1] === PX$6) {
          n += v[0];
        } else if (v[1] === PERCENT$7 && !onlyFixedValue) {
          v[0] *= w * 0.01;
          v[1] = PX$6;
          n += v[0];
        } else if (v[1] === REM$7) {
          n += v[0] * this.root.computedStyle[FONT_SIZE$8];
        } else if (v[1] === VW$7) {
          n += v[0] * this.root.width * 0.01;
        } else if (v[1] === VH$7) {
          n += v[0] * this.root.height * 0.01;
        } else if (v[1] === VMAX$7) {
          n += v[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (v[1] === VMIN$7) {
          n += v[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        return n;
      } // 为basis的b/min/max添加mpb，只有当b未显示指定等于w/content时才加，同时返回mpb值

    }, {
      key: "__addMp",
      value: function __addMp(isDirectionRow, w, currentStyle, res, isDirectItem) {
        var marginLeft = currentStyle[MARGIN_LEFT$1],
            marginTop = currentStyle[MARGIN_TOP],
            marginRight = currentStyle[MARGIN_RIGHT$1],
            marginBottom = currentStyle[MARGIN_BOTTOM],
            paddingLeft = currentStyle[PADDING_LEFT$2],
            paddingTop = currentStyle[PADDING_TOP$1],
            paddingRight = currentStyle[PADDING_RIGHT$1],
            paddingBottom = currentStyle[PADDING_BOTTOM$1],
            borderTopWidth = currentStyle[BORDER_TOP_WIDTH$2],
            borderRightWidth = currentStyle[BORDER_RIGHT_WIDTH$2],
            borderBottomWidth = currentStyle[BORDER_BOTTOM_WIDTH$2],
            borderLeftWidth = currentStyle[BORDER_LEFT_WIDTH$3];

        if (isDirectionRow) {
          var mp = this.__calMp(marginLeft, w, !isDirectItem) + this.__calMp(marginRight, w, !isDirectItem) + this.__calMp(paddingLeft, w, !isDirectItem) + this.__calMp(paddingRight, w, !isDirectItem);

          if (borderLeftWidth[1] === PX$6) {
            mp += borderLeftWidth[0];
          } else if (borderLeftWidth[1] === REM$7) {
            mp += borderLeftWidth[0] * this.root.computedStyle[FONT_SIZE$8];
          } else if (borderLeftWidth[1] === VW$7) {
            mp += borderLeftWidth[0] * this.root.width * 0.01;
          } else if (borderLeftWidth[1] === VH$7) {
            mp += borderLeftWidth[0] * this.root.height * 0.01;
          } else if (borderLeftWidth[1] === VMAX$7) {
            mp += borderLeftWidth[0] * Math.max(this.root.width, this.root.height) * 0.01;
          } else if (borderLeftWidth[1] === VMIN$7) {
            mp += borderLeftWidth[0] * Math.min(this.root.width, this.root.height) * 0.01;
          }

          if (borderRightWidth[1] === PX$6) {
            mp += borderRightWidth[0];
          } else if (borderRightWidth[1] === REM$7) {
            mp += borderRightWidth[0] * this.root.computedStyle[FONT_SIZE$8];
          } else if (borderRightWidth[1] === VW$7) {
            mp += borderRightWidth[0] * this.root.width * 0.01;
          } else if (borderRightWidth[1] === VH$7) {
            mp += borderRightWidth[0] * this.root.height * 0.01;
          } else if (borderRightWidth[1] === VMAX$7) {
            mp += borderRightWidth[0] * Math.max(this.root.width, this.root.height) * 0.01;
          } else if (borderRightWidth[1] === VMIN$7) {
            mp += borderRightWidth[0] * Math.min(this.root.width, this.root.height) * 0.01;
          }

          res = res.map(function (item) {
            return item + mp;
          });
        } else {
          var _mp = this.__calMp(marginTop, w, !isDirectItem) + this.__calMp(marginBottom, w, !isDirectItem) + this.__calMp(paddingTop, w, !isDirectItem) + this.__calMp(paddingBottom, w, !isDirectItem);

          if (borderTopWidth[1] === PX$6) {
            _mp += borderTopWidth[0];
          } else if (borderTopWidth[1] === REM$7) {
            _mp += borderTopWidth[0] * this.root.computedStyle[FONT_SIZE$8];
          } else if (borderTopWidth[1] === VW$7) {
            _mp += borderTopWidth[0] * this.root.width * 0.01;
          } else if (borderTopWidth[1] === VH$7) {
            _mp += borderTopWidth[0] * this.root.height * 0.01;
          } else if (borderTopWidth[1] === VMAX$7) {
            _mp += borderTopWidth[0] * Math.max(this.root.width, this.root.height) * 0.01;
          } else if (borderTopWidth[1] === VMIN$7) {
            _mp += borderTopWidth[0] * Math.min(this.root.width, this.root.height) * 0.01;
          }

          if (borderBottomWidth[1] === PX$6) {
            _mp += borderBottomWidth[0];
          } else if (borderBottomWidth[1] === REM$7) {
            _mp += borderBottomWidth[0] * this.root.computedStyle[FONT_SIZE$8];
          } else if (borderBottomWidth[1] === VW$7) {
            _mp += borderBottomWidth[0] * this.root.width * 0.01;
          } else if (borderBottomWidth[1] === VH$7) {
            _mp += borderBottomWidth[0] * this.root.height * 0.01;
          } else if (borderBottomWidth[1] === VMAX$7) {
            _mp += borderBottomWidth[0] * Math.max(this.root.width, this.root.height) * 0.01;
          } else if (borderBottomWidth[1] === VMIN$7) {
            _mp += borderBottomWidth[0] * Math.min(this.root.width, this.root.height) * 0.01;
          }

          res = res.map(function (item) {
            return item + _mp;
          });
        }

        return res;
      } // absolute且无尺寸时，isVirtual标明先假布局一次计算尺寸，还有flex列计算时
      // fromAbs为absolute节点特有省略计算标识，本节点是abs时真正布局传入

    }, {
      key: "__layout",
      value: function __layout(data, isVirtual, fromAbs) {
        css.computeReflow(this, this.isShadowRoot);
        var w = data.w;
        var isDestroyed = this.isDestroyed,
            currentStyle = this.currentStyle,
            computedStyle = this.computedStyle,
            __config = this.__config;
        var display = computedStyle[DISPLAY$2];
        var width = currentStyle[WIDTH$4],
            position = currentStyle[POSITION$1];
        this.clearCache();
        this.__layoutData = {
          x: data.x,
          y: data.y,
          w: data.w,
          h: data.h,
          lx: data.lx
        };
        __config[NODE_REFRESH_LV] = REFLOW;
        __config[NODE_LIMIT_CACHE$1] = false;
        __config[NODE_IS_INLINE] = false; // 防止display:none不统计mask，isVirtual忽略，abs布局后续会真正来走一遍

        if (!isVirtual) {
          var next = this.next; // mask关系只有布局才会变更，普通渲染关系不会改变，clip也是mask的一种

          if (!this.isMask && next && next.isMask) {
            var count = 0;

            while (next) {
              if (next.isMask) {
                count++;
              } else {
                break;
              }

              next = next.next;
            }

            this.__hasMask = count;
          }
        }

        this.__ox = this.__oy = 0;

        if (isDestroyed || display === 'none') {
          this.__width = this.__height = this.__clientWidth = this.__clientHeight = this.__offsetWidth = this.__offsetHeight = this.__outerWidth = this.__outerHeight = computedStyle[WIDTH$4] = computedStyle[HEIGHT$3] = 0;
          this.__x = data.x;
          this.__y = data.y;

          this.__layoutNone();

          return;
        } // margin/padding在abs前已经计算过了，无需二次计算


        if (!fromAbs) {
          this.__mp(currentStyle, computedStyle, w);
        } // inline的width/height无效，其它有效


        if (width[1] !== AUTO$4) {
          if (this.__isRealInline() && currentStyle[DISPLAY$2] === 'inline') {
            width[0] = 0;
            width[1] = AUTO$4;
          } else {
            switch (width[1]) {
              case PX$6:
                w = width[0];
                break;

              case PERCENT$7:
                w *= width[0] * 0.01;
                break;

              case REM$7:
                w = width[0] * this.root.computedStyle[FONT_SIZE$8];
                break;

              case VW$7:
                w = width[0] * this.root.width * 0.01;
                break;

              case VH$7:
                w = width[0] * this.root.height * 0.01;
                break;

              case VMAX$7:
                w = width[0] * Math.max(this.root.width, this.root.height) * 0.01;
                break;

              case VMIN$7:
                w = width[0] * Math.min(this.root.width, this.root.height) * 0.01;
                break;
            }
          }
        }

        var lineClampCount = 0; // 4种布局，默认block，inlineBlock基本可以复用inline逻辑，除了尺寸

        if (display === 'flex') {
          this.__layoutFlex(data, isVirtual);
        } else if (display === 'inlineBlock' || display === 'inline-block') {
          lineClampCount = this.__layoutInline(data, isVirtual);
        } else if (display === 'inline') {
          lineClampCount = this.__layoutInline(data, isVirtual, true);
        } else {
          this.__layoutBlock(data, isVirtual);
        } // relative渲染时做偏移，百分比基于父元素，若父元素没有定高则为0


        if (position === 'relative') {
          var top = currentStyle[TOP$1],
              right = currentStyle[RIGHT],
              bottom = currentStyle[BOTTOM$1],
              left = currentStyle[LEFT];
          var parent = this.parent;

          if (top[1] !== AUTO$4) {
            var n = calRelative$1(currentStyle, TOP$1, top, parent);

            this.__offsetY(n);

            computedStyle[TOP$1] = n;
            computedStyle[BOTTOM$1] = 'auto';
          } else if (bottom[1] !== AUTO$4) {
            var _n = calRelative$1(currentStyle, BOTTOM$1, bottom, parent);

            this.__offsetY(-_n);

            computedStyle[BOTTOM$1] = _n;
            computedStyle[TOP$1] = 'auto';
          } else {
            computedStyle[TOP$1] = computedStyle[BOTTOM$1] = 'auto';
          }

          if (left[1] !== AUTO$4) {
            var _n2 = calRelative$1(currentStyle, LEFT, left, parent, true);

            this.__offsetX(_n2);

            computedStyle[LEFT] = _n2;
            computedStyle[RIGHT] = 'auto';
          } else if (right[1] !== AUTO$4) {
            var _n3 = calRelative$1(currentStyle, RIGHT, right, parent, true);

            this.__offsetX(-_n3);

            computedStyle[RIGHT] = _n3;
            computedStyle[LEFT] = 'auto';
          } else {
            computedStyle[LEFT] = computedStyle[RIGHT] = 'auto';
          }
        } else if (position !== 'absolute') {
          computedStyle[TOP$1] = computedStyle[BOTTOM$1] = computedStyle[LEFT] = computedStyle[RIGHT] = 'auto';
        } // 计算结果存入computedStyle和6个坐标，inline在其inlineSize特殊处理


        var x = this.__sx = this.x + this.ox;
        var y = this.__sy = this.y + this.oy;

        if (!__config[NODE_IS_INLINE]) {
          x = this.__sx1 = x + computedStyle[MARGIN_LEFT$1];
          x = this.__sx2 = x + computedStyle[BORDER_LEFT_WIDTH$3];
          x = this.__sx3 = x + computedStyle[PADDING_LEFT$2];
          x = this.__sx4 = x + this.width;
          x = this.__sx5 = x + computedStyle[PADDING_RIGHT$1];
          this.__sx6 = x + computedStyle[BORDER_RIGHT_WIDTH$2];
          y = this.__sy1 = y + computedStyle[MARGIN_TOP];
          y = this.__sy2 = y + computedStyle[BORDER_TOP_WIDTH$2];
          y = this.__sy3 = y + computedStyle[PADDING_TOP$1];
          y = this.__sy4 = y + this.height;
          y = this.__sy5 = y + computedStyle[PADDING_BOTTOM$1];
          this.__sy6 = y + computedStyle[BORDER_BOTTOM_WIDTH$2];
        }

        computedStyle[WIDTH$4] = this.width;
        computedStyle[HEIGHT$3] = this.height; // abs布局的不执行，在__layoutAbs末尾做，防止未布局没有尺寸从而动画计算错误

        if (!fromAbs) {
          this.__execAr();
        }

        return lineClampCount;
      }
    }, {
      key: "__execAr",
      value: function __execAr() {
        // 动态json引用时动画暂存，第一次布局时处理这些动画到root的animateController上
        var ar = this.__animateRecords;

        if (ar) {
          this.__animateRecords = null; // parse没有dom时，animate的target引用都是json，vd后生成需重新赋值

          ar.list.forEach(function (item) {
            if (item.target.vd instanceof Xom) {
              item.target = item.target.vd;
            }
          });
          var ac = ar.controller || this.root.animateController; // 不自动播放进入记录列表，初始化并等待手动调用

          if (ar.options && ar.options.autoPlay === false) {
            ac.__records2 = ac.__records2.concat(ar.list);
            ac.init(ac.__records2, ac.list2);
          } else {
            ac.__records = ac.__records.concat(ar.list);

            ac.__playAuto();
          }
        }
      }
    }, {
      key: "__layoutNone",
      value: function __layoutNone() {
        var computedStyle = this.computedStyle;
        computedStyle[DISPLAY$2] = 'none';
        computedStyle[MARGIN_TOP] = computedStyle[MARGIN_RIGHT$1] = computedStyle[MARGIN_BOTTOM] = computedStyle[MARGIN_LEFT$1] = computedStyle[PADDING_TOP$1] = computedStyle[PADDING_RIGHT$1] = computedStyle[PADDING_BOTTOM$1] = computedStyle[PADDING_LEFT$2] = 0;
      } // 预先计算是否是固定宽高，布局点位和尺寸考虑margin/border/padding

    }, {
      key: "__preLayout",
      value: function __preLayout(data, isInline) {
        var x = data.x,
            y = data.y,
            w = data.w,
            h = data.h,
            w2 = data.w2,
            h2 = data.h2,
            w3 = data.w3,
            h3 = data.h3,
            lx = data.lx,
            nowrap = data.nowrap,
            lineBoxManager = data.lineBoxManager,
            _data$endSpace = data.endSpace,
            endSpace = _data$endSpace === void 0 ? 0 : _data$endSpace;
        this.__x = x;
        this.__y = y;
        var currentStyle = this.currentStyle,
            computedStyle = this.computedStyle;
        var width = currentStyle[WIDTH$4],
            height = currentStyle[HEIGHT$3];
        var borderTopWidth = computedStyle[BORDER_TOP_WIDTH$2],
            borderRightWidth = computedStyle[BORDER_RIGHT_WIDTH$2],
            borderBottomWidth = computedStyle[BORDER_BOTTOM_WIDTH$2],
            borderLeftWidth = computedStyle[BORDER_LEFT_WIDTH$3],
            marginTop = computedStyle[MARGIN_TOP],
            marginRight = computedStyle[MARGIN_RIGHT$1],
            marginBottom = computedStyle[MARGIN_BOTTOM],
            marginLeft = computedStyle[MARGIN_LEFT$1],
            paddingTop = computedStyle[PADDING_TOP$1],
            paddingRight = computedStyle[PADDING_RIGHT$1],
            paddingBottom = computedStyle[PADDING_BOTTOM$1],
            paddingLeft = computedStyle[PADDING_LEFT$2]; // 除了auto外都是固定宽高度

        var fixedWidth;
        var fixedHeight; // 绝对定位是left+right这种其实等于定义了width，但不能修改原始style，存入特殊变量标识

        if (w2 !== undefined) {
          fixedWidth = true;
          w = w2;
        } // flex时也会用到，子级得出目标主尺寸后按这个来
        else if (w3 !== undefined) {
            fixedWidth = true;
            w = w3;
          } else if (width[1] !== AUTO$4) {
            fixedWidth = true;

            switch (width[1]) {
              case PX$6:
                w = width[0];
                break;

              case PERCENT$7:
                w *= width[0] * 0.01;
                break;

              case REM$7:
                w = width[0] * this.root.computedStyle[FONT_SIZE$8];
                break;

              case VW$7:
                w = width[0] * this.root.width * 0.01;
                break;

              case VH$7:
                w = width[0] * this.root.height * 0.01;
                break;

              case VMAX$7:
                w = width[0] * Math.max(this.root.width, this.root.height) * 0.01;
                break;

              case VMIN$7:
                w = width[0] * Math.min(this.root.width, this.root.height) * 0.01;
                break;
            }
          }

        if (h2 !== undefined) {
          fixedHeight = true;
          h = h2;
        } else if (h3 !== undefined) {
          fixedHeight = true;
          h = h3;
        } else if (height[1] !== AUTO$4) {
          fixedHeight = true;

          switch (height[1]) {
            case PX$6:
              h = height[0];
              break;

            case PERCENT$7:
              h *= height[0] * 0.01;
              break;

            case REM$7:
              h = height[0] * this.root.computedStyle[FONT_SIZE$8];
              break;

            case VW$7:
              h = height[0] * this.root.width * 0.01;
              break;

            case VH$7:
              h = height[0] * this.root.height * 0.01;
              break;

            case VMAX$7:
              h = height[0] * Math.max(this.root.width, this.root.height) * 0.01;
              break;

            case VMIN$7:
              h = height[0] * Math.min(this.root.width, this.root.height) * 0.01;
              break;
          }
        } // margin/padding/border影响x和y和尺寸，注意inline的y不受mpb影响


        x += borderLeftWidth + marginLeft + paddingLeft;
        data.x = x;

        if (!isInline) {
          y += borderTopWidth + marginTop + paddingTop;
        }

        data.y = y; // inline的w/h很特殊，需不考虑inline自身水平的mpb以便换行，因为mpb只在首尾行生效，所以首尾需特殊处理中间忽略
        // 当嵌套inline时更加复杂，假如inline有尾部mpb，最后一行需考虑，如果此inline是父的最后一个且父有mpb需叠加

        var selfEndSpace = 0;

        if (isInline) {
          selfEndSpace = paddingRight + borderRightWidth + marginRight;
        } // 传入w3/h3时，flex的item已知目标主尺寸，需减去mpb，其一定是block和inline互斥


        if (!isInline) {
          if (width[1] === AUTO$4 || w3 !== undefined) {
            w -= borderLeftWidth + borderRightWidth + marginLeft + marginRight + paddingLeft + paddingRight;
          }

          if (height[1] === AUTO$4 || h3 !== undefined) {
            h -= borderTopWidth + borderBottomWidth + marginTop + marginBottom + paddingTop + paddingBottom;
          }
        }

        return {
          fixedWidth: fixedWidth,
          fixedHeight: fixedHeight,
          x: x,
          y: y,
          w: w,
          h: h,
          lx: lx,
          lineBoxManager: lineBoxManager,
          nowrap: nowrap,
          endSpace: endSpace,
          selfEndSpace: selfEndSpace
        };
      } // 处理margin:xx auto居中对齐或右对齐

    }, {
      key: "__marginAuto",
      value: function __marginAuto(style, data) {
        var position = style[POSITION$1],
            display = style[DISPLAY$2],
            marginLeft = style[MARGIN_LEFT$1],
            marginRight = style[MARGIN_RIGHT$1],
            width = style[WIDTH$4];

        if (position !== 'absolute' && (display === 'block' || display === 'flex') && (width[1] !== AUTO$4 || this.tagName === 'img') && marginLeft[1] === AUTO$4 && marginRight[1] === AUTO$4) {
          var ow = this.outerWidth;

          if (ow < data.w) {
            this.__offsetX((data.w - ow) * 0.5, true);
          }
        }
      }
    }, {
      key: "__calMatrix",
      value: function __calMatrix(lv, __cacheStyle, currentStyle, computedStyle, __config, sx1, sy1, offsetWidth, offsetHeight) {
        var _this3 = this;

        if (__config[NODE_IS_INLINE]) {
          computedStyle[TRANSFORM_ORIGIN$4] = [sx1, sy1];
          return __cacheStyle[MATRIX$3] = mx.identity();
        }

        var matrixCache = __cacheStyle[MATRIX$3]; // tx/ty变化特殊优化

        if (matrixCache && lv < REFLOW && !contain(lv, TF)) {
          var x = 0,
              y = 0,
              z = 0;

          if (contain(lv, TX)) {
            var v = currentStyle[TRANSLATE_X$4];

            if (isNil$6(v)) {
              v = 0;
            } else if (v[1] === PERCENT$7) {
              v = v[0] * this.offsetWidth * 0.01;
            } else if (v[1] === REM$7) {
              v = v[0] * this.root.computedStyle[FONT_SIZE$8];
            } else if (v[1] === VW$7) {
              v = v[0] * this.root.width * 0.01;
            } else if (v[1] === VH$7) {
              v = v[0] * this.root.height * 0.01;
            } else if (v[1] === VMAX$7) {
              v = v[0] * Math.max(this.root.width, this.root.height) * 0.01;
            } else if (v[1] === VMIN$7) {
              v = v[0] * Math.min(this.root.width, this.root.height) * 0.01;
            } else {
              v = v[0];
            }

            x = v - (computedStyle[TRANSLATE_X$4] || 0);
            computedStyle[TRANSLATE_X$4] = v;
            computedStyle[TRANSFORM$3][12] += x;
            matrixCache[12] += x;
          }

          if (contain(lv, TY)) {
            var _v = currentStyle[TRANSLATE_Y$4];

            if (isNil$6(_v)) {
              _v = 0;
            } else if (_v[1] === PERCENT$7) {
              _v = _v[0] * this.offsetHeight * 0.01;
            } else if (_v[1] === REM$7) {
              _v = _v[0] * this.root.computedStyle[FONT_SIZE$8];
            } else if (_v[1] === VW$7) {
              _v = _v[0] * this.root.width * 0.01;
            } else if (_v[1] === VH$7) {
              _v = _v[0] * this.root.height * 0.01;
            } else if (_v[1] === VMAX$7) {
              _v = _v[0] * Math.max(this.root.width, this.root.height) * 0.01;
            } else if (_v[1] === VMIN$7) {
              _v = _v[0] * Math.min(this.root.width, this.root.height) * 0.01;
            } else {
              _v = _v[0];
            }

            y = _v - (computedStyle[TRANSLATE_Y$4] || 0);
            computedStyle[TRANSLATE_Y$4] = _v;
            computedStyle[TRANSFORM$3][13] += y;
            matrixCache[13] += y;
          }

          if (contain(lv, TZ)) {
            var _v2 = currentStyle[TRANSLATE_Z$4];

            if (isNil$6(_v2)) {
              _v2 = 0;
            } else if (_v2[1] === PERCENT$7) {
              _v2 = _v2[0] * this.offsetWidth * 0.01;
            } else if (_v2[1] === REM$7) {
              _v2 = _v2[0] * this.root.computedStyle[FONT_SIZE$8];
            } else if (_v2[1] === VW$7) {
              _v2 = _v2[0] * this.root.width * 0.01;
            } else if (_v2[1] === VH$7) {
              _v2 = _v2[0] * this.root.height * 0.01;
            } else if (_v2[1] === VMAX$7) {
              _v2 = _v2[0] * Math.max(this.root.width, this.root.height) * 0.01;
            } else if (_v2[1] === VMIN$7) {
              _v2 = _v2[0] * Math.min(this.root.width, this.root.height) * 0.01;
            } else {
              _v2 = _v2[0];
            }

            z = _v2 - (computedStyle[TRANSLATE_Z$4] || 0);
            computedStyle[TRANSLATE_Z$4] = _v2;
            computedStyle[TRANSFORM$3][14] += z;
            matrixCache[14] += z;
          }

          __cacheStyle[MATRIX$3] = matrixCache;
        } // 先根据cache计算需要重新计算的computedStyle
        else {
            if (sx1 === undefined) {
              sx1 = this.__sx1;
              sy1 = this.__sy1;
              offsetWidth = this.offsetWidth;
              offsetHeight = this.offsetHeight;
            }

            if (__cacheStyle[TRANSFORM_ORIGIN$4] === undefined) {
              __cacheStyle[TRANSFORM_ORIGIN$4] = true;
              matrixCache = null;
              computedStyle[TRANSFORM_ORIGIN$4] = transform$1.calOrigin(currentStyle[TRANSFORM_ORIGIN$4], offsetWidth, offsetHeight, this.root);
            }

            if (__cacheStyle[TRANSFORM$3] === undefined || __cacheStyle[TRANSLATE_X$4] === undefined || __cacheStyle[TRANSLATE_Y$4] === undefined || __cacheStyle[TRANSLATE_Z$4] === undefined || __cacheStyle[ROTATE_X$2] === undefined || __cacheStyle[ROTATE_Y$2] === undefined || __cacheStyle[ROTATE_Z$2] === undefined || __cacheStyle[ROTATE_3D$3] === undefined || __cacheStyle[SCALE_X$3] === undefined || __cacheStyle[SCALE_Y$3] === undefined || __cacheStyle[SCALE_Z$2] === undefined || __cacheStyle[SKEW_X$2] === undefined || __cacheStyle[SKEW_Y$2] === undefined) {
              __cacheStyle[TRANSFORM$3] = __cacheStyle[TRANSLATE_X$4] = __cacheStyle[TRANSLATE_Y$4] = __cacheStyle[TRANSLATE_Z$4] = __cacheStyle[ROTATE_X$2] = __cacheStyle[ROTATE_Y$2] = __cacheStyle[ROTATE_Z$2] = __cacheStyle[SCALE_X$3] = __cacheStyle[SCALE_Y$3] = __cacheStyle[SCALE_Z$2] = __cacheStyle[SKEW_X$2] = __cacheStyle[SKEW_Y$2] = true;
              matrixCache = null;
              var matrix; // transform相对于自身

              if (currentStyle[TRANSFORM$3]) {
                matrix = transform$1.calMatrix(currentStyle[TRANSFORM$3], offsetWidth, offsetHeight, this.root);
              } // 没有transform则看是否有扩展的css独立变换属性
              else {
                  var temp = [];
                  [TRANSLATE_X$4, TRANSLATE_Y$4, TRANSLATE_Z$4, ROTATE_X$2, ROTATE_Y$2, ROTATE_Z$2, ROTATE_3D$3, SKEW_X$2, SKEW_Y$2, SCALE_X$3, SCALE_Y$3, SCALE_Z$2].forEach(function (k) {
                    // 删除之前遗留的
                    delete computedStyle[k];
                    var v = currentStyle[k];

                    if (isNil$6(v)) {
                      return;
                    }

                    if (k === ROTATE_3D$3) {
                      computedStyle[k] = [v[0], v[1], v[2], v[3][0]];

                      if (v[3][0] === 0) {
                        return;
                      }

                      temp.push([k, v]);
                      return;
                    }

                    computedStyle[k] = v[0]; // scale为1和其它为0避免计算浪费

                    var isScale = k === SCALE_X$3 || k === SCALE_Y$3 || k === SCALE_Z$2;

                    if (v[0] === 1 && isScale || !isScale && v[0] === 0) {
                      return;
                    }

                    if (v[1] === PERCENT$7) {
                      if (k === TRANSLATE_X$4 || k === TRANSLATE_Z$4) {
                        computedStyle[k] = v[0] * offsetWidth * 0.01;
                      } else if (k === TRANSLATE_Y$4) {
                        computedStyle[k] = v[0] * offsetHeight * 0.01;
                      }
                    } else if (v[1] === REM$7) {
                      if (k === TRANSLATE_X$4 || k === TRANSLATE_Z$4) {
                        computedStyle[k] = v[0] * _this3.root.computedStyle[FONT_SIZE$8];
                      } else if (k === TRANSLATE_Y$4) {
                        computedStyle[k] = v[0] * _this3.root.computedStyle[FONT_SIZE$8];
                      }
                    } else if (v[1] === VW$7) {
                      if (k === TRANSLATE_X$4 || k === TRANSLATE_Z$4) {
                        computedStyle[k] = v[0] * _this3.root.width * 0.01;
                      } else if (k === TRANSLATE_Y$4) {
                        computedStyle[k] = v[0] * _this3.root.width * 0.01;
                      }
                    } else if (v[1] === VH$7) {
                      if (k === TRANSLATE_X$4 || k === TRANSLATE_Z$4) {
                        computedStyle[k] = v[0] * _this3.root.height * 0.01;
                      } else if (k === TRANSLATE_Y$4) {
                        computedStyle[k] = v[0] * _this3.root.height * 0.01;
                      }
                    } else if (v[1] === VMAX$7) {
                      if (k === TRANSLATE_X$4 || k === TRANSLATE_Z$4) {
                        computedStyle[k] = v[0] * Math.max(_this3.root.width, _this3.root.height) * 0.01;
                      } else if (k === TRANSLATE_Y$4) {
                        computedStyle[k] = v[0] * Math.max(_this3.root.width, _this3.root.height) * 0.01;
                      }
                    } else if (v[1] === VMIN$7) {
                      if (k === TRANSLATE_X$4 || k === TRANSLATE_Z$4) {
                        computedStyle[k] = v[0] * Math.min(_this3.root.width, _this3.root.height) * 0.01;
                      } else if (k === TRANSLATE_Y$4) {
                        computedStyle[k] = v[0] * Math.min(_this3.root.width, _this3.root.height) * 0.01;
                      }
                    }

                    temp.push([k, v]);
                  });

                  if (temp.length) {
                    matrix = transform$1.calMatrix(temp, offsetWidth, offsetHeight, this.root);
                  }
                }

              computedStyle[TRANSFORM$3] = matrix || mx.identity();
            }

            if (!matrixCache) {
              var m = computedStyle[TRANSFORM$3];
              var tfo = computedStyle[TRANSFORM_ORIGIN$4].slice(0);
              tfo[0] += sx1 || 0;
              tfo[1] += sy1 || 0;
              matrixCache = __cacheStyle[MATRIX$3] = transform$1.calMatrixByOrigin(m, tfo);
            }
          }

        return matrixCache;
      }
      /**
       * 将currentStyle计算为computedStyle，同时存入cacheStyle可缓存的结果防止无变更重复计算
       * @param renderMode
       * @param ctx
       * @param parent
       * @param __cacheStyle
       * @param currentStyle
       * @param computedStyle
       * @param clientWidth
       * @param clientHeight
       * @param offsetWidth
       * @param offsetHeight
       * @param borderTopWidth
       * @param borderRightWidth
       * @param borderBottomWidth
       * @param borderLeftWidth
       * @param paddingTop
       * @param paddingRight
       * @param paddingBottom
       * @param paddingLeft
       * @param x1
       * @param x2
       * @param x3
       * @param x4
       * @param x5
       * @param x6
       * @param y1
       * @param y2
       * @param y3
       * @param y4
       * @param y5
       * @param y6
       * @returns {*[]}
       * @private
       */

    }, {
      key: "__calCache",
      value: function __calCache(renderMode, ctx, parent, __cacheStyle, currentStyle, computedStyle, clientWidth, clientHeight, offsetWidth, offsetHeight, borderTopWidth, borderRightWidth, borderBottomWidth, borderLeftWidth, paddingTop, paddingRight, paddingBottom, paddingLeft, x1, x2, x3, x4, x5, x6, y1, y2, y3, y4, y5, y6) {
        var _this4 = this;

        var bx1 = x1,
            by1 = y1,
            bx2 = x6,
            by2 = y6;
        var backgroundClip = computedStyle[BACKGROUND_CLIP$2] = currentStyle[BACKGROUND_CLIP$2]; // 默认border-box

        if (backgroundClip === 'paddingBox' || backgroundClip === 'padding-box') {
          bx1 = x2;
          by1 = y2;
          bx2 = x5;
          by2 = y5;
        } else if (backgroundClip === 'contentBox' || backgroundClip === 'content-box') {
          bx1 = x3;
          by1 = y3;
          bx2 = x4;
          by2 = y4;
        }

        var isInline = this.__config[NODE_IS_INLINE];

        if (isInline && !this.contentBoxList.length) {
          isInline = false;
        } // 这些直接赋值的不需要再算缓存


        [OPACITY$3, Z_INDEX$2, BORDER_TOP_STYLE, BORDER_RIGHT_STYLE, BORDER_BOTTOM_STYLE, BORDER_LEFT_STYLE, BACKGROUND_REPEAT, OVERFLOW$1, MIX_BLEND_MODE, TEXT_OVERFLOW$2, BACKGROUND_CLIP$2].forEach(function (k) {
          computedStyle[k] = currentStyle[k];
        });

        if (isNil$6(__cacheStyle[FILTER$3])) {
          __cacheStyle[FILTER$3] = true;

          this.__calFilter(currentStyle, computedStyle);
        }

        if (isNil$6(__cacheStyle[BACKGROUND_POSITION_X$3])) {
          __cacheStyle[BACKGROUND_POSITION_X$3] = true;
          var bgX = currentStyle[BACKGROUND_POSITION_X$3];
          computedStyle[BACKGROUND_POSITION_X$3] = (bgX || []).map(function (item) {
            if (item[1] === PX$6) {
              return item[0];
            }

            if (item[1] === REM$7) {
              return item[0] * _this4.root.computedStyle[FONT_SIZE$8];
            }

            if (item[1] === VW$7) {
              return item[0] * _this4.root.width * 0.01;
            }

            if (item[1] === VH$7) {
              return item[0] * _this4.root.height * 0.01;
            }

            if (item[1] === VMAX$7) {
              return item[0] * Math.max(_this4.root.width, _this4.root.height) * 0.01;
            }

            if (item[1] === VMIN$7) {
              return item[0] * Math.min(_this4.root.width, _this4.root.height) * 0.01;
            }

            if (item[1] === PERCENT$7) {
              return item[0] + '%';
            }
          });
        }

        if (isNil$6(__cacheStyle[BACKGROUND_POSITION_Y$3])) {
          __cacheStyle[BACKGROUND_POSITION_Y$3] = true;
          var bgY = currentStyle[BACKGROUND_POSITION_Y$3];
          computedStyle[BACKGROUND_POSITION_Y$3] = (bgY || []).map(function (item) {
            if (item[1] === PX$6) {
              return item[0];
            }

            if (item[1] === REM$7) {
              return item[0] * _this4.root.computedStyle[FONT_SIZE$8];
            }

            if (item[1] === VW$7) {
              return item[0] * _this4.root.width * 0.01;
            }

            if (item[1] === VH$7) {
              return item[0] * _this4.root.height * 0.01;
            }

            if (item[1] === VMAX$7) {
              return item[0] * Math.max(_this4.root.width, _this4.root.height) * 0.01;
            }

            if (item[1] === VMIN$7) {
              return item[0] * Math.min(_this4.root.width, _this4.root.height) * 0.01;
            }

            if (item[1] === PERCENT$7) {
              return item[0] + '%';
            }
          });
        }

        if (isNil$6(__cacheStyle[BACKGROUND_SIZE$2])) {
          __cacheStyle[BACKGROUND_SIZE$2] = true;
          computedStyle[BACKGROUND_SIZE$2] = (currentStyle[BACKGROUND_SIZE$2] || []).map(function (item) {
            return bg.calBackgroundSize(item, bx2 - bx1, by2 - by1, _this4.root);
          });
        }

        if (isNil$6(__cacheStyle[BACKGROUND_IMAGE$1])) {
          var bgI = computedStyle[BACKGROUND_IMAGE$1] = currentStyle[BACKGROUND_IMAGE$1].slice(0);
          __cacheStyle[BACKGROUND_IMAGE$1] = bgI.map(function (bgi, i) {
            if (!bgi) {
              return null;
            } // 防止隐藏不加载背景图


            if (util.isString(bgi)) {
              var loadBgi = _this4.__loadBgi[i] = _this4.__loadBgi[i] || {};
              var cache = inject.IMG[BACKGROUND_IMAGE$1];

              if (cache && cache.state === inject.LOADED) {
                loadBgi.url = BACKGROUND_IMAGE$1;
                loadBgi.source = cache.source;
                loadBgi.width = cache.width;
                loadBgi.height = cache.height;
              } else if (loadBgi.url !== bgi) {
                // 可能改变导致多次加载，每次清空，成功后还要比对url是否相同
                loadBgi.url = bgi;
                loadBgi.source = null;
                var node = _this4;
                var root = node.root;
                inject.measureImg(bgi, function (data) {
                  // 还需判断url，防止重复加载时老的替换新的，失败不绘制bgi
                  if (data.success && data.url === loadBgi.url && !_this4.isDestroyed) {
                    loadBgi.source = data.source;
                    loadBgi.width = data.width;
                    loadBgi.height = data.height;
                    root.delRefreshTask(loadBgi.cb);
                    root.addRefreshTask(loadBgi.cb = {
                      __before: function __before() {
                        __cacheStyle[BACKGROUND_IMAGE$1] = undefined;
                        var res = {};
                        res[UPDATE_NODE$2] = node;
                        res[UPDATE_FOCUS$1] = REPAINT$1;
                        res[UPDATE_CONFIG$2] = node.__config;

                        root.__addUpdate(node, node.__config, root, root.__config, res);
                      }
                    });
                  }
                }, {
                  ctx: ctx,
                  root: root,
                  width: bx2 - bx1,
                  height: by2 - by1
                });
              }

              return true;
            } else if (!isInline && bgi.k) {
              // gradient在渲染时才生成
              return true;
            }
          });
        }

        if (isNil$6(__cacheStyle[BOX_SHADOW$2])) {
          __cacheStyle[BOX_SHADOW$2] = true;
          computedStyle[BOX_SHADOW$2] = (currentStyle[BOX_SHADOW$2] || []).map(function (item) {
            return item.map(function (item2, i) {
              if (i > 3) {
                return item2;
              }

              var v = item2[0];

              if (item2[1] === PERCENT$7) {
                if (i % 2 === 0) {
                  v *= 0.01 * (bx2 - bx1);
                } else {
                  v *= 0.01 * (by2 - by1);
                }
              } else if (item2[1] === REM$7) {
                v = v * _this4.root.computedStyle[FONT_SIZE$8];
              } else if (item2[1] === VW$7) {
                v = v * _this4.root.width * 0.01;
              } else if (item2[1] === VH$7) {
                v = v * _this4.root.height * 0.01;
              } else if (item2[1] === VMAX$7) {
                v = v * Math.max(_this4.root.width, _this4.root.height) * 0.01;
              } else if (item2[1] === VMIN$7) {
                v = v * Math.min(_this4.root.width, _this4.root.height) * 0.01;
              }

              return v;
            });
          });
        }

        [BACKGROUND_COLOR$1, BORDER_TOP_COLOR, BORDER_RIGHT_COLOR, BORDER_BOTTOM_COLOR, BORDER_LEFT_COLOR].forEach(function (k) {
          if (isNil$6(__cacheStyle[k])) {
            __cacheStyle[k] = int2rgba$2(computedStyle[k] = currentStyle[k][0]);
          }
        }); // 圆角边计算

        if (isNil$6(__cacheStyle[BORDER_TOP_LEFT_RADIUS$1]) || isNil$6(__cacheStyle[BORDER_TOP_RIGHT_RADIUS$1]) || isNil$6(__cacheStyle[BORDER_BOTTOM_RIGHT_RADIUS$1]) || isNil$6(__cacheStyle[BORDER_BOTTOM_LEFT_RADIUS$1])) {
          __cacheStyle[BORDER_TOP_LEFT_RADIUS$1] = __cacheStyle[BORDER_TOP_RIGHT_RADIUS$1] = __cacheStyle[BORDER_BOTTOM_RIGHT_RADIUS$1] = __cacheStyle[BORDER_BOTTOM_LEFT_RADIUS$1] = true; // 非替代的inline计算看contentBox首尾

          if (isInline) {
            border.calBorderRadiusInline(this.contentBoxList, currentStyle, computedStyle, this.root);
          } // 普通block整体计算
          else {
              border.calBorderRadius(offsetWidth, offsetHeight, currentStyle, computedStyle, this.root);
            }
        } // width/style/radius影响border，color不影响渲染缓存


        var btlr = computedStyle[BORDER_TOP_LEFT_RADIUS$1];
        var btrr = computedStyle[BORDER_TOP_RIGHT_RADIUS$1];
        var bbrr = computedStyle[BORDER_BOTTOM_RIGHT_RADIUS$1];
        var bblr = computedStyle[BORDER_BOTTOM_LEFT_RADIUS$1];
        ['Top', 'Right', 'Bottom', 'Left'].forEach(function (k) {
          k = 'border' + k;
          var k2 = STYLE_KEY$5[style2Upper$2(k)];
          var kw = STYLE_KEY$5[style2Upper$2(k + 'Width')];
          var ks = STYLE_KEY$5[style2Upper$2(k + 'Style')]; // width/style变更影响border重新计算

          if (isNil$6(__cacheStyle[kw])) {
            __cacheStyle[kw] = true;
            __cacheStyle[k2] = undefined;
          }

          if (isNil$6(__cacheStyle[ks])) {
            __cacheStyle[ks] = true;
            __cacheStyle[k2] = undefined;
          }

          if (isNil$6(__cacheStyle[k2])) {
            if (k2 === BORDER_TOP) {
              if (borderTopWidth > 0) {
                if (!isInline) {
                  var deg1 = Math.atan(borderTopWidth / borderLeftWidth);
                  var deg2 = Math.atan(borderTopWidth / borderRightWidth);
                  __cacheStyle[k2] = border.calPoints(borderTopWidth, computedStyle[ks], deg1, deg2, x1, x2, x5, x6, y1, y2, y5, y6, 0, btlr, btrr);
                }
              } else {
                __cacheStyle[k2] = [];
              }
            } else if (k2 === BORDER_RIGHT) {
              if (borderRightWidth > 0) {
                if (!isInline) {
                  var _deg = Math.atan(borderRightWidth / borderTopWidth);

                  var _deg2 = Math.atan(borderRightWidth / borderBottomWidth);

                  __cacheStyle[k2] = border.calPoints(borderRightWidth, computedStyle[ks], _deg, _deg2, x1, x2, x5, x6, y1, y2, y5, y6, 1, btrr, bbrr);
                }
              } else {
                __cacheStyle[k2] = [];
              }
            } else if (k2 === BORDER_BOTTOM) {
              if (borderBottomWidth > 0) {
                if (!isInline) {
                  var _deg3 = Math.atan(borderBottomWidth / borderLeftWidth);

                  var _deg4 = Math.atan(borderBottomWidth / borderRightWidth);

                  __cacheStyle[k2] = border.calPoints(borderBottomWidth, computedStyle[ks], _deg3, _deg4, x1, x2, x5, x6, y1, y2, y5, y6, 2, bblr, bbrr);
                }
              } else {
                __cacheStyle[k2] = [];
              }
            } else if (k2 === BORDER_LEFT) {
              if (borderLeftWidth > 0) {
                if (!isInline) {
                  var _deg5 = Math.atan(borderLeftWidth / borderTopWidth);

                  var _deg6 = Math.atan(borderLeftWidth / borderBottomWidth);

                  __cacheStyle[k2] = border.calPoints(borderLeftWidth, computedStyle[ks], _deg5, _deg6, x1, x2, x5, x6, y1, y2, y5, y6, 3, btlr, bblr);
                }
              } else {
                __cacheStyle[k2] = [];
              }
            }
          }
        }); // 强制计算继承性的

        var parentComputedStyle = parent && parent.computedStyle;

        if (currentStyle[FONT_STYLE$4][1] === INHERIT$4) {
          computedStyle[FONT_STYLE$4] = parent ? parentComputedStyle[FONT_STYLE$4] : 'normal';
        } else if (isNil$6(__cacheStyle[FONT_STYLE$4])) {
          computedStyle[FONT_STYLE$4] = currentStyle[FONT_STYLE$4][0];
        }

        __cacheStyle[FONT_STYLE$4] = computedStyle[FONT_STYLE$4];

        if (currentStyle[COLOR$4][1] === INHERIT$4) {
          computedStyle[COLOR$4] = parent ? parentComputedStyle[COLOR$4] : [0, 0, 0, 1];
          __cacheStyle[COLOR$4] = int2rgba$2(computedStyle[COLOR$4]);
        } else if (isNil$6(__cacheStyle[COLOR$4])) {
          computedStyle[COLOR$4] = rgba2int$3(currentStyle[COLOR$4][0]);
          __cacheStyle[COLOR$4] = int2rgba$2(computedStyle[COLOR$4]);
        }

        if (currentStyle[TEXT_STROKE_COLOR$4][1] === INHERIT$4) {
          computedStyle[TEXT_STROKE_COLOR$4] = parent ? parentComputedStyle[TEXT_STROKE_COLOR$4] : [0, 0, 0, 1];
          __cacheStyle[TEXT_STROKE_COLOR$4] = int2rgba$2(computedStyle[TEXT_STROKE_COLOR$4]);
        } else if (isNil$6(__cacheStyle[TEXT_STROKE_COLOR$4])) {
          computedStyle[TEXT_STROKE_COLOR$4] = rgba2int$3(currentStyle[TEXT_STROKE_COLOR$4][0]);
          __cacheStyle[TEXT_STROKE_COLOR$4] = int2rgba$2(computedStyle[TEXT_STROKE_COLOR$4]);
        }

        if (currentStyle[TEXT_STROKE_WIDTH$3][1] === INHERIT$4) {
          computedStyle[TEXT_STROKE_WIDTH$3] = parent ? parentComputedStyle[TEXT_STROKE_WIDTH$3] : 0;
          __cacheStyle[TEXT_STROKE_WIDTH$3] = true;
        } else if (isNil$6(__cacheStyle[TEXT_STROKE_WIDTH$3])) {
          var v = currentStyle[TEXT_STROKE_WIDTH$3];

          if (v[1] === REM$7) {
            v = v[0] * this.root.computedStyle[FONT_SIZE$8];
          } else if (v[1] === VW$7) {
            v = v[0] * this.root.width * 0.01;
          } else if (v[1] === VH$7) {
            v = v[0] * this.root.height * 0.01;
          } else if (v[1] === VMAX$7) {
            v = v[0] * Math.max(this.root.width, this.root.height) * 0.01;
          } else if (v[1] === VMIN$7) {
            v = v[0] * Math.min(this.root.width, this.root.height) * 0.01;
          } else {
            v = v[0];
          }

          computedStyle[TEXT_STROKE_WIDTH$3] = v;
          __cacheStyle[TEXT_STROKE_WIDTH$3] = true;
        }

        if (currentStyle[TEXT_STROKE_OVER$3][1] === INHERIT$4) {
          __cacheStyle[TEXT_STROKE_OVER$3] = computedStyle[TEXT_STROKE_OVER$3] = parent ? parentComputedStyle[TEXT_STROKE_OVER$3] : 'none';
        } else {
          __cacheStyle[TEXT_STROKE_OVER$3] = computedStyle[TEXT_STROKE_OVER$3] = currentStyle[TEXT_STROKE_OVER$3][0];
        }

        if (currentStyle[VISIBILITY$2][1] === INHERIT$4) {
          computedStyle[VISIBILITY$2] = parent ? parentComputedStyle[VISIBILITY$2] : 'visible';
        } else if (isNil$6(__cacheStyle[VISIBILITY$2])) {
          computedStyle[VISIBILITY$2] = currentStyle[VISIBILITY$2][0];
        }

        __cacheStyle[VISIBILITY$2] = computedStyle[VISIBILITY$2];

        if (currentStyle[POINTER_EVENTS$1][1] === INHERIT$4) {
          computedStyle[POINTER_EVENTS$1] = parent ? parentComputedStyle[POINTER_EVENTS$1] : 'auto';
        } else if (isNil$6(__cacheStyle[POINTER_EVENTS$1])) {
          computedStyle[POINTER_EVENTS$1] = currentStyle[POINTER_EVENTS$1][0];
        }

        __cacheStyle[POINTER_EVENTS$1] = computedStyle[POINTER_EVENTS$1];
        this.__bx1 = bx1;
        this.__bx2 = bx2;
        this.__by1 = by1;
        this.__by2 = by2;
        return [bx1, by1, bx2, by2];
      }
    }, {
      key: "__calPerspective",
      value: function __calPerspective(__cacheStyle, currentStyle, computedStyle, __config, sx1, sy1) {
        var rebuild;

        if (isNil$6(__cacheStyle[PERSPECTIVE$3])) {
          __cacheStyle[PERSPECTIVE$3] = true;
          rebuild = true;
          var v = currentStyle[PERSPECTIVE$3];
          var ppt = 0;

          if (v[1] === REM$7) {
            ppt = v[0] * this.root.computedStyle[FONT_SIZE$8];
          } else if (v[1] === VW$7) {
            ppt = v[0] * this.root.width * 0.01;
          } else if (v[1] === VH$7) {
            ppt = v[0] * this.root.height * 0.01;
          } else if (v[1] === VMAX$7) {
            ppt = v[0] * Math.max(this.root.width, this.root.height) * 0.01;
          } else if (v[1] === VMIN$7) {
            ppt = v[0] * Math.min(this.root.width, this.root.height) * 0.01;
          } else {
            ppt = v[0];
          }

          computedStyle[PERSPECTIVE$3] = ppt;
        }

        if (isNil$6(__cacheStyle[PERSPECTIVE_ORIGIN$3])) {
          __cacheStyle[PERSPECTIVE_ORIGIN$3] = true;
          rebuild = true;
          computedStyle[PERSPECTIVE_ORIGIN$3] = transform$1.calOrigin(currentStyle[PERSPECTIVE_ORIGIN$3], this.offsetWidth, this.offsetHeight, this.root);
        }

        if (rebuild) {
          if (sx1 === undefined) {
            sx1 = this.__sx1;
            sy1 = this.__sy1;
          }

          var po = computedStyle[PERSPECTIVE_ORIGIN$3].slice(0);
          po[0] += sx1 || 0;
          po[1] += sy1 || 0;
          __config[NODE_PERSPECTIVE_MATRIX] = transform$1.calPerspectiveMatrix(computedStyle[PERSPECTIVE$3], po);
        }
      }
    }, {
      key: "__calFilter",
      value: function __calFilter(currentStyle, computedStyle) {
        var _this5 = this;

        return computedStyle[FILTER$3] = (currentStyle[FILTER$3] || []).map(function (item) {
          var _item = _slicedToArray(item, 2),
              k = _item[0],
              v = _item[1]; // 部分%单位的滤镜强制使用数字


          if (v[1] === PX$6 || v[1] === DEG$2 || v[1] === PERCENT$7 || v[1] === NUMBER$5) {
            v = v[0];
          } else if (v[1] === REM$7) {
            v = v[0] * _this5.root.computedStyle[FONT_SIZE$8];
          } else if (v[1] === VW$7) {
            v = v[0] * _this5.root.width * 0.01;
          } else if (v[1] === VH$7) {
            v = v[0] * _this5.root.height * 0.01;
          } else if (v[1] === VMAX$7) {
            v = v[0] * Math.max(_this5.root.width, _this5.root.height) * 0.01;
          } else if (v[1] === VMIN$7) {
            v = v[0] * Math.min(_this5.root.width, _this5.root.height) * 0.01;
          }

          return [k, v];
        });
      }
    }, {
      key: "__calContent",
      value: function __calContent(renderMode, lv, currentStyle, computedStyle) {
        if (renderMode === CANVAS$1 || renderMode === WEBGL$1) {
          if (lv < REPAINT$1) {
            return this.__hasContent;
          }

          var visibility = currentStyle[VISIBILITY$2];

          if (visibility !== 'hidden') {
            var bgI = currentStyle[BACKGROUND_IMAGE$1];

            if (Array.isArray(bgI)) {
              for (var i = 0, len = bgI.length; i < len; i++) {
                if (bgI[i]) {
                  return true;
                }
              }
            }

            if (currentStyle[BACKGROUND_COLOR$1][0][3] > 0) {
              var width = computedStyle[WIDTH$4],
                  height = computedStyle[HEIGHT$3],
                  paddingTop = computedStyle[PADDING_TOP$1],
                  paddingRight = computedStyle[PADDING_RIGHT$1],
                  paddingBottom = computedStyle[PADDING_BOTTOM$1],
                  paddingLeft = computedStyle[PADDING_LEFT$2];

              if (width && height || paddingTop || paddingRight || paddingBottom || paddingLeft) {
                return true;
              }
            }

            for (var list = ['Top', 'Right', 'Bottom', 'Left'], _i = 0, _len = list.length; _i < _len; _i++) {
              var k = list[_i];

              if (computedStyle[STYLE_KEY$5[style2Upper$2('border' + k + 'Width')]] > 0 && currentStyle[STYLE_KEY$5[style2Upper$2('border' + k + 'Color')]][0][3] > 0) {
                return true;
              }
            }

            var _bs = currentStyle[BOX_SHADOW$2];

            if (Array.isArray(_bs)) {
              for (var _i2 = 0, _len2 = _bs.length; _i2 < _len2; _i2++) {
                var item = _bs[_i2];

                if (item && (item[2] > 0 || item[3] > 0)) {
                  return true;
                }
              }
            }
          }
        }

        return false;
      }
      /**
       * 渲染基础方法，Dom/Geom公用
       * @param renderMode
       * @param lv
       * @param ctx canvas/svg/webgl共用
       * @param cache 是否是局部根节点缓存模式下的绘制
       * @param dx cache时偏移x
       * @param dy cache时偏移y
       * @return Object
       * x1/x2/x3/x4/y1/y2/y3/y4 坐标
       * break svg判断无变化提前跳出
       * cacheError 离屏申请失败，仅canvas
       * offscreenBlend 无cache时的离屏canvas，仅canvas
       * offscreenFilter 无cache时的离屏canvas，仅canvas
       * offscreenOverflow 无cache时的离屏canvas，仅canvas
       * offscreenMask 无cache时的离屏canvas，仅canvas
       */

    }, {
      key: "render",
      value: function render(renderMode, lv, ctx, cache) {
        var _this6 = this;

        var dx = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var dy = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;
        var isDestroyed = this.isDestroyed,
            root = this.root,
            __config = this.__config;
        var __cache = __config[NODE_CACHE$1];
        var __cacheStyle = __config[NODE_CACHE_STYLE];
        var currentStyle = __config[NODE_CURRENT_STYLE$1];
        var computedStyle = __config[NODE_COMPUTED_STYLE$1]; // 渲染完认为完全无变更，等布局/动画/更新重置

        __config[NODE_REFRESH_LV] = NONE; // >=REPAINT才会进入这里，清空bbox

        this.__bbox = null;

        if (isDestroyed) {
          return {
            isDestroyed: isDestroyed,
            "break": true
          };
        }

        var virtualDom; // svg设置vd上的lv属性标明<REPAINT时应用缓存，初始化肯定没有

        if (renderMode === SVG) {
          virtualDom = __config[NODE_VIRTUAL_DOM$1] = this.__virtualDom = {
            bb: [],
            children: [],
            visibility: 'visible'
          }; // svg mock，每次都生成，每个节点都是局部根，更新时自底向上清除

          if (!__config[NODE_CACHE_TOTAL]) {
            __config[NODE_CACHE_TOTAL] = {
              available: true,
              release: function release() {
                this.available = false;
                delete virtualDom.cache;
              }
            };
          } else if (!__config[NODE_CACHE_TOTAL].available) {
            __config[NODE_CACHE_TOTAL].available = true;
          }
        }

        var display = computedStyle[DISPLAY$2]; // canvas返回信息，svg已经初始化好了vd

        if (display === 'none') {
          return {
            "break": true
          };
        } // 使用sx和sy渲染位置，考虑了relative和translate影响


        var clientWidth = this.clientWidth,
            clientHeight = this.clientHeight,
            offsetWidth = this.offsetWidth,
            offsetHeight = this.offsetHeight,
            __hasMask = this.__hasMask;
        var paddingTop = computedStyle[PADDING_TOP$1],
            paddingRight = computedStyle[PADDING_RIGHT$1],
            paddingBottom = computedStyle[PADDING_BOTTOM$1],
            paddingLeft = computedStyle[PADDING_LEFT$2],
            borderLeftWidth = computedStyle[BORDER_LEFT_WIDTH$3],
            borderRightWidth = computedStyle[BORDER_RIGHT_WIDTH$2],
            borderTopWidth = computedStyle[BORDER_TOP_WIDTH$2],
            borderBottomWidth = computedStyle[BORDER_BOTTOM_WIDTH$2];
        var isRealInline = __config[NODE_IS_INLINE]; // 考虑mpb的6个坐标，inline比较特殊单独计算

        var x1 = this.__sx1;
        var x2 = this.__sx2;
        var x3 = this.__sx3;
        var x4 = this.__sx4;
        var x5 = this.__sx5;
        var x6 = this.__sx6;
        var y1 = this.__sy1;
        var y2 = this.__sy2;
        var y3 = this.__sy3;
        var y4 = this.__sy4;
        var y5 = this.__sy5;
        var y6 = this.__sy6;
        var res = {
          ctx: ctx,
          x1: x1,
          x2: x2,
          x3: x3,
          x4: x4,
          x5: x5,
          x6: x6,
          y1: y1,
          y2: y2,
          y3: y3,
          y4: y4,
          y5: y5,
          y6: y6,
          sx1: x1,
          sx2: x2,
          sx3: x3,
          sx4: x4,
          sx5: x5,
          sx6: x6,
          sy1: y1,
          sy2: y2,
          sy3: y3,
          sy4: y4,
          sy5: y5,
          sy6: y6
        }; // 防止cp直接返回cp嵌套，拿到真实dom的parent

        var p = __config[NODE_DOM_PARENT$2];

        if (renderMode === WEBGL$1) {
          this.__calPerspective(__cacheStyle, currentStyle, computedStyle, __config);
        } // cache的canvas模式已经提前计算好了，其它需要现在计算


        var matrix;

        if (cache && renderMode === CANVAS$1) {
          matrix = __config[NODE_MATRIX$1];
        } else {
          matrix = this.__calMatrix(lv, __cacheStyle, currentStyle, computedStyle, __config, x1, y1, offsetWidth, offsetHeight);
        } // 计算好cacheStyle的内容，以及位图缓存指数，在cache模式时已经提前算好


        var bx1, by1, bx2, by2;

        if (cache && renderMode === CANVAS$1) {
          bx1 = this.__bx1;
          bx2 = this.__bx2;
          by1 = this.__by1;
          by2 = this.__by2;
        } else {
          var _this$__calCache = this.__calCache(renderMode, ctx, p, __cacheStyle, currentStyle, computedStyle, clientWidth, clientHeight, offsetWidth, offsetHeight, borderTopWidth, borderRightWidth, borderBottomWidth, borderLeftWidth, paddingTop, paddingRight, paddingBottom, paddingLeft, x1, x2, x3, x4, x5, x6, y1, y2, y3, y4, y5, y6);

          var _this$__calCache2 = _slicedToArray(_this$__calCache, 4);

          bx1 = _this$__calCache2[0];
          by1 = _this$__calCache2[1];
          bx2 = _this$__calCache2[2];
          by2 = _this$__calCache2[3];
        }

        res.bx1 = bx1;
        res.by1 = by1;
        res.bx2 = bx2;
        res.by2 = by2;

        var hasContent = this.__hasContent = __config[NODE_HAS_CONTENT] = this.__calContent(renderMode, lv, currentStyle, computedStyle); // webgl特殊申请离屏缓存


        if (cache && renderMode === WEBGL$1) {
          // 无内容可释放并提前跳出，geom覆盖特殊判断，因为后面子类会绘制矢量，img也覆盖特殊判断，加载完肯定有内容
          if (!hasContent && this.__releaseWhenEmpty(__cache, computedStyle)) {
            res["break"] = true;
            __config[NODE_LIMIT_CACHE$1] = false;
          } // 新生成根据最大尺寸，排除margin从border开始还要考虑阴影滤镜等，geom单独在dom里做
          else if (!__config[NODE_LIMIT_CACHE$1]) {
              var bbox = this.bbox;

              if (__cache) {
                __cache.reset(bbox, x1, y1);
              } else {
                __cache = Cache.getInstance(bbox, x1, y1);
              } // cache成功设置坐标偏移，否则为超过最大尺寸限制不使用缓存


              if (__cache && __cache.enabled) {
                __cache.__bbox = bbox;
                ctx = __cache.ctx;
                dx += __cache.dx;
                dy += __cache.dy;
                res.ctx = ctx;
              } else {
                __config[NODE_LIMIT_CACHE$1] = true;
                __cache = null;
                res.limitCache = res["break"] = true;
              }

              __config[NODE_CACHE$1] = __cache;
            }
        } // 降级的webgl绘制
        else if (renderMode === WEBGL$1) {
            var c = inject.getCacheCanvas(root.width, root.height, '__$$OVERSIZE$$__');
            res.ctx = ctx = c.ctx;
          }

        res.dx = dx;
        res.dy = dy;
        var backgroundColor = computedStyle[BACKGROUND_COLOR$1],
            borderTopColor = computedStyle[BORDER_TOP_COLOR],
            borderRightColor = computedStyle[BORDER_RIGHT_COLOR],
            borderBottomColor = computedStyle[BORDER_BOTTOM_COLOR],
            borderLeftColor = computedStyle[BORDER_LEFT_COLOR],
            borderTopLeftRadius = computedStyle[BORDER_TOP_LEFT_RADIUS$1],
            borderTopRightRadius = computedStyle[BORDER_TOP_RIGHT_RADIUS$1],
            borderBottomRightRadius = computedStyle[BORDER_BOTTOM_RIGHT_RADIUS$1],
            borderBottomLeftRadius = computedStyle[BORDER_BOTTOM_LEFT_RADIUS$1],
            visibility = computedStyle[VISIBILITY$2],
            backgroundRepeat = computedStyle[BACKGROUND_REPEAT],
            backgroundImage = computedStyle[BACKGROUND_IMAGE$1],
            opacity = computedStyle[OPACITY$3],
            filter = computedStyle[FILTER$3],
            backgroundSize = computedStyle[BACKGROUND_SIZE$2],
            boxShadow = computedStyle[BOX_SHADOW$2],
            overflow = computedStyle[OVERFLOW$1],
            mixBlendMode = computedStyle[MIX_BLEND_MODE],
            backgroundClip = computedStyle[BACKGROUND_CLIP$2]; // 先设置透明度，canvas可以向上累积，cache模式外部已计算好

        if (cache && renderMode === CANVAS$1) {
          opacity = __config[NODE_OPACITY$1];
        } else if (renderMode === CANVAS$1 || renderMode === WEBGL$1) {
          if (p) {
            opacity *= p.__config[NODE_OPACITY$1];
          }

          __config[NODE_OPACITY$1] = opacity;
        } else if (renderMode === SVG) {
          if (opacity === 1) {
            delete virtualDom.opacity;
          } else {
            virtualDom.opacity = opacity;
          }
        } // canvas/svg/事件需要3种不同的matrix


        if (renderMode === SVG) {
          if (!mx.isE(matrix)) {
            virtualDom.transform = 'matrix(' + joinArr$2(mx.m2m6(matrix), ',') + ')';
          } else {
            delete virtualDom.transform;
          }

          virtualDom.visibility = visibility;
        } // cache模式的canvas的matrix计算在外部做好了，且perspective无效


        if (renderMode === CANVAS$1 && cache) {
          matrix = __config[NODE_MATRIX_EVENT$2];
        } else {
          var m = __config[NODE_MATRIX$1];
          util.assignMatrix(m, matrix); // 变换和canvas要以父元素matrixEvent为基础，svg使用自身即css规则，webgl在struct渲染时另算

          if (p) {
            if (p.perspectiveMatrix) {
              matrix = mx.multiply(p.perspectiveMatrix, matrix);
            }

            matrix = mx.multiply(p.matrixEvent, matrix);
          } // 为了引用不变，防止变化后text子节点获取不到，恶心的v8优化，初始化在构造函数中空数组


          m = __config[NODE_MATRIX_EVENT$2];
          util.assignMatrix(m, matrix);
        } // 无离屏功能或超限视为不可缓存本身，等降级无cache再次绘制，webgl一样


        if (res.limitCache) {
          return res;
        } // 按照顺序依次检查生成offscreen离屏功能，顺序在structs中渲染离屏时用到，多个离屏时隔离并且后面有前面的ctx引用


        var offscreenBlend;

        if (mixBlendMode !== 'normal' && isValidMbm$1(mixBlendMode)) {
          mixBlendMode = mbmName$1(mixBlendMode);

          if (renderMode === CANVAS$1 && cache !== LOCAL) {
            var width = root.width,
                height = root.height;

            var _c = inject.getCacheCanvas(width, height, null, 'blend');

            offscreenBlend = {
              ctx: ctx,
              target: _c,
              mixBlendMode: mixBlendMode,
              matrix: matrix
            };
            ctx = _c.ctx;
          } else if (renderMode === SVG) {
            virtualDom.mixBlendMode = mixBlendMode;
          }
        } // svg特殊没有mbm删除
        else if (renderMode === SVG) {
            delete virtualDom.mixBlendMode;
          }

        var offscreenMask;

        if (__hasMask) {
          if (renderMode === CANVAS$1 && cache !== LOCAL) {
            var _width = root.width,
                _height = root.height;

            var _c2 = inject.getCacheCanvas(_width, _height, null, 'mask1');

            offscreenMask = {
              ctx: ctx,
              target: _c2,
              matrix: matrix
            };
            ctx = _c2.ctx;
          }
        } // 无cache时canvas的blur需绘制到离屏上应用后反向绘制回来，有cache在Dom里另生成一个filter的cache


        var hasFilter = filter && filter.length;
        var offscreenFilter;

        if (hasFilter) {
          if (renderMode === CANVAS$1 && cache !== LOCAL) {
            var _width2 = root.width,
                _height2 = root.height;

            var _c3 = inject.getCacheCanvas(_width2, _height2, null, 'filter');

            offscreenFilter = {
              ctx: ctx,
              filter: filter,
              target: _c3,
              matrix: matrix
            };
            ctx = _c3.ctx;
          } else if (renderMode === SVG) {
            virtualDom.filter = painter.svgFilter(filter);
          }
        } else if (renderMode === SVG) {
          delete virtualDom.filter;
        } // 根据backgroundClip的不同值要调整bg渲染坐标尺寸，也会影响borderRadius


        var btlr = borderTopLeftRadius.slice(0);
        var btrr = borderTopRightRadius.slice(0);
        var bbrr = borderBottomRightRadius.slice(0);
        var bblr = borderBottomLeftRadius.slice(0);

        if (backgroundClip === 'padding-box' || backgroundClip === 'paddingBox') {
          btlr[0] -= borderLeftWidth;
          btlr[1] -= borderTopWidth;
          btrr[0] -= borderRightWidth;
          btrr[1] -= borderTopWidth;
          bbrr[0] -= borderRightWidth;
          bbrr[1] -= borderBottomWidth;
          bblr[0] -= borderLeftWidth;
          bblr[1] -= borderBottomWidth;
        } else if (backgroundClip === 'content-box' || backgroundClip === 'contentBox') {
          btlr[0] -= borderLeftWidth + paddingLeft;
          btlr[1] -= borderTopWidth + paddingTop;
          btrr[0] -= borderRightWidth + paddingRight;
          btrr[1] -= borderTopWidth + paddingTop;
          bbrr[0] -= borderRightWidth + paddingRight;
          bbrr[1] -= borderBottomWidth + paddingBottom;
          bblr[0] -= borderLeftWidth + paddingLeft;
          bblr[1] -= borderBottomWidth + paddingBottom;
        } // overflow:hidden，最后判断，filter/mask优先


        var offscreenOverflow, borderList;

        if (overflow === 'hidden' && display !== 'inline') {
          borderList = border.calRadius(bx1, by1, bx2 - bx1, by2 - by1, btlr, btrr, bbrr, bblr);

          if (renderMode === CANVAS$1 && cache !== LOCAL) {
            var _width3 = root.width,
                _height3 = root.height;

            var _c4 = inject.getCacheCanvas(_width3, _height3, null, 'overflow');

            offscreenOverflow = {
              ctx: ctx,
              target: _c4,
              matrix: matrix
            };
            ctx = _c4.ctx;
            offscreenOverflow.x = x1;
            offscreenOverflow.y = y1;
            offscreenOverflow.offsetWidth = offsetWidth;
            offscreenOverflow.offsetHeight = offsetHeight;
            offscreenOverflow.list = borderList;
          } else if (renderMode === SVG) {
            var d = svgPolygon$5(borderList) || "M".concat(x1, ",").concat(y1, "L").concat(x1 + offsetWidth, ",").concat(y1, "L").concat(x1 + offsetWidth, ",").concat(y1 + offsetHeight, "L").concat(x1, ",").concat(y1 + offsetHeight, ",L").concat(x1, ",").concat(y1);
            var v = {
              tagName: 'clipPath',
              props: [],
              children: [{
                tagName: 'path',
                props: [['d', d]]
              }]
            };
            var id = ctx.add(v);

            __config[NODE_DEFS_CACHE$3].push(v);

            virtualDom.overflow = 'url(#' + id + ')';
          }
        } else if (renderMode === SVG) {
          delete virtualDom.overflow;
        } // 无法使用缓存时主画布直接绘制需设置


        if (renderMode === CANVAS$1) {
          res.offscreenBlend = offscreenBlend;
          res.offscreenMask = offscreenMask;
          res.offscreenFilter = offscreenFilter;
          res.offscreenOverflow = offscreenOverflow;
          res.ctx = ctx;
          ctx.globalAlpha = opacity; // cache模式在外面设置

          if (!cache) {
            ctx.setTransform(matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]);
          }
        } // 隐藏不渲染


        if ((visibility === 'hidden' || res["break"]) && (renderMode === CANVAS$1 || renderMode === WEBGL$1)) {
          res["break"] = true;
          return res;
        } // 仅webgl有用


        if (__cache && __cache.enabled) {
          __cache.__available = true;
        }
        /**
         * inline的渲染同block/ib不一样，不是一个矩形区域
         * 它根据内部的contentBox渲染，contentBox是指lineBox中的内容，即TextBox/inline/ib元素
         * 首尾可能不满行，比如从一半开始或一半结束，甚至可能没有内容
         * 两行之间可能不满，如果lineBox的高度>lineHeight的话，另外特殊字体如arial拥有lineGap也会产生间隙，背景色不绘制这个间隙
         * x轴根据contentBox的范围坐标，y则固定和font/lineHeight相关
         * 圆角发生在首尾lineBox处，中间不会有，bgi则产生类似bgc作为mask的效果
         * 另外要注意多个时的顺序，必须依次渲染，后面的bb可能会覆盖前面行的
         */


        if (isRealInline) {
          var contentBoxList = this.contentBoxList;
          var length = contentBoxList.length;
          var hasBgi = backgroundImage.some(function (item) {
            return item;
          });

          if (length) {
            var _ret = function () {
              var fontSize = computedStyle[FONT_SIZE$8],
                  fontFamily = computedStyle[FONT_FAMILY$4],
                  lineHeight = computedStyle[LINE_HEIGHT$3];
              var iw = 0,
                  ih = 0;
              var offscreen,
                  svgBgSymbol = []; // bgi视作inline排满一行绘制，然后按分行拆开给每行

              if (hasBgi) {
                iw = inline.getInlineWidth(_this6, contentBoxList);
                ih = lineHeight;

                if (backgroundClip === 'paddingBox' || backgroundClip === 'padding-box') {
                  iw += paddingLeft + paddingRight;
                  ih += paddingTop + paddingBottom;
                } else if (backgroundClip !== 'contentBox' && backgroundClip !== 'content-box') {
                  iw += paddingLeft + paddingRight + borderLeftWidth + borderRightWidth;
                  ih += paddingTop + paddingBottom + borderTopWidth + borderBottomWidth;
                }

                if (renderMode === CANVAS$1 || renderMode === WEBGL$1) {
                  offscreen = inject.getCacheCanvas(iw, ih, '__$$INLINE_BGI$$__');
                }

                var _length = backgroundImage.length;
                backgroundImage.slice(0).reverse().forEach(function (bgi, i) {
                  if (!bgi) {
                    return;
                  }

                  i = _length - 1 - i;

                  if (util.isString(bgi)) {
                    var loadBgi = _this6.__loadBgi[i];

                    if (loadBgi.url === backgroundImage[i]) {
                      var uuid = bg.renderImage(_this6, renderMode, offscreen && offscreen.ctx || ctx, loadBgi, 0, 0, iw, ih, btlr, btrr, bbrr, bblr, currentStyle, i, backgroundSize, backgroundRepeat, __config, true, dx, dy);

                      if (renderMode === SVG && uuid) {
                        svgBgSymbol.push(uuid);
                      }
                    }
                  } else if (bgi.k) {
                    var gd = _this6.__gradient(renderMode, ctx, 0, 0, iw, ih, bgi, dx, dy);

                    if (gd) {
                      if (gd.k === 'conic') {
                        var _uuid = gradient$1.renderConic(_this6, renderMode, offscreen && offscreen.ctx || ctx, gd.v, 0, 0, iw, lineHeight, btlr, btrr, bbrr, bblr, true);

                        if (renderMode === SVG && _uuid) {
                          svgBgSymbol.push(_uuid);
                        }
                      } else {
                        var _uuid2 = bg.renderBgc(_this6, renderMode, offscreen && offscreen.ctx || ctx, gd.v, null, 0, 0, iw, ih, btlr, btrr, bbrr, bblr, 'fill', true);

                        if (renderMode === SVG && _uuid2) {
                          svgBgSymbol.push(_uuid2);
                        }
                      }
                    }
                  }
                });
              } // 获取当前dom的baseLine，再减去lineBox的baseLine得出差值，这样渲染范围y就是lineBox的y+差值为起始，lineHeight为高


              var ff = css.getFontFamily(fontFamily);
              var baseLine = css.getBaseLine(computedStyle); // lineGap，一般为0，某些字体如arial有，渲染高度需减去它，最终是lineHeight - diffL

              var diffL = fontSize * (o$1.info[ff].lgr || 0); // 注意只有1个的时候特殊情况，圆角只在首尾行出现

              var isFirst = true;
              var lastContentBox = contentBoxList[0],
                  lastLineBox = lastContentBox.parentLineBox; // bgi需统计宽度累计值，将当前行所处理想单行的x范围位置计算出来，并进行bgi贴图绘制，svg还需统计第几行

              var countW = 0;

              for (var i = 0; i < length; i++) {
                var contentBox = contentBoxList[i];

                if (contentBox.parentLineBox !== lastLineBox) {
                  (function () {
                    // 上一行
                    var _inline$getInlineBox = inline.getInlineBox(_this6, contentBoxList, lastContentBox, contentBoxList[i - 1], lastLineBox, baseLine, lineHeight, diffL, isFirst, false, backgroundClip, paddingTop, paddingRight, paddingBottom, paddingLeft, borderTopWidth, borderRightWidth, borderBottomWidth, borderLeftWidth),
                        _inline$getInlineBox2 = _slicedToArray(_inline$getInlineBox, 8),
                        ix1 = _inline$getInlineBox2[0],
                        iy1 = _inline$getInlineBox2[1],
                        ix2 = _inline$getInlineBox2[2],
                        iy2 = _inline$getInlineBox2[3],
                        bx1 = _inline$getInlineBox2[4],
                        by1 = _inline$getInlineBox2[5],
                        bx2 = _inline$getInlineBox2[6],
                        by2 = _inline$getInlineBox2[7]; // 要算上开头空白inline，可能有多个和递归嵌套


                    if (isFirst) {
                      var n = getFirstEmptyInlineWidth(_this6);
                      ix1 -= n;
                      bx1 -= n;
                    }

                    if (backgroundColor[3] > 0) {
                      bg.renderBgc(_this6, renderMode, ctx, __cacheStyle[BACKGROUND_COLOR$1], null, ix1, iy1, ix2 - ix1, iy2 - iy1, btlr, [0, 0], [0, 0], bblr, 'fill', false, dx, dy);
                    }

                    var w = ix2 - ix1; // canvas的bg位图裁剪

                    if ((renderMode === CANVAS$1 || renderMode === WEBGL$1) && offscreen) {
                      ctx.drawImage(offscreen.canvas, countW, 0, w, ih, ix1 + dx, iy1 + dy, w, ih);
                    } //svg则特殊判断
                    else if (renderMode === SVG && svgBgSymbol.length) {
                        svgBgSymbol.forEach(function (symbol) {
                          if (symbol) {
                            var _v3 = {
                              tagName: 'clipPath',
                              props: [],
                              children: [{
                                tagName: 'path',
                                props: [['d', "M".concat(countW, ",", 0, "L").concat(w + countW, ",", 0, "L").concat(w + countW, ",").concat(ih, "L").concat(countW, ",").concat(ih, ",L").concat(countW, ",", 0)]]
                              }]
                            };
                            var clip = ctx.add(_v3);

                            __config[NODE_DEFS_CACHE$3].push(_v3);

                            virtualDom.bb.push({
                              type: 'item',
                              tagName: 'use',
                              props: [['xlink:href', '#' + symbol], ['x', ix1 - countW], ['y', iy1], ['clip-path', 'url(#' + clip + ')']]
                            });
                          }
                        });
                      }

                    countW += w;

                    if (boxShadow) {
                      boxShadow.forEach(function (item) {
                        bs.renderBoxShadow(_this6, renderMode, ctx, item, bx1, by1, bx2, by2, bx2 - bx1, by2 - by1, dx, dy);
                      });
                    }

                    if (borderTopWidth > 0 && borderTopColor[3] > 0) {
                      var deg1 = Math.atan(borderTopWidth / borderLeftWidth);
                      var deg2 = Math.atan(borderTopWidth / borderRightWidth);
                      var list = border.calPoints(borderTopWidth, computedStyle[BORDER_TOP_STYLE], deg1, deg2, bx1, bx1 + borderLeftWidth, bx2, bx2, by1, by1 + borderTopWidth, by2 - borderBottomWidth, by2, 0, isFirst ? btlr : [0, 0], [0, 0]);
                      border.renderBorder(_this6, renderMode, ctx, list, __cacheStyle[BORDER_TOP_COLOR], dx, dy);
                    }

                    if (borderBottomWidth > 0 && borderBottomColor[3] > 0) {
                      var _deg7 = Math.atan(borderBottomWidth / borderLeftWidth);

                      var _deg8 = Math.atan(borderBottomWidth / borderRightWidth);

                      var _list = border.calPoints(borderBottomWidth, computedStyle[BORDER_BOTTOM_STYLE], _deg7, _deg8, bx1, bx1 + borderLeftWidth, bx2, bx2, by1, by1 + borderTopWidth, by2 - borderBottomWidth, by2, 2, isFirst ? btlr : [0, 0], [0, 0]);

                      border.renderBorder(_this6, renderMode, ctx, _list, __cacheStyle[BORDER_BOTTOM_COLOR], dx, dy);
                    }

                    if (isFirst && borderLeftWidth > 0 && borderLeftColor[3] > 0) {
                      var _deg9 = Math.atan(borderLeftWidth / borderTopWidth);

                      var _deg10 = Math.atan(borderLeftWidth / borderBottomWidth);

                      var _list2 = border.calPoints(borderLeftWidth, computedStyle[BORDER_LEFT_STYLE], _deg9, _deg10, bx1, bx1 + borderLeftWidth, bx2 - borderRightWidth, bx2, by1, by1 + borderTopWidth, by2 - borderBottomWidth, by2, 3, btlr, btrr);

                      border.renderBorder(_this6, renderMode, ctx, _list2, __cacheStyle[BORDER_LEFT_COLOR], dx, dy);
                    }

                    isFirst = false;
                    lastContentBox = contentBox;
                    lastLineBox = contentBox.parentLineBox;
                  })();
                } // 最后一个特殊判断


                if (i === length - 1) {
                  (function () {
                    var _inline$getInlineBox3 = inline.getInlineBox(_this6, contentBoxList, lastContentBox, contentBoxList[i], lastLineBox, baseLine, lineHeight, diffL, isFirst, true, backgroundClip, paddingTop, paddingRight, paddingBottom, paddingLeft, borderTopWidth, borderRightWidth, borderBottomWidth, borderLeftWidth),
                        _inline$getInlineBox4 = _slicedToArray(_inline$getInlineBox3, 8),
                        ix1 = _inline$getInlineBox4[0],
                        iy1 = _inline$getInlineBox4[1],
                        ix2 = _inline$getInlineBox4[2],
                        iy2 = _inline$getInlineBox4[3],
                        bx1 = _inline$getInlineBox4[4],
                        by1 = _inline$getInlineBox4[5],
                        bx2 = _inline$getInlineBox4[6],
                        by2 = _inline$getInlineBox4[7]; // 要算上开头空白inline，可能有多个和递归嵌套


                    if (isFirst) {
                      var _n4 = getFirstEmptyInlineWidth(_this6);

                      ix1 -= _n4;
                      bx1 -= _n4;
                    } // 要算上末尾空白inline，可能有多个和递归嵌套


                    var n = getLastEmptyInlineWidth(_this6);
                    ix2 += n;
                    bx2 += n;

                    if (backgroundColor[3] > 0) {
                      bg.renderBgc(_this6, renderMode, ctx, __cacheStyle[BACKGROUND_COLOR$1], null, ix1, iy1, ix2 - ix1, iy2 - iy1, isFirst ? btlr : [0, 0], btrr, bbrr, isFirst ? bblr : [0, 0], 'fill', false, dx, dy);
                    }

                    var w = ix2 - ix1; // canvas的bg位图裁剪

                    if ((renderMode === CANVAS$1 || renderMode === WEBGL$1) && offscreen) {
                      ctx.drawImage(offscreen.canvas, countW, 0, w, ih, ix1 + dx, iy1 + dy, w, ih);
                    } //svg则特殊判断
                    else if (renderMode === SVG && svgBgSymbol.length) {
                        svgBgSymbol.forEach(function (symbol) {
                          if (symbol) {
                            var _v4 = {
                              tagName: 'clipPath',
                              props: [],
                              children: [{
                                tagName: 'path',
                                props: [['d', "M".concat(countW, ",", 0, "L").concat(w + countW, ",", 0, "L").concat(w + countW, ",").concat(ih, "L").concat(countW, ",").concat(ih, ",L").concat(countW, ",", 0)]]
                              }]
                            };
                            var clip = ctx.add(_v4);

                            __config[NODE_DEFS_CACHE$3].push(_v4);

                            virtualDom.bb.push({
                              type: 'item',
                              tagName: 'use',
                              props: [['xlink:href', '#' + symbol], ['x', ix1 - countW], ['y', iy1], ['clip-path', 'url(#' + clip + ')']]
                            });
                          }
                        });
                      }

                    if (boxShadow) {
                      boxShadow.forEach(function (item) {
                        bs.renderBoxShadow(_this6, renderMode, ctx, item, bx1, by1, bx2, by2, bx2 - bx1, by2 - by1, dx, dy);
                      });
                    }

                    if (borderTopWidth > 0 && borderTopColor[3] > 0) {
                      var deg1 = Math.atan(borderTopWidth / borderLeftWidth);
                      var deg2 = Math.atan(borderTopWidth / borderRightWidth);
                      var list = border.calPoints(borderTopWidth, computedStyle[BORDER_TOP_STYLE], deg1, deg2, bx1, bx1, bx2 - borderRightWidth, bx2, by1, by1 + borderTopWidth, by2 - borderBottomWidth, by2, 0, isFirst ? btlr : [0, 0], btrr);
                      border.renderBorder(_this6, renderMode, ctx, list, __cacheStyle[BORDER_TOP_COLOR], dx, dy);
                    }

                    if (borderRightWidth > 0 && borderRightColor[3] > 0) {
                      var _deg11 = Math.atan(borderRightWidth / borderTopWidth);

                      var _deg12 = Math.atan(borderRightWidth / borderBottomWidth);

                      var _list3 = border.calPoints(borderRightWidth, computedStyle[BORDER_RIGHT_STYLE], _deg11, _deg12, bx1, bx1 + borderLeftWidth, bx2 - borderRightWidth, bx2, by1, by1 + borderTopWidth, by2 - borderBottomWidth, by2, 1, btlr, btrr);

                      border.renderBorder(_this6, renderMode, ctx, _list3, __cacheStyle[BORDER_RIGHT_COLOR], dx, dy);
                    }

                    if (borderBottomWidth > 0 && borderBottomColor[3] > 0) {
                      var _deg13 = Math.atan(borderBottomWidth / borderLeftWidth);

                      var _deg14 = Math.atan(borderBottomWidth / borderRightWidth);

                      var _list4 = border.calPoints(borderBottomWidth, computedStyle[BORDER_BOTTOM_STYLE], _deg13, _deg14, bx1, bx1, bx2 - borderRightWidth, bx2, by1, by1 + borderTopWidth, by2 - borderBottomWidth, by2, 2, isFirst ? btlr : [0, 0], btrr);

                      border.renderBorder(_this6, renderMode, ctx, _list4, __cacheStyle[BORDER_BOTTOM_COLOR], dx, dy);
                    }

                    if (isFirst && borderLeftWidth > 0 && borderLeftColor[3] > 0) {
                      var _deg15 = Math.atan(borderLeftWidth / borderTopWidth);

                      var _deg16 = Math.atan(borderLeftWidth / borderBottomWidth);

                      var _list5 = border.calPoints(borderLeftWidth, computedStyle[BORDER_LEFT_STYLE], _deg15, _deg16, bx1, bx1 + borderLeftWidth, bx2 - borderRightWidth, bx2, by1, by1 + borderTopWidth, by2 - borderBottomWidth, by2, 3, btlr, btrr);

                      border.renderBorder(_this6, renderMode, ctx, _list5, __cacheStyle[BORDER_LEFT_COLOR], dx, dy);
                    }
                  })();
                }
              }

              if (offscreen) {
                offscreen.ctx.clearRect(0, 0, iw, ih);
              }

              return {
                v: res
              };
            }();

            if (_typeof(_ret) === "object") return _ret.v;
          } // 无内容且无尺寸的无需渲染
          else if (bx1 === bx2 || by1 === by2) {
              return res;
            }
        } // block渲染，bgc垫底


        if (backgroundColor[3] > 0) {
          bg.renderBgc(this, renderMode, ctx, __cacheStyle[BACKGROUND_COLOR$1], borderList, bx1, by1, bx2 - bx1, by2 - by1, btlr, btrr, bbrr, bblr, 'fill', false, dx, dy);
        } // 渐变或图片叠加


        if (backgroundImage) {
          var _length2 = backgroundImage.length;
          backgroundImage.slice(0).reverse().forEach(function (bgi, i) {
            if (!bgi) {
              return;
            }

            i = _length2 - 1 - i;

            if (util.isString(bgi)) {
              var loadBgi = _this6.__loadBgi[i];

              if (loadBgi.url === backgroundImage[i]) {
                bg.renderImage(_this6, renderMode, ctx, loadBgi, bx1, by1, bx2, by2, btlr, btrr, bbrr, bblr, currentStyle, i, backgroundSize, backgroundRepeat, __config, false, dx, dy);
              }
            } else if (bgi.k) {
              var gd = _this6.__gradient(renderMode, ctx, bx1, by1, bx2, by2, bgi, dx, dy);

              if (gd) {
                if (gd.k === 'conic') {
                  gradient$1.renderConic(_this6, renderMode, ctx, gd.v, bx1, by1, bx2 - bx1, by2 - by1, btlr, btrr, bbrr, bblr);
                } else {
                  bg.renderBgc(_this6, renderMode, ctx, gd.v, borderList, bx1, by1, bx2 - bx1, by2 - by1, btlr, btrr, bbrr, bblr, 'fill', false, dx, dy);
                }
              }
            }
          });
        } // boxShadow可能会有多个


        if (boxShadow) {
          boxShadow.forEach(function (item) {
            bs.renderBoxShadow(_this6, renderMode, ctx, item, x1, y1, x6, y6, x6 - x1, y6 - y1, dx, dy);
          });
        } // 边框需考虑尖角，两条相交边平分45°夹角


        if (borderTopWidth > 0 && borderTopColor[3] > 0) {
          border.renderBorder(this, renderMode, ctx, __cacheStyle[BORDER_TOP], __cacheStyle[BORDER_TOP_COLOR], dx, dy);
        }

        if (borderRightWidth > 0 && borderRightColor[3] > 0) {
          border.renderBorder(this, renderMode, ctx, __cacheStyle[BORDER_RIGHT], __cacheStyle[BORDER_RIGHT_COLOR], dx, dy);
        }

        if (borderBottomWidth > 0 && borderBottomColor[3] > 0) {
          border.renderBorder(this, renderMode, ctx, __cacheStyle[BORDER_BOTTOM], __cacheStyle[BORDER_BOTTOM_COLOR], dx, dy);
        }

        if (borderLeftWidth > 0 && borderLeftColor[3] > 0) {
          border.renderBorder(this, renderMode, ctx, __cacheStyle[BORDER_LEFT], __cacheStyle[BORDER_LEFT_COLOR], dx, dy);
        }

        return res;
      }
    }, {
      key: "__destroy",
      value: function __destroy() {
        if (this.isDestroyed) {
          return;
        }

        _get(_getPrototypeOf(Xom.prototype), "__destroy", this).call(this);

        var root = this.root;
        this.clearAnimate();
        this.clearFrameAnimate();
        root.delRefreshTask(this.__loadBgi.cb);
        root.delRefreshTask(this.__task);
        this.__task = null;
        this.__root = null;
        this.clearCache();
      } // 先查找到注册了事件的节点，再捕获冒泡判断增加性能

    }, {
      key: "__emitEvent",
      value: function __emitEvent(e, force) {
        var isDestroyed = this.isDestroyed,
            computedStyle = this.computedStyle,
            isMask = this.isMask;

        if (isDestroyed || computedStyle[DISPLAY$2] === 'none' || e.__stopPropagation || isMask) {
          return;
        }

        var type = e.event.type;
        var listener = this.listener,
            __hasMask = this.__hasMask;
        var cb;

        if (listener.hasOwnProperty(type)) {
          cb = listener[type];
        } // touchmove之类强制的直接由Root通知即可


        if (force) {
          if (computedStyle[POINTER_EVENTS$1] !== 'none' && util.isFunction(cb) && !e.__stopImmediatePropagation) {
            cb.call(this, e);
          }

          return true;
        } // 非force的判断事件坐标是否在节点内


        if (this.willResponseEvent(e)) {
          // 如果有mask，点在mask上才行，点在clip外才行
          if (__hasMask) {
            var next = this.next;
            var isClip = next.isClip;
            var hasEmitMask;

            while (next && next.isMask) {
              if (next.willResponseEvent(e, true)) {
                hasEmitMask = true;
                break;
              }

              next = next.next;
            }

            if (!isClip && !hasEmitMask) {
              return;
            }
          }

          if (util.isFunction(cb) && !e.__stopImmediatePropagation) {
            cb.call(this, e);
          }

          return true;
        }
      }
    }, {
      key: "willResponseEvent",
      value: function willResponseEvent(e, ignore) {
        var x = e.x,
            y = e.y;
        var __sx1 = this.__sx1,
            __sy1 = this.__sy1,
            offsetWidth = this.offsetWidth,
            offsetHeight = this.offsetHeight,
            matrixEvent = this.matrixEvent,
            computedStyle = this.computedStyle;

        if (computedStyle[POINTER_EVENTS$1] === 'none') {
          return;
        }

        var inThis = geom.pointInQuadrilateral(x, y, __sx1, __sy1, __sx1 + offsetWidth, __sy1, __sx1 + offsetWidth, __sy1 + offsetHeight, __sx1, __sy1 + offsetHeight, matrixEvent);

        if (inThis) {
          if (!e.target && !ignore) {
            e.target = this; // 缓存target给move用

            if (e.event.type === 'touchstart') {
              this.root && (this.root.__touchstartTarget = this);
            }
          }

          return true;
        }
      }
    }, {
      key: "__gradient",
      value: function __gradient(renderMode, ctx, bx1, by1, bx2, by2, bgi) {
        var dx = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
        var dy = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 0;
        var iw = bx2 - bx1;
        var ih = by2 - by1; // 无尺寸无需创建渐变

        if (!iw || !ih) {
          return;
        }

        var k = bgi.k,
            v = bgi.v,
            d = bgi.d,
            s = bgi.s,
            z = bgi.z,
            p = bgi.p;
        var cx = bx1 + iw * 0.5;
        var cy = by1 + ih * 0.5;
        var res = {
          k: k
        };

        if (k === 'linear') {
          var gd = gradient$1.getLinear(v, d, bx1, by1, cx, cy, iw, ih, this.root, dx, dy);
          res.v = this.__getLg(renderMode, ctx, gd);
        } else if (k === 'radial') {
          var _gd = gradient$1.getRadial(v, s, z, p, bx1, by1, bx2, by2, this.root, dx, dy);

          if (_gd) {
            res.v = this.__getRg(renderMode, ctx, _gd);

            if (_gd.matrix) {
              res.v = [res.v, _gd.matrix, _gd.cx, _gd.cy];
            }
          }
        } else if (k === 'conic') {
          var bbox = this.bbox;
          var m1 = Math.max(Math.abs(bbox[2] - bbox[0]), Math.abs(bbox[3] - bbox[1]));
          var m2 = Math.max(Math.abs(iw), Math.abs(ih));

          var _gd2 = gradient$1.getConic(v, d, p, bx1, by1, bx2, by2, m1 / m2, this.root, dx, dy);

          res.v = this.__getCg(renderMode, ctx, _gd2);
        }

        return res;
      }
    }, {
      key: "__getLg",
      value: function __getLg(renderMode, ctx, gd) {
        if (renderMode === CANVAS$1 || renderMode === WEBGL$1) {
          var lg = ctx.createLinearGradient(gd.x1, gd.y1, gd.x2, gd.y2);
          gd.stop.forEach(function (item) {
            lg.addColorStop(item[1], int2rgba$2(item[0]));
          });
          return lg;
        } else if (renderMode === SVG) {
          var v = {
            tagName: 'linearGradient',
            props: [['x1', gd.x1], ['y1', gd.y1], ['x2', gd.x2], ['y2', gd.y2]],
            children: gd.stop.map(function (item) {
              return {
                tagName: 'stop',
                props: [['stop-color', int2rgba$2(item[0])], ['offset', item[1] * 100 + '%']]
              };
            })
          };
          var uuid = ctx.add(v);

          this.__config[NODE_DEFS_CACHE$3].push(v);

          return 'url(#' + uuid + ')';
        }
      }
    }, {
      key: "__getRg",
      value: function __getRg(renderMode, ctx, gd) {
        if (renderMode === CANVAS$1 || renderMode === WEBGL$1) {
          var rg = ctx.createRadialGradient(gd.cx, gd.cy, 0, gd.tx, gd.ty, gd.r);
          gd.stop.forEach(function (item) {
            rg.addColorStop(item[1], int2rgba$2(item[0]));
          });
          return rg;
        } else if (renderMode === SVG) {
          var v = {
            tagName: 'radialGradient',
            props: [['cx', gd.tx], ['cy', gd.ty], ['r', gd.r]],
            children: gd.stop.map(function (item) {
              return {
                tagName: 'stop',
                props: [['stop-color', int2rgba$2(item[0])], ['offset', item[1] * 100 + '%']]
              };
            })
          };

          if (gd.tx !== gd.cx) {
            v.props.push(['fx', gd.cx]);
          }

          if (gd.ty !== gd.cy) {
            v.props.push(['fy', gd.cy]);
          }

          var uuid = ctx.add(v);

          this.__config[NODE_DEFS_CACHE$3].push(v);

          return 'url(#' + uuid + ')';
        }
      }
    }, {
      key: "__getCg",
      value: function __getCg(renderMode, ctx, gd) {
        var cx = gd.cx,
            cy = gd.cy,
            r = gd.r,
            deg = gd.deg,
            stop = gd.stop;
        var len = stop.length - 1;

        if (stop[len][1] < 1) {
          stop.push([stop[len][0].slice(0), 1]);
        }

        if (stop[0][1] > 0) {
          stop.unshift([stop[0][0].slice(0), 0]);
        } // canvas采用点色值计算法，svg则分360度画块


        var res = [];

        if (renderMode === CANVAS$1 || renderMode === WEBGL$1) {
          return gd;
        } else if (renderMode === SVG) {
          var offset = 0.5;
          var prev; // 根据2个stop之间的百分比得角度差划分块数，每0.5°一块，不足也算

          var list = [];

          for (var i = 0, _len3 = stop.length; i < _len3 - 1; i++) {
            var begin = stop[i][1] * 360;

            var _end = stop[i + 1][1] * 360;

            var diff = _end - begin;
            var n = Math.ceil(diff);
            var per = diff / n; // 计算每块的2个弧端点

            var bc = stop[i][0];
            var ec = stop[i + 1][0];
            var dc = [ec[0] - bc[0], ec[1] - bc[1], ec[2] - bc[2], ec[3] - bc[3]];
            var pc = [dc[0] / n, dc[1] / n, dc[2] / n, dc[3] / n];

            for (var j = 0; j < n; j++) {
              var _geom$pointOnCircle = geom.pointOnCircle(cx, cy, r, begin + per * j + deg - offset),
                  _geom$pointOnCircle2 = _slicedToArray(_geom$pointOnCircle, 2),
                  x1 = _geom$pointOnCircle2[0],
                  y1 = _geom$pointOnCircle2[1];

              var _geom$pointOnCircle3 = geom.pointOnCircle(cx, cy, r, begin + per * j + deg + offset),
                  _geom$pointOnCircle4 = _slicedToArray(_geom$pointOnCircle3, 2),
                  _x = _geom$pointOnCircle4[0],
                  _y = _geom$pointOnCircle4[1];

              list.push([x1, y1, _x, _y, Math.round(bc[0] + pc[0] * j), Math.round(bc[1] + pc[1] * j), Math.round(bc[2] + pc[2] * j), Math.round(bc[3] + pc[3] * j)]);
            }
          } // 最后一段补自己末尾颜色特殊处理


          var end = list[0].slice(0);

          var _geom$pointOnCircle5 = geom.pointOnCircle(cx, cy, r, deg),
              _geom$pointOnCircle6 = _slicedToArray(_geom$pointOnCircle5, 2),
              x2 = _geom$pointOnCircle6[0],
              y2 = _geom$pointOnCircle6[1];

          end[2] = x2;
          end[3] = y2;
          var s = stop[stop.length - 1][0];
          end[4] = s[0];
          end[5] = s[1];
          end[6] = s[2];
          end[7] = s[3];
          list.push(end);

          for (var _i3 = 0, _len4 = list.length; _i3 < _len4; _i3++) {
            var cur = list[_i3];

            if (prev) {
              var v = {
                tagName: 'linearGradient',
                props: [['x1', prev[0]], ['y1', prev[1]], ['x2', cur[2]], ['y2', cur[3]]],
                children: [{
                  tagName: 'stop',
                  props: [['stop-color', int2rgba$2([prev[4], prev[5], prev[6], prev[7]])], ['offset', '0%']]
                }, {
                  tagName: 'stop',
                  props: [['stop-color', int2rgba$2([cur[4], cur[5], cur[6], cur[7]])], ['offset', '100%']]
                }]
              };
              var uuid = ctx.add(v);

              this.__config[NODE_DEFS_CACHE$3].push(v);

              res.push([[[cx, cy], [prev[0], prev[1]], [cur[2], cur[3]]], 'url(#' + uuid + ')']);
            }

            prev = cur;
          }
        }

        return res;
      } // canvas清空自身cache，cacheTotal在Root的自底向上逻辑做，svg仅有cacheTotal

    }, {
      key: "clearCache",
      value: function clearCache(onlyTotal) {
        var __config = this.__config;
        var __cacheTotal = __config[NODE_CACHE_TOTAL];
        var __cacheFilter = __config[NODE_CACHE_FILTER];
        var __cacheMask = __config[NODE_CACHE_MASK];
        var __cacheOverflow = __config[NODE_CACHE_OVERFLOW];

        if (!onlyTotal) {
          __config[NODE_CACHE_STYLE] = this.__cacheStyle = {};
          var __cache = __config[NODE_CACHE$1];

          if (__cache) {
            __cache.release();
          }
        }

        if (__cacheTotal) {
          __cacheTotal.release();
        }

        if (__cacheFilter) {
          __cacheFilter.release();
        }

        if (__cacheMask) {
          __cacheMask.release();
        }

        if (__cacheOverflow) {
          __cacheOverflow.release();
        }
      }
    }, {
      key: "updateStyle",
      value: function updateStyle(style, cb) {
        var node = this;
        var root = node.root,
            __config = node.__config;
        var formatStyle = css.normalize(style); // 有root说明被添加渲染过了

        if (root) {
          root.addRefreshTask(node.__task = {
            __before: function __before() {
              node.__task = null;

              if (__config[NODE_IS_DESTROYED$1]) {
                return;
              } // 刷新前统一赋值，由刷新逻辑计算最终值避免优先级覆盖问题


              var res = {};
              res[UPDATE_NODE$2] = node;
              res[UPDATE_STYLE$1] = formatStyle;
              res[UPDATE_OVERWRITE] = style; // 标识盖原有style样式不仅仅是修改currentStyle，不同于animate

              res[UPDATE_KEYS$1] = Object.keys(formatStyle).map(function (i) {
                if (!GEOM$4.hasOwnProperty(i)) {
                  i = parseInt(i);
                }

                return i;
              });
              res[UPDATE_CONFIG$2] = __config;

              root.__addUpdate(node, __config, root, root.__config, res);
            },
            __after: function __after(diff) {
              if (util.isFunction(cb)) {
                cb.call(node, diff);
              }
            }
          });
        } // 没有是在如parse()还未添加的时候，可以直接同步覆盖
        else {
            Object.assign(this.currentStyle, formatStyle);

            if (util.isFunction(cb)) {
              cb.call(node, -1);
            }
          }
      } // 传入格式化好key/value的样式

    }, {
      key: "updateFormatStyle",
      value: function updateFormatStyle(style, cb) {
        var node = this;
        var root = node.root,
            __config = node.__config;

        if (root) {
          root.addRefreshTask(node.__task = {
            __before: function __before() {
              node.__task = null; // 清除在before，防止after的回调增加新的task误删

              if (__config[NODE_IS_DESTROYED$1]) {
                return;
              } // 刷新前统一赋值，由刷新逻辑计算最终值避免优先级覆盖问题


              var res = {};
              res[UPDATE_NODE$2] = node;
              res[UPDATE_STYLE$1] = style;
              res[UPDATE_KEYS$1] = Object.keys(style).map(function (i) {
                if (!GEOM$4.hasOwnProperty(i)) {
                  i = parseInt(i);
                }

                return i;
              });
              res[UPDATE_CONFIG$2] = __config;

              root.__addUpdate(node, __config, root, root.__config, res);
            },
            __after: function __after(diff) {
              if (util.isFunction(cb)) {
                cb.call(node, diff);
              }
            }
          });
        } // 没有是在如parse()还未添加的时候，可以直接同步覆盖
        else {
            Object.assign(this.currentStyle, style);

            if (util.isFunction(cb)) {
              cb.call(node, -1);
            }
          }
      }
    }, {
      key: "animate",
      value: function animate(list) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var animation = new Animation(this, list, options);

        if (this.isDestroyed) {
          animation.__destroy(true);

          return animation;
        }

        this.animationList.push(animation);

        if (options.autoPlay === false) {
          return animation;
        }

        return animation.play();
      }
    }, {
      key: "removeAnimate",
      value: function removeAnimate(o) {
        if (o instanceof Animation) {
          var i = this.animationList.indexOf(o);

          if (i > -1) {
            o.cancel();

            o.__destroy();

            this.animationList.splice(i, 1);
          }
        }
      }
    }, {
      key: "clearAnimate",
      value: function clearAnimate() {
        this.animationList.splice(0).forEach(function (o) {
          o.cancel();

          o.__destroy();
        });
      }
    }, {
      key: "frameAnimate",
      value: function frameAnimate(cb) {
        if (util.isFunction(cb)) {
          var list = this.__frameAnimateList; // 防止重复

          for (var i = 0, len = list.length; i < len; i++) {
            if (list[i].__karasFramecb === cb) {
              return cb;
            }
          }

          var enter = {
            __after: function __after(diff) {
              cb(diff);
            },
            __karasFramecb: cb
          };
          list.push(enter);
          frame.onFrame(enter);
          return cb;
        }
      }
    }, {
      key: "removeFrameAnimate",
      value: function removeFrameAnimate(cb) {
        for (var i = 0, list = this.__frameAnimateList, len = list.length; i < len; i++) {
          if (list[i].__karasFramecb === cb) {
            list.splice(i, 1);
            frame.offFrame(cb);
            return;
          }
        }
      }
    }, {
      key: "clearFrameAnimate",
      value: function clearFrameAnimate() {
        this.__frameAnimateList.splice(0).forEach(function (o) {
          frame.offFrame(o);
        });
      }
    }, {
      key: "__computeMeasure",
      value: function __computeMeasure(renderMode, ctx, cb) {
        css.computeMeasure(this);

        if (util.isFunction(cb)) {
          cb(this);
        }
      }
    }, {
      key: "__deepScan",
      value: function __deepScan(cb, options) {
        return cb(this, options);
      } // isLayout为false时，为relative/margin/flex/vertical等

    }, {
      key: "__offsetX",
      value: function __offsetX(diff, isLayout, lv) {
        _get(_getPrototypeOf(Xom.prototype), "__offsetX", this).call(this, diff, isLayout);

        if (isLayout) {
          this.__layoutData.x += diff;
          this.clearCache();
        }

        if (lv !== undefined) {
          this.__config[NODE_REFRESH_LV] |= lv;
        }

        this.__sx1 += diff;
        this.__sx2 += diff;
        this.__sx3 += diff;
        this.__sx4 += diff;
        this.__sx5 += diff;
        this.__sx6 += diff;
      }
    }, {
      key: "__offsetY",
      value: function __offsetY(diff, isLayout, lv) {
        _get(_getPrototypeOf(Xom.prototype), "__offsetY", this).call(this, diff, isLayout);

        if (isLayout) {
          this.__layoutData.y += diff;
          this.clearCache();
        }

        if (lv !== undefined) {
          this.__config[NODE_REFRESH_LV] |= lv;
        }

        this.__sy1 += diff;
        this.__sy2 += diff;
        this.__sy3 += diff;
        this.__sy4 += diff;
        this.__sy5 += diff;
        this.__sy6 += diff;
      }
    }, {
      key: "__resizeX",
      value: function __resizeX(diff, lv) {
        this.computedStyle.width = this.__width += diff;
        this.__clientWidth += diff;
        this.__offsetWidth += diff;
        this.__outerWidth += diff;
        this.__layoutData.w += diff;
        this.__sx4 += diff;
        this.__sx5 += diff;
        this.__sx6 += diff;

        if (diff < 0) {
          this.__config[NODE_LIMIT_CACHE$1] = false;
        }

        if (lv !== undefined) {
          this.__config[NODE_REFRESH_LV] |= lv;
        }

        this.clearCache();
      }
    }, {
      key: "__resizeY",
      value: function __resizeY(diff, lv) {
        this.computedStyle.height = this.__height += diff;
        this.__clientHeight += diff;
        this.__offsetHeight += diff;
        this.__outerHeight += diff;
        this.__layoutData.h += diff;
        this.__sy4 += diff;
        this.__sy5 += diff;
        this.__sy6 += diff;

        if (diff < 0) {
          this.__config[NODE_LIMIT_CACHE$1] = false;
        }

        if (lv !== undefined) {
          this.__config[NODE_REFRESH_LV] |= lv;
        }

        this.clearCache();
      }
    }, {
      key: "__spreadBbox",
      value: function __spreadBbox(boxShadow) {
        var ox = 0,
            oy = 0;

        if (Array.isArray(boxShadow)) {
          boxShadow.forEach(function (item) {
            var _item2 = _slicedToArray(item, 6),
                x = _item2[0],
                y = _item2[1],
                sigma = _item2[2],
                spread = _item2[3],
                inset = _item2[5];

            if (inset !== 'inset') {
              var d = blur.outerSize(sigma);
              d += spread;
              ox = Math.max(ox, x + d);
              oy = Math.max(oy, y + d);
            }
          });
        }

        return [ox, oy];
      }
    }, {
      key: "__releaseWhenEmpty",
      value: function __releaseWhenEmpty(__cache) {
        if (__cache && __cache.available) {
          __cache.release();
        }

        return true;
      }
    }, {
      key: "getComputedStyle",
      value: function getComputedStyle(key) {
        var computedStyle = this.computedStyle;
        var res = {};
        var keys;

        if (key) {
          if (Array.isArray(key)) {
            keys = key;
          } else {
            keys = [key];
          }

          keys = keys.map(function (s) {
            return STYLE_KEY$5[style2Upper$2(s)];
          });
        } else {
          keys = Object.keys(computedStyle);
        }

        keys.forEach(function (k) {
          if (GEOM$4.hasOwnProperty(k)) {
            res[k] = computedStyle[k];
          } else {
            res[STYLE_RV_KEY$2[k]] = computedStyle[k];
          }
        });
        return res;
      }
    }, {
      key: "getBoundingClientRect",
      value: function getBoundingClientRect() {
        var __sx1 = this.__sx1,
            __sy1 = this.__sy1,
            offsetWidth = this.offsetWidth,
            offsetHeight = this.offsetHeight,
            matrixEvent = this.matrixEvent;
        var p1 = point2d$1(mx.calPoint([__sx1, __sy1], matrixEvent));
        var p2 = point2d$1(mx.calPoint([__sx1 + offsetWidth, __sy1], matrixEvent));
        var p3 = point2d$1(mx.calPoint([__sx1 + offsetWidth, __sy1 + offsetHeight], matrixEvent));
        var p4 = point2d$1(mx.calPoint([__sx1, __sy1 + offsetHeight], matrixEvent));
        return {
          left: Math.min(p1[0], Math.min(p2[0], Math.min(p3[0], p4[0]))),
          top: Math.min(p1[1], Math.min(p2[1], Math.min(p3[1], p4[1]))),
          right: Math.max(p1[0], Math.max(p2[0], Math.max(p3[0], p4[0]))),
          bottom: Math.max(p1[1], Math.max(p2[1], Math.max(p3[1], p4[1]))),
          points: [p1, p2, p3, p4]
        };
      } // img和geom返回false，在inline布局时判断是否是真的inline

    }, {
      key: "__isRealInline",
      value: function __isRealInline() {
        return true;
      }
    }, {
      key: "remove",
      value: function remove(cb) {
        var self = this;

        if (self.isDestroyed) {
          inject.warn('Remove target is destroyed.');

          if (util.isFunction(cb)) {
            cb();
          }

          return;
        }

        var root = self.root,
            domParent = self.domParent;
        var target = self.isShadowRoot ? self.hostRoot : self; // 特殊情况连续append/remove时候，还未被添加进来找不到所以无需删除

        if (domParent.children.indexOf(target) === -1) {
          if (util.isFunction(cb)) {
            cb();
          }

          return;
        }

        root.delRefreshTask(self.__task);
        root.addRefreshTask(self.__task = {
          __before: function __before() {
            self.__task = null; // 清除在before，防止after的回调增加新的task误删

            var pJson = domParent.__json;
            var i = pJson.children.indexOf(self.isShadowRoot ? self.hostRoot.__json : self.__json);
            var zChildren = domParent.zIndexChildren;
            var j = zChildren.indexOf(self.isShadowRoot ? self.hostRoot : self);

            if (i === -1 || j === -1) {
              throw new Error('Remove index Exception.');
            }

            pJson.children.splice(i, 1);
            domParent.children.splice(i, 1);
            zChildren.splice(j, 1);

            if (self.__prev) {
              self.__prev.__next = self.__next;
            } // 刷新前统一赋值，由刷新逻辑计算最终值避免优先级覆盖问题


            var res = {};
            res[UPDATE_NODE$2] = self;
            res[UPDATE_FOCUS$1] = o$3.REFLOW;
            res[UPDATE_REMOVE_DOM] = true;
            res[UPDATE_CONFIG$2] = self.__config;

            root.__addUpdate(self, self.__config, root, root.__config, res);
          },
          __after: function __after(diff) {
            self.isShadowRoot ? self.hostRoot.__destroy() : self.__destroy();

            if (util.isFunction(cb)) {
              cb.call(self, diff);
            }
          }
        });
      }
    }, {
      key: "tagName",
      get: function get() {
        return this.__tagName;
      }
    }, {
      key: "sx",
      get: function get() {
        return this.__sx;
      }
    }, {
      key: "sy",
      get: function get() {
        return this.__sy;
      }
    }, {
      key: "clientWidth",
      get: function get() {
        return this.__clientWidth || 0;
      }
    }, {
      key: "clientHeight",
      get: function get() {
        return this.__clientHeight || 0;
      }
    }, {
      key: "offsetWidth",
      get: function get() {
        return this.__offsetWidth || 0;
      }
    }, {
      key: "offsetHeight",
      get: function get() {
        return this.__offsetHeight || 0;
      }
    }, {
      key: "outerWidth",
      get: function get() {
        return this.__outerWidth || 0;
      }
    }, {
      key: "outerHeight",
      get: function get() {
        return this.__outerHeight || 0;
      } // 不考虑margin的范围，>=REPAINT渲染或个别有影响的渲染改变（如blur）清空缓存

    }, {
      key: "bbox",
      get: function get() {
        if (!this.__bbox) {
          var __sx1 = this.__sx1,
              __sy1 = this.__sy1,
              clientWidth = this.clientWidth,
              clientHeight = this.clientHeight,
              _this$currentStyle = this.currentStyle,
              borderTopWidth = _this$currentStyle[BORDER_TOP_WIDTH$2],
              borderRightWidth = _this$currentStyle[BORDER_RIGHT_WIDTH$2],
              borderBottomWidth = _this$currentStyle[BORDER_BOTTOM_WIDTH$2],
              borderLeftWidth = _this$currentStyle[BORDER_LEFT_WIDTH$3],
              boxShadow = _this$currentStyle[BOX_SHADOW$2];

          var _this$__spreadBbox = this.__spreadBbox(boxShadow),
              _this$__spreadBbox2 = _slicedToArray(_this$__spreadBbox, 2),
              ox = _this$__spreadBbox2[0],
              oy = _this$__spreadBbox2[1];

          clientWidth += borderLeftWidth[0] + borderRightWidth[0];
          clientHeight += borderTopWidth[0] + borderBottomWidth[0];
          var half = 1;
          this.__bbox = [__sx1 - ox - half, __sy1 - oy - half, __sx1 + clientWidth + ox + half, __sy1 + clientHeight + oy + half];
        }

        return this.__bbox;
      }
    }, {
      key: "listener",
      get: function get() {
        return this.__listener;
      }
    }, {
      key: "matrix",
      get: function get() {
        return this.__config[NODE_MATRIX$1];
      }
    }, {
      key: "matrixEvent",
      get: function get() {
        return this.__config[NODE_MATRIX_EVENT$2];
      }
    }, {
      key: "perspectiveMatrix",
      get: function get() {
        return this.__config[NODE_PERSPECTIVE_MATRIX];
      }
    }, {
      key: "style",
      get: function get() {
        return this.__style;
      }
    }, {
      key: "computedStyle",
      get: function get() {
        return this.__computedStyle;
      }
    }, {
      key: "animationList",
      get: function get() {
        return this.__animationList;
      }
    }, {
      key: "currentStyle",
      get: function get() {
        return this.__currentStyle;
      }
    }, {
      key: "isShadowRoot",
      get: function get() {
        return !this.parent && this.host && this.host !== this.root;
      }
    }, {
      key: "contentBoxList",
      get: function get() {
        return this.__contentBoxList;
      }
    }, {
      key: "baseLine",
      get: function get() {
        return this.offsetHeight;
      }
    }, {
      key: "firstBaseLine",
      get: function get() {
        return this.offsetHeight;
      }
    }, {
      key: "isMask",
      get: function get() {
        return this.__isMask;
      }
    }, {
      key: "isClip",
      get: function get() {
        return this.__isClip;
      }
    }, {
      key: "cacheAsBitmap",
      get: function get() {
        return this.__cacheAsBitmap;
      },
      set: function set(v) {
        this.__config[NODE_CACHE_AS_BITMAP] = this.__cacheAsBitmap = !!v;
      }
    }]);

    return Xom;
  }(Node);

  var _enums$STYLE_KEY$d = enums.STYLE_KEY,
      DISPLAY$3 = _enums$STYLE_KEY$d.DISPLAY,
      MARGIN_LEFT$2 = _enums$STYLE_KEY$d.MARGIN_LEFT,
      BORDER_LEFT_WIDTH$4 = _enums$STYLE_KEY$d.BORDER_LEFT_WIDTH,
      PADDING_LEFT$3 = _enums$STYLE_KEY$d.PADDING_LEFT,
      PADDING_RIGHT$2 = _enums$STYLE_KEY$d.PADDING_RIGHT,
      BORDER_RIGHT_WIDTH$3 = _enums$STYLE_KEY$d.BORDER_RIGHT_WIDTH,
      MARGIN_RIGHT$2 = _enums$STYLE_KEY$d.MARGIN_RIGHT;
  /**
   * css中常见的概念，一行内容，里面可能有若干不同的内容，仅在布局阶段出现，不参与渲染逻辑
   * 本类是个抽象逻辑概念，会包含Text的内容TextBox和inlineBlock等节点，而内容TextBox则属于Text
   * 一个Text可能因为换行产生多个TextBox，从而形成不同行的内容就属于不同的LineBox
   * 本类属于block（包含flex和inlineBlock，下同）节点下，一个dom会有个专门列表，
   * 包含若干个LineBox保存着若干行文本内容TextBox，不直接关联Text，
   * inline则不会有此对象和列表，其复用最近block父层的，这样解决嵌套问题，
   * block在布局时将列表向孩子传递下去，每遇到block会重新生成
   * 每当发生换行时，专门列表中会新生成一个LineBox，让后续内容继续跟随新的LB
   * LB内部要进行垂直对齐，Text内容较简单x字符底部为baseLine，inlineBlock等节点按最后一行baseLine
   */

  var LineBox = /*#__PURE__*/function () {
    function LineBox(x, y, lineHeight, baseLine) {
      _classCallCheck(this, LineBox);

      this.__list = [];
      this.__x = x;
      this.__y = y;
      this.__lineHeight = lineHeight; // 可能出现空的inline，因此一个inline进入布局时先设置当前lineBox的最小lineHeight/baseLine

      this.__baseLine = baseLine;
    }

    _createClass(LineBox, [{
      key: "add",
      value: function add(item) {
        this.list.push(item);
        item.__parentLineBox = this;
      }
    }, {
      key: "verticalAlign",
      value: function verticalAlign() {
        var n = this.baseLine; // 只有1个也需要对齐，因为可能内嵌了空inline使得baseLine发生变化

        if (this.list.length) {
          this.list.forEach(function (item) {
            var m = item.baseLine;

            if (m !== n) {
              item.__offsetY(n - m);
            }
          });
        }
      }
    }, {
      key: "__offsetX",
      value: function __offsetX(diff) {
        this.__x += diff;
      }
    }, {
      key: "__offsetY",
      value: function __offsetY(diff) {
        this.__y += diff;
      }
      /**
       * 防止非行首空inline，每当遇到inline就设置当前lineBox的lineHeight/baseLine，这样有最小值兜底
       * @param l
       * @param b
       * @private
       */

    }, {
      key: "__setLB",
      value: function __setLB(l, b) {
        this.__lineHeight = Math.max(l, this.__lineHeight);
        this.__baseLine = Math.max(b, this.__baseLine);
      }
    }, {
      key: "list",
      get: function get() {
        return this.__list;
      }
    }, {
      key: "size",
      get: function get() {
        return this.__list.length;
      }
    }, {
      key: "x",
      get: function get() {
        return this.__x;
      }
    }, {
      key: "y",
      get: function get() {
        return this.__y;
      }
    }, {
      key: "endY",
      get: function get() {
        return this.y + this.height;
      }
    }, {
      key: "width",
      get: function get() {
        var list = this.list;
        var length = list.length;

        if (length) {
          var first = list[0];
          var last = list[length - 1];
          var x1 = first.x;
          var dom = first instanceof TextBox ? first.parent.domParent : first.domParent; // 因为inline可以嵌套inline，所以一直向上查找到非inline为止，每层inline如果是首个则减去左侧mbp

          while (true) {
            var _list = dom.contentBoxList;
            var _dom$computedStyle = dom.computedStyle,
                display = _dom$computedStyle[DISPLAY$3],
                marginLeft = _dom$computedStyle[MARGIN_LEFT$2],
                borderLeftWidth = _dom$computedStyle[BORDER_LEFT_WIDTH$4],
                paddingLeft = _dom$computedStyle[PADDING_LEFT$3];

            if (display !== 'inline') {
              break;
            }

            if (first === _list[0]) {
              x1 -= marginLeft + borderLeftWidth + paddingLeft;
            }

            dom = dom.domParent;
          }

          var x2 = last.x + last.outerWidth;
          dom = last instanceof TextBox ? last.parent.domParent : last.domParent; // 同向上查非inline，每层inline如果是最后一个则加上右侧mbp

          while (true) {
            var _list2 = dom.contentBoxList;
            var _dom$computedStyle2 = dom.computedStyle,
                _display = _dom$computedStyle2[DISPLAY$3],
                marginRight = _dom$computedStyle2[MARGIN_RIGHT$2],
                borderRightWidth = _dom$computedStyle2[BORDER_RIGHT_WIDTH$3],
                paddingRight = _dom$computedStyle2[PADDING_RIGHT$2];

            if (_display !== 'inline') {
              break;
            }

            if (first === _list2[_list2.length - 1]) {
              x2 += marginRight + borderRightWidth + paddingRight;
            }

            dom = dom.domParent;
          }

          return x2 - x1;
        }

        return 0;
      }
    }, {
      key: "height",
      get: function get() {
        return this.lineHeight;
      }
    }, {
      key: "baseLine",
      get: function get() {
        var baseLine = 0;
        this.list.forEach(function (item) {
          baseLine = Math.max(baseLine, item.baseLine);
        });
        return Math.max(this.__baseLine, baseLine);
      }
    }, {
      key: "lineHeight",
      get: function get() {
        var lineHeight = 0; // 只有TextBox和InlineBlock

        this.list.forEach(function (item) {
          lineHeight = Math.max(lineHeight, item.outerHeight);
        });
        return Math.max(this.__lineHeight, lineHeight);
      }
    }]);

    return LineBox;
  }();

  /**
   * 维护一个上下文的LineBox，向LineBox中添加Item以及新增下一行的LineBox，多个LineBox组成一个区域
   * 一个block/inlineBlock拥有一个本类对象，上下文即对应这个dom流，而inline则复用最近非inline父元素的
   * 同时LineBox可能连续也可能不连续，不连续的是中间有block之类的隔离开来
   */

  var LineBoxManager = /*#__PURE__*/function () {
    function LineBoxManager(x, y, lineHeight, baseLine) {
      _classCallCheck(this, LineBoxManager);

      this.__x = this.__lastX = x; // last存储目前最后一行LineBox的结尾位置，供后续inline使用

      this.__y = this.__lastY = y;
      this.__maxX = x;
      this.__domList = [];
      this.__domStack = [];
      this.__list = []; // 包含若干LineBox

      this.__isNewLine = true; // 区域内是否是新行，容器dom（block）开头肯定是

      this.__lineHeight = lineHeight;
      this.__baseLine = baseLine;
      this.__isEnd = true; // 在dom中是否一个区域处在结尾，外部控制
    }
    /**
     * 每次换行时重新生成LineBox存入列表，同时由于flow流当前一定是流（dom）的结尾，设置isEnd
     * @returns {LineBox}
     */


    _createClass(LineBoxManager, [{
      key: "genLineBox",
      value: function genLineBox(x, y) {
        var lineBox = new LineBox(x, y, this.__lineHeight, this.__baseLine);
        this.list.push(lineBox);
        this.__isEnd = true;
        return lineBox;
      }
      /**
       * inline的特殊调用，防止空内容但有mbp的inline不占位，放入一个有lineHeight的空lineBox
       * 只有新行开头时需要，后面的无论是否有内容都会影响lineHeight
       * @param x
       * @param y
       * @param l
       * @param b
       * @returns {LineBox}
       */

    }, {
      key: "genLineBoxByInlineIfNewLine",
      value: function genLineBoxByInlineIfNewLine(x, y, l, b) {
        var lineHeight = Math.max(this.__lineHeight, l);
        var baseLine = Math.max(this.__baseLine, b);

        if (this.__isNewLine) {
          var lineBox = new LineBox(x, y, lineHeight, baseLine);
          this.list.push(lineBox);
          this.__isEnd = true;
          this.__isNewLine = false;
          return lineBox;
        }
      }
    }, {
      key: "setLbOrGenLineBoxByInline",
      value: function setLbOrGenLineBoxByInline(x, y, l, b) {
        var lineHeight = Math.max(this.__lineHeight, l);
        var baseLine = Math.max(this.__baseLine, b);
        var lineBox;
        var list = this.list;

        if (this.__isNewLine) {
          lineBox = new LineBox(x, y, lineHeight, baseLine);
          list.push(lineBox);
          this.__isEnd = true;
          this.__isNewLine = false;
          return lineBox;
        } else {
          var length = list.length;
          lineBox = list[length - 1];

          lineBox.__setLB(l, b);
        }
      }
      /**
       * 外部设置为结尾，如一个LineBox后出现一个block，此时会被隔断，不再作为流的末尾
       */

    }, {
      key: "setNotEnd",
      value: function setNotEnd() {
        this.__isEnd = false;
      }
      /**
       * 外部设置新行，下次新生成LineBox
       */

    }, {
      key: "setNewLine",
      value: function setNewLine() {
        this.__isNewLine = true;
      }
      /**
       * 当前LineBox放入一个新项，当新行时（如第一行）产生一个新的LineBox并存入列表
       * 是否新区域和新行都是可以被外部控制，默认第一行是新
       * 当被隔断后会被外部重置新行，这样会生成新的来作为新加项的LineBox
       * 当换行时外部也会调用新行，这样再次添加Item时会自动生成新的LineBox而不是用之前的
       * @param o TextBox/Inline/InlineBlock
       * @param nextNewLine 是否设置newLine，标明下次添加新生成LineBox
       * @returns {LineBox}
       */

    }, {
      key: "addItem",
      value: function addItem(o, nextNewLine) {
        var lineBox;

        if (this.__isNewLine) {
          this.__isNewLine = false;
          lineBox = this.genLineBox(o.x, o.y);
        } else {
          var list = this.list;
          var length = list.length;
          lineBox = list[length - 1];
        } // inline递归过程中所有inline父子顺序列表，每个dom都需要对当前内容保存


        this.__domStack.forEach(function (item) {
          item.__contentBoxList.push(o);
        });

        lineBox.add(o); // 设置结束x的位置给next的inline标记用，o可能是TextBox或inlineBlock，当next新行时注意位置

        if (nextNewLine) {
          this.__isNewLine = true;
          this.__lastX = o.x;
          this.__lastY = o.y + o.outerHeight;
        } else {
          this.__lastX = o.x + o.outerWidth;
          this.__lastY = o.y;
        }

        this.__maxX = Math.max(this.__maxX, o.x + o.outerWidth);
        return lineBox;
      }
    }, {
      key: "horizonAlign",
      value: function horizonAlign(w, textAlign) {
        this.list.forEach(function (lineBox) {
          var diff = w - lineBox.width;

          if (diff > 0) {
            if (textAlign === 'center') {
              diff *= 0.5;
            }

            lineBox.__offsetX(diff);

            lineBox.list.forEach(function (item) {
              item.__offsetX(diff, true);
            });
          }
        });
      }
    }, {
      key: "verticalAlign",
      value: function verticalAlign() {
        this.list.forEach(function (lineBox) {
          lineBox.verticalAlign();
        });
      }
    }, {
      key: "addX",
      value: function addX(n) {
        this.__lastX += n;
      }
      /**
       * inline递归过程中布局调用，不断出入栈dom对象，获取当前行状态下有哪些dom还在
       * @param dom
       */

    }, {
      key: "pushContentBoxList",
      value: function pushContentBoxList(dom) {
        this.__domList.push(dom);

        this.__domStack.push(dom);
      }
    }, {
      key: "popContentBoxList",
      value: function popContentBoxList() {
        this.__domStack.pop();
      }
    }, {
      key: "__offsetX",
      value: function __offsetX(diff) {
        this.list.forEach(function (lineBox) {
          lineBox.__offsetX(diff);
        });
      }
    }, {
      key: "__offsetY",
      value: function __offsetY(diff) {
        this.list.forEach(function (lineBox) {
          lineBox.__offsetY(diff);
        });
      }
      /**
       * inline的特殊调用，非行首无论是否有内容都设置lineBox的lineHeight
       * @param l
       * @param b
       * @private
       */

    }, {
      key: "setLbByInlineIfNotNewLine",
      value: function setLbByInlineIfNotNewLine(l, b) {
        var length = this.list.length;

        if (length && !this.isNewLine) {
          this.list[length - 1].__setLB(l, b);
        }
      }
    }, {
      key: "size",
      get: function get() {
        return this.list.length;
      }
    }, {
      key: "lastX",
      get: function get() {
        return this.__lastX;
      }
    }, {
      key: "lastY",
      get: function get() {
        return this.__lastY;
      }
    }, {
      key: "endY",
      get: function get() {
        var list = this.list;
        var length = list.length;

        if (length) {
          return list[length - 1].endY;
        }

        return this.__y;
      }
    }, {
      key: "isEnd",
      get: function get() {
        return this.__isEnd;
      }
    }, {
      key: "isNewLine",
      get: function get() {
        return this.__isNewLine;
      }
    }, {
      key: "breakLine",
      get: function get() {
        return this.list.length > 1;
      }
    }, {
      key: "domList",
      get: function get() {
        return this.__domList;
      }
    }, {
      key: "baseLine",
      get: function get() {
        var list = this.list;
        var length = list.length;

        if (length) {
          var n = 0;

          for (var i = 0; i < length - 1; i++) {
            n += list[i].height;
          }

          return n + list[length - 1].baseLine;
        }

        return 0;
      }
    }, {
      key: "firstBaseLine",
      get: function get() {
        var list = this.list;
        var length = list.length;

        if (length) {
          return list[0].baseLine;
        }

        return 0;
      }
    }, {
      key: "lineHeight",
      get: function get() {
        var list = this.list;

        if (list.length) {
          return list[list.length - 1].lineHeight;
        }

        return 0;
      }
    }, {
      key: "lineBox",
      get: function get() {
        var list = this.list;

        if (list.length) {
          return list[list.length - 1];
        }
      }
    }, {
      key: "list",
      get: function get() {
        return this.__list;
      }
    }, {
      key: "width",
      get: function get() {
        var w = 0;
        this.list.forEach(function (item) {
          w = Math.max(w, item.width);
        });
        return w;
      }
    }]);

    return LineBoxManager;
  }();

  var TAG_NAME = {
    'div': true,
    'p': true,
    'span': true,
    'img': true,
    'b': true,
    'strong': true
  };
  var INLINE = {
    'span': true,
    'img': true,
    'b': true,
    'strong': true
  };
  var BOLD = {
    'b': true,
    'strong': true
  };
  var tag = {
    TAG_NAME: TAG_NAME,
    INLINE: INLINE,
    BOLD: BOLD
  };

  var _enums$STYLE_KEY$e = enums.STYLE_KEY,
      DISPLAY$4 = _enums$STYLE_KEY$e.DISPLAY,
      TOP$2 = _enums$STYLE_KEY$e.TOP,
      BOTTOM$2 = _enums$STYLE_KEY$e.BOTTOM,
      POSITION$2 = _enums$STYLE_KEY$e.POSITION,
      HEIGHT$4 = _enums$STYLE_KEY$e.HEIGHT;
  var AUTO$5 = o.AUTO,
      PX$7 = o.PX,
      PERCENT$8 = o.PERCENT;
  var REFLOW$1 = o$3.REFLOW;

  function offsetAndResizeByNodeOnY(node, root, reflowHash, dy, inDirectAbsList) {
    if (dy) {
      var last;

      do {
        // component的sr没有next兄弟，视为component的next
        while (node.isShadowRoot) {
          node = node.host;
        }

        last = node;
        var isContainer = void 0,
            parent = node.domParent;

        if (parent) {
          var cs = parent.computedStyle;
          var ps = cs[POSITION$2];
          isContainer = parent === root || parent.isShadowRoot || ps === 'relative' || ps === 'absolute';
        } // 先偏移next，忽略有定位的absolute，本身非container也忽略


        var next = node.next;
        var container = void 0;

        while (next) {
          if (next.currentStyle[DISPLAY$4] !== 'none') {
            if (next.currentStyle[POSITION$2] === 'absolute') {
              var _next$currentStyle = next.currentStyle,
                  top = _next$currentStyle[TOP$2],
                  bottom = _next$currentStyle[BOTTOM$2],
                  height = _next$currentStyle[HEIGHT$4];

              if (top[1] === AUTO$5) {
                if (bottom[1] === AUTO$5 || bottom[1] === PX$7) {
                  next.__offsetY(dy, true, REFLOW$1);

                  next.clearCache();
                } else if (bottom[1] === PERCENT$8) {
                  var v = (1 - bottom[0] * 0.01) * dy;

                  next.__offsetY(v, true, REFLOW$1);

                  next.clearCache();
                }
              } else if (top[1] === PERCENT$8) {
                var _v = top[0] * 0.01 * dy;

                next.__offsetY(_v, true, REFLOW$1);

                next.clearCache();
              } // 高度百分比需发生变化的重新布局，需要在容器内


              if (height[1] === PERCENT$8) {
                if (isContainer) {
                  parent.__layoutAbs(parent, null, next);
                } else {
                  if (!container) {
                    container = parent;

                    while (container) {
                      if (container === root || container.isShadowRoot) {
                        break;
                      }

                      var _cs = container.currentStyle;

                      if (_cs[POSITION$2] === 'absolute' || _cs[POSITION$2] === 'relative') {
                        break;
                      }

                      container = container.domParent;
                    }
                  }

                  inDirectAbsList.push([parent, container, next]);
                }
              }
            } else {
              next.__offsetY(dy, true, REFLOW$1);

              next.clearCache();
            }
          }

          next = next.next;
        } // root本身没domParent


        if (!parent) {
          break;
        }

        node = parent; // parent判断是否要resize

        var _node = node,
            currentStyle = _node.currentStyle;
        var isAbs = currentStyle[POSITION$2] === 'absolute';
        var need = void 0;

        if (isAbs) {
          if (currentStyle[HEIGHT$4][1] === AUTO$5 && (currentStyle[TOP$2][1] === AUTO$5 || currentStyle[BOTTOM$2][1] === AUTO$5)) {
            need = true;
          }
        } // height不定则需要
        else if (currentStyle[HEIGHT$4][1] === AUTO$5) {
            need = true;
          }

        if (need) {
          node.__resizeY(dy, REFLOW$1);

          node.clearCache();
        } // abs或者高度不需要继续向上调整提前跳出
        else {
            break;
          }

        if (node === root) {
          break;
        }
      } while (true); // 最后一个递归向上取消总缓存，防止过程中重复next多次无用递归


      while (last) {
        last.clearCache(true);
        last = last.domParent;
      }
    }
  }

  function clearUniqueReflowId(hash) {
    for (var i in hash) {
      if (hash.hasOwnProperty(i)) {
        var node = hash[i].node;
        delete node.__uniqueReflowId;
      }
    }
  }

  function getMergeMarginTB(topList, bottomList) {
    var total = 0;
    var max = topList[0];
    var min = topList[0];
    topList.forEach(function (item) {
      total += item;
      max = Math.max(max, item);
      min = Math.min(min, item);
    });
    bottomList.forEach(function (item) {
      total += item;
      max = Math.max(max, item);
      min = Math.min(min, item);
    }); // 正数取最大，负数取最小，正负则相加

    var diff = 0;

    if (max > 0 && min > 0) {
      diff = Math.max(max, min) - total;
    } else if (max < 0 && min < 0) {
      diff = Math.min(max, min) - total;
    } else if (max !== 0 || min !== 0) {
      diff = max + min - total;
    }

    return diff;
  }

  var reflow = {
    offsetAndResizeByNodeOnY: offsetAndResizeByNodeOnY,
    clearUniqueReflowId: clearUniqueReflowId,
    getMergeMarginTB: getMergeMarginTB
  };

  var _enums$STYLE_KEY$f = enums.STYLE_KEY,
      POSITION$3 = _enums$STYLE_KEY$f.POSITION,
      DISPLAY$5 = _enums$STYLE_KEY$f.DISPLAY,
      FONT_WEIGHT$4 = _enums$STYLE_KEY$f.FONT_WEIGHT,
      MARGIN_LEFT$3 = _enums$STYLE_KEY$f.MARGIN_LEFT,
      MARGIN_TOP$1 = _enums$STYLE_KEY$f.MARGIN_TOP,
      MARGIN_RIGHT$3 = _enums$STYLE_KEY$f.MARGIN_RIGHT,
      MARGIN_BOTTOM$1 = _enums$STYLE_KEY$f.MARGIN_BOTTOM,
      PADDING_LEFT$4 = _enums$STYLE_KEY$f.PADDING_LEFT,
      PADDING_BOTTOM$2 = _enums$STYLE_KEY$f.PADDING_BOTTOM,
      PADDING_RIGHT$3 = _enums$STYLE_KEY$f.PADDING_RIGHT,
      PADDING_TOP$2 = _enums$STYLE_KEY$f.PADDING_TOP,
      BORDER_TOP_WIDTH$3 = _enums$STYLE_KEY$f.BORDER_TOP_WIDTH,
      BORDER_BOTTOM_WIDTH$3 = _enums$STYLE_KEY$f.BORDER_BOTTOM_WIDTH,
      BORDER_RIGHT_WIDTH$4 = _enums$STYLE_KEY$f.BORDER_RIGHT_WIDTH,
      BORDER_LEFT_WIDTH$5 = _enums$STYLE_KEY$f.BORDER_LEFT_WIDTH,
      TOP$3 = _enums$STYLE_KEY$f.TOP,
      RIGHT$1 = _enums$STYLE_KEY$f.RIGHT,
      BOTTOM$3 = _enums$STYLE_KEY$f.BOTTOM,
      LEFT$1 = _enums$STYLE_KEY$f.LEFT,
      WIDTH$5 = _enums$STYLE_KEY$f.WIDTH,
      HEIGHT$5 = _enums$STYLE_KEY$f.HEIGHT,
      TEXT_ALIGN$2 = _enums$STYLE_KEY$f.TEXT_ALIGN,
      FLEX_DIRECTION$2 = _enums$STYLE_KEY$f.FLEX_DIRECTION,
      FLEX_BASIS$2 = _enums$STYLE_KEY$f.FLEX_BASIS,
      FLEX_SHRINK$1 = _enums$STYLE_KEY$f.FLEX_SHRINK,
      FLEX_GROW$1 = _enums$STYLE_KEY$f.FLEX_GROW,
      ALIGN_SELF$1 = _enums$STYLE_KEY$f.ALIGN_SELF,
      ALIGN_ITEMS$1 = _enums$STYLE_KEY$f.ALIGN_ITEMS,
      JUSTIFY_CONTENT$1 = _enums$STYLE_KEY$f.JUSTIFY_CONTENT,
      Z_INDEX$3 = _enums$STYLE_KEY$f.Z_INDEX,
      WHITE_SPACE$2 = _enums$STYLE_KEY$f.WHITE_SPACE,
      LINE_HEIGHT$4 = _enums$STYLE_KEY$f.LINE_HEIGHT,
      LINE_CLAMP$1 = _enums$STYLE_KEY$f.LINE_CLAMP,
      ORDER$1 = _enums$STYLE_KEY$f.ORDER,
      FLEX_WRAP$1 = _enums$STYLE_KEY$f.FLEX_WRAP,
      ALIGN_CONTENT$1 = _enums$STYLE_KEY$f.ALIGN_CONTENT,
      OVERFLOW$2 = _enums$STYLE_KEY$f.OVERFLOW,
      FONT_SIZE$9 = _enums$STYLE_KEY$f.FONT_SIZE,
      _enums$NODE_KEY$4 = enums.NODE_KEY,
      NODE_CURRENT_STYLE$2 = _enums$NODE_KEY$4.NODE_CURRENT_STYLE,
      NODE_STYLE$2 = _enums$NODE_KEY$4.NODE_STYLE,
      NODE_STRUCT$2 = _enums$NODE_KEY$4.NODE_STRUCT,
      NODE_DOM_PARENT$3 = _enums$NODE_KEY$4.NODE_DOM_PARENT,
      NODE_IS_INLINE$1 = _enums$NODE_KEY$4.NODE_IS_INLINE,
      _enums$UPDATE_KEY$3 = enums.UPDATE_KEY,
      UPDATE_NODE$3 = _enums$UPDATE_KEY$3.UPDATE_NODE,
      UPDATE_FOCUS$2 = _enums$UPDATE_KEY$3.UPDATE_FOCUS,
      UPDATE_ADD_DOM = _enums$UPDATE_KEY$3.UPDATE_ADD_DOM,
      UPDATE_CONFIG$3 = _enums$UPDATE_KEY$3.UPDATE_CONFIG,
      UPDATE_MEASURE$1 = _enums$UPDATE_KEY$3.UPDATE_MEASURE,
      _enums$STRUCT_KEY$1 = enums.STRUCT_KEY,
      STRUCT_NUM = _enums$STRUCT_KEY$1.STRUCT_NUM,
      STRUCT_LV$1 = _enums$STRUCT_KEY$1.STRUCT_LV,
      STRUCT_TOTAL = _enums$STRUCT_KEY$1.STRUCT_TOTAL,
      STRUCT_CHILD_INDEX$1 = _enums$STRUCT_KEY$1.STRUCT_CHILD_INDEX,
      STRUCT_INDEX$1 = _enums$STRUCT_KEY$1.STRUCT_INDEX;
  var AUTO$6 = o.AUTO,
      PX$8 = o.PX,
      PERCENT$9 = o.PERCENT,
      REM$8 = o.REM,
      VW$8 = o.VW,
      VH$8 = o.VH,
      VMAX$8 = o.VMAX,
      VMIN$8 = o.VMIN;
  var calAbsolute$1 = css.calAbsolute,
      isRelativeOrAbsolute$1 = css.isRelativeOrAbsolute;

  function genZIndexChildren(dom) {
    var normal = [];
    var hasMc;
    var mcHash = {};
    var lastMaskIndex;
    var children = dom.children;
    children.forEach(function (item, i) {
      var child = item;

      if (item instanceof Component$1) {
        item = item.shadowRoot;
      } // 遮罩单独保存后特殊排序


      if (item instanceof Xom$1 && item.isMask) {
        // 开头的mc忽略，后续的连续mc以第一次出现为准
        if (lastMaskIndex !== undefined) {
          mcHash[lastMaskIndex].push(item);
        } else if (i) {
          lastMaskIndex = i - 1;
          children[lastMaskIndex].__iIndex = lastMaskIndex;
          mcHash[lastMaskIndex] = [item];
          hasMc = true;
        }
      } else {
        lastMaskIndex = undefined;

        if (item instanceof Xom$1) {
          child.__zIndex = item.currentStyle[Z_INDEX$3];

          if (isRelativeOrAbsolute$1(item)) {
            // 临时变量为排序使用
            child.__aIndex = true;
            normal.push(child);
          } else {
            normal.push(child);
          }
        } else {
          child.__zIndex = 0;
          normal.push(child);
        }

        child.__iIndex = i;
      }
    });
    normal.sort(function (a, b) {
      if (a.__zIndex !== b.__zIndex) {
        return a.__zIndex - b.__zIndex;
      } // zIndex相等时abs优先flow


      if (a.__aIndex !== b.__aIndex) {
        if (a.__aIndex) {
          return 1;
        }

        return -1;
      } // 都相等看索引


      return a.__iIndex - b.__iIndex;
    }); // 将遮罩插入到对应顺序上

    if (hasMc) {
      for (var i = normal.length - 1; i >= 0; i--) {
        var idx = normal[i].__iIndex;

        if (mcHash.hasOwnProperty(idx)) {
          normal.splice.apply(normal, [i + 1, 0].concat(_toConsumableArray(mcHash[idx])));
        }
      }
    }

    return normal;
  } // flex布局阶段顺序，不是渲染也和struct结构无关，可以无视mask


  function genOrderChildren(flowChildren) {
    var normal = [];
    flowChildren.forEach(function (item, i) {
      var child = item;

      if (item instanceof Component$1) {
        item = item.shadowRoot;
      }

      if (item instanceof Xom$1) {
        child.__order = item.currentStyle[ORDER$1];
      } else {
        child.__order = 0;
      }

      normal.push(child);
      child.__iIndex = i;
    });
    normal.sort(function (a, b) {
      if (a.__order !== b.__order) {
        return a.__order - b.__order;
      } // order相等时看节点索引


      return a.__iIndex - b.__iIndex;
    });
    return normal;
  }

  var Dom$1 = /*#__PURE__*/function (_Xom) {
    _inherits(Dom, _Xom);

    var _super = _createSuper(Dom);

    function Dom(tagName, props, children) {
      var _this;

      _classCallCheck(this, Dom);

      _this = _super.call(this, tagName, props);

      var _assertThisInitialize = _assertThisInitialized(_this),
          style = _assertThisInitialize.style;

      if (!style.display || !{
        flex: true,
        block: true,
        inline: true,
        inlineBlock: true,
        'inline-block': true,
        none: true
      }.hasOwnProperty(style.display)) {
        if (tag.INLINE.hasOwnProperty(_this.tagName)) {
          style.display = 'inline';
        } else {
          style.display = 'block';
        }
      }

      if (!style[FONT_WEIGHT$4] && tag.BOLD.hasOwnProperty(tagName)) {
        style.fontWeight = 700;
      }

      _this.__style = css.normalize(style, reset.DOM_ENTRY_SET); // currentStyle/currentProps不深度clone，继承一层即可，动画时也是extend这样只改一层引用不动原始静态style

      _this.__currentStyle = util.extend({}, _this.__style);
      _this.__children = children || [];
      _this.__flexLine = []; // flex布局多行模式时存储行

      var config = _this.__config;
      config[NODE_CURRENT_STYLE$2] = _this.__currentStyle;
      config[NODE_STYLE$2] = _this.__style;
      return _this;
    }

    _createClass(Dom, [{
      key: "__structure",
      value: function __structure(i, lv, j) {
        var res = _get(_getPrototypeOf(Dom.prototype), "__structure", this).call(this, i++, lv, j);

        var arr = [res];
        var zIndexChildren = this.__zIndexChildren = this.__zIndexChildren || genZIndexChildren(this);
        zIndexChildren.forEach(function (child, j) {
          var temp = child.__structure(i, lv + 1, j);

          if (Array.isArray(temp)) {
            i += temp.length;
            arr = arr.concat(temp);
          } else {
            i++;
            arr.push(temp);
          }
        });
        var total = arr.length - 1;
        res[STRUCT_NUM] = zIndexChildren.length;
        res[STRUCT_TOTAL] = total;
        return arr;
      }
    }, {
      key: "__modifyStruct",
      value: function __modifyStruct(root) {
        var _root$__structs;

        var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
        var __config = this.__config;
        var struct = __config[NODE_STRUCT$2];
        var total = struct[STRUCT_TOTAL] || 0; // 新生成了struct，引用也变了

        var nss = this.__structure(struct[STRUCT_INDEX$1], struct[STRUCT_LV$1], struct[STRUCT_CHILD_INDEX$1]);

        (_root$__structs = root.__structs).splice.apply(_root$__structs, [struct[STRUCT_INDEX$1] + offset, total + 1].concat(_toConsumableArray(nss)));

        var d = 0;

        if (this !== root) {
          struct = __config[NODE_STRUCT$2];
          d = (struct[STRUCT_TOTAL] || 0) - total;
          var ps = __config[NODE_DOM_PARENT$3].__config[NODE_STRUCT$2];
          ps[STRUCT_TOTAL] = ps[STRUCT_TOTAL] || 0;
          ps[STRUCT_TOTAL] += d;
        }

        return [struct, d];
      }
      /**
       * 因为zIndex/abs的变化造成的更新，只需重排这一段顺序即可
       * 即便包含component造成的dom变化也不影响，component作为子节点reflow会再执行，这里重排老的vd
       * @param structs
       * @private
       */

    }, {
      key: "__updateStruct",
      value: function __updateStruct(structs) {
        var _this$__config$NODE_S = this.__config[NODE_STRUCT$2],
            index = _this$__config$NODE_S[STRUCT_INDEX$1],
            _this$__config$NODE_S2 = _this$__config$NODE_S[STRUCT_TOTAL],
            total = _this$__config$NODE_S2 === void 0 ? 0 : _this$__config$NODE_S2;
        var zIndexChildren = this.__zIndexChildren = genZIndexChildren(this);
        var length = zIndexChildren.length;

        if (length === 1) {
          return;
        }

        zIndexChildren.forEach(function (child, i) {
          child.__config[NODE_STRUCT$2][STRUCT_CHILD_INDEX$1] = i;
        }); // 按直接子节点划分为相同数量的若干段进行排序

        var arr = [];
        var source = [];

        for (var i = index + 1; i <= index + total; i++) {
          var child = structs[i];
          var o = {
            child: child,
            list: structs.slice(child[STRUCT_INDEX$1], child[STRUCT_INDEX$1] + child[STRUCT_TOTAL] + 1)
          };
          arr.push(o);
          source.push(o);
          i += child[STRUCT_TOTAL] || 0;
        }

        arr.sort(function (a, b) {
          return a.child[STRUCT_CHILD_INDEX$1] - b.child[STRUCT_CHILD_INDEX$1];
        }); // 是否有变更，有才进行重新计算

        var needSort;

        for (var _i = 0, len = source.length; _i < len; _i++) {
          if (source[_i] !== arr[_i]) {
            needSort = true;
            break;
          }
        }

        if (needSort) {
          var list = [];
          arr.forEach(function (item) {
            list = list.concat(item.list);
          });
          list.forEach(function (struct, i) {
            struct[STRUCT_INDEX$1] = index + i + 1;
          });
          structs.splice.apply(structs, [index + 1, total].concat(_toConsumableArray(list)));
        }
      }
      /**
       * 给定父宽度情况下，尝试行内放下后的剩余宽度，为负数即放不下，这里只会出现行内级即inline(Block)
       * 调用前提是非行开头的inline尝试计算是否放得下，开头无需且禁止判断，防止出现永远放不下一个字符卡死
       * 返回非负数就是放得下，这样一些尺寸为0的也算
       * @param w 剩余宽度
       * @param total 容器尺寸
       * @returns {number|*}
       * @private
       */

    }, {
      key: "__tryLayInline",
      value: function __tryLayInline(w, total) {
        var flowChildren = this.flowChildren,
            _this$currentStyle = this.currentStyle,
            display = _this$currentStyle[DISPLAY$5],
            width = _this$currentStyle[WIDTH$5],
            marginLeft = _this$currentStyle[MARGIN_LEFT$3],
            marginRight = _this$currentStyle[MARGIN_RIGHT$3],
            paddingLeft = _this$currentStyle[PADDING_LEFT$4],
            paddingRight = _this$currentStyle[PADDING_RIGHT$3],
            borderLeftWidth = _this$currentStyle[BORDER_LEFT_WIDTH$5],
            borderRightWidth = _this$currentStyle[BORDER_RIGHT_WIDTH$4]; // inline没w/h，并且尝试孩子第一个能放下即可，如果是文字就是第一个字符

        if (display === 'inline') {
          if (flowChildren.length) {
            var first = flowChildren[0];

            if (first instanceof Component$1) {
              first = first.shadowRoot;
            }

            if (first instanceof Xom$1) {
              w = first.__tryLayInline(w, total);
            } else {
              w -= first.firstCharWidth;
            }
          }
        } // inlineBlock尝试所有孩子在一行上
        else {
            if (width[1] === PX$8) {
              w -= width[0];
            } else if (width[1] === PERCENT$9) {
              w -= total * width[0] * 0.01;
            } else if (width[1] === REM$8) {
              w -= width[0] * this.root.computedStyle[FONT_SIZE$9];
            } else if (width[1] === VW$8) {
              w -= width[0] * this.root.width * 0.01;
            } else if (width[1] === VH$8) {
              w -= width[0] * this.root.height * 0.01;
            } else if (width[1] === VMAX$8) {
              w -= width[0] * Math.max(this.root.width, this.root.height) * 0.01;
            } else if (width[1] === VMIN$8) {
              w -= width[0] * Math.min(this.root.width, this.root.height) * 0.01;
            } else {
              for (var i = 0; i < flowChildren.length; i++) {
                // 当放不下时直接返回，无需继续多余的尝试计算
                if (w < 0) {
                  return w;
                }

                var item = flowChildren[i];

                if (item instanceof Component$1) {
                  item = item.shadowRoot;
                }

                if (item instanceof Xom$1) {
                  w = item.__tryLayInline(w, total);
                } // text强制一行，否则非头就是放不下，需从头开始
                else {
                    w -= item.textWidth;
                  }
              }
            } // ib要减去末尾mpb


            if (marginRight[1] === PX$8) {
              w -= marginRight[0];
            } else if (marginRight[1] === PERCENT$9) {
              w -= marginRight[0] * total * 0.01;
            } else if (marginRight[1] === REM$8) {
              w -= marginRight[0] * this.root.computedStyle[FONT_SIZE$9];
            } else if (marginRight[1] === VW$8) {
              w -= marginRight[0] * this.root.width * 0.01;
            } else if (marginRight[1] === VH$8) {
              w -= marginRight[0] * this.root.height * 0.01;
            } else if (marginRight[1] === VMAX$8) {
              w -= marginRight[0] * Math.max(this.root.width, this.root.height) * 0.01;
            } else if (marginRight[1] === VMIN$8) {
              w -= marginRight[0] * Math.min(this.root.width, this.root.height) * 0.01;
            }

            if (paddingRight[1] === PX$8) {
              w -= paddingRight[0];
            } else if (paddingRight[1] === PERCENT$9) {
              w -= paddingRight[0] * total * 0.01;
            } else if (paddingRight[1] === REM$8) {
              w -= paddingRight[0] * this.root.computedStyle[FONT_SIZE$9];
            } else if (paddingRight[1] === VW$8) {
              w -= paddingRight[0] * this.root.width * 0.01;
            } else if (paddingRight[1] === VH$8) {
              w -= paddingRight[0] * this.root.height * 0.01;
            } else if (paddingRight[1] === VMAX$8) {
              w -= paddingRight[0] * Math.max(this.root.width, this.root.height) * 0.01;
            } else if (paddingRight[1] === VMIN$8) {
              w -= paddingRight[0] * Math.min(this.root.width, this.root.height) * 0.01;
            }

            if (borderRightWidth[1] === PX$8) {
              w -= borderRightWidth[0];
            } else if (borderRightWidth[1] === REM$8) {
              w -= borderRightWidth[0] * this.root.computedStyle[FONT_SIZE$9];
            } else if (borderRightWidth[1] === VW$8) {
              w -= borderRightWidth[0] * this.root.width * 0.01;
            } else if (borderRightWidth[1] === VH$8) {
              w -= borderRightWidth[0] * this.root.height * 0.01;
            } else if (borderRightWidth[1] === VMAX$8) {
              w -= borderRightWidth[0] * Math.max(this.root.width, this.root.height) * 0.01;
            } else if (borderRightWidth[1] === VMIN$8) {
              w -= borderRightWidth[0] * Math.min(this.root.width, this.root.height) * 0.01;
            }
          } // 还要减去开头的mpb


        if (marginLeft[1] === PX$8) {
          w -= marginLeft[0];
        } else if (marginLeft[1] === PERCENT$9) {
          w -= marginLeft[0] * total * 0.01;
        } else if (marginLeft[1] === REM$8) {
          w -= marginLeft[0] * this.root.computedStyle[FONT_SIZE$9];
        } else if (marginLeft[1] === VW$8) {
          w -= marginLeft[0] * this.root.width * 0.01;
        } else if (marginLeft[1] === VH$8) {
          w -= marginLeft[0] * this.root.height * 0.01;
        } else if (marginLeft[1] === VMAX$8) {
          w -= marginLeft[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (marginLeft[1] === VMIN$8) {
          w -= marginLeft[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        if (paddingLeft[1] === PX$8) {
          w -= paddingLeft[0];
        } else if (paddingLeft[1] === PERCENT$9) {
          w -= paddingLeft[0] * total * 0.01;
        } else if (paddingLeft[1] === REM$8) {
          w -= paddingLeft[0] * this.root.computedStyle[FONT_SIZE$9];
        } else if (paddingLeft[1] === VW$8) {
          w -= paddingLeft[0] * this.root.width * 0.01;
        } else if (paddingLeft[1] === VH$8) {
          w -= paddingLeft[0] * this.root.height * 0.01;
        } else if (paddingLeft[1] === VMAX$8) {
          w -= paddingLeft[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (paddingLeft[1] === VMIN$8) {
          w -= paddingLeft[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        if (borderLeftWidth[1] === PX$8) {
          w -= borderLeftWidth[0];
        } else if (borderLeftWidth[1] === REM$8) {
          w -= borderLeftWidth[0] * this.root.computedStyle[FONT_SIZE$9];
        } else if (borderLeftWidth[1] === VW$8) {
          w -= borderLeftWidth[0] * this.root.width * 0.01;
        } else if (borderLeftWidth[1] === VH$8) {
          w -= borderLeftWidth[0] * this.root.height * 0.01;
        } else if (borderLeftWidth[1] === VMAX$8) {
          w -= borderLeftWidth[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (borderLeftWidth[1] === VMIN$8) {
          w -= borderLeftWidth[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        return w;
      } // 设置y偏移值，递归包括children，此举在justify-content/margin-auto等对齐用

    }, {
      key: "__offsetX",
      value: function __offsetX(diff, isLayout, lv) {
        _get(_getPrototypeOf(Dom.prototype), "__offsetX", this).call(this, diff, isLayout, lv); // 记得偏移LineBox


        if (isLayout && !this.__config[NODE_IS_INLINE$1] && this.lineBoxManager) {
          this.lineBoxManager.__offsetX(diff);
        }

        this.flowChildren.forEach(function (item) {
          if (item) {
            item.__offsetX(diff, isLayout, lv);
          }
        });
      }
    }, {
      key: "__offsetY",
      value: function __offsetY(diff, isLayout, lv) {
        _get(_getPrototypeOf(Dom.prototype), "__offsetY", this).call(this, diff, isLayout, lv);

        if (isLayout && !this.__config[NODE_IS_INLINE$1] && this.lineBoxManager) {
          this.lineBoxManager.__offsetY(diff);
        }

        this.flowChildren.forEach(function (item) {
          if (item) {
            item.__offsetY(diff, isLayout, lv);
          }
        });
      } // item的递归子节点求min/max，只考虑固定值单位，忽略百分比，同时按方向和display

    }, {
      key: "__calMinMax",
      value: function __calMinMax(isDirectionRow, data) {
        css.computeReflow(this, this.isShadowRoot);
        var min = 0;
        var max = 0;
        var flowChildren = this.flowChildren,
            currentStyle = this.currentStyle,
            computedStyle = this.computedStyle;
        var x = data.x,
            y = data.y,
            w = data.w,
            h = data.h,
            lineBoxManager = data.lineBoxManager; // 计算需考虑style的属性

        var display = currentStyle[DISPLAY$5],
            flexDirection = currentStyle[FLEX_DIRECTION$2],
            width = currentStyle[WIDTH$5],
            height = currentStyle[HEIGHT$5];
        var lineHeight = computedStyle[LINE_HEIGHT$4];
        var main = isDirectionRow ? width : height; // 只绝对值生效，%不生效，依旧要判断

        if (main[1] === PX$8) {
          min = max = main[0];
        } else if (main[1] === REM$8) {
          min = max = main[0] * this.root.computedStyle[FONT_SIZE$9];
        } else if (main[1] === VW$8) {
          min = max = main[0] * this.root.width * 0.01;
        } else if (main[1] === VH$8) {
          min = max = main[0] * this.root.height * 0.01;
        } else if (main[1] === VMAX$8) {
          min = max = main[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (main[1] === VMIN$8) {
          min = max = main[0] * Math.min(this.root.width, this.root.height) * 0.01;
        } else {
          if (display === 'flex') {
            var isRow = flexDirection !== 'column';
            flowChildren = genOrderChildren(flowChildren);
            flowChildren.forEach(function (item) {
              if (item instanceof Xom$1 || item instanceof Component$1 && item.shadowRoot instanceof Xom$1) {
                var _currentStyle = item.currentStyle,
                    _computedStyle = item.computedStyle; // flex的child如果是inline，变为block，在计算autoBasis前就要

                if (_currentStyle[DISPLAY$5] !== 'block' && _currentStyle[DISPLAY$5] !== 'flex') {
                  _currentStyle[DISPLAY$5] = _computedStyle[DISPLAY$5] = 'block';
                }

                var _item$__calMinMax = item.__calMinMax(isDirectionRow, {
                  x: x,
                  y: y,
                  w: w,
                  h: h
                }),
                    _item$__calMinMax2 = _slicedToArray(_item$__calMinMax, 2),
                    _item$__calMinMax2$ = _slicedToArray(_item$__calMinMax2[1], 2),
                    min2 = _item$__calMinMax2$[0],
                    max2 = _item$__calMinMax2$[1];

                if (isDirectionRow) {
                  if (isRow) {
                    min += min2;
                    max += max2;
                  } else {
                    min = Math.max(min, min2);
                    max = Math.max(max, max2);
                  }
                } else {
                  if (isRow) {
                    min = Math.max(min, min2);
                    max = Math.max(max, max2);
                  } else {
                    min += min2;
                    max += max2;
                  }
                }
              } else if (isDirectionRow) {
                if (isRow) {
                  min += item.charWidth;
                  max += item.textWidth;
                } else {
                  min = Math.max(min, item.charWidth);
                  max = Math.max(max, item.textWidth);
                }
              } else {
                var _lineBoxManager = new LineBoxManager(x, y, lineHeight, css.getBaseLine(computedStyle));

                item.__layout({
                  x: x,
                  y: y,
                  w: w,
                  h: h,
                  lineBoxManager: _lineBoxManager
                });

                if (isRow) {
                  min = Math.max(min, item.height);
                  max = Math.max(max, item.height);
                } else {
                  min += item.height;
                  max += item.height;
                }
              }
            });
          } else if (display === 'block') {
            var countMin = 0,
                countMax = 0;

            var _lineBoxManager2 = new LineBoxManager(x, y, lineHeight, css.getBaseLine(computedStyle));

            var length = flowChildren.length;
            flowChildren.forEach(function (item, i) {
              if (item instanceof Xom$1 || item instanceof Component$1 && item.shadowRoot instanceof Xom$1) {
                var _item$__calMinMax3 = item.__calMinMax(isDirectionRow, {
                  x: x,
                  y: y,
                  w: w,
                  h: h,
                  lineBoxManager: _lineBoxManager2
                }),
                    _item$__calMinMax4 = _slicedToArray(_item$__calMinMax3, 2),
                    _display = _item$__calMinMax4[0],
                    _item$__calMinMax4$ = _slicedToArray(_item$__calMinMax4[1], 2),
                    min2 = _item$__calMinMax4$[0],
                    max2 = _item$__calMinMax4$[1]; // 块级查看之前是否有行内元素，设置换行


                if ((_display === 'block' || _display === 'flex') && _lineBoxManager2.isEnd) {
                  _lineBoxManager2.setNotEnd();

                  _lineBoxManager2.setNewLine();
                }

                if (isDirectionRow) {
                  if (_display === 'block' || _display === 'flex') {
                    min = Math.max(min, min2);
                    max = Math.max(max, max2);
                    countMin = countMax = 0;
                  } else {
                    countMin += min2;
                    countMax += max2;
                    min = Math.max(min, countMin);
                    max = Math.max(max, countMax);
                  }
                } else {
                  if (_display === 'block' || _display === 'flex') {
                    // 之前行积累的极值，并清空
                    min += countMin;
                    max += countMax;
                    countMin = countMax = 0; // 本身的

                    min += min2;
                    max += max2;
                  } else {
                    // 行内取极值，最后一个记得应用
                    countMin = Math.max(countMin, min2);
                    countMax = Math.max(countMax, max2);

                    if (i === length - 1) {
                      min += countMin;
                      max += countMax;
                    }
                  }
                }
              } else if (isDirectionRow) {
                countMin += item.charWidth;
                countMax += item.textWidth;
                min = Math.max(min, countMin);
                max = Math.max(max, countMax);
              } else {
                item.__layout({
                  x: x,
                  y: y,
                  w: w,
                  h: h,
                  lineBoxManager: _lineBoxManager2
                }); // 行内取极值，最后一个记得应用


                countMin = Math.max(countMin, item.height);
                countMax = Math.max(countMax, item.height);

                if (i === length - 1) {
                  min += countMin;
                  max += countMax;
                }
              }
            });
          } else {
            if (display === 'inlineBlock' || display === 'inline-block') {
              lineBoxManager = new LineBoxManager(x, y, lineHeight, css.getBaseLine(computedStyle));
            }

            flowChildren.forEach(function (item) {
              if (item instanceof Xom$1 || item instanceof Component$1 && item.shadowRoot instanceof Xom$1) {
                var _item$__calMinMax5 = item.__calMinMax(isDirectionRow, {
                  x: x,
                  y: y,
                  w: w,
                  h: h,
                  lineBoxManager: lineBoxManager
                }),
                    _item$__calMinMax6 = _slicedToArray(_item$__calMinMax5, 2),
                    _item$__calMinMax6$ = _slicedToArray(_item$__calMinMax6[1], 2),
                    min2 = _item$__calMinMax6$[0],
                    max2 = _item$__calMinMax6$[1];

                if (isDirectionRow) {
                  min += min2;
                  max += max2;
                } else {
                  min = Math.max(min, min2);
                  max = Math.max(max, max2);
                }
              } else if (isDirectionRow) {
                min += item.charWidth;
                max += item.textWidth;
              } else {
                item.__layout({
                  x: x,
                  y: y,
                  w: w,
                  h: h,
                  lineBoxManager: lineBoxManager
                });

                min = Math.max(min, item.height);
                max = Math.max(max, item.height);
              }
            });
          }
        }

        return [display, this.__addMp(isDirectionRow, w, currentStyle, [min, max])];
      }
      /**
       * flex布局时，计算basis尺寸，如果有固定声明则以其为标准，content为内容最大尺寸，auto依赖w/h或降级content
       * basis要考虑相加直接item的mpb，非绝对值单位以container为基准，basis为内容时为max值
       * item的孩子为孙子节点需递归，不参与basis计算，只参与min/max，尺寸和mpb均只考虑绝对值
       * 自动计算时影响尺寸的只有换行的text，以及一组inline，均按其中最大尺寸的一个计算
       * auto自动计算递归进行，如果是普通row方向，按最大text的charWidth为准
       * 如果是column方向，则虚拟布局后看text的height
       * 在abs下时进入特殊状态，无论是row/column，都会按row方向尝试最大尺寸，直到舞台边缘或容器声明的w折行
       * 返回b，声明则按css值，否则是auto/content
       * 返回min为最小宽度，遇到字符/inline则单列排版后需要的最大宽度
       * 返回max为最大宽度，理想情况一排最大值，在abs时isVirtual状态参与计算，文本抵达边界才进行换行
       * @param isDirectionRow
       * @param data
       * @param isVirtual abs非固定尺寸时先进行虚拟布局标识
       * @private
       */

    }, {
      key: "__calBasis",
      value: function __calBasis(isDirectionRow, data, isVirtual) {
        css.computeReflow(this, this.isShadowRoot);
        var b = 0;
        var min = 0;
        var max = 0;
        var flowChildren = this.flowChildren,
            currentStyle = this.currentStyle,
            computedStyle = this.computedStyle;
        var x = data.x,
            y = data.y,
            w = data.w,
            h = data.h; // 计算需考虑style的属性

        var display = currentStyle[DISPLAY$5],
            flexDirection = currentStyle[FLEX_DIRECTION$2],
            width = currentStyle[WIDTH$5],
            height = currentStyle[HEIGHT$5],
            flexBasis = currentStyle[FLEX_BASIS$2];
        var lineHeight = computedStyle[LINE_HEIGHT$4];
        var main = isDirectionRow ? width : height; // basis3种情况：auto、固定、content

        var isAuto = flexBasis[1] === AUTO$6;
        var isFixed = [PX$8, PERCENT$9, REM$8, VW$8, VH$8, VMAX$8, VMIN$8].indexOf(flexBasis[1]) > -1;
        var isContent = !isAuto && !isFixed;
        var fixedSize; // flex的item固定basis计算

        if (isFixed) {
          if (flexBasis[1] === PX$8) {
            b = fixedSize = flexBasis[0];
          } else if (flexBasis[1] === PERCENT$9) {
            b = fixedSize = (isDirectionRow ? w : h) * flexBasis[0] * 0.01;
          } else if (flexBasis[1] === REM$8) {
            b = fixedSize = flexBasis[0] * this.root.computedStyle[FONT_SIZE$9];
          } else if (flexBasis[1] === VW$8) {
            b = fixedSize = flexBasis[0] * this.root.width * 0.01;
          } else if (flexBasis[1] === VH$8) {
            b = fixedSize = flexBasis[0] * this.root.height * 0.01;
          } else if (flexBasis[1] === VMAX$8) {
            b = fixedSize = flexBasis[0] * Math.max(this.root.width, this.root.height) * 0.01;
          } else if (flexBasis[1] === VMIN$8) {
            b = fixedSize = flexBasis[0] * Math.min(this.root.width, this.root.height) * 0.01;
          }
        } // 已声明主轴尺寸的，当basis是auto时为值
        else if ([PX$8, PERCENT$9, REM$8, VW$8, VH$8, VMAX$8, VMIN$8].indexOf(main[1]) > -1 && isAuto) {
            if (main[1] === PX$8) {
              b = fixedSize = main[0];
            } else if (main[1] === PERCENT$9) {
              b = fixedSize = main[0] * 0.01 * (isDirectionRow ? w : h);
            } else if (main[1] === REM$8) {
              b = fixedSize = main[0] * this.root.computedStyle[FONT_SIZE$9];
            } else if (main[1] === VW$8) {
              b = fixedSize = main[0] * this.root.width * 0.01;
            } else if (main[1] === VH$8) {
              b = fixedSize = main[0] * this.root.height * 0.01;
            } else if (main[1] === VMAX$8) {
              b = fixedSize = main[0] * Math.max(this.root.width, this.root.height) * 0.01;
            } else if (main[1] === VMIN$8) {
              b = fixedSize = main[0] * Math.min(this.root.width, this.root.height) * 0.01;
            }
          } // 非固定尺寸的basis为auto时降级为content
          else if (isAuto) {
              isContent = true;
            } // flex的item还是flex时


        if (display === 'flex') {
          var isRow = flexDirection !== 'column';
          flowChildren = genOrderChildren(flowChildren);
          flowChildren.forEach(function (item) {
            if (item instanceof Xom$1 || item instanceof Component$1 && item.shadowRoot instanceof Xom$1) {
              var _currentStyle2 = item.currentStyle,
                  _computedStyle2 = item.computedStyle; // flex的child如果是inline，变为block，在计算autoBasis前就要

              if (_currentStyle2[DISPLAY$5] !== 'block' && _currentStyle2[DISPLAY$5] !== 'flex') {
                _currentStyle2[DISPLAY$5] = _computedStyle2[DISPLAY$5] = 'block';
              }

              var _item$__calMinMax7 = item.__calMinMax(isDirectionRow, {
                x: x,
                y: y,
                w: w,
                h: h
              }),
                  _item$__calMinMax8 = _slicedToArray(_item$__calMinMax7, 2),
                  _item$__calMinMax8$ = _slicedToArray(_item$__calMinMax8[1], 2),
                  min2 = _item$__calMinMax8$[0],
                  max2 = _item$__calMinMax8$[1];

              if (isDirectionRow) {
                if (isRow) {
                  min += min2;
                  max += max2;
                } else {
                  min = Math.max(min, min2);
                  max = Math.max(max, max2);
                }
              } else {
                if (isRow) {
                  min = Math.max(min, min2);
                  max = Math.max(max, max2);
                } else {
                  min += min2;
                  max += max2;
                }
              }
            } else if (isDirectionRow) {
              if (isRow) {
                min += item.charWidth;
                max += item.textWidth;
              } else {
                min = Math.max(min, item.charWidth);
                max = Math.max(max, item.textWidth);
              }
            } else {
              var lineBoxManager = new LineBoxManager(x, y, lineHeight, css.getBaseLine(computedStyle));

              item.__layout({
                x: x,
                y: y,
                w: w,
                h: h,
                lineBoxManager: lineBoxManager
              });

              if (isRow) {
                min = Math.max(min, item.height);
                max = Math.max(max, item.height);
              } else {
                min += item.height;
                max += item.height;
              }
            }
          });
        } // flex的item是block/inline时，inline也会变成block统一对待
        else {
            var countMin = 0,
                countMax = 0;
            var lineBoxManager = this.__lineBoxManager = new LineBoxManager(x, y, lineHeight, css.getBaseLine(computedStyle));
            var length = flowChildren.length;
            flowChildren.forEach(function (item, i) {
              if (item instanceof Xom$1 || item instanceof Component$1 && item.shadowRoot instanceof Xom$1) {
                var _item$__calMinMax9 = item.__calMinMax(isDirectionRow, {
                  x: x,
                  y: y,
                  w: w,
                  h: h,
                  lineBoxManager: lineBoxManager
                }),
                    _item$__calMinMax10 = _slicedToArray(_item$__calMinMax9, 2),
                    _display2 = _item$__calMinMax10[0],
                    _item$__calMinMax10$ = _slicedToArray(_item$__calMinMax10[1], 2),
                    min2 = _item$__calMinMax10$[0],
                    max2 = _item$__calMinMax10$[1]; // 块级查看之前是否有行内元素，设置换行


                if ((_display2 === 'block' || _display2 === 'flex') && lineBoxManager.isEnd) {
                  lineBoxManager.setNotEnd();
                  lineBoxManager.setNewLine();
                }

                if (isDirectionRow) {
                  if (_display2 === 'block' || _display2 === 'flex') {
                    min = Math.max(min, min2);
                    max = Math.max(max, max2);
                    countMin = countMax = 0;
                  } else {
                    countMin += min2;
                    countMax += max2;
                    min = Math.max(min, countMin);
                    max = Math.max(max, countMax);
                  }
                } else {
                  if (_display2 === 'block' || _display2 === 'flex') {
                    // 之前行积累的极值，并清空
                    min += countMin;
                    max += countMax;
                    countMin = countMax = 0; // 本身的

                    min += min2;
                    max += max2;
                  } else {
                    // 行内取极值，最后一个记得应用
                    countMin = Math.max(countMin, min2);
                    countMax = Math.max(countMax, max2);

                    if (i === length - 1) {
                      min += countMin;
                      max += countMax;
                    }
                  }
                }
              } else if (isDirectionRow) {
                countMin += item.charWidth;
                countMax += item.textWidth;
                min = Math.max(min, countMin);
                max = Math.max(max, countMax);
              } else {
                item.__layout({
                  x: x,
                  y: y,
                  w: w,
                  h: h,
                  lineBoxManager: lineBoxManager
                }); // 行内取极值，最后一个记得应用


                countMin = Math.max(countMin, item.height);
                countMax = Math.max(countMax, item.height);

                if (i === length - 1) {
                  min += countMin;
                  max += countMax;
                }
              }
            });
          }

        if (fixedSize) {
          max = Math.max(fixedSize, max);
        }

        if (isContent) {
          b = max;
        } // 直接item的mpb影响basis


        return this.__addMp(isDirectionRow, w, currentStyle, [b, min, max], true);
      }
    }, {
      key: "__layoutNone",
      value: function __layoutNone() {
        _get(_getPrototypeOf(Dom.prototype), "__layoutNone", this).call(this);

        var children = this.children;
        children.forEach(function (item) {
          if (item instanceof Xom$1 || item instanceof Component$1 && item.shadowRoot instanceof Xom$1) {
            item.__layoutNone();
          }
        });
      }
      /**
       * block布局，本身固定尺寸优先，否则看内容从上往下从左往右flow流排布
       * 内部inline和inlineBlock组成LineBox，通过LineBoxManager来管理混排的现象
       * LineBoxManager只有block和inlineBlock内部生成，inline会复用最近父级的
       * 内部的block在垂直方向要考虑margin合并的问题，强制所有节点为bfc，精简逻辑
       * @param data
       * @param isVirtual abs无尺寸时提前虚拟布局计算尺寸
       * @private
       */

    }, {
      key: "__layoutBlock",
      value: function __layoutBlock(data, isVirtual) {
        var flowChildren = this.flowChildren,
            currentStyle = this.currentStyle,
            computedStyle = this.computedStyle;

        var _this$__preLayout = this.__preLayout(data),
            fixedWidth = _this$__preLayout.fixedWidth,
            fixedHeight = _this$__preLayout.fixedHeight,
            x = _this$__preLayout.x,
            y = _this$__preLayout.y,
            w = _this$__preLayout.w,
            h = _this$__preLayout.h; // abs虚拟布局需预知width，固定可提前返回


        if (fixedWidth && isVirtual) {
          this.__width = w;

          this.__ioSize(w, this.height);

          return;
        }

        var textAlign = computedStyle[TEXT_ALIGN$2],
            whiteSpace = computedStyle[WHITE_SPACE$2],
            lineClamp = computedStyle[LINE_CLAMP$1],
            lineHeight = computedStyle[LINE_HEIGHT$4]; // 只有>=1的正整数才有效

        lineClamp = lineClamp || 0;
        var lineClampCount = 0; // 虚线管理一个block内部的LineBox列表，使得inline的元素可以中途衔接处理折行
        // 内部维护inline结束的各种坐标来达到目的，遇到block时中断并处理换行坐标

        var lineBoxManager = this.__lineBoxManager = new LineBoxManager(x, y, lineHeight, css.getBaseLine(computedStyle)); // 因精度问题，统计宽度均从0开始累加每行，最后取最大值，仅在abs布局时isVirtual生效

        var maxW = 0;
        var cw = 0; // 连续block（flex相同，下面都是）的上下margin合并值记录，合并时从列表中取

        var mergeMarginBottomList = [],
            mergeMarginTopList = [];
        var length = flowChildren.length;
        flowChildren.forEach(function (item, i) {
          var isXom = item instanceof Xom$1 || item instanceof Component$1 && item.shadowRoot instanceof Xom$1;
          var isInline = isXom && item.currentStyle[DISPLAY$5] === 'inline';
          var isInlineBlock = isXom && ['inlineBlock', 'inline-block'].indexOf(item.currentStyle[DISPLAY$5]) > -1;
          var isImg = item.tagName === 'img'; // 每次循环开始前，这次不是block的话，看之前遗留待合并margin，并重置

          if (!isXom || isInline || isInlineBlock) {
            if (mergeMarginBottomList.length && mergeMarginTopList.length) {
              var diff = reflow.getMergeMarginTB(mergeMarginTopList, mergeMarginBottomList);

              if (diff) {
                y += diff;
              }
            }

            mergeMarginTopList = [];
            mergeMarginBottomList = [];
          }

          if (isXom) {
            // inline和inlineBlock的细节不同之处，ib除了w/h之外，更想像block一样占据一行
            // 比如2个inline前面占一半后面比一半多但还是会从一半开始然后第2行换行继续，但ib放不下则重开一行
            // inline和ib能互相嵌套，形成的LineBox中则是TextBox和节点混合
            if (isInlineBlock || isInline) {
              // x开头，不用考虑是否放得下直接放
              if (x === data.x || isInline && whiteSpace === 'nowrap') {
                item.__layout({
                  x: x,
                  y: y,
                  w: w,
                  h: h,
                  lx: data.x,
                  lineBoxManager: lineBoxManager,
                  // ib内部新生成会内部判断，这里不管统一传入
                  lineClamp: lineClamp,
                  lineClampCount: lineClampCount
                }, isVirtual); // inlineBlock的特殊之处，一旦w为auto且内部产生折行时，整个变成block独占一块区域，坐标计算和block一样


                if (item.__isIbFull) {
                  x = data.x;
                  y += item.outerHeight;
                  lineBoxManager.setNotEnd();
                } // inline和不折行的ib，其中ib需要手动存入当前lb中
                else {
                    (isInlineBlock || isImg) && lineBoxManager.addItem(item);
                    x = lineBoxManager.lastX;
                    y = lineBoxManager.lastY;
                  } // abs统计宽度


                if (isVirtual) {
                  maxW = Math.max(maxW, cw);
                  cw = item.outerWidth;
                  maxW = Math.max(maxW, cw);
                }
              } else {
                // 非开头先尝试是否放得下，内部判断了inline/ib，ib要考虑是否有width
                var fw = item.__tryLayInline(w + data.x - x, w); // 放得下继续，奇怪的精度问题，加上阈值


                if (fw >= -1e-10) {
                  item.__layout({
                    x: x,
                    y: y,
                    w: w,
                    h: h,
                    lx: data.x,
                    lineBoxManager: lineBoxManager,
                    lineClamp: lineClamp,
                    lineClampCount: lineClampCount
                  }, isVirtual); // ib放得下要么内部没有折行，要么声明了width限制，都需手动存入当前lb


                  (isInlineBlock || isImg) && lineBoxManager.addItem(item);
                  x = lineBoxManager.lastX;
                  y = lineBoxManager.lastY;
                } // 放不下处理之前的lineBox，并重新开头
                else {
                    lineClampCount++;
                    x = data.x;
                    y = lineBoxManager.endY;
                    lineBoxManager.setNewLine();
                    lineClampCount = item.__layout({
                      x: x,
                      y: y,
                      w: w,
                      h: h,
                      lx: data.x,
                      lineBoxManager: lineBoxManager,
                      lineClamp: lineClamp,
                      lineClampCount: lineClampCount
                    }, isVirtual); // 重新开头的ib和上面开头处一样逻辑

                    if (item.__isIbFull) {
                      x = data.x;
                      y += item.outerHeight;
                      lineBoxManager.setNotEnd();
                    } // inline和不折行的ib，其中ib需要手动存入当前lb中
                    else {
                        (isInlineBlock || isImg) && lineBoxManager.addItem(item);
                        x = lineBoxManager.lastX;
                        y = lineBoxManager.lastY;
                      }

                    if (isVirtual) {
                      maxW = Math.max(maxW, cw);
                      cw = 0;
                    }
                  }

                if (isVirtual) {
                  cw += item.outerWidth;
                  maxW = Math.max(maxW, cw);
                }
              }
            } // block/flex先处理之前可能遗留的最后一行LineBox，然后递归时不传lineBoxManager，其内部生成新的
            else {
                // 非开头，说明之前的text未换行，需要增加行数
                if (x !== data.x && flowChildren[i - 1] instanceof Text) {
                  lineClampCount++;
                }

                x = data.x;

                if (lineBoxManager.isEnd) {
                  y = lineBoxManager.endY;
                  lineBoxManager.setNotEnd();
                  lineBoxManager.setNewLine();
                }

                item.__layout({
                  x: x,
                  y: y,
                  w: w,
                  h: h
                }, isVirtual);

                var isNone = item.currentStyle[DISPLAY$5] === 'none'; // 自身无内容

                var isEmptyBlock;

                if (!isNone && item.flowChildren && item.flowChildren.length === 0) {
                  var _item$computedStyle = item.computedStyle,
                      marginTop = _item$computedStyle[MARGIN_TOP$1],
                      marginBottom = _item$computedStyle[MARGIN_BOTTOM$1],
                      paddingTop = _item$computedStyle[PADDING_TOP$2],
                      paddingBottom = _item$computedStyle[PADDING_BOTTOM$2],
                      height = _item$computedStyle[HEIGHT$5],
                      borderTopWidth = _item$computedStyle[BORDER_TOP_WIDTH$3],
                      borderBottomWidth = _item$computedStyle[BORDER_BOTTOM_WIDTH$3]; // 无内容高度为0的空block特殊情况，记录2个margin下来等后续循环判断处理

                  if (paddingTop <= 0 && paddingBottom <= 0 && height <= 0 && borderTopWidth <= 0 && borderBottomWidth <= 0) {
                    mergeMarginBottomList.push(marginBottom);
                    mergeMarginTopList.push(marginTop);
                    isEmptyBlock = true;
                  }
                }

                y += item.outerHeight;
                lineBoxManager.__lastY = y; // absolute/flex前置虚拟计算

                if (isVirtual) {
                  maxW = Math.max(maxW, item.outerWidth);
                  cw = 0;
                } // 空block要留下轮循环看，除非是最后一个，此处非空本轮处理掉看是否要合并


                if (!isNone && !isEmptyBlock) {
                  var _item$computedStyle2 = item.computedStyle,
                      _marginTop = _item$computedStyle2[MARGIN_TOP$1],
                      _marginBottom = _item$computedStyle2[MARGIN_BOTTOM$1]; // 有bottom值说明之前有紧邻的block，任意个甚至空block，自己有个top所以无需判断top
                  // 如果是只有紧邻的2个非空block，也被包含在情况内，取上下各1合并

                  if (mergeMarginBottomList.length) {
                    mergeMarginTopList.push(_marginTop);

                    var _diff = reflow.getMergeMarginTB(mergeMarginTopList, mergeMarginBottomList);

                    if (_diff) {
                      item.__offsetY(_diff, true);

                      y += _diff;
                    }
                  } // 同时自己保存bottom，为后续block准备


                  mergeMarginTopList = [];
                  mergeMarginBottomList = [_marginBottom];
                } // 最后一个空block当是正正和负负时要处理，正负在outHeight处理了结果是0
                else if (i === length - 1) {
                    var _diff2 = reflow.getMergeMarginTB(mergeMarginTopList, mergeMarginBottomList);

                    if (_diff2) {
                      y += _diff2;
                    }
                  }
              }
          } // 文字和inline类似
          else {
              // lineClamp作用域为block下的inline（同LineBox上下文）
              if (lineClamp && lineClampCount >= lineClamp) {
                return;
              } // x开头，不用考虑是否放得下直接放


              if (x === data.x || whiteSpace === 'nowrap') {
                lineClampCount = item.__layout({
                  x: x,
                  y: y,
                  w: w,
                  h: h,
                  lx: data.x,
                  lineBoxManager: lineBoxManager,
                  lineClamp: lineClamp,
                  lineClampCount: lineClampCount
                }, isVirtual);
                x = lineBoxManager.lastX;
                y = lineBoxManager.lastY;

                if (isVirtual) {
                  maxW = Math.max(maxW, cw);
                  cw = item.width;
                  maxW = Math.max(maxW, cw);
                }
              } else {
                // 非开头先尝试是否放得下
                var _fw = item.__tryLayInline(w - x + data.x); // 放得下继续


                if (_fw >= -1e-10) {
                  lineClampCount = item.__layout({
                    x: x,
                    y: y,
                    w: w,
                    h: h,
                    lx: data.x,
                    lineBoxManager: lineBoxManager,
                    lineClamp: lineClamp,
                    lineClampCount: lineClampCount
                  }, isVirtual);
                  x = lineBoxManager.lastX;
                  y = lineBoxManager.lastY;
                } // 放不下处理之前的lineBox，并重新开头
                else {
                    lineClampCount++;
                    x = data.x;
                    y = lineBoxManager.endY;
                    lineBoxManager.setNewLine();
                    lineClampCount = item.__layout({
                      x: x,
                      y: y,
                      w: w,
                      h: h,
                      lx: data.x,
                      lineBoxManager: lineBoxManager,
                      lineClamp: lineClamp,
                      lineClampCount: lineClampCount
                    }, isVirtual);
                    x = lineBoxManager.lastX;
                    y = lineBoxManager.lastY;

                    if (isVirtual) {
                      maxW = Math.max(maxW, item.width);
                      cw = 0;
                    }
                  }

                if (isVirtual) {
                  cw += item.width;
                  maxW = Math.max(maxW, cw);
                }
              }
            }
        }); // 结束后如果是以LineBox结尾，则需要设置y到这里，否则流布局中block会设置
        // 当以block换行时，新行是true，否则是false即结尾

        if (lineBoxManager.isEnd) {
          y = lineBoxManager.endY;
        }

        var tw = this.__width = fixedWidth || !isVirtual ? w : maxW;
        var th = this.__height = fixedHeight ? h : y - data.y;

        this.__ioSize(tw, th); // 非abs提前的虚拟布局，真实布局情况下最后为所有行内元素进行2个方向上的对齐


        if (!isVirtual) {
          lineBoxManager.verticalAlign();

          if (['center', 'right'].indexOf(textAlign) > -1) {
            lineBoxManager.horizonAlign(tw, textAlign); // 直接text需计算size

            flowChildren.forEach(function (item) {
              if (item instanceof Component$1) {
                item = item.shadowRoot;
              }

              if (item instanceof Text) {
                item.__inlineSize();
              }
            });
          } // 所有inline计算size


          lineBoxManager.domList.forEach(function (item) {
            item.__inlineSize(tw, textAlign);
          });

          this.__marginAuto(currentStyle, data);
        }
      } // 弹性布局时的计算位置

    }, {
      key: "__layoutFlex",
      value: function __layoutFlex(data, isVirtual) {
        var _this2 = this;

        var flowChildren = this.flowChildren,
            currentStyle = this.currentStyle,
            computedStyle = this.computedStyle,
            __flexLine = this.__flexLine;

        var _this$__preLayout2 = this.__preLayout(data),
            fixedWidth = _this$__preLayout2.fixedWidth,
            fixedHeight = _this$__preLayout2.fixedHeight,
            x = _this$__preLayout2.x,
            y = _this$__preLayout2.y,
            w = _this$__preLayout2.w,
            h = _this$__preLayout2.h;

        if (fixedWidth && isVirtual) {
          this.__width = w;

          this.__ioSize(w, this.height);

          return;
        } // 每次布局情况多行内容


        __flexLine.splice(0);

        var flexDirection = computedStyle[FLEX_DIRECTION$2],
            justifyContent = computedStyle[JUSTIFY_CONTENT$1],
            alignItems = computedStyle[ALIGN_ITEMS$1],
            lineClamp = computedStyle[LINE_CLAMP$1],
            flexWrap = computedStyle[FLEX_WRAP$1],
            alignContent = computedStyle[ALIGN_CONTENT$1],
            lineHeight = computedStyle[LINE_HEIGHT$4],
            textAlign = computedStyle[TEXT_ALIGN$2]; // 只有>=1的正整数才有效

        lineClamp = lineClamp || 0;
        var lineClampCount = 0;
        var maxX = 0;
        var isDirectionRow = ['column', 'column-reverse', 'columnReverse'].indexOf(flexDirection) === -1; // 计算伸缩基数

        var growList = [];
        var shrinkList = [];
        var basisList = [];
        var maxList = [];
        var minList = [];
        var orderChildren = genOrderChildren(flowChildren);
        orderChildren.forEach(function (item) {
          if (item instanceof Xom$1 || item instanceof Component$1 && item.shadowRoot instanceof Xom$1) {
            var _currentStyle3 = item.currentStyle,
                _computedStyle3 = item.computedStyle; // flex的child如果是inline，变为block，在计算autoBasis前就要

            if (_currentStyle3[DISPLAY$5] !== 'block' && _currentStyle3[DISPLAY$5] !== 'flex') {
              _currentStyle3[DISPLAY$5] = _computedStyle3[DISPLAY$5] = 'block';
            } // abs虚拟布局计算时纵向也是看横向宽度


            var _item$__calBasis = item.__calBasis(isVirtual ? true : isDirectionRow, {
              x: x,
              y: y,
              w: w,
              h: h
            }, isVirtual),
                _item$__calBasis2 = _slicedToArray(_item$__calBasis, 3),
                b = _item$__calBasis2[0],
                min = _item$__calBasis2[1],
                max = _item$__calBasis2[2];

            if (isVirtual) {
              if (isDirectionRow) {
                maxX += max;
              } else {
                maxX = Math.max(maxX, max);
              }

              return;
            }

            var flexGrow = _currentStyle3[FLEX_GROW$1],
                flexShrink = _currentStyle3[FLEX_SHRINK$1];
            _computedStyle3[FLEX_BASIS$2] = b;
            growList.push(flexGrow);
            shrinkList.push(flexShrink); // 根据basis不同，计算方式不同

            basisList.push(b);
            maxList.push(max);
            minList.push(min);
          } // 文本
          else {
              if (isVirtual) {
                if (isDirectionRow) {
                  maxX += item.textWidth;
                } else {
                  maxX = Math.max(maxX, item.textWidth);
                }

                return;
              }

              growList.push(0);
              shrinkList.push(1);

              if (isDirectionRow) {
                var cw = item.charWidth;
                var _tw = item.textWidth;
                basisList.push(_tw);
                maxList.push(_tw);
                minList.push(cw);
              } else {
                var lineBoxManager = new LineBoxManager(x, y, lineHeight, css.getBaseLine(computedStyle));

                item.__layout({
                  x: x,
                  y: y,
                  w: w,
                  h: _h,
                  lineBoxManager: lineBoxManager,
                  lineClamp: lineClamp,
                  lineClampCount: lineClampCount
                });

                var _h = item.height;
                basisList.push(_h);
                minList.push(_h);
              }
            }
        }); // abs时，只需关注宽度即可，无需真正布局

        if (isVirtual) {
          var _tw2 = this.__width = Math.min(maxX, w);

          this.__ioSize(_tw2, this.height);

          return;
        }

        var containerSize = isDirectionRow ? w : h;
        var isMultiLine = flexWrap === 'wrap' || ['wrap-reverse', 'wrapReverse'].indexOf(flexWrap) > -1;
        /**
         * 判断是否需要分行，根据假设主尺寸来统计尺寸和计算，假设主尺寸是clamp(min_main_size, flex_base_size, max_main_size)
         * 当多行时，由于每行一定有最小限制，所以每行一般情况都不是shrink状态，
         * 但也有极端情况，比如一行只能放下1个元素时，且此元素比容器小，会是shrink
         */

        var line = [],
            sum = 0,
            hypotheticalList = [];
        basisList.forEach(function (item, i) {
          var min = minList[i],
              max = maxList[i];
          var hypothetical;

          if (item < min) {
            hypothetical = min;
          } else if (item > max) {
            hypothetical = max;
          } else {
            hypothetical = item;
          }

          hypotheticalList.push(hypothetical);

          if (isMultiLine) {
            // 超过尺寸时，要防止sum为0即1个也会超过尺寸
            if (sum + hypothetical > containerSize) {
              if (sum) {
                __flexLine.push(line);

                line = [orderChildren[i]];
                sum = hypothetical;
              } else {
                line.push(orderChildren[i]);

                __flexLine.push(line);

                line = [];
                sum = 0;
              }
            } else {
              line.push(orderChildren[i]);
              sum += hypothetical;
            }
          } else {
            line.push(orderChildren[i]);
          }
        });

        if (line.length) {
          __flexLine.push(line);
        }

        var offset = 0,
            clone = {
          x: x,
          y: y,
          w: w,
          h: h
        };
        var maxCrossList = [];

        __flexLine.forEach(function (item) {
          var length = item.length;
          var end = offset + length;

          var _this2$__layoutFlexLi = _this2.__layoutFlexLine(clone, isDirectionRow, containerSize, fixedWidth, fixedHeight, lineClamp, lineClampCount, lineHeight, computedStyle, justifyContent, alignItems, orderChildren.slice(offset, end), item, textAlign, growList.slice(offset, end), shrinkList.slice(offset, end), basisList.slice(offset, end), hypotheticalList.slice(offset, end), minList.slice(offset, end)),
              _this2$__layoutFlexLi2 = _slicedToArray(_this2$__layoutFlexLi, 3),
              x1 = _this2$__layoutFlexLi2[0],
              y1 = _this2$__layoutFlexLi2[1],
              maxCross = _this2$__layoutFlexLi2[2]; // 下一行/列更新坐标


          if (isDirectionRow) {
            clone.y = y1;
          } else {
            clone.x = x1;
          }

          x = Math.max(x, x1);
          y = Math.max(y, y1);
          maxCrossList.push(maxCross);
          offset += length;
        });

        var tw = this.__width = w;
        var th = this.__height = fixedHeight ? h : y - data.y;

        this.__ioSize(tw, th); // flexDirection当有reverse时交换每line的主轴序


        if (flexDirection === 'row-reverse' || flexDirection === 'rowReverse') {
          __flexLine.forEach(function (line) {
            line.forEach(function (item) {
              // 一个矩形内的子矩形进行镜像移动，用外w减去内w再减去开头空白的2倍即可
              var diff = tw - item.outerWidth - (item.x - data.x) * 2;

              if (diff) {
                item.__offsetX(diff, true);
              }
            });
          });
        } else if (flexDirection === 'column-reverse' || flexDirection === 'columnReverse') {
          __flexLine.forEach(function (line) {
            line.forEach(function (item) {
              // 一个矩形内的子矩形进行镜像移动，用外w减去内w再减去开头空白的2倍即可
              var diff = th - item.outerHeight - (item.y - data.y) * 2;

              if (diff) {
                item.__offsetY(diff, true);
              }
            });
          });
        } // wrap-reverse且多轴线时交换轴线序，需要2行及以上才行


        var length = __flexLine.length;

        if (['wrapReverse', 'wrap-reverse'].indexOf(flexWrap) > -1 && length > 1) {
          var crossSum = 0,
              crossSumList = [];
          maxCrossList.forEach(function (item) {
            crossSumList.push(crossSum);
            crossSum += item;
          });
          var count = 0;

          var _loop = function _loop(i) {
            var line = __flexLine[i];
            var source = crossSumList[i];
            var diff = count - source;

            if (diff) {
              line.forEach(function (item) {
                if (isDirectionRow) {
                  item.__offsetY(diff, true);
                } else {
                  item.__offsetX(diff, true);
                }
              });
            }

            count += maxCrossList[i];
          };

          for (var i = length - 1; i >= 0; i--) {
            _loop(i);
          }

          __flexLine.reverse();
        } // 侧轴对齐分flexLine做，要考虑整体的alignContent的stretch和每行的alignItems的stretch
        // 先做整体的，得出交叉轴空白再均分给每一行做单行的，整体的只有1行忽略


        var per;

        if (!isVirtual && length > 1 && (fixedHeight && isDirectionRow || !isDirectionRow)) {
          var diff = isDirectionRow ? th - (y - data.y) : tw - (x - data.x); // 有空余时才进行对齐

          if (diff > 0) {
            if (alignContent === 'center') {
              var _per = diff * 0.5;

              orderChildren.forEach(function (item) {
                if (isDirectionRow) {
                  item.__offsetY(_per, true);
                } else {
                  item.__offsetX(_per, true);
                }
              });
            } else if (alignContent === 'flex-start' || alignContent === 'flexStart') ; else if (alignContent === 'flex-end' || alignContent === 'flexEnd') {
              orderChildren.forEach(function (item) {
                if (isDirectionRow) {
                  item.__offsetY(diff, true);
                } else {
                  item.__offsetX(diff, true);
                }
              });
            } else if (alignContent === 'space-between' || alignContent === 'spaceBetween') {
              var between = diff / (length - 1); // 除了第1行其它进行偏移

              __flexLine.forEach(function (item, i) {
                if (i) {
                  item.forEach(function (item) {
                    if (isDirectionRow) {
                      item.__offsetY(between, true);
                    } else {
                      item.__offsetX(between, true);
                    }
                  });
                }
              });
            } else if (alignContent === 'space-around' || alignContent === 'spaceAround') {
              var around = diff / (length + 1);

              __flexLine.forEach(function (item, i) {
                item.forEach(function (item) {
                  if (isDirectionRow) {
                    item.__offsetY(around * (i + 1), true);
                  } else {
                    item.__offsetX(around * (i + 1), true);
                  }
                });
              });
            } // 默认stretch
            else {
                per = diff / length; // 除了第1行其它进行偏移

                __flexLine.forEach(function (item, i) {
                  if (i) {
                    item.forEach(function (item) {
                      if (isDirectionRow) {
                        item.__offsetY(per * i, true);
                      } else {
                        item.__offsetX(per * i, true);
                      }
                    });
                  }
                });
              }
          }
        } // 每行再进行cross对齐，在alignContent为stretch时计算每行的高度


        if (!isVirtual) {
          if (length > 1) {
            __flexLine.forEach(function (item, i) {
              var maxCross = maxCrossList[i];

              if (per) {
                maxCross += per;
              }

              _this2.__crossAlign(item, alignItems, isDirectionRow, maxCross);
            });
          } else if (length) {
            var maxCross = maxCrossList[0];

            if (isDirectionRow) {
              if (fixedHeight) {
                maxCross = h;
              }
            } else {
              maxCross = w;
            }

            this.__crossAlign(__flexLine[0], alignItems, isDirectionRow, maxCross);
          }
        }

        this.__marginAuto(currentStyle, data);
      }
      /**
       * 计算获取子元素的b/min/max完毕后，尝试进行flex每行布局
       * https://www.w3.org/TR/css-flexbox-1/#layout-algorithm
       * 假想主尺寸，其为clamp(min_main_size, flex_base_size, max_main_size)
       * 随后按算法一步步来 https://zhuanlan.zhihu.com/p/354567655
       * 规范没提到mpb，item的要计算，孙子的只考虑绝对值
       * 先收集basis和假设主尺寸
       */

    }, {
      key: "__layoutFlexLine",
      value: function __layoutFlexLine(data, isDirectionRow, containerSize, fixedWidth, fixedHeight, lineClamp, lineClampCount, lineHeight, computedStyle, justifyContent, alignItems, orderChildren, flexLine, textAlign, growList, shrinkList, basisList, hypotheticalList, minList) {
        var _this3 = this;

        var x = data.x,
            y = data.y,
            w = data.w,
            h = data.h;
        var hypotheticalSum = 0;
        hypotheticalList.forEach(function (item) {
          hypotheticalSum += item;
        }); // 根据假设尺寸确定使用grow还是shrink，冻结非弹性项并设置target尺寸，确定剩余未冻结数量

        var isOverflow = hypotheticalSum >= containerSize;
        var targetMainList = [];
        basisList.forEach(function (item, i) {
          if (isOverflow) {
            if (!shrinkList[i] || basisList[i] < hypotheticalList[i]) {
              targetMainList[i] = hypotheticalList[i];
            }
          } else {
            if (!growList[i] || basisList[i] > hypotheticalList[i]) {
              targetMainList[i] = hypotheticalList[i];
            }
          }
        }); // 初始可用空间，冻结使用确定的target尺寸，未冻结使用假想

        var free = 0;
        basisList.forEach(function (item, i) {
          if (targetMainList[i] !== undefined) {
            free += targetMainList[i];
          } else {
            free += item;
          }
        });
        var total = Infinity;

        if (isDirectionRow) {
          total = w;
        } else if (fixedHeight) {
          total = h;
        } else {
          total = free;
        }

        free = Math.abs(total - free); // 循环，文档算法不够简练，其合并了grow和shrink，实际拆开写更简单

        var factorSum = 0;

        if (isOverflow) {
          (function () {
            // 计算真正的因子占比，同时得出缩小尺寸数值
            // 还需判断每个item收缩不能<min值，小于的话将无法缩小的这部分按比例分配到其它几项上
            // 于是写成一个循环，每轮先处理一遍，如果产生收缩超限的情况，将超限的设为最小值并剔除
            // 剩下的重新分配因子占比继续从头循环重来一遍
            var factorList = shrinkList.map(function (item, i) {
              if (targetMainList[i] === undefined) {
                var n = item * basisList[i];
                factorSum += n;
                return n;
              }
            });

            while (true) {
              if (factorSum < 1) {
                free *= factorSum;
              }

              var needReset = void 0,
                  factorSum2 = 0;
              factorList.forEach(function (item, i) {
                if (item) {
                  var r = item / factorSum;
                  var s = r * free; // 需要收缩的尺寸

                  var n = basisList[i] - s; // 实际尺寸
                  // 比min还小设置为min，同时设0剔除

                  if (n < minList[i]) {
                    targetMainList[i] = minList[i];
                    factorList[i] = 0;
                    needReset = true;
                    free -= basisList[i] - minList[i]; // 超出的尺寸也要减去实际收缩的尺寸
                  } // 先按照没有超限的设置，正常情况直接跳出，如果有超限，记录sum2给下轮赋值重新计算
                  else {
                      targetMainList[i] = n;
                      factorSum2 += item;
                    }
                }
              });

              if (!needReset) {
                break;
              }

              factorSum = factorSum2;
            }
          })();
        } else {
          (function () {
            var factorList = growList.map(function (item, i) {
              if (targetMainList[i] === undefined) {
                factorSum += item;
                return item;
              }
            });

            while (true) {
              if (factorSum < 1) {
                free *= factorSum;
              }

              var needReset = void 0,
                  factorSum2 = 0;
              factorList.forEach(function (item, i) {
                if (item) {
                  var r = item / factorSum;
                  var s = r * free; // 需要扩展的尺寸

                  var n = basisList[i] + s; // 实际尺寸
                  // 比min还小设置为min，同时设0剔除

                  if (n < minList[i]) {
                    targetMainList[i] = minList[i];
                    factorList[i] = 0;
                    needReset = true;
                    free -= basisList[i] - minList[i]; // 超出的尺寸也要减去实际收缩的尺寸
                  } // 先按照没有超限的设置，正常情况直接跳出，如果有超限，记录sum2给下轮赋值重新计算
                  else {
                      targetMainList[i] = n;
                      factorSum2 += item;
                    }
                }
              });

              if (!needReset) {
                break;
              }

              factorSum = factorSum2;
            }
          })();
        }

        var maxCross = 0;
        var lbmList = [];
        orderChildren.forEach(function (item, i) {
          var main = targetMainList[i];

          if (item instanceof Xom$1 || item instanceof Component$1 && item.shadowRoot instanceof Xom$1) {
            if (isDirectionRow) {
              item.__layout({
                x: x,
                y: y,
                w: main,
                h: h,
                w3: main // w3假设固定宽度，忽略原始style中的设置

              });
            } else {
              item.__layout({
                x: x,
                y: y,
                w: w,
                h: main,
                h3: main // 同w2

              });
            }
          } else {
            var lineBoxManager = _this3.__lineBoxManager = new LineBoxManager(x, y, lineHeight, css.getBaseLine(computedStyle));
            lbmList.push(lineBoxManager);

            item.__layout({
              x: x,
              y: y,
              w: isDirectionRow ? main : w,
              h: isDirectionRow ? h : main,
              lineBoxManager: lineBoxManager,
              lineClamp: lineClamp,
              lineClampCount: lineClampCount
            });
          }

          if (isDirectionRow) {
            x += item.outerWidth;
            maxCross = Math.max(maxCross, item.outerHeight);
          } else {
            y += item.outerHeight;
            maxCross = Math.max(maxCross, item.outerWidth);
          }
        }); // 计算主轴剩余时要用真实剩余空间而不能用伸缩剩余空间

        var diff = isDirectionRow ? w - x + data.x : h - y + data.y; // 主轴对齐方式

        if (diff > 0) {
          var len = orderChildren.length;

          if (justifyContent === 'flexEnd' || justifyContent === 'flex-end') {
            for (var i = 0; i < len; i++) {
              var child = orderChildren[i];
              isDirectionRow ? child.__offsetX(diff, true) : child.__offsetY(diff, true);
            }
          } else if (justifyContent === 'center') {
            var center = diff * 0.5;

            for (var _i2 = 0; _i2 < len; _i2++) {
              var _child = orderChildren[_i2];
              isDirectionRow ? _child.__offsetX(center, true) : _child.__offsetY(center, true);
            }
          } else if (justifyContent === 'spaceBetween' || justifyContent === 'space-between') {
            var between = diff / (len - 1);

            for (var _i3 = 1; _i3 < len; _i3++) {
              var _child2 = orderChildren[_i3];
              isDirectionRow ? _child2.__offsetX(between * _i3, true) : _child2.__offsetY(between * _i3, true);
            }
          } else if (justifyContent === 'spaceAround' || justifyContent === 'space-around') {
            var around = diff / (len + 1);

            for (var _i4 = 0; _i4 < len; _i4++) {
              var _child3 = orderChildren[_i4];
              isDirectionRow ? _child3.__offsetX(around * (_i4 + 1), true) : _child3.__offsetY(around * (_i4 + 1), true);
            }
          }
        }

        if (isDirectionRow) {
          y += maxCross;
        } else {
          x += maxCross;
        } // flex的直接text对齐比较特殊


        if (['center', 'right'].indexOf(textAlign) > -1) {
          lbmList.forEach(function (item) {
            item.horizonAlign(item.width, textAlign);
          });
        }

        return [x, y, maxCross];
      } // 每个flexLine的侧轴对齐，单行时就是一行对齐

    }, {
      key: "__crossAlign",
      value: function __crossAlign(line, alignItems, isDirectionRow, maxCross) {
        var baseLine = 0;
        line.forEach(function (item) {
          baseLine = Math.max(baseLine, item.firstBaseLine);
        });
        line.forEach(function (item) {
          var alignSelf = item.currentStyle[ALIGN_SELF$1];

          if (isDirectionRow) {
            if (alignSelf === 'flexStart' || alignSelf === 'flex-start') ; else if (alignSelf === 'flexEnd' || alignSelf === 'flex-end') {
              var diff = maxCross - item.outerHeight;

              if (diff !== 0) {
                item.__offsetY(diff, true);
              }
            } else if (alignSelf === 'center') {
              var _diff3 = maxCross - item.outerHeight;

              if (_diff3 !== 0) {
                item.__offsetY(_diff3 * 0.5, true);
              }
            } else if (alignSelf === 'stretch') {
              var computedStyle = item.computedStyle,
                  height = item.currentStyle[HEIGHT$5];
              var borderTopWidth = computedStyle[BORDER_TOP_WIDTH$3],
                  borderBottomWidth = computedStyle[BORDER_BOTTOM_WIDTH$3],
                  marginTop = computedStyle[MARGIN_TOP$1],
                  marginBottom = computedStyle[MARGIN_BOTTOM$1],
                  paddingTop = computedStyle[PADDING_TOP$2],
                  paddingBottom = computedStyle[PADDING_BOTTOM$2];

              if (height[1] === AUTO$6) {
                var old = item.height;
                var v = item.__height = computedStyle[HEIGHT$5] = maxCross - marginTop - marginBottom - paddingTop - paddingBottom - borderTopWidth - borderBottomWidth;
                var d = v - old;
                item.__sy4 += d;
                item.__sy5 += d;
                item.__sy6 += d;
                item.__height += d;
                item.__clientHeight += d;
                item.__offsetHeight += d;
                item.__outerHeight += d;
              }
            } else if (alignSelf === 'baseline') {
              var _diff4 = baseLine - item.firstBaseLine;

              if (_diff4 !== 0) {
                item.__offsetY(_diff4, true);
              }
            } // 默认auto，取alignItems
            else {
                if (alignItems === 'flexStart' || alignSelf === 'flex-start') ; else if (alignItems === 'center') {
                  var _diff5 = maxCross - item.outerHeight;

                  if (_diff5 !== 0) {
                    item.__offsetY(_diff5 * 0.5, true);
                  }
                } else if (alignItems === 'flexEnd' || alignItems === 'flex-end') {
                  var _diff6 = maxCross - item.outerHeight;

                  if (_diff6 !== 0) {
                    item.__offsetY(_diff6, true);
                  }
                } else if (alignItems === 'baseline') {
                  var _diff7 = baseLine - item.firstBaseLine;

                  if (_diff7 !== 0) {
                    item.__offsetY(_diff7, true);
                  }
                } // 默认stretch
                else {
                    var _computedStyle4 = item.computedStyle,
                        _item$currentStyle = item.currentStyle,
                        display = _item$currentStyle[DISPLAY$5],
                        flexDirection = _item$currentStyle[FLEX_DIRECTION$2],
                        _height = _item$currentStyle[HEIGHT$5]; // row的孩子还是flex且column且不定高时，如果高度<侧轴拉伸高度则重新布局

                    if (isDirectionRow && display === 'flex' && flexDirection === 'column' && _height[1] === AUTO$6 && item.outerHeight < maxCross) {
                      item.__layout(Object.assign(item.__layoutData, {
                        h3: maxCross
                      }));
                    }

                    var _borderTopWidth = _computedStyle4[BORDER_TOP_WIDTH$3],
                        _borderBottomWidth = _computedStyle4[BORDER_BOTTOM_WIDTH$3],
                        _marginTop2 = _computedStyle4[MARGIN_TOP$1],
                        _marginBottom2 = _computedStyle4[MARGIN_BOTTOM$1],
                        _paddingTop = _computedStyle4[PADDING_TOP$2],
                        _paddingBottom = _computedStyle4[PADDING_BOTTOM$2];

                    if (_height[1] === AUTO$6) {
                      var _old = item.height;

                      var _v = maxCross - _marginTop2 - _marginBottom2 - _paddingTop - _paddingBottom - _borderTopWidth - _borderBottomWidth;

                      var _d = _v - _old;

                      item.__sy4 += _d;
                      item.__sy5 += _d;
                      item.__sy6 += _d;
                      item.__height += _d;
                      item.__clientHeight += _d;
                      item.__offsetHeight += _d;
                      item.__outerHeight += _d;
                    }
                  }
              }
          } // column
          else {
              if (alignSelf === 'flexStart' || alignSelf === 'flex-start') ; else if (alignSelf === 'flexEnd' || alignSelf === 'flex-end') {
                var _diff8 = maxCross - item.outerWidth;

                if (_diff8 !== 0) {
                  item.__offsetX(_diff8, true);
                }
              } else if (alignSelf === 'center') {
                var _diff9 = maxCross - item.outerWidth;

                if (_diff9 !== 0) {
                  item.__offsetX(_diff9 * 0.5, true);
                }
              } else if (alignSelf === 'stretch') {
                var _computedStyle5 = item.computedStyle,
                    width = item.currentStyle[WIDTH$5];
                var borderRightWidth = _computedStyle5[BORDER_RIGHT_WIDTH$4],
                    borderLeftWidth = _computedStyle5[BORDER_LEFT_WIDTH$5],
                    marginRight = _computedStyle5[MARGIN_RIGHT$3],
                    marginLeft = _computedStyle5[MARGIN_LEFT$3],
                    paddingRight = _computedStyle5[PADDING_RIGHT$3],
                    paddingLeft = _computedStyle5[PADDING_LEFT$4];

                if (width[1] === AUTO$6) {
                  var _old2 = item.width;

                  var _v2 = item.__width = _computedStyle5[WIDTH$5] = maxCross - marginLeft - marginRight - paddingLeft - paddingRight - borderRightWidth - borderLeftWidth;

                  var _d2 = _v2 - _old2;

                  item.__sx4 += _d2;
                  item.__sx5 += _d2;
                  item.__sx6 += _d2;
                  item.__width += _d2;
                  item.__clientWidth += _d2;
                  item.__offsetWidth += _d2;
                  item.__outerWidth += _d2;
                }
              } else if (alignItems === 'baseline') {
                var _diff10 = baseLine - item.firstBaseLine;

                if (_diff10 !== 0) {
                  item.__offsetX(_diff10, true);
                }
              } // 默认auto，取alignItems
              else {
                  if (alignItems === 'flexStart' || alignSelf === 'flex-start') ; else if (alignItems === 'center') {
                    var _diff11 = maxCross - item.outerWidth;

                    if (_diff11 !== 0) {
                      item.__offsetX(_diff11 * 0.5, true);
                    }
                  } else if (alignItems === 'flexEnd' || alignItems === 'flex-end') {
                    var _diff12 = maxCross - item.outerWidth;

                    if (_diff12 !== 0) {
                      item.__offsetX(_diff12, true);
                    }
                  } else if (alignItems === 'baseline') {
                    var _diff13 = baseLine - item.firstBaseLine;

                    if (_diff13 !== 0) {
                      item.__offsetX(_diff13, true);
                    }
                  } // 默认stretch
                  else {
                      var _computedStyle6 = item.computedStyle,
                          _width = item.currentStyle[WIDTH$5];
                      var _borderRightWidth = _computedStyle6[BORDER_RIGHT_WIDTH$4],
                          _borderLeftWidth = _computedStyle6[BORDER_LEFT_WIDTH$5],
                          _marginRight = _computedStyle6[MARGIN_RIGHT$3],
                          _marginLeft = _computedStyle6[MARGIN_LEFT$3],
                          _paddingRight = _computedStyle6[PADDING_RIGHT$3],
                          _paddingLeft = _computedStyle6[PADDING_LEFT$4];

                      if (_width[1] === AUTO$6) {
                        var _old3 = item.width;

                        var _v3 = item.__width = _computedStyle6[WIDTH$5] = maxCross - _marginLeft - _marginRight - _paddingLeft - _paddingRight - _borderRightWidth - _borderLeftWidth;

                        var _d3 = _v3 - _old3;

                        item.__sx4 += _d3;
                        item.__sx5 += _d3;
                        item.__sx6 += _d3;
                        item.__width += _d3;
                        item.__clientWidth += _d3;
                        item.__offsetWidth += _d3;
                        item.__outerWidth += _d3;
                      }
                    }
                }
            }
        });
      }
      /**
       * inline比较特殊，先简单顶部对其，后续还需根据vertical和lineHeight计算y偏移
       * inlineBlock复用逻辑，可以设置w/h，在混排时表现不同，inlineBlock换行限制在规定的矩形内，
       * 且ib会在没设置width且换行的时候撑满上一行，即便内部尺寸没抵达边界
       * 而inline换行则会从父容器start处开始，且首尾可能占用矩形不同
       * 嵌套inline情况十分复杂，尾部mpb空白可能产生叠加情况，因此endSpace表示自身，
       * 然后根据是否在最后一个元素进行叠加父元素的，多层嵌套则多层尾部叠加，均以最后一个元素为依据判断
       * Text获取这个叠加的endSpace值即可，无需感知是否最后一个，外层（此处）进行逻辑封装
       * @param data
       * @param isVirtual
       * @param isInline
       * @private
       */

    }, {
      key: "__layoutInline",
      value: function __layoutInline(data, isVirtual, isInline) {
        var flowChildren = this.flowChildren,
            currentStyle = this.currentStyle,
            computedStyle = this.computedStyle;

        var _this$__preLayout3 = this.__preLayout(data, isInline),
            fixedWidth = _this$__preLayout3.fixedWidth,
            fixedHeight = _this$__preLayout3.fixedHeight,
            x = _this$__preLayout3.x,
            y = _this$__preLayout3.y,
            w = _this$__preLayout3.w,
            h = _this$__preLayout3.h,
            lx = _this$__preLayout3.lx,
            lineBoxManager = _this$__preLayout3.lineBoxManager,
            nowrap = _this$__preLayout3.nowrap,
            endSpace = _this$__preLayout3.endSpace,
            selfEndSpace = _this$__preLayout3.selfEndSpace; // abs虚拟布局需预知width，固定可提前返回


        if (fixedWidth && isVirtual) {
          this.__width = w;

          this.__ioSize(w, this.height);

          return;
        }

        var width = currentStyle[WIDTH$5];
        var textAlign = computedStyle[TEXT_ALIGN$2],
            whiteSpace = computedStyle[WHITE_SPACE$2],
            lineClamp = computedStyle[LINE_CLAMP$1],
            lineHeight = computedStyle[LINE_HEIGHT$4],
            marginLeft = computedStyle[MARGIN_LEFT$3],
            marginRight = computedStyle[MARGIN_RIGHT$3],
            borderLeftWidth = computedStyle[BORDER_LEFT_WIDTH$5],
            borderRightWidth = computedStyle[BORDER_RIGHT_WIDTH$4],
            paddingLeft = computedStyle[PADDING_LEFT$4],
            paddingRight = computedStyle[PADDING_RIGHT$3];
        var lineClampCount = data.lineClampCount || 0;

        if (isInline && !this.__isRealInline()) {
          isInline = false;
        } // 只有inline的孩子需要考虑换行后从行首开始，而ib不需要，因此重置行首标识lx为x，末尾空白为0
        // 而inline的LineBoxManager复用最近非inline父dom的，ib需要重新生成，末尾空白叠加


        if (isInline) {
          this.__config[NODE_IS_INLINE$1] = true;
          this.__lineBoxManager = lineBoxManager;
          var baseLine = css.getBaseLine(computedStyle); // 特殊inline调用，有内容的话（如左右mbp），默认生成一个lineBox，即便是空，也要形成占位，只有开头时需要

          if (marginLeft || marginRight || paddingLeft || paddingRight || borderLeftWidth || borderRightWidth) {
            if (lineBoxManager.isNewLine) {
              lineBoxManager.genLineBoxByInlineIfNewLine(x, y, lineHeight, baseLine);
            } else {
              lineBoxManager.setLbByInlineIfNotNewLine(lineHeight, baseLine);
            }
          } else {
            lineBoxManager.setLbByInlineIfNotNewLine(lineHeight, baseLine);
          }

          lineClamp = data.lineClamp || 0;
        } else {
          lineBoxManager = this.__lineBoxManager = new LineBoxManager(x, y, lineHeight, css.getBaseLine(computedStyle));
          lx = x;
          endSpace = selfEndSpace = lineClampCount = 0;
        } // 存LineBox里的内容列表专用，布局过程中由lineBoxManager存入，递归情况每个inline节点都保存contentBox


        var contentBoxList;

        if (isInline) {
          contentBoxList = this.__contentBoxList = [];
          lineBoxManager.pushContentBoxList(this);
        }

        var isIbFull = false; // ib时不限定w情况下发生折行则撑满行，即便内容没有撑满边界

        var length = flowChildren.length;
        flowChildren.forEach(function (item, i) {
          var isXom = item instanceof Xom$1 || item instanceof Component$1 && item.shadowRoot instanceof Xom$1;
          var isInline2 = isXom && item.currentStyle[DISPLAY$5] === 'inline';
          var isInlineBlock2 = isXom && ['inlineBlock', 'inline-block'].indexOf(item.currentStyle[DISPLAY$5]) > -1;

          var isRealInline = isXom && item.__isRealInline(); // 最后一个元素会产生最后一行，叠加父元素的尾部mpb


          var isEnd = isInline && i === length - 1;

          if (isEnd) {
            endSpace += selfEndSpace;
          }

          if (isXom) {
            if (!isInline2 && !isInlineBlock2) {
              item.currentStyle[DISPLAY$5] = item.computedStyle[DISPLAY$5] = 'inlineBlock';
              isInlineBlock2 = true;
              inject.warn('Inline can not contain block/flex');
            } // x开头，不用考虑是否放得下直接放，i为0强制不换行


            if (x === lx || !i || isInline2 && whiteSpace === 'nowrap') {
              lineClampCount = item.__layout({
                x: x,
                y: y,
                w: w,
                h: h,
                lx: lx,
                lineBoxManager: lineBoxManager,
                endSpace: endSpace,
                lineClamp: lineClamp,
                lineClampCount: lineClampCount
              }, isVirtual); // inlineBlock的特殊之处，一旦w为auto且内部产生折行时，整个变成block独占一块区域，坐标计算和block一样

              if (item.__isIbFull) {
                isInlineBlock2 && w[1] === AUTO$6 && (isIbFull = true);
                lineBoxManager.addItem(item);
                x = lx;
                y += item.outerHeight;
                lineBoxManager.setNotEnd();
              } // inline和不折行的ib，其中ib需要手动存入当前lb中，以计算宽度
              else {
                  (isInlineBlock2 || !isRealInline) && lineBoxManager.addItem(item);
                  x = lineBoxManager.lastX;
                  y = lineBoxManager.lastY;
                }
            } else {
              // 不换行继续排，换行非开头先尝试是否放得下，结尾要考虑mpb因此减去endSpace
              var fw = whiteSpace === 'nowrap' ? 0 : item.__tryLayInline(w - x + lx, w - (isEnd ? endSpace : 0)); // 放得下继续

              if (fw >= -1e-10) {
                lineClampCount = item.__layout({
                  x: x,
                  y: y,
                  w: w,
                  h: h,
                  lx: lx,
                  nowrap: whiteSpace === 'nowrap',
                  lineBoxManager: lineBoxManager,
                  endSpace: endSpace,
                  lineClamp: lineClamp,
                  lineClampCount: lineClampCount
                }, isVirtual); // ib放得下要么内部没有折行，要么声明了width限制，都需手动存入当前lb

                (isInlineBlock2 || !isRealInline) && lineBoxManager.addItem(item);
                x = lineBoxManager.lastX;
                y = lineBoxManager.lastY;
              } // 放不下处理之前的lineBox，并重新开头
              else {
                  isInline2 && lineClampCount++;
                  x = lx;
                  y = lineBoxManager.endY;
                  lineBoxManager.setNewLine();
                  lineClampCount = item.__layout({
                    x: x,
                    y: y,
                    w: w,
                    h: h,
                    lx: lx,
                    lineBoxManager: lineBoxManager,
                    endSpace: endSpace,
                    lineClamp: lineClamp,
                    lineClampCount: lineClampCount
                  }, isVirtual); // 重新开头的ib和上面开头处一样逻辑

                  if (item.__isIbFull) {
                    lineBoxManager.addItem(item);
                    x = lx;
                    y += item.outerHeight;
                    lineBoxManager.setNotEnd();
                  } // inline和不折行的ib，其中ib需要手动存入当前lb中
                  else {
                      (isInlineBlock2 || !isRealInline) && lineBoxManager.addItem(item);
                      x = lineBoxManager.lastX;
                      y = lineBoxManager.lastY;
                    }
                }
            }
          } // inline里的其它只有文本，可能开始紧跟着之前的x，也可能换行后从lx行头开始
          // 紧跟着x可能出现在前面有节点换行后第2行，此时不一定放得下，因此不能作为判断依据，开头仅有lx
          else {
              var n = lineBoxManager.size; // i为0时强制不换行

              if (x === lx || !i || whiteSpace === 'nowrap') {
                lineClampCount = item.__layout({
                  x: x,
                  y: y,
                  w: w,
                  h: h,
                  lx: lx,
                  lineBoxManager: lineBoxManager,
                  endSpace: endSpace,
                  lineClamp: lineClamp,
                  lineClampCount: lineClampCount
                }, isVirtual);
                x = lineBoxManager.lastX;
                y = lineBoxManager.lastY; // ib情况发生折行，且非定宽

                if (!isInline && lineBoxManager.size - n > 1 && width[1] === AUTO$6) {
                  isIbFull = true;
                }
              } else {
                // 非开头先尝试是否放得下，如果放得下再看是否end，加end且只有1个字时放不下要换行，否则可以放，换行由text内部做
                // 第一个Text且父元素声明了nowrap也强制不换行，非第一个则看本身whiteSpace声明
                var focusNoWrap = !i && nowrap || whiteSpace === 'nowrap';

                var _fw2 = focusNoWrap ? 0 : item.__tryLayInline(w + lx - x);

                if (!focusNoWrap && _fw2 >= 0 && isEnd && endSpace && item.content.length === 1) {
                  var fw2 = _fw2 - endSpace;

                  if (fw2 < 0) {
                    _fw2 = fw2;
                  }
                } // 放得下继续


                if (_fw2 >= -1e-10) {
                  lineClampCount = item.__layout({
                    x: x,
                    y: y,
                    w: w,
                    h: h,
                    lx: lx,
                    lineBoxManager: lineBoxManager,
                    endSpace: endSpace,
                    lineClamp: lineClamp,
                    lineClampCount: lineClampCount
                  }, isVirtual);
                  x = lineBoxManager.lastX;
                  y = lineBoxManager.lastY; // 这里ib放得下一定是要么没换行要么固定宽度，所以无需判断isIbFull
                } // 放不下处理之前的lineBox，并重新开头
                else {
                    lineClampCount++;
                    x = lx;
                    y = lineBoxManager.endY;
                    lineBoxManager.setNewLine();
                    lineClampCount = item.__layout({
                      x: x,
                      y: y,
                      w: w,
                      h: h,
                      lx: lx,
                      lineBoxManager: lineBoxManager,
                      endSpace: endSpace,
                      lineClamp: lineClamp,
                      lineClampCount: lineClampCount
                    }, isVirtual);
                    x = lineBoxManager.lastX;
                    y = lineBoxManager.lastY; // ib情况发生折行

                    if (!isInline && lineBoxManager.size - n > 1 && width[1] === AUTO$6) {
                      isIbFull = true;
                    }
                  }
              }
            }
        }); // 同block结尾，不过这里一定是lineBox结束，无需判断

        y = lineBoxManager.endY; // 标识ib情况同block一样占满行

        this.__isIbFull = isIbFull; // 元素的width在固定情况或者ibFull情况已被计算出来，否则为最大延展尺寸，inline没有固定尺寸概念

        var tw, th;

        if (isInline) {
          // inline最后的x要算上右侧mpb，为next行元素提供x坐标基准，同时其尺寸计算比较特殊
          if (selfEndSpace) {
            lineBoxManager.addX(selfEndSpace);
          } // 如果没有内容，空白还要加上开头即左侧mpb


          if (!flowChildren.length) {
            var _marginLeft2 = computedStyle[MARGIN_LEFT$3],
                _paddingLeft2 = computedStyle[PADDING_LEFT$4],
                _borderLeftWidth2 = computedStyle[BORDER_LEFT_WIDTH$5];
            lineBoxManager.addX(_marginLeft2 + _paddingLeft2 + _borderLeftWidth2);
          } // 结束出栈contentBox，递归情况结束子inline获取contentBox，父inline继续


          lineBoxManager.popContentBoxList(); // abs非固定w时预计算，本来是最近非inline父层统一计算，但在abs时不算，

          if (isVirtual) {
            this.__inlineSize();
          }
        } else {
          // ib在满时很特殊，取最大值，可能w本身很小不足排下1个字符，此时要用maxW
          var maxW = lineBoxManager.__maxX - data.x;
          tw = this.__width = fixedWidth ? w : isIbFull ? Math.max(w, maxW) : maxW;
          th = this.__height = fixedHeight ? h : y - data.y;

          this.__ioSize(tw, th);
        } // 非abs提前虚拟布局，真实布局情况下最后为所有行内元素进行2个方向上的对齐，inline会被父级调用这里只看ib


        if (!isVirtual && !isInline) {
          lineBoxManager.verticalAlign();

          if (['center', 'right'].indexOf(textAlign) > -1) {
            lineBoxManager.horizonAlign(tw, textAlign); // 直接text需计算size

            flowChildren.forEach(function (item) {
              if (item instanceof Component$1) {
                item = item.shadowRoot;
              }

              if (item instanceof Text) {
                item.__inlineSize();
              }
            });
          } // block的所有inline计算size


          lineBoxManager.domList.forEach(function (item) {
            item.__inlineSize(tw, textAlign);
          });
        } // inlineBlock新开上下文，但父级block遇到要处理换行


        return isInline ? lineClampCount : 0;
      }
      /**
       * inline的尺寸计算非常特殊，并非一个矩形区域，而是由字体行高结合节点下多个LineBox中的内容决定，
       * 且这个尺寸又并非真实LineBox中的内容直接合并计算而来，比如包含了个更大尺寸的ib却不会计入
       * 具体方法为遍历持有的LineBox下的内容，x取两侧极值，同时首尾要考虑mpb，y值取上下极值，同样首尾考虑mpb
       * 首尾行LineBox可能不是不是占满一行，比如前后都有同行inline的情况，非首尾行则肯定占满
       * 绘制内容（如背景色）的区域也很特殊，每行LineBox根据lineHeight对齐baseLine得来，并非LineBox全部
       * 当LineBox只有直属Text时如果font没有lineGap则等价于全部，如有则需减去
       * 另外其client/offset/outer的w/h尺寸计算也很特殊，皆因首尾x方向的mpb导致
       * @private
       */

    }, {
      key: "__inlineSize",
      value: function __inlineSize(tw, textAlign) {
        var contentBoxList = this.contentBoxList,
            computedStyle = this.computedStyle,
            __ox = this.__ox,
            __oy = this.__oy;
        var marginTop = computedStyle[MARGIN_TOP$1],
            marginRight = computedStyle[MARGIN_RIGHT$3],
            marginBottom = computedStyle[MARGIN_BOTTOM$1],
            marginLeft = computedStyle[MARGIN_LEFT$3],
            paddingTop = computedStyle[PADDING_TOP$2],
            paddingRight = computedStyle[PADDING_RIGHT$3],
            paddingBottom = computedStyle[PADDING_BOTTOM$2],
            paddingLeft = computedStyle[PADDING_LEFT$4],
            borderTopWidth = computedStyle[BORDER_TOP_WIDTH$3],
            borderRightWidth = computedStyle[BORDER_RIGHT_WIDTH$4],
            borderBottomWidth = computedStyle[BORDER_BOTTOM_WIDTH$3],
            borderLeftWidth = computedStyle[BORDER_LEFT_WIDTH$5],
            lineHeight = computedStyle[LINE_HEIGHT$4]; // x/clientX/offsetX/outerX

        var maxX, maxY, minX, minY, maxCX, maxCY, minCX, minCY, maxFX, maxFY, minFX, minFY, maxOX, maxOY, minOX, minOY;
        var length = contentBoxList.length;

        if (length) {
          // 遍历contentBox，里面存的是LineBox内容，根据父LineBox引用判断是否换行
          contentBoxList.forEach(function (item, i) {
            // 非第一个除了minY不用看其它都要，minX是换行导致，而maxX在最后一个要考虑右侧mpb，中间的无需考虑嵌套inline的mpb
            if (i) {
              minX = Math.min(minX, item.x);
              minCX = Math.min(minCX, item.x);
              minFX = Math.min(minFX, item.x);
              minOX = Math.min(minOX, item.x);

              if (i === length - 1) {
                maxX = maxCX = maxFX = maxOX = Math.max(maxX, item.x + item.outerWidth);
                maxY = maxCY = maxFY = maxOY = Math.max(maxY, item.y + item.outerHeight);
                maxCX += paddingRight;
                maxCY += paddingBottom;
                maxFX += paddingRight + borderRightWidth;
                maxFY += paddingBottom + borderBottomWidth;
                maxOX += borderRightWidth + paddingRight + marginRight;
                maxOY += borderBottomWidth + paddingBottom + marginBottom;
              } else {
                maxX = maxCX = maxFX = maxOX = Math.max(maxX, item.x + item.outerWidth);
              }
            } // 第一个初始化
            else {
                minX = item.x;
                minY = item.y;
                minCX = minX - paddingLeft;
                minCY = minY - paddingTop;
                minFX = minCX - borderLeftWidth;
                minFY = minCY - borderTopWidth;
                minOX = minFX - marginLeft;
                minOY = minFY - marginTop;
                maxX = maxCX = maxFX = maxOX = item.x + item.outerWidth;
                maxY = maxCY = maxFY = maxOY = item.y + item.outerHeight;

                if (i === length - 1) {
                  maxCX += paddingRight;
                  maxCY += paddingBottom;
                  maxFX += paddingRight + borderRightWidth;
                  maxFY += paddingBottom + borderBottomWidth;
                  maxOX += borderRightWidth + paddingRight + marginRight;
                  maxOY += borderBottomWidth + paddingBottom + marginBottom;
                }
              }
          });
          this.__x = minOX;
          this.__y = minOY;
          this.__width = computedStyle[WIDTH$5] = maxX - minX; // 防止比自己最小高度lineHeight还小，比如内容是个小字体

          this.__height = computedStyle[HEIGHT$5] = Math.max(lineHeight, maxY - minY);
          this.__clientWidth = maxCX - minCX;
          this.__clientHeight = maxCY - minCY;
          this.__offsetWidth = maxFX - minFX;
          this.__offsetHeight = maxFY - minFY;
          this.__outerWidth = maxOX - minOX;
          this.__outerHeight = maxOY - minOY;
          this.__sx = minOX + __ox;
          this.__sy = minOY + __oy;
          this.__sx1 = minFX + __ox;
          this.__sy1 = minFY + __oy;
          this.__sx2 = minCX + __ox;
          this.__sy2 = minCY + __oy;
          this.__sx3 = minX + __ox;
          this.__sy3 = minY + __oy;
          this.__sx4 = maxX + __ox;
          this.__sy4 = maxY + __oy;
          this.__sx5 = maxCX + __ox;
          this.__sy5 = maxCY + __oy;
          this.__sx6 = maxFX + __ox;
          this.__sy6 = maxFY + __oy; // inline的text整体设置相同

          if (['center', 'right'].indexOf(textAlign) > -1) {
            this.children.forEach(function (item) {
              if (item instanceof Text) {
                item.__inlineSize();
              }
            });
          }
        } // 如果没有内容，宽度为0高度为lineHeight，对齐也特殊处理，lineBoxManager不会处理
        else {
            if (['center', 'right'].indexOf(textAlign) > -1) {
              var diff = tw;

              if (textAlign === 'center') {
                diff *= 0.5;
              }

              if (diff) {
                this.__offsetX(diff, true);
              }
            }

            this.__width = computedStyle[WIDTH$5] = 0;
            var th = this.__height = computedStyle[HEIGHT$5] = lineHeight;

            this.__ioSize(0, th);

            this.__sy -= marginTop + paddingTop + borderTopWidth;
            this.__sx1 = this.sx + marginLeft;
            this.__sy1 = this.sy + marginTop;
            this.__sx2 = this.__sx1 + borderLeftWidth;
            this.__sy2 = this.__sy1 + borderTopWidth;
            this.__sx4 = this.__sx3 = this.__sx2 + paddingLeft;
            this.__sy4 = this.__sy3 = this.__sy2 + paddingTop;
            this.__sx5 = this.__sx4 + paddingRight;
            this.__sy5 = this.__sy4 + th + paddingBottom;
            this.__sx6 = this.__sx5 + borderRightWidth;
            this.__sy6 = this.__sy5 + borderBottomWidth;
            this.__clientWidth = this.__sx5 - this.__sx2;
            this.__clientHeight = this.__sy5 - this.__sy2;
            this.__offsetWidth = this.__sx6 - this.__sx1;
            this.__offsetHeight = this.__sy6 - this.__sy1;
            this.__outerWidth = this.__offsetWidth + marginLeft + marginRight;
            this.__outerHeight = this.__offsetHeight + marginTop + marginBottom;
          }
      }
      /**
       * 只针对绝对定位children布局
       * @param container
       * @param data
       * @param target 可选，只针对某个abs的child特定布局，在局部更新时用
       * @private
       */

    }, {
      key: "__layoutAbs",
      value: function __layoutAbs(container, data, target) {
        var _this4 = this;

        var x = container.sx,
            y = container.sy,
            clientWidth = container.clientWidth,
            clientHeight = container.clientHeight,
            computedStyle = container.computedStyle;
        var isDestroyed = this.isDestroyed,
            children = this.children,
            absChildren = this.absChildren;
        var display = computedStyle[DISPLAY$5],
            borderTopWidth = computedStyle[BORDER_TOP_WIDTH$3],
            borderLeftWidth = computedStyle[BORDER_LEFT_WIDTH$5],
            marginTop = computedStyle[MARGIN_TOP$1],
            marginLeft = computedStyle[MARGIN_LEFT$3],
            paddingLeft = computedStyle[PADDING_LEFT$4],
            paddingTop = computedStyle[PADDING_TOP$2];

        if (isDestroyed || display === 'none') {
          this.__layoutNone();

          return;
        }

        x += marginLeft + borderLeftWidth;
        y += marginTop + borderTopWidth; // 对absolute的元素进行相对容器布局

        absChildren.forEach(function (item) {
          if (target) {
            // 传入target局部布局更新，这时候如果是Component引发的，当setState时是Cp自身，当layout时是sr
            var node = item;

            if (node instanceof Component$1) {
              node = item.shadowRoot;
            } // 所以得2个都对比


            if (target !== node && target !== item) {
              return;
            }
          }

          var currentStyle = item.currentStyle,
              computedStyle = item.computedStyle;

          if (currentStyle[DISPLAY$5] === 'none') {
            item.__layoutNone();

            return;
          } // 先根据容器宽度计算margin/padding


          item.__mp(currentStyle, computedStyle, clientWidth);

          if (currentStyle[DISPLAY$5] !== 'block' && currentStyle[DISPLAY$5] !== 'flex') {
            currentStyle[DISPLAY$5] = computedStyle[DISPLAY$5] = 'block';
          }

          var left = currentStyle[LEFT$1],
              top = currentStyle[TOP$3],
              right = currentStyle[RIGHT$1],
              bottom = currentStyle[BOTTOM$3],
              width = currentStyle[WIDTH$5],
              height = currentStyle[HEIGHT$5],
              display = currentStyle[DISPLAY$5],
              flexDirection = currentStyle[FLEX_DIRECTION$2];
          var x2, y2, w2, h2;
          var onlyRight;
          var onlyBottom;
          var fixedTop;
          var fixedRight;
          var fixedBottom;
          var fixedLeft; // 判断何种方式的定位，比如左+宽度，左+右之类

          if (left[1] !== AUTO$6) {
            fixedLeft = true;
            computedStyle[LEFT$1] = calAbsolute$1(currentStyle, 'left', left, clientWidth, _this4.root);
          } else {
            computedStyle[LEFT$1] = 'auto';
          }

          if (right[1] !== AUTO$6) {
            fixedRight = true;
            computedStyle[RIGHT$1] = calAbsolute$1(currentStyle, 'right', right, clientWidth, _this4.root);
          } else {
            computedStyle[RIGHT$1] = 'auto';
          }

          if (top[1] !== AUTO$6) {
            fixedTop = true;
            computedStyle[TOP$3] = calAbsolute$1(currentStyle, 'top', top, clientHeight, _this4.root);
          } else {
            computedStyle[TOP$3] = 'auto';
          }

          if (bottom[1] !== AUTO$6) {
            fixedBottom = true;
            computedStyle[BOTTOM$3] = calAbsolute$1(currentStyle, 'bottom', bottom, clientHeight, _this4.root);
          } else {
            computedStyle[BOTTOM$3] = 'auto';
          } // 优先级最高left+right，其次left+width，再次right+width，再次仅申明单个，最次全部auto


          if (fixedLeft && fixedRight) {
            x2 = x + computedStyle[LEFT$1];
            w2 = x + clientWidth - computedStyle[RIGHT$1] - x2;
          } else if (fixedLeft) {
            x2 = x + computedStyle[LEFT$1];

            if (width[1] !== AUTO$6) {
              if (width[1] === PERCENT$9) {
                w2 = width[0] * clientWidth * 0.01;
              } else if (width[1] === REM$8) {
                w2 = width[0] * _this4.root.computedStyle[FONT_SIZE$9];
              } else if (width[1] === VW$8) {
                w2 = width[0] * _this4.root.width * 0.01;
              } else if (width[1] === VH$8) {
                w2 = width[0] * _this4.root.height * 0.01;
              } else if (width[1] === VMAX$8) {
                w2 = width[0] * Math.max(_this4.root.width, _this4.root.height) * 0.01;
              } else if (width[1] === VMIN$8) {
                w2 = width[0] * Math.min(_this4.root.width, _this4.root.height) * 0.01;
              } else {
                w2 = width[0];
              }
            }
          } else if (fixedRight) {
            if (width[1] !== AUTO$6) {
              if (width[1] === PERCENT$9) {
                w2 = width[0] * clientWidth * 0.01;
              } else if (width[1] === REM$8) {
                w2 = width[0] * _this4.root.computedStyle[FONT_SIZE$9];
              } else if (width[1] === VW$8) {
                w2 = width[0] * _this4.root.width * 0.01;
              } else if (width[1] === VH$8) {
                w2 = width[0] * _this4.root.height * 0.01;
              } else if (width[1] === VMAX$8) {
                w2 = width[0] * Math.max(_this4.root.width, _this4.root.height) * 0.01;
              } else if (width[1] === VMIN$8) {
                w2 = width[0] * Math.min(_this4.root.width, _this4.root.height) * 0.01;
              } else {
                w2 = width[0];
              }
            } else {
              onlyRight = true;
            }

            x2 = x + clientWidth - computedStyle[RIGHT$1] - (w2 || 0); // 右对齐有尺寸时还需减去margin/border/padding的

            x2 -= computedStyle[MARGIN_LEFT$3];
            x2 -= computedStyle[MARGIN_RIGHT$3];
            x2 -= computedStyle[PADDING_LEFT$4];
            x2 -= computedStyle[PADDING_RIGHT$3];
            x2 -= currentStyle[BORDER_LEFT_WIDTH$5][0];
            x2 -= currentStyle[BORDER_RIGHT_WIDTH$4][0];
          } else {
            x2 = x + paddingLeft;

            if (width[1] !== AUTO$6) {
              if (width[1] === PERCENT$9) {
                w2 = width[0] * clientWidth * 0.01;
              } else if (width[1] === REM$8) {
                w2 = width[0] * _this4.root.computedStyle[FONT_SIZE$9];
              } else if (width[1] === VW$8) {
                w2 = width[0] * _this4.root.width * 0.01;
              } else if (width[1] === VH$8) {
                w2 = width[0] * _this4.root.height * 0.01;
              } else if (width[1] === VMAX$8) {
                w2 = width[0] * Math.max(_this4.root.width, _this4.root.height) * 0.01;
              } else if (width[1] === VMIN$8) {
                w2 = width[0] * Math.min(_this4.root.width, _this4.root.height) * 0.01;
              } else {
                w2 = width[0];
              }
            }
          } // top/bottom/height优先级同上


          if (fixedTop && fixedBottom) {
            y2 = y + computedStyle[TOP$3];
            h2 = y + clientHeight - computedStyle[BOTTOM$3] - y2;
          } else if (fixedTop) {
            y2 = y + computedStyle[TOP$3];

            if (height[1] !== AUTO$6) {
              if (height[1] === PERCENT$9) {
                h2 = height[0] * clientHeight * 0.01;
              } else if (height[1] === REM$8) {
                h2 = height[0] * _this4.root.computedStyle[FONT_SIZE$9];
              } else if (height[1] === VW$8) {
                h2 = height[0] * _this4.root.width * 0.01;
              } else if (height[1] === VH$8) {
                h2 = height[0] * _this4.root.height * 0.01;
              } else if (height[1] === VMAX$8) {
                h2 = height[0] * Math.max(_this4.root.width, _this4.root.height) * 0.01;
              } else if (height[1] === VMIN$8) {
                h2 = height[0] * Math.min(_this4.root.width, _this4.root.height) * 0.01;
              } else {
                h2 = height[0];
              }
            }
          } else if (fixedBottom) {
            if (height[1] !== AUTO$6) {
              if (height[1] === PERCENT$9) {
                h2 = height[0] * clientHeight * 0.01;
              } else if (height[1] === REM$8) {
                h2 = height[0] * _this4.root.computedStyle[FONT_SIZE$9];
              } else if (height[1] === VW$8) {
                h2 = height[0] * _this4.root.width * 0.01;
              } else if (height[1] === VH$8) {
                h2 = height[0] * _this4.root.height * 0.01;
              } else if (height[1] === VMAX$8) {
                h2 = height[0] * Math.max(_this4.root.width, _this4.root.height) * 0.01;
              } else if (height[1] === VMIN$8) {
                h2 = height[0] * Math.min(_this4.root.width, _this4.root.height) * 0.01;
              } else {
                h2 = height[0];
              }
            } else {
              onlyBottom = true;
            }

            y2 = y + clientHeight - computedStyle[BOTTOM$3] - (h2 || 0); // 底对齐有尺寸时y值还需减去margin/border/padding的

            y2 -= computedStyle[MARGIN_TOP$1];
            y2 -= computedStyle[MARGIN_BOTTOM$1];
            y2 -= computedStyle[PADDING_TOP$2];
            y2 -= computedStyle[PADDING_BOTTOM$2];
            y2 -= currentStyle[BORDER_TOP_WIDTH$3][0];
            y2 -= currentStyle[BORDER_BOTTOM_WIDTH$3][0];
          } // 未声明y的找到之前的流布局child，紧随其下
          else {
              y2 = y + paddingTop;
              var prev = item.prev;

              while (prev) {
                // 目前不考虑margin合并，直接以前面的flow的最近的prev末尾为准
                if (prev instanceof Text || prev.computedStyle[POSITION$3] !== 'absolute') {
                  y2 = prev.y + prev.outerHeight;
                  break;
                }

                prev = prev.prev;
              }

              if (height[1] === PERCENT$9) {
                h2 = height[0] * clientHeight * 0.01;
              } else if (height[1] === REM$8) {
                h2 = height[0] * _this4.root.computedStyle[FONT_SIZE$9];
              } else if (height[1] === VW$8) {
                h2 = height[0] * _this4.root.width * 0.01;
              } else if (height[1] === VH$8) {
                h2 = height[0] * _this4.root.height * 0.01;
              } else if (height[1] === VMAX$8) {
                h2 = height[0] * Math.max(_this4.root.width, _this4.root.height) * 0.01;
              } else if (height[1] === VMIN$8) {
                h2 = height[0] * Math.min(_this4.root.width, _this4.root.height) * 0.01;
              } // 特殊必须声明防止AUTO
              else if (height[1] === PX$8) {
                  h2 = height[0];
                }
            } // 没设宽高，需手动计算获取最大宽高后，赋给样式再布局


          var needCalWidth;

          if ((display === 'block' || ['inlineBlock', 'inline-block'].indexOf(display) > -1) && w2 === undefined) {
            needCalWidth = true;
          } else if (display === 'flex') {
            if (w2 === undefined) {
              needCalWidth = true;
            } else if (flexDirection === 'column' && h2 === undefined) {
              needCalWidth = true;
            }
          } // onlyRight时做的布局其实是以那个点位为left/top布局然后offset，limit要特殊计算，从本点向左侧为边界


          var wl = onlyRight ? x2 - x : clientWidth + x - x2; // onlyBottom相同，正常情况是左上到右下的尺寸限制

          var hl = onlyBottom ? y2 - y : clientHeight + y - y2; // 未直接或间接定义尺寸，取孩子宽度最大值

          if (needCalWidth) {
            item.__layout({
              x: x2,
              y: y2,
              w: wl,
              h: hl
            }, true, true);

            wl = item.outerWidth;
          } // needCalWidth传入，因为自适应尺寸上面已经计算过一次margin/padding了


          item.__layout({
            x: x2,
            y: y2,
            w: wl,
            h: hl,
            w2: w2,
            // left+right这种等于有宽度，但不能修改style，继续传入到__preLayout中特殊对待
            h2: h2
          }, false, true);

          if (onlyRight) {
            item.__offsetX(-item.outerWidth, true);
          }

          if (onlyBottom) {
            item.__offsetY(-item.outerHeight, true);
          }
        }); // 递归进行，遇到absolute/relative/component的设置新容器

        children.forEach(function (item) {
          if (target) {
            // 传入target局部布局更新，这时候如果是Component引发的，当setState时是Cp自身，当layout时是sr
            var node = item;

            if (node instanceof Component$1) {
              node = item.shadowRoot;
            } // 所以得2个都对比


            if (target !== node && target !== item) {
              return;
            }
          }

          if (item instanceof Dom) {
            item.__layoutAbs(isRelativeOrAbsolute$1(item) ? item : container, data);
          } else if (item instanceof Component$1) {
            var sr = item.shadowRoot;

            if (sr instanceof Dom) {
              sr.__layoutAbs(sr, data);
            }
          }
        });

        this.__execAr();
      }
      /**
       * 布局前检查继承的样式以及统计字体测量信息
       * 首次检查为整树遍历，后续检查是节点自发局部检查，不再进入
       * @param renderMode
       * @param ctx
       * @param cb
       * @private
       */

    }, {
      key: "__computeMeasure",
      value: function __computeMeasure(renderMode, ctx, cb) {
        _get(_getPrototypeOf(Dom.prototype), "__computeMeasure", this).call(this, renderMode, ctx, cb); // 即便自己不需要计算，但children还要继续递归检查


        this.children.forEach(function (item) {
          item.__computeMeasure(renderMode, ctx, cb);
        });
      }
    }, {
      key: "render",
      value: function render(renderMode, lv, ctx, cache, dx, dy) {
        var res = _get(_getPrototypeOf(Dom.prototype), "render", this).call(this, renderMode, lv, ctx, cache, dx, dy);

        if (renderMode === mode.SVG) {
          this.virtualDom.type = 'dom';
        }

        return res;
      }
    }, {
      key: "__destroy",
      value: function __destroy() {
        if (this.isDestroyed) {
          return;
        }

        this.children.forEach(function (child) {
          // 有可能为空，因为diff过程中相同的cp被移到新的vd中，老的防止destroy设null
          if (child) {
            child.__destroy();
          }
        });

        _get(_getPrototypeOf(Dom.prototype), "__destroy", this).call(this);
      }
    }, {
      key: "__emitEvent",
      value: function __emitEvent(e, force) {
        if (force) {
          return _get(_getPrototypeOf(Dom.prototype), "__emitEvent", this).call(this, e, force);
        }

        var isDestroyed = this.isDestroyed,
            computedStyle = this.computedStyle,
            isMask = this.isMask;

        if (isDestroyed || computedStyle[DISPLAY$5] === 'none' || e.__stopPropagation || isMask) {
          return;
        } // 检查perspective嵌套状态，自身有perspective则设置10位，自身有transform的p矩阵则设置01位
        // if(computedStyle[PERSPECTIVE]) {
        //   perspectiveNest++;
        // }
        // if(tf.isPerspectiveMatrix(computedStyle[TRANSFORM])) {
        //   perspectiveTfNest++;
        // }
        // overflow:hidden时还需要判断是否超出范围外，如果是则无效


        if (computedStyle[OVERFLOW$2] === 'hidden' && !this.willResponseEvent(e, true)) {
          return;
        } // 找到对应的callback


        var type = e.event.type;
        var listener = this.listener,
            zIndexChildren = this.zIndexChildren;
        var cb;

        if (listener.hasOwnProperty(type)) {
          cb = listener[type];
        } // child触发则parent一定触发


        for (var i = zIndexChildren.length - 1; i >= 0; i--) {
          var child = zIndexChildren[i];

          if (child instanceof Xom$1 || child instanceof Component$1 && child.shadowRoot instanceof Xom$1) {
            if (child.__emitEvent(e)) {
              // 孩子阻止冒泡
              if (e.__stopPropagation) {
                return;
              }

              if (util.isFunction(cb) && !e.__stopImmediatePropagation) {
                cb.call(this, e);
              }

              return true;
            }
          }
        } // child不触发再看自己


        return _get(_getPrototypeOf(Dom.prototype), "__emitEvent", this).call(this, e);
      } // 深度遍历执行所有子节点，包含自己，如果cb返回true，提前跳出不继续深度遍历

    }, {
      key: "__deepScan",
      value: function __deepScan(cb, options) {
        if (_get(_getPrototypeOf(Dom.prototype), "__deepScan", this).call(this, cb, options)) {
          return;
        }

        this.children.forEach(function (node) {
          node.__deepScan(cb, options);
        });
      }
    }, {
      key: "appendChild",
      value: function appendChild(json, cb) {
        var self = this;

        if (!util.isNil(json) && !self.isDestroyed) {
          var root = self.root,
              host = self.host;

          if ([$$type.TYPE_VD, $$type.TYPE_GM, $$type.TYPE_CP].indexOf(json.$$type) > -1) {
            if (json.vd) {
              root.delRefreshTask(json.vd.__task);
              json.vd.remove();
            }

            var vd;

            if ($$type.TYPE_CP === json.$$type) {
              vd = builder.initCp2(json, root, host, self);
            } else {
              vd = builder.initDom(json, root, host, self);
            }

            root.addRefreshTask(vd.__task = {
              __before: function __before() {
                vd.__task = null; // 清除在before，防止after的回调增加新的task误删

                self.__json.children.push(json);

                var len = self.children.length;

                if (len) {
                  var last = self.children[len - 1];
                  last.__next = vd;
                  vd.__prev = last;
                }

                self.children.push(vd);
                self.__zIndexChildren = null; // 刷新前统一赋值，由刷新逻辑计算最终值避免优先级覆盖问题

                var res = {};
                res[UPDATE_NODE$3] = vd;
                res[UPDATE_FOCUS$2] = o$3.REFLOW;
                res[UPDATE_ADD_DOM] = true;
                res[UPDATE_MEASURE$1] = true;
                res[UPDATE_CONFIG$3] = vd.__config;

                root.__addUpdate(vd, vd.__config, root, root.__config, res);
              },
              __after: function __after(diff) {
                if (util.isFunction(cb)) {
                  cb.call(vd, diff);
                }
              }
            });
          } else {
            throw new Error('Invalid parameter in appendChild.');
          }
        }
      }
    }, {
      key: "prependChild",
      value: function prependChild(json, cb) {
        var self = this;

        if (!util.isNil(json) && !self.isDestroyed) {
          var root = self.root,
              host = self.host;

          if ([$$type.TYPE_VD, $$type.TYPE_GM, $$type.TYPE_CP].indexOf(json.$$type) > -1) {
            if (json.vd) {
              root.delRefreshTask(json.vd.__task);
              json.vd.remove();
            }

            var vd;

            if ($$type.TYPE_CP === json.$$type) {
              vd = builder.initCp2(json, root, host, self);
            } else {
              vd = builder.initDom(json, root, host, self);
            }

            root.addRefreshTask(vd.__task = {
              __before: function __before() {
                vd.__task = null;

                self.__json.children.unshift(json);

                var len = self.children.length;

                if (len) {
                  var first = self.children[0];
                  first.__prev = vd;
                  vd.__next = first;
                }

                self.children.unshift(vd);
                self.__zIndexChildren = null; // 刷新前统一赋值，由刷新逻辑计算最终值避免优先级覆盖问题

                var res = {};
                res[UPDATE_NODE$3] = vd;
                res[UPDATE_FOCUS$2] = o$3.REFLOW;
                res[UPDATE_ADD_DOM] = true;
                res[UPDATE_MEASURE$1] = true;
                res[UPDATE_CONFIG$3] = vd.__config;

                root.__addUpdate(vd, vd.__config, root, root.__config, res);
              },
              __after: function __after(diff) {
                if (util.isFunction(cb)) {
                  cb.call(vd, diff);
                }
              }
            });
          } else {
            throw new Error('Invalid parameter in prependChild.');
          }
        }
      }
    }, {
      key: "insertBefore",
      value: function insertBefore(json, cb) {
        var self = this;

        if (!util.isNil(json) && !self.isDestroyed && self.domParent) {
          var root = self.root,
              domParent = self.domParent;
          var host = domParent.hostRoot;

          if ([$$type.TYPE_VD, $$type.TYPE_GM, $$type.TYPE_CP].indexOf(json.$$type) > -1) {
            if (json.vd) {
              root.delRefreshTask(json.vd.__task);
              json.vd.remove();
            }

            var vd;

            if ($$type.TYPE_CP === json.$$type) {
              vd = builder.initCp2(json, root, host, domParent);
            } else {
              vd = builder.initDom(json, root, host, domParent);
            }

            root.addRefreshTask(vd.__task = {
              __before: function __before() {
                vd.__task = null;
                var i = 0,
                    has,
                    __json = domParent.__json,
                    children = __json.children,
                    len = children.length;
                var pJson = self.isShadowRoot ? self.hostRoot.__json : self.__json;

                for (; i < len; i++) {
                  if (children[i] === pJson) {
                    has = true;
                    break;
                  }
                }

                if (!has) {
                  throw new Error('InsertBefore exception.');
                } // 插入注意开头位置处理


                if (i) {
                  children.splice(i, 0, json);
                  vd.__next = self;
                  vd.__prev = self.__prev;
                  self.__prev = vd;
                  domParent.children.splice(i, 0, vd);
                } else {
                  if (len) {
                    var first = domParent.children[0];
                    first.__prev = vd;
                    vd.__next = first;
                  }

                  children.unshift(json);
                  domParent.children.unshift(vd);
                }

                domParent.__zIndexChildren = null; // 刷新前统一赋值，由刷新逻辑计算最终值避免优先级覆盖问题

                var res = {};
                res[UPDATE_NODE$3] = vd;
                res[UPDATE_FOCUS$2] = o$3.REFLOW;
                res[UPDATE_ADD_DOM] = true;
                res[UPDATE_MEASURE$1] = true;
                res[UPDATE_CONFIG$3] = vd.__config;

                root.__addUpdate(vd, vd.__config, root, root.__config, res);
              },
              __after: function __after(diff) {
                if (util.isFunction(cb)) {
                  cb.call(vd, diff);
                }
              }
            });
          } else {
            throw new Error('Invalid parameter in insertBefore.');
          }
        }
      }
    }, {
      key: "insertAfter",
      value: function insertAfter(json, cb) {
        var self = this;

        if (!util.isNil(json) && !self.isDestroyed && self.domParent) {
          var root = self.root,
              domParent = self.domParent;
          var host = domParent.hostRoot;

          if ([$$type.TYPE_VD, $$type.TYPE_GM, $$type.TYPE_CP].indexOf(json.$$type) > -1) {
            if (json.vd) {
              root.delRefreshTask(json.vd.__task);
              json.vd.remove();
            }

            var vd;

            if ($$type.TYPE_CP === json.$$type) {
              vd = builder.initCp2(json, root, host, domParent);
            } else {
              vd = builder.initDom(json, root, host, domParent);
            }

            root.addRefreshTask(vd.__task = {
              __before: function __before() {
                vd.__task = null;
                var i = 0,
                    has,
                    __json = domParent.__json,
                    children = __json.children,
                    len = children.length;
                var pJson = self.isShadowRoot ? self.hostRoot.__json : self.__json;

                for (; i < len; i++) {
                  if (children[i] === pJson) {
                    has = true;
                    break;
                  }
                }

                if (!has) {
                  throw new Error('insertAfter exception.');
                } // 插入注意末尾位置处理


                if (i < len - 1) {
                  children.splice(i + 1, 0, json);
                  vd.__prev = self;
                  vd.__next = self.__next;
                  self.__next = vd;
                  domParent.children.splice(i + 1, 0, vd);
                } else {
                  if (len) {
                    var last = domParent.children[len - 1];
                    last.__next = vd;
                    vd.__prev = last;
                  }

                  children.push(json);
                  domParent.children.push(vd);
                }

                domParent.__zIndexChildren = null; // 刷新前统一赋值，由刷新逻辑计算最终值避免优先级覆盖问题

                var res = {};
                res[UPDATE_NODE$3] = vd;
                res[UPDATE_FOCUS$2] = o$3.REFLOW;
                res[UPDATE_ADD_DOM] = true;
                res[UPDATE_MEASURE$1] = true;
                res[UPDATE_CONFIG$3] = vd.__config;

                root.__addUpdate(vd, vd.__config, root, root.__config, res);
              },
              __after: function __after(diff) {
                if (util.isFunction(cb)) {
                  cb.call(vd, diff);
                }
              }
            });
          } else {
            throw new Error('Invalid parameter in insertAfter.');
          }
        }
      }
    }, {
      key: "removeChild",
      value: function removeChild(target, cb) {
        if (target.parent === this && (target instanceof Xom$1 || target instanceof Component$1)) {
          if (this.isDestroyed) {
            inject.warn('Remove parent is destroyed.');

            if (util.isFunction(cb)) {
              cb();
            }

            return;
          }

          target.remove(cb);
        } else {
          throw new Error('Invalid parameter in removeChild.');
        }
      }
    }, {
      key: "children",
      get: function get() {
        return this.__children;
      }
    }, {
      key: "flowChildren",
      get: function get() {
        return this.children.filter(function (item) {
          if (item instanceof Component$1) {
            item = item.shadowRoot;
          }

          return item instanceof Text || item.currentStyle[POSITION$3] !== 'absolute';
        });
      }
    }, {
      key: "absChildren",
      get: function get() {
        return this.children.filter(function (item) {
          if (item instanceof Component$1) {
            item = item.shadowRoot;
          }

          return item instanceof Xom$1 && item.currentStyle[POSITION$3] === 'absolute';
        });
      }
    }, {
      key: "zIndexChildren",
      get: function get() {
        return this.__zIndexChildren;
      }
    }, {
      key: "lineBoxManager",
      get: function get() {
        return this.__lineBoxManager;
      }
    }, {
      key: "baseLine",
      get: function get() {
        if (!this.lineBoxManager || !this.lineBoxManager.size) {
          return this.offsetHeight;
        }

        var _this$computedStyle = this.computedStyle,
            marginTop = _this$computedStyle[MARGIN_TOP$1],
            borderTopWidth = _this$computedStyle[BORDER_TOP_WIDTH$3],
            paddingTop = _this$computedStyle[PADDING_TOP$2];
        return marginTop + borderTopWidth + paddingTop + this.lineBoxManager.baseLine;
      }
    }, {
      key: "firstBaseLine",
      get: function get() {
        if (!this.lineBoxManager || !this.lineBoxManager.size) {
          return this.offsetHeight;
        }

        var _this$computedStyle2 = this.computedStyle,
            marginTop = _this$computedStyle2[MARGIN_TOP$1],
            borderTopWidth = _this$computedStyle2[BORDER_TOP_WIDTH$3],
            paddingTop = _this$computedStyle2[PADDING_TOP$2];
        return marginTop + borderTopWidth + paddingTop + this.lineBoxManager.firstBaseLine;
      }
    }, {
      key: "parentLineBox",
      get: function get() {
        return this.__parentLineBox;
      }
    }]);

    return Dom;
  }(Xom$1);

  var _enums$STYLE_KEY$g = enums.STYLE_KEY,
      WIDTH$6 = _enums$STYLE_KEY$g.WIDTH,
      HEIGHT$6 = _enums$STYLE_KEY$g.HEIGHT,
      DISPLAY$6 = _enums$STYLE_KEY$g.DISPLAY,
      BORDER_TOP_WIDTH$4 = _enums$STYLE_KEY$g.BORDER_TOP_WIDTH,
      BORDER_RIGHT_WIDTH$5 = _enums$STYLE_KEY$g.BORDER_RIGHT_WIDTH,
      BORDER_LEFT_WIDTH$6 = _enums$STYLE_KEY$g.BORDER_LEFT_WIDTH,
      BORDER_BOTTOM_WIDTH$4 = _enums$STYLE_KEY$g.BORDER_BOTTOM_WIDTH,
      BORDER_TOP_LEFT_RADIUS$2 = _enums$STYLE_KEY$g.BORDER_TOP_LEFT_RADIUS,
      BORDER_TOP_RIGHT_RADIUS$2 = _enums$STYLE_KEY$g.BORDER_TOP_RIGHT_RADIUS,
      BORDER_BOTTOM_RIGHT_RADIUS$2 = _enums$STYLE_KEY$g.BORDER_BOTTOM_RIGHT_RADIUS,
      BORDER_BOTTOM_LEFT_RADIUS$2 = _enums$STYLE_KEY$g.BORDER_BOTTOM_LEFT_RADIUS,
      VISIBILITY$3 = _enums$STYLE_KEY$g.VISIBILITY,
      BACKGROUND_IMAGE$2 = _enums$STYLE_KEY$g.BACKGROUND_IMAGE,
      BACKGROUND_COLOR$2 = _enums$STYLE_KEY$g.BACKGROUND_COLOR,
      BOX_SHADOW$3 = _enums$STYLE_KEY$g.BOX_SHADOW,
      MIX_BLEND_MODE$1 = _enums$STYLE_KEY$g.MIX_BLEND_MODE,
      MARGIN_TOP$2 = _enums$STYLE_KEY$g.MARGIN_TOP,
      MARGIN_RIGHT$4 = _enums$STYLE_KEY$g.MARGIN_RIGHT,
      MARGIN_BOTTOM$2 = _enums$STYLE_KEY$g.MARGIN_BOTTOM,
      MARGIN_LEFT$4 = _enums$STYLE_KEY$g.MARGIN_LEFT,
      PADDING_TOP$3 = _enums$STYLE_KEY$g.PADDING_TOP,
      PADDING_RIGHT$4 = _enums$STYLE_KEY$g.PADDING_RIGHT,
      PADDING_BOTTOM$3 = _enums$STYLE_KEY$g.PADDING_BOTTOM,
      PADDING_LEFT$5 = _enums$STYLE_KEY$g.PADDING_LEFT,
      FONT_SIZE$a = _enums$STYLE_KEY$g.FONT_SIZE,
      FLEX_BASIS$3 = _enums$STYLE_KEY$g.FLEX_BASIS,
      _enums$UPDATE_KEY$4 = enums.UPDATE_KEY,
      UPDATE_NODE$4 = _enums$UPDATE_KEY$4.UPDATE_NODE,
      UPDATE_FOCUS$3 = _enums$UPDATE_KEY$4.UPDATE_FOCUS,
      UPDATE_CONFIG$4 = _enums$UPDATE_KEY$4.UPDATE_CONFIG,
      _enums$NODE_KEY$5 = enums.NODE_KEY,
      NODE_CACHE$2 = _enums$NODE_KEY$5.NODE_CACHE,
      NODE_DEFS_CACHE$4 = _enums$NODE_KEY$5.NODE_DEFS_CACHE,
      NODE_IS_MASK$1 = _enums$NODE_KEY$5.NODE_IS_MASK;
  var AUTO$7 = o.AUTO,
      PX$9 = o.PX,
      PERCENT$a = o.PERCENT,
      REM$9 = o.REM,
      VW$9 = o.VW,
      VH$9 = o.VH,
      VMAX$9 = o.VMAX,
      VMIN$9 = o.VMIN,
      RGBA$2 = o.RGBA;
  var canvasPolygon$5 = painter.canvasPolygon,
      svgPolygon$6 = painter.svgPolygon;
  var isFunction$5 = util.isFunction;

  var Img$1 = /*#__PURE__*/function (_Dom) {
    _inherits(Img, _Dom);

    var _super = _createSuper(Img);

    function Img(tagName, props) {
      var _this;

      _classCallCheck(this, Img);

      _this = _super.call(this, tagName, props);
      var src = _this.props.src;
      var loadImg = _this.__loadImg = {
        src: src
      }; // 空url用错误图代替

      if (!src) {
        loadImg.error = true;
      }

      var config = _this.__config;

      if (config[NODE_IS_MASK$1]) {
        var _assertThisInitialize = _assertThisInitialized(_this),
            style = _assertThisInitialize.style,
            currentStyle = _assertThisInitialize.currentStyle;

        style[BACKGROUND_IMAGE$2] = currentStyle[BACKGROUND_IMAGE$2] = [null];
        style[BACKGROUND_COLOR$2] = currentStyle[BACKGROUND_COLOR$2] = [[0, 0, 0, 0], RGBA$2];
        style[BORDER_TOP_WIDTH$4] = currentStyle[BORDER_TOP_WIDTH$4] = [0, PX$9];
        style[BORDER_RIGHT_WIDTH$5] = currentStyle[BORDER_RIGHT_WIDTH$5] = [0, PX$9];
        style[BORDER_LEFT_WIDTH$6] = currentStyle[BORDER_LEFT_WIDTH$6] = [0, PX$9];
        style[BORDER_BOTTOM_WIDTH$4] = currentStyle[BORDER_BOTTOM_WIDTH$4] = [0, PX$9];
        style[BOX_SHADOW$3] = currentStyle[BOX_SHADOW$3] = null;
        style[MIX_BLEND_MODE$1] = currentStyle[MIX_BLEND_MODE$1] = 'normal';
      }

      return _this;
    }
    /**
     * 覆盖xom的方法，在__layout3个分支中会首先被调用
     * 当样式中固定宽高时，图片按样式尺寸，加载后重新绘制即可
     * 只固定宽高一个时，加载完要计算缩放比，重新布局绘制
     * 都没有固定，按照图片尺寸，重新布局绘制
     * 这里计算非固定的情况，将其改为固定供布局渲染使用，未加载完成为0
     * @param data
     * @returns {{fixedWidth: boolean, w: *, x: *, h: *, y: *, fixedHeight: boolean}}
     * @private
     */


    _createClass(Img, [{
      key: "__preLayout",
      value: function __preLayout(data) {
        var res = _get(_getPrototypeOf(Img.prototype), "__preLayout", this).call(this, data);

        var loadImg = this.__loadImg; // 可能已提前加载好了，或有缓存，为减少刷新直接使用

        if (!loadImg.error) {
          var src = loadImg.src;
          var cache = inject.IMG[src];

          if (cache && cache.state === inject.LOADED) {
            loadImg.source = cache.source;
            loadImg.width = cache.width;
            loadImg.height = cache.height;
          }

          loadImg.cache = false;
        }

        if (res.fixedWidth && res.fixedHeight) {
          return res;
        }

        if (loadImg.error && !this.props.placeholder) {
          if (res.fixedWidth) {
            res.h = res.w;
          } else if (res.fixedHeight) {
            res.w = res.h;
          } else {
            res.w = res.h = 32;
          }
        } else if (loadImg.source) {
          if (res.fixedWidth) {
            res.h = res.w * loadImg.height / loadImg.width;
          } else if (res.fixedHeight) {
            res.w = res.h * loadImg.width / loadImg.height;
          } else {
            res.w = loadImg.width;
            res.h = loadImg.height;
          }
        } else {
          res.w = res.h = 0;
        }

        res.fixedWidth = true;
        res.fixedHeight = true;
        return res;
      }
    }, {
      key: "__addGeom",
      value: function __addGeom(tagName, props) {
        props = util.hash2arr(props);
        this.virtualDom.children.push({
          type: 'item',
          tagName: tagName,
          props: props
        });
      }
    }, {
      key: "__destroy",
      value: function __destroy() {
        this.root.delRefreshTask(this.__task);

        _get(_getPrototypeOf(Img.prototype), "__destroy", this).call(this);

        this.__task = null;
      } // img根据加载情况更新__hasContent

    }, {
      key: "__calContent",
      value: function __calContent(renderMode, lv, currentStyle, computedStyle) {
        var res = _get(_getPrototypeOf(Img.prototype), "__calContent", this).call(this, renderMode, lv, currentStyle, computedStyle);

        if (!res) {
          var loadImg = this.__loadImg;

          if (computedStyle[VISIBILITY$3] !== 'hidden' && (computedStyle[WIDTH$6] || computedStyle[HEIGHT$6]) && loadImg.source) {
            res = true;
          }
        }

        return res;
      }
    }, {
      key: "render",
      value: function render(renderMode, lv, ctx, cache) {
        var dx = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
        var dy = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

        var res = _get(_getPrototypeOf(Img.prototype), "render", this).call(this, renderMode, lv, ctx, cache, dx, dy);

        if (renderMode === mode.WEBGL) {
          dx = res.dx;
          dy = res.dy;
        }

        var offscreenBlend = res.offscreenBlend,
            offscreenMask = res.offscreenMask,
            offscreenFilter = res.offscreenFilter,
            offscreenOverflow = res.offscreenOverflow;
        var width = this.width,
            height = this.height,
            isDestroyed = this.isDestroyed,
            placeholder = this.props.placeholder,
            computedStyle = this.computedStyle,
            _this$computedStyle = this.computedStyle,
            display = _this$computedStyle[DISPLAY$6],
            borderTopLeftRadius = _this$computedStyle[BORDER_TOP_LEFT_RADIUS$2],
            borderTopRightRadius = _this$computedStyle[BORDER_TOP_RIGHT_RADIUS$2],
            borderBottomRightRadius = _this$computedStyle[BORDER_BOTTOM_RIGHT_RADIUS$2],
            borderBottomLeftRadius = _this$computedStyle[BORDER_BOTTOM_LEFT_RADIUS$2],
            visibility = _this$computedStyle[VISIBILITY$3],
            virtualDom = this.virtualDom,
            __config = this.__config,
            loadImg = this.__loadImg,
            root = this.root;

        if (offscreenBlend) {
          ctx = offscreenBlend.target.ctx;
        }

        if (offscreenMask) {
          ctx = offscreenMask.target.ctx;
        }

        if (offscreenFilter) {
          ctx = offscreenFilter.target.ctx;
        }

        if (offscreenOverflow) {
          ctx = offscreenOverflow.target.ctx;
        } // 没source且不error时加载图片


        if (!loadImg.source && !loadImg.error && !loadImg.loading) {
          this.__loadAndRefresh(loadImg, root, ctx, placeholder, computedStyle, width, height);
        }

        if (isDestroyed || display === 'none' || visibility === 'hidden') {
          return res;
        }

        var __cache = __config[NODE_CACHE$2];

        if (cache && __cache && __cache.enabled) {
          ctx = __cache.ctx;
        }

        var originX, originY;
        originX = res.x3 + dx;
        originY = res.y3 + dy; // 根据配置以及占位图显示error

        var source = loadImg.source;

        if (loadImg.error && !placeholder && Img.showError) {
          var strokeWidth = Math.min(width, height) * 0.02;
          var stroke = '#CCC';
          var fill = '#DDD';
          var cx = originX + width * 0.7;
          var cy = originY + height * 0.3;
          var r = strokeWidth * 5;
          var pts = [[originX + width * 0.15, originY + height * 0.7], [originX + width * 0.3, originY + height * 0.4], [originX + width * 0.5, originY + height * 0.6], [originX + width * 0.6, originY + height * 0.5], [originX + width * 0.9, originY + height * 0.8], [originX + width * 0.15, originY + height * 0.8]];

          if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
            ctx.strokeStyle = stroke;
            ctx.lineWidth = strokeWidth;
            ctx.fillStyle = fill;
            ctx.beginPath();
            ctx.moveTo(originX, originY);
            ctx.lineTo(originX + width, originY);
            ctx.lineTo(originX + width, originY + height);
            ctx.lineTo(originX, originY + height);
            ctx.lineTo(originX, originY);
            ctx.stroke();
            ctx.closePath();
            ctx.beginPath();
            var points = geom.ellipsePoints(cx, cy, r, r);
            painter.canvasPolygon(ctx, points, 0, 0);
            ctx.fill();
            ctx.closePath();
            ctx.beginPath();
            ctx.moveTo(pts[0][0], pts[0][1]);

            for (var i = 1, len = pts.length; i < len; i++) {
              var point = pts[i];
              ctx.lineTo(point[0], point[1]);
            }

            ctx.lineTo(pts[0][0], pts[0][1]);
            ctx.fill();
            ctx.closePath();
          } else if (renderMode === mode.SVG) {
            this.__addGeom('rect', [['x', originX], ['y', originY], ['width', width], ['height', height], ['stroke', stroke], ['stroke-width', strokeWidth], ['fill', 'rgba(0,0,0,0)']]);

            this.__addGeom('circle', [['cx', cx], ['cy', cy], ['r', r], ['fill', fill]]);

            var s = '';

            for (var _i = 0, _len = pts.length; _i < _len; _i++) {
              var _point = pts[_i];

              if (_i) {
                s += ' ';
              }

              s += _point[0] + ',' + _point[1];
            }

            this.__addGeom('polygon', [['points', s], ['fill', fill]]);
          }
        } else if (source) {
          // 圆角需要生成一个mask
          var list = border.calRadius(originX, originY, width, height, borderTopLeftRadius, borderTopRightRadius, borderBottomRightRadius, borderBottomLeftRadius);

          if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
            // 有border-radius需模拟遮罩裁剪
            if (list) {
              ctx.save();
              ctx.beginPath();
              canvasPolygon$5(ctx, list, dx, dy);
              ctx.clip();
              ctx.closePath();
              ctx.drawImage(source, originX, originY, width, height);
              ctx.restore();
            } else {
              ctx.drawImage(source, originX, originY, width, height);
            }
          } else if (renderMode === mode.SVG) {
            // img没有变化无需diff，直接用上次的vd
            if (loadImg.cache) {
              loadImg.cache.cache = true;
              virtualDom.children = [loadImg.cache]; // 但是还是要校验是否有borderRadius变化，引发img的圆角遮罩

              if (!virtualDom.cache && list) {
                var d = svgPolygon$6(list);
                var v = {
                  tagName: 'clipPath',
                  props: [],
                  children: [{
                    type: 'item',
                    tagName: 'path',
                    props: [['d', d], ['fill', '#FFF']]
                  }]
                };
                var id = ctx.add(v);

                __config[NODE_DEFS_CACHE$4].push(v);

                virtualDom.conClip = 'url(#' + id + ')';
              }

              return;
            } // 缩放图片，无需考虑原先矩阵，xom里对父层<g>已经变换过了


            var matrix;

            if (width !== loadImg.width || height !== loadImg.height) {
              matrix = image.matrixResize(loadImg.width, loadImg.height, width, height, originX, originY, width, height);
            }

            var props = [['xlink:href', loadImg.error ? placeholder : loadImg.src], ['x', originX], ['y', originY], ['width', loadImg.width], ['height', loadImg.height]];

            if (list) {
              var _d = svgPolygon$6(list);

              var _v = {
                tagName: 'clipPath',
                props: [],
                children: [{
                  type: 'item',
                  tagName: 'path',
                  props: [['d', _d], ['fill', '#FFF']]
                }]
              };

              var _id = ctx.add(_v);

              __config[NODE_DEFS_CACHE$4].push(_v);

              virtualDom.conClip = 'url(#' + _id + ')';
              delete virtualDom.cache;
            }

            if (matrix && !mx.isE(matrix)) {
              props.push(['transform', 'matrix(' + util.joinArr(mx.m2m6(matrix), ',') + ')']);
            }

            var vd = {
              type: 'img',
              tagName: 'image',
              props: props
            };
            virtualDom.children = [vd];
            loadImg.cache = vd;
          }
        }

        return res;
      } // img没加载时，清空，这样Xom就认为没内容不生成cache，防止img先绘制cache再绘制主屏，重复

    }, {
      key: "__releaseWhenEmpty",
      value: function __releaseWhenEmpty(__cache) {
        if (!this.__loadImg.error && !this.__loadImg.source) {
          return _get(_getPrototypeOf(Img.prototype), "__releaseWhenEmpty", this).call(this, __cache);
        }
      }
    }, {
      key: "__isRealInline",
      value: function __isRealInline() {
        return false;
      } // overwrite

    }, {
      key: "__tryLayInline",
      value: function __tryLayInline(w, total) {
        var _this$currentStyle = this.currentStyle,
            width = _this$currentStyle[WIDTH$6],
            height = _this$currentStyle[HEIGHT$6],
            marginLeft = _this$currentStyle[MARGIN_LEFT$4],
            marginRight = _this$currentStyle[MARGIN_RIGHT$4],
            paddingLeft = _this$currentStyle[PADDING_LEFT$5],
            paddingRight = _this$currentStyle[PADDING_RIGHT$4],
            borderLeftWidth = _this$currentStyle[BORDER_LEFT_WIDTH$6],
            borderRightWidth = _this$currentStyle[BORDER_RIGHT_WIDTH$5];

        if (width[1] === PX$9) {
          w -= width[0];
        } else if (width[1] === PERCENT$a) {
          w -= total * width[0] * 0.01;
        } else if (width[1] === REM$9) {
          w -= width[0] * this.root.computedStyle[FONT_SIZE$a];
        } else if (width[1] === VW$9) {
          w -= width[0] * this.root.width * 0.01;
        } else if (width[1] === VH$9) {
          w -= width[0] * this.root.height * 0.01;
        } else if (width[1] === VMAX$9) {
          w -= width[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (width[1] === VMIN$9) {
          w -= width[0] * Math.min(this.root.width, this.root.height) * 0.01;
        } else {
          var loadImg = this.__loadImg; // 加载成功计算缩放后的宽度

          if (loadImg.source) {
            if (height[1] === PX$9) {
              w -= loadImg.width * height[0] / loadImg.height;
            } else if (height[1] === PERCENT$a) {
              w -= loadImg.width * height[0] * total * 0.01 / loadImg.height;
            } else if (height[1] === REM$9) {
              w -= loadImg.width * height[0] * this.root.computedStyle[FONT_SIZE$a] / loadImg.height;
            } else if (height[1] === VW$9) {
              w -= loadImg.width * height[0] * this.root.width * 0.01 / loadImg.height;
            } else if (height[1] === VH$9) {
              w -= loadImg.width * height[0] * this.root.height * 0.01 / loadImg.height;
            } else if (height[1] === VMAX$9) {
              w -= height[0] * Math.max(this.root.width, this.root.height) * 0.01 / loadImg.height;
            } else if (height[1] === VMIN$9) {
              w -= height[0] * Math.min(this.root.width, this.root.height) * 0.01 / loadImg.height;
            } else {
              w -= loadImg.width;
            }
          }
        } // 减去水平mbp


        if (marginLeft[1] === PX$9) {
          w -= marginLeft[0];
        } else if (marginLeft[1] === PERCENT$a) {
          w -= marginLeft[0] * total * 0.01;
        } else if (marginLeft[1] === REM$9) {
          w -= marginLeft[0] * this.root.computedStyle[FONT_SIZE$a];
        } else if (marginLeft[1] === VW$9) {
          w -= marginLeft[0] * this.root.width * 0.01;
        } else if (marginLeft[1] === VH$9) {
          w -= marginLeft[0] * this.root.height * 0.01;
        } else if (marginLeft[1] === VMAX$9) {
          w -= marginLeft[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (marginLeft[1] === VMIN$9) {
          w -= marginLeft[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        if (paddingLeft[1] === PX$9) {
          w -= paddingLeft[0];
        } else if (paddingLeft[1] === PERCENT$a) {
          w -= paddingLeft[0] * total * 0.01;
        } else if (paddingLeft[1] === REM$9) {
          w -= paddingLeft[0] * this.root.computedStyle[FONT_SIZE$a];
        } else if (paddingLeft[1] === VW$9) {
          w -= paddingLeft[0] * this.root.width * 0.01;
        } else if (paddingLeft[1] === VH$9) {
          w -= paddingLeft[0] * this.root.height * 0.01;
        } else if (paddingLeft[1] === VMAX$9) {
          w -= paddingLeft[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (paddingLeft[1] === VMIN$9) {
          w -= paddingLeft[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        if (borderLeftWidth[1] === PX$9) {
          w -= borderLeftWidth[0];
        } else if (borderLeftWidth[1] === REM$9) {
          w -= borderLeftWidth[0] * this.root.computedStyle[FONT_SIZE$a];
        } else if (borderLeftWidth[1] === VW$9) {
          w -= borderLeftWidth[0] * this.root.width * 0.01;
        } else if (borderLeftWidth[1] === VH$9) {
          w -= borderLeftWidth[0] * this.root.height * 0.01;
        } else if (borderLeftWidth[1] === VMAX$9) {
          w -= borderLeftWidth[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (borderLeftWidth[1] === VMIN$9) {
          w -= borderLeftWidth[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        if (marginRight[1] === PX$9) {
          w -= marginRight[0];
        } else if (marginRight[1] === PERCENT$a) {
          w -= marginRight[0] * total * 0.01;
        } else if (marginRight[1] === REM$9) {
          w -= marginRight[0] * this.root.computedStyle[FONT_SIZE$a];
        } else if (marginRight[1] === VW$9) {
          w -= marginRight[0] * this.root.width * 0.01;
        } else if (marginRight[1] === VH$9) {
          w -= marginRight[0] * this.root.height * 0.01;
        } else if (marginRight[1] === VMAX$9) {
          w -= marginRight[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (marginRight[1] === VMIN$9) {
          w -= marginRight[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        if (paddingRight[1] === PX$9) {
          w -= paddingRight[0];
        } else if (paddingRight[1] === PERCENT$a) {
          w -= paddingRight[0] * total * 0.01;
        } else if (paddingRight[1] === REM$9) {
          w -= paddingRight[0] * this.root.computedStyle[FONT_SIZE$a];
        } else if (paddingRight[1] === VW$9) {
          w -= paddingRight[0] * this.root.width * 0.01;
        } else if (paddingRight[1] === VH$9) {
          w -= paddingRight[0] * this.root.height * 0.01;
        } else if (paddingRight[1] === VMAX$9) {
          w -= paddingRight[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (paddingRight[1] === VMIN$9) {
          w -= paddingRight[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        if (borderRightWidth[1] === PX$9) {
          w -= borderRightWidth[0];
        } else if (borderRightWidth[1] === REM$9) {
          w -= borderRightWidth[0] * this.root.computedStyle[FONT_SIZE$a];
        } else if (borderRightWidth[1] === VW$9) {
          w -= borderRightWidth[0] * this.root.width * 0.01;
        } else if (borderRightWidth[1] === VH$9) {
          w -= borderRightWidth[0] * this.root.height * 0.01;
        } else if (borderRightWidth[1] === VMAX$9) {
          w -= borderRightWidth[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (borderRightWidth[1] === VMIN$9) {
          w -= borderRightWidth[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        return w;
      }
    }, {
      key: "__calBasis",
      value: function __calBasis(isDirectionRow, data) {
        var b = 0;
        var min = 0;
        var max = 0;
        var currentStyle = this.currentStyle,
            __loadImg = this.__loadImg;
        var w = data.w,
            h = data.h; // 计算需考虑style的属性

        var flexBasis = currentStyle[FLEX_BASIS$3],
            width = currentStyle[WIDTH$6],
            height = currentStyle[HEIGHT$6],
            marginLeft = currentStyle[MARGIN_LEFT$4],
            marginTop = currentStyle[MARGIN_TOP$2],
            marginRight = currentStyle[MARGIN_RIGHT$4],
            marginBottom = currentStyle[MARGIN_BOTTOM$2],
            paddingLeft = currentStyle[PADDING_LEFT$5],
            paddingTop = currentStyle[PADDING_TOP$3],
            paddingRight = currentStyle[PADDING_RIGHT$4],
            paddingBottom = currentStyle[PADDING_BOTTOM$3],
            borderTopWidth = currentStyle[BORDER_TOP_WIDTH$4],
            borderRightWidth = currentStyle[BORDER_RIGHT_WIDTH$5],
            borderBottomWidth = currentStyle[BORDER_BOTTOM_WIDTH$4],
            borderLeftWidth = currentStyle[BORDER_LEFT_WIDTH$6];
        var main = isDirectionRow ? width : height;
        var cross = isDirectionRow ? height : width; // basis3种情况：auto、固定、content，只区分固定和其它

        var isFixed = [PX$9, PERCENT$a, REM$9, VW$9, VH$9, VMAX$9, VMIN$9].indexOf(flexBasis[1]) > -1;

        if (isFixed) {
          if (flexBasis[1] === PX$9) {
            b = max = min = flexBasis[0];
          } else if (flexBasis[1] === PERCENT$a) {
            b = max = min = flexBasis[0] * 0.01 * (isDirectionRow ? w : h);
          } else if (flexBasis[1] === REM$9) {
            b = max = min = flexBasis[0] * this.root.computedStyle[FONT_SIZE$a];
          } else if (flexBasis[1] === VW$9) {
            b = max = min = flexBasis[0] * this.root.width * 0.01;
          } else if (flexBasis[1] === VH$9) {
            b = max = min = flexBasis[0] * this.root.height * 0.01;
          } else if (flexBasis[1] === VMAX$9) {
            b = max = min = flexBasis[0] * Math.max(this.root.width, this.root.height) * 0.01;
          } else if (flexBasis[1] === VMIN$9) {
            b = max = min = flexBasis[0] * Math.min(this.root.width, this.root.height) * 0.01;
          }
        } else if ([PX$9, PERCENT$a, REM$9, VW$9, VH$9, VMAX$9, VMIN$9].indexOf(main[1]) > -1) {
          if (main[1] === PX$9) {
            b = max = min = main[0];
          } else if (main[1] === PERCENT$a) {
            b = max = min = main[0] * 0.01 * (isDirectionRow ? w : h);
          } else if (main[1] === REM$9) {
            b = max = min = main[0] * this.root.computedStyle[FONT_SIZE$a];
          } else if (main[1] === VW$9) {
            b = max = min = main[0] * this.root.width * 0.01;
          } else if (main[1] === VH$9) {
            b = max = min = main[0] * this.root.height * 0.01;
          } else if (main[1] === VMAX$9) {
            b = max = min = main[0] * Math.max(this.root.width, this.root.height) * 0.01;
          } else if (main[1] === VMIN$9) {
            b = max = min = main[0] * Math.min(this.root.width, this.root.height) * 0.01;
          }
        } // auto和content固定尺寸比例计算
        else if (__loadImg.source || __loadImg.error) {
            if (cross[1] !== AUTO$7) {
              if (cross[1] === PX$9) {
                cross = cross[0];
              } else if (cross[1] === PERCENT$a) {
                cross = cross[0] * 0.01 * (isDirectionRow ? h : w);
              } else if (cross[1] === REM$9) {
                cross = cross[0] * this.root.computedStyle[FONT_SIZE$a];
              } else if (cross[1] === VW$9) {
                cross = cross[0] * this.root.width * 0.01;
              } else if (cross[1] === VH$9) {
                cross = cross[0] * this.root.height * 0.01;
              } else if (cross[1] === VMAX$9) {
                cross = cross[0] * Math.max(this.root.width, this.root.height) * 0.01;
              } else if (cross[1] === VMIN$9) {
                cross = cross[0] * Math.min(this.root.width, this.root.height) * 0.01;
              }

              var ratio = __loadImg.width / __loadImg.height;
              b = max = min = isDirectionRow ? cross * ratio : cross / ratio;
            } else {
              b = max = min = isDirectionRow ? __loadImg.width : __loadImg.height;
            }
          } // border也得计算在内


        if (isDirectionRow) {
          var mp = this.__calMp(marginLeft, w) + this.__calMp(marginRight, w) + this.__calMp(paddingLeft, w) + this.__calMp(paddingRight, w);

          var w2 = borderLeftWidth[0] + borderRightWidth[0] + mp;
          b += w2;
          max += w2;
          min += w2;
        } else {
          var _mp = this.__calMp(marginTop, w) + this.__calMp(marginBottom, w) + this.__calMp(paddingTop, w) + this.__calMp(paddingBottom, w);

          var h2 = borderTopWidth[0] + borderBottomWidth[0] + _mp;
          b += h2;
          max += h2;
          min += h2;
        }

        return [b, min, max];
      }
    }, {
      key: "__loadAndRefresh",
      value: function __loadAndRefresh(loadImg, root, ctx, placeholder, computedStyle, width, height, cb) {
        var self = this; // 先清空之前可能的

        if (loadImg.source || loadImg.error) {
          root.delRefreshTask(self.__task);
          root.addRefreshTask(self.__task = {
            __before: function __before() {
              self.__task = null; // 清除在before，防止after的回调增加新的task误删

              if (self.isDestroyed) {
                return;
              } // 刷新前统一赋值，由刷新逻辑计算最终值避免优先级覆盖问题


              var res = {};
              res[UPDATE_NODE$4] = self;
              res[UPDATE_FOCUS$3] = o$3.REFLOW; // 没有样式变化但内容尺寸发生了变化强制执行

              res[UPDATE_CONFIG$4] = self.__config;

              root.__addUpdate(self, self.__config, root, root.__config, res);
            }
          });
          loadImg.source = null;
        }

        loadImg.loading = true; // 再测量，可能瞬间完成替换掉上面的

        inject.measureImg(loadImg.src, function (data) {
          // 还需判断url，防止重复加载时老的替换新的，失败走error绘制
          if (data.url === loadImg.src && !self.isDestroyed) {
            var reload = function reload() {
              var _self$currentStyle = self.currentStyle,
                  width = _self$currentStyle[WIDTH$6],
                  height = _self$currentStyle[HEIGHT$6];
              root.delRefreshTask(self.__task);

              if (width[1] !== AUTO$7 && height[1] !== AUTO$7) {
                root.addRefreshTask(self.__task = {
                  __before: function __before() {
                    self.__task = null;

                    if (self.isDestroyed) {
                      return;
                    } // 刷新前统一赋值，由刷新逻辑计算最终值避免优先级覆盖问题


                    var res = {};
                    res[UPDATE_NODE$4] = self;
                    res[UPDATE_FOCUS$3] = o$3.REPAINT;
                    res[UPDATE_CONFIG$4] = self.__config;

                    root.__addUpdate(self, self.__config, root, root.__config, res);
                  },
                  __after: function __after() {
                    if (isFunction$5(cb)) {
                      cb.call(self);
                    }
                  }
                });
              } else {
                root.addRefreshTask(self.__task = {
                  __before: function __before() {
                    self.__task = null;

                    if (self.isDestroyed) {
                      return;
                    } // 刷新前统一赋值，由刷新逻辑计算最终值避免优先级覆盖问题


                    var res = {};
                    res[UPDATE_NODE$4] = self;
                    res[UPDATE_FOCUS$3] = o$3.REFLOW; // 没有样式变化但内容尺寸发生了变化强制执行

                    res[UPDATE_CONFIG$4] = self.__config;

                    root.__addUpdate(self, self.__config, root, root.__config, res);
                  },
                  __after: function __after() {
                    if (isFunction$5(cb)) {
                      cb.call(self);
                    }
                  }
                });
              }
            };

            loadImg.cache && (loadImg.cache.cache = false);
            loadImg.loading = false;

            if (data.success) {
              loadImg.source = data.source;
              loadImg.width = data.width;
              loadImg.height = data.height;
            } else if (placeholder) {
              inject.measureImg(placeholder, function (data) {
                if (data.success) {
                  loadImg.error = true;
                  loadImg.source = data.source;
                  loadImg.width = data.width;
                  loadImg.height = data.height;
                  reload();
                }
              }, {
                ctx: ctx,
                root: root,
                width: width,
                height: height
              });
              return;
            } else {
              loadImg.error = true;
            } // 可见状态进行刷新操作，visibility某些情况需要刷新，可能宽高未定义要重新布局


            if (computedStyle[DISPLAY$6] !== 'none') {
              reload();
            }
          }
        }, {
          ctx: ctx,
          root: root,
          width: width,
          height: height
        });
      }
    }, {
      key: "updateSrc",
      value: function updateSrc(v, cb) {
        var self = this;
        var loadImg = self.__loadImg;
        var root = this.root; // 相等或空且当前error直接返回

        if (v === loadImg.src || !v && loadImg.error) {
          if (isFunction$5(cb)) {
            cb(-1);
          }
        } else if (v) {
          loadImg.src = v;

          self.__loadAndRefresh(loadImg, root, root.ctx, self.props.placeholder, self.computedStyle, self.width, self.height, cb);
        } else {
          loadImg.src = v;
          loadImg.source = null;
          loadImg.error = true;
          root.delRefreshTask(self.__task);
          root.addRefreshTask(self.__task = {
            __before: function __before() {
              self.__task = null;

              if (self.isDestroyed) {
                return;
              }

              var res = {};
              res[UPDATE_NODE$4] = self;
              res[UPDATE_FOCUS$3] = o$3.REFLOW;
              res[UPDATE_CONFIG$4] = self.__config;

              root.__addUpdate(self, self.__config, root, self.__config, res);
            },
            __after: function __after(diff) {
              if (isFunction$5(cb)) {
                cb(diff);
              }
            }
          });
        }
      }
    }, {
      key: "appendChild",
      value: function appendChild() {
        inject.error('Img can not appendChild.');
      }
    }, {
      key: "src",
      get: function get() {
        return this.__loadImg.src;
      }
    }]);

    return Img;
  }(Dom$1);

  _defineProperty(Img$1, "showError", true);

  var Defs = /*#__PURE__*/function () {
    function Defs(uuid) {
      _classCallCheck(this, Defs);

      this.id = uuid;
      this.count = 0;
      this.list = [];
      this.cacheHash = {}; // 每次svg渲染前重置，存储前次渲染不变的缓存id
    }

    _createClass(Defs, [{
      key: "add",
      value: function add(data) {
        var uuid = this.count;
        var hash = this.cacheHash;

        while (hash.hasOwnProperty(uuid)) {
          uuid++;
        }

        this.count = uuid + 1;
        data.id = uuid;
        data.uuid = 'karas-defs-' + this.id + '-' + uuid;
        data.index = this.list.length;
        this.list.push(data);
        return data.uuid;
      }
    }, {
      key: "addCache",
      value: function addCache(data) {
        data.index = this.list.length;
        this.list.push(data);
        this.cacheHash[data.id] = true;
        return data.uuid;
      }
    }, {
      key: "clear",
      value: function clear() {
        this.list = [];
        this.count = 0;
        this.cacheHash = {};
      }
    }, {
      key: "removeCache",
      value: function removeCache(data) {
        var list = this.list;
        var i = data.index; // 一般情况index即位置，但每次渲染过程中，可能会删掉一些，此时位置会往前，但index不变，因此遍历

        for (; i >= 0; i--) {
          if (list[i] === data) {
            list.splice(i, 1);
            return;
          }
        }
      }
    }, {
      key: "value",
      get: function get() {
        return this.list;
      }
    }], [{
      key: "getInstance",
      value: function getInstance(uuid) {
        return new Defs(uuid);
      }
    }]);

    return Defs;
  }();

  var _enums$STYLE_KEY$h = enums.STYLE_KEY,
      DISPLAY$7 = _enums$STYLE_KEY$h.DISPLAY,
      MARGIN_TOP$3 = _enums$STYLE_KEY$h.MARGIN_TOP,
      MARGIN_RIGHT$5 = _enums$STYLE_KEY$h.MARGIN_RIGHT,
      MARGIN_BOTTOM$3 = _enums$STYLE_KEY$h.MARGIN_BOTTOM,
      MARGIN_LEFT$5 = _enums$STYLE_KEY$h.MARGIN_LEFT,
      PADDING_TOP$4 = _enums$STYLE_KEY$h.PADDING_TOP,
      PADDING_RIGHT$5 = _enums$STYLE_KEY$h.PADDING_RIGHT,
      PADDING_BOTTOM$4 = _enums$STYLE_KEY$h.PADDING_BOTTOM,
      PADDING_LEFT$6 = _enums$STYLE_KEY$h.PADDING_LEFT,
      WIDTH$7 = _enums$STYLE_KEY$h.WIDTH,
      HEIGHT$7 = _enums$STYLE_KEY$h.HEIGHT,
      BORDER_TOP_WIDTH$5 = _enums$STYLE_KEY$h.BORDER_TOP_WIDTH,
      BORDER_RIGHT_WIDTH$6 = _enums$STYLE_KEY$h.BORDER_RIGHT_WIDTH,
      BORDER_BOTTOM_WIDTH$5 = _enums$STYLE_KEY$h.BORDER_BOTTOM_WIDTH,
      BORDER_LEFT_WIDTH$7 = _enums$STYLE_KEY$h.BORDER_LEFT_WIDTH,
      FILL$1 = _enums$STYLE_KEY$h.FILL,
      STROKE$1 = _enums$STYLE_KEY$h.STROKE,
      STROKE_MITERLIMIT = _enums$STYLE_KEY$h.STROKE_MITERLIMIT,
      STROKE_WIDTH$1 = _enums$STYLE_KEY$h.STROKE_WIDTH,
      STROKE_LINECAP = _enums$STYLE_KEY$h.STROKE_LINECAP,
      STROKE_LINEJOIN = _enums$STYLE_KEY$h.STROKE_LINEJOIN,
      STROKE_DASHARRAY$1 = _enums$STYLE_KEY$h.STROKE_DASHARRAY,
      STROKE_DASHARRAY_STR = _enums$STYLE_KEY$h.STROKE_DASHARRAY_STR,
      FILL_RULE = _enums$STYLE_KEY$h.FILL_RULE,
      VISIBILITY$4 = _enums$STYLE_KEY$h.VISIBILITY,
      FONT_SIZE$b = _enums$STYLE_KEY$h.FONT_SIZE,
      FLEX_BASIS$4 = _enums$STYLE_KEY$h.FLEX_BASIS,
      _enums$NODE_KEY$6 = enums.NODE_KEY,
      NODE_CACHE_PROPS = _enums$NODE_KEY$6.NODE_CACHE_PROPS,
      NODE_CURRENT_PROPS = _enums$NODE_KEY$6.NODE_CURRENT_PROPS,
      NODE_CURRENT_STYLE$3 = _enums$NODE_KEY$6.NODE_CURRENT_STYLE,
      NODE_STYLE$3 = _enums$NODE_KEY$6.NODE_STYLE,
      NODE_DEFS_CACHE$5 = _enums$NODE_KEY$6.NODE_DEFS_CACHE;
  var PX$a = o.PX,
      PERCENT$b = o.PERCENT,
      REM$a = o.REM,
      VW$a = o.VW,
      VH$a = o.VH,
      VMAX$a = o.VMAX,
      VMIN$a = o.VMIN;
  var int2rgba$3 = util.int2rgba,
      isNil$7 = util.isNil,
      joinArr$3 = util.joinArr;
  var canvasPolygon$6 = painter.canvasPolygon,
      svgPolygon$7 = painter.svgPolygon;
  var REGISTER$1 = {};

  var Geom$1 = /*#__PURE__*/function (_Xom) {
    _inherits(Geom, _Xom);

    var _super = _createSuper(Geom);

    function Geom(tagName, props) {
      var _this;

      _classCallCheck(this, Geom);

      _this = _super.call(this, tagName, props);
      _this.__isMulti = !!_this.props.multi;
      _this.__style = css.normalize(_this.style, reset.DOM_ENTRY_SET.concat(reset.GEOM_ENTRY_SET));
      _this.__currentStyle = util.extend({}, _this.__style);
      _this.__currentProps = util.clone(_this.props);
      var config = _this.__config;
      config[NODE_CACHE_PROPS] = _this.__cacheProps = {};
      config[NODE_CURRENT_PROPS] = _this.__currentProps;
      config[NODE_CURRENT_STYLE$3] = _this.__currentStyle;
      config[NODE_STYLE$3] = _this.__style;
      return _this;
    }

    _createClass(Geom, [{
      key: "__tryLayInline",
      value: function __tryLayInline(w, total) {
        // 无children，直接以style的width为宽度，不定义则为0
        var _this$currentStyle = this.currentStyle,
            width = _this$currentStyle[WIDTH$7],
            marginLeft = _this$currentStyle[MARGIN_LEFT$5],
            marginRight = _this$currentStyle[MARGIN_RIGHT$5],
            paddingLeft = _this$currentStyle[PADDING_LEFT$6],
            paddingRight = _this$currentStyle[PADDING_RIGHT$5],
            borderLeftWidth = _this$currentStyle[BORDER_LEFT_WIDTH$7],
            borderRightWidth = _this$currentStyle[BORDER_RIGHT_WIDTH$6];

        if (width[1] === PX$a) {
          w -= width[0];
        } else if (width[1] === PERCENT$b) {
          w -= total * width[0] * 0.01;
        } else if (width[1] === REM$a) {
          w -= width[0] * this.root.computedStyle[FONT_SIZE$b];
        } else if (width[1] === VW$a) {
          w -= width[0] * this.root.width * 0.01;
        } else if (width[1] === VH$a) {
          w -= width[0] * this.root.height * 0.01;
        } else if (width[1] === VMAX$a) {
          w -= width[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (width[1] === VMIN$a) {
          w -= width[0] * Math.min(this.root.width, this.root.height) * 0.01;
        } // 减去水平mbp


        if (marginLeft[1] === PX$a) {
          w -= marginLeft[0];
        } else if (marginLeft[1] === PERCENT$b) {
          w -= marginLeft[0] * total * 0.01;
        } else if (marginLeft[1] === REM$a) {
          w -= marginLeft[0] * this.root.computedStyle[FONT_SIZE$b];
        } else if (marginLeft[1] === VW$a) {
          w -= marginLeft[0] * this.root.width * 0.01;
        } else if (marginLeft[1] === VH$a) {
          w -= marginLeft[0] * this.root.height * 0.01;
        } else if (marginLeft[1] === VMAX$a) {
          w -= marginLeft[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (marginLeft[1] === VMIN$a) {
          w -= marginLeft[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        if (paddingLeft[1] === PX$a) {
          w -= paddingLeft[0];
        } else if (paddingLeft[1] === PERCENT$b) {
          w -= paddingLeft[0] * total * 0.01;
        } else if (paddingLeft[1] === REM$a) {
          w -= paddingLeft[0] * this.root.computedStyle[FONT_SIZE$b];
        } else if (paddingLeft[1] === VW$a) {
          w -= paddingLeft[0] * this.root.width * 0.01;
        } else if (paddingLeft[1] === VH$a) {
          w -= paddingLeft[0] * this.root.height * 0.01;
        } else if (paddingLeft[1] === VMAX$a) {
          w -= paddingLeft[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (paddingLeft[1] === VMIN$a) {
          w -= paddingLeft[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        if (borderLeftWidth[1] === PX$a) {
          w -= borderLeftWidth[0];
        } else if (borderLeftWidth[1] === REM$a) {
          w -= borderLeftWidth[0] * this.root.computedStyle[FONT_SIZE$b];
        } else if (borderLeftWidth[1] === VW$a) {
          w -= borderLeftWidth[0] * this.root.width * 0.01;
        } else if (borderLeftWidth[1] === VH$a) {
          w -= borderLeftWidth[0] * this.root.height * 0.01;
        } else if (borderLeftWidth[1] === VMAX$a) {
          w -= borderLeftWidth[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (borderLeftWidth[1] === VMIN$a) {
          w -= borderLeftWidth[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        if (marginRight[1] === PX$a) {
          w -= marginRight[0];
        } else if (marginRight[1] === PERCENT$b) {
          w -= marginRight[0] * total * 0.01;
        } else if (marginRight[1] === REM$a) {
          w -= marginRight[0] * this.root.computedStyle[FONT_SIZE$b];
        } else if (marginRight[1] === VW$a) {
          w -= marginRight[0] * this.root.width * 0.01;
        } else if (marginRight[1] === VH$a) {
          w -= marginRight[0] * this.root.height * 0.01;
        } else if (marginRight[1] === VMAX$a) {
          w -= marginRight[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (marginRight[1] === VMIN$a) {
          w -= marginRight[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        if (paddingRight[1] === PX$a) {
          w -= paddingRight[0];
        } else if (paddingRight[1] === PERCENT$b) {
          w -= paddingRight[0] * total * 0.01;
        } else if (paddingRight[1] === REM$a) {
          w -= paddingRight[0] * this.root.computedStyle[FONT_SIZE$b];
        } else if (paddingRight[1] === VW$a) {
          w -= paddingRight[0] * this.root.width * 0.01;
        } else if (paddingRight[1] === VH$a) {
          w -= paddingRight[0] * this.root.height * 0.01;
        } else if (paddingRight[1] === VMAX$a) {
          w -= paddingRight[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (paddingRight[1] === VMIN$a) {
          w -= paddingRight[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        if (borderRightWidth[1] === PX$a) {
          w -= borderRightWidth[0];
        } else if (borderRightWidth[1] === REM$a) {
          w -= borderRightWidth[0] * this.root.computedStyle[FONT_SIZE$b];
        } else if (borderRightWidth[1] === VW$a) {
          w -= borderRightWidth[0] * this.root.width * 0.01;
        } else if (borderRightWidth[1] === VH$a) {
          w -= borderRightWidth[0] * this.root.height * 0.01;
        } else if (borderRightWidth[1] === VMAX$a) {
          w -= borderRightWidth[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (borderRightWidth[1] === VMIN$a) {
          w -= borderRightWidth[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        return w;
      }
    }, {
      key: "__calMinMax",
      value: function __calMinMax(isDirectionRow, data) {
        css.computeReflow(this, this.isShadowRoot);
        var min = 0;
        var max = 0;
        var currentStyle = this.currentStyle; // 计算需考虑style的属性

        var width = currentStyle[WIDTH$7],
            height = currentStyle[HEIGHT$7],
            display = currentStyle[DISPLAY$7];
        var main = isDirectionRow ? width : height; // 只绝对值生效，%不生效，依旧要判断

        if (main[1] === PX$a) {
          min = max = main[0];
        } else if (main[1] === REM$a) {
          min = max = main[0] * this.root.computedStyle[FONT_SIZE$b];
        } else if (main[1] === VW$a) {
          min = max = main[0] * this.root.width * 0.01;
        } else if (main[1] === VH$a) {
          min = max = main[0] * this.root.height * 0.01;
        } else if (main[1] === VMAX$a) {
          min = max = main[0] * Math.max(this.root.width, this.root.height) * 0.01;
        } else if (main[1] === VMIN$a) {
          min = max = main[0] * Math.min(this.root.width, this.root.height) * 0.01;
        }

        return [display, this.__addMp(isDirectionRow, data.w, currentStyle, [min, max])];
      }
    }, {
      key: "__calBasis",
      value: function __calBasis(isDirectionRow, data) {
        var b = 0;
        var min = 0;
        var max = 0;
        var currentStyle = this.currentStyle;
        var w = data.w,
            h = data.h; // 计算需考虑style的属性

        var flexBasis = currentStyle[FLEX_BASIS$4],
            width = currentStyle[WIDTH$7],
            height = currentStyle[HEIGHT$7],
            marginLeft = currentStyle[MARGIN_LEFT$5],
            marginTop = currentStyle[MARGIN_TOP$3],
            marginRight = currentStyle[MARGIN_RIGHT$5],
            marginBottom = currentStyle[MARGIN_BOTTOM$3],
            paddingLeft = currentStyle[PADDING_LEFT$6],
            paddingTop = currentStyle[PADDING_TOP$4],
            paddingRight = currentStyle[PADDING_RIGHT$5],
            paddingBottom = currentStyle[PADDING_BOTTOM$4],
            borderTopWidth = currentStyle[BORDER_TOP_WIDTH$5],
            borderRightWidth = currentStyle[BORDER_RIGHT_WIDTH$6],
            borderBottomWidth = currentStyle[BORDER_BOTTOM_WIDTH$5],
            borderLeftWidth = currentStyle[BORDER_LEFT_WIDTH$7];
        var main = isDirectionRow ? width : height; // basis3种情况：auto、固定、content，只区分固定和其它

        var isFixed = [PX$a, PERCENT$b, REM$a, VW$a, VH$a, VMAX$a, VMIN$a].indexOf(flexBasis[1]) > -1;

        if (isFixed) {
          if (flexBasis[1] === PX$a) {
            b = max = min = flexBasis[0];
          } else if (flexBasis[1] === PERCENT$b) {
            b = max = min = flexBasis[0] * 0.01 * (isDirectionRow ? w : h);
          } else if (flexBasis[1] === REM$a) {
            b = max = min = flexBasis[0] * this.root.computedStyle[FONT_SIZE$b];
          } else if (flexBasis[1] === VW$a) {
            b = max = min = flexBasis[0] * this.root.width * 0.01;
          } else if (flexBasis[1] === VH$a) {
            b = max = min = flexBasis[0] * this.root.height * 0.01;
          } else if (flexBasis[1] === VMAX$a) {
            b = max = min = flexBasis[0] * Math.max(this.root.width, this.root.height) * 0.01;
          } else if (flexBasis[1] === VMIN$a) {
            b = max = min = flexBasis[0] * Math.min(this.root.width, this.root.height) * 0.01;
          }
        } else if ([PX$a, PERCENT$b, REM$a, VW$a, VH$a, VMAX$a, VMIN$a].indexOf(main[1]) > -1) {
          if (main[1] === PX$a) {
            b = max = min = main[0];
          } else if (main[1] === PERCENT$b) {
            b = max = min = main[0] * 0.01 * (isDirectionRow ? w : h);
          } else if (main[1] === REM$a) {
            b = max = min = main[0] * this.root.computedStyle[FONT_SIZE$b];
          } else if (main[1] === VW$a) {
            b = max = min = main[0] * this.root.width * 0.01;
          } else if (main[1] === VH$a) {
            b = max = min = main[0] * this.root.height * 0.01;
          } else if (main[1] === VMAX$a) {
            b = max = min = main[0] * Math.max(this.root.width, this.root.height) * 0.01;
          } else if (main[1] === VMIN$a) {
            b = max = min = main[0] * Math.min(this.root.width, this.root.height) * 0.01;
          }
        } // border也得计算在内


        if (isDirectionRow) {
          var mp = this.__calMp(marginLeft, w) + this.__calMp(marginRight, w) + this.__calMp(paddingLeft, w) + this.__calMp(paddingRight, w);

          var w2 = borderLeftWidth[0] + borderRightWidth[0] + mp;
          b += w2;
          max += w2;
          min += w2;
        } else {
          var _mp = this.__calMp(marginTop, w) + this.__calMp(marginBottom, w) + this.__calMp(paddingTop, w) + this.__calMp(paddingBottom, w);

          var h2 = borderTopWidth[0] + borderBottomWidth[0] + _mp;
          b += h2;
          max += h2;
          min += h2;
        }

        return [b, min, max];
      }
    }, {
      key: "__layoutBlock",
      value: function __layoutBlock(data, isVirtual) {
        var _this$__preLayout = this.__preLayout(data),
            fixedWidth = _this$__preLayout.fixedWidth,
            fixedHeight = _this$__preLayout.fixedHeight,
            w = _this$__preLayout.w,
            h = _this$__preLayout.h;

        this.__height = fixedHeight ? h : 0;

        if (isVirtual) {
          this.__width = fixedWidth ? w : 0;
          return;
        }

        this.__width = w;

        this.__ioSize(w, this.height);

        this.__marginAuto(this.currentStyle, data);

        this.__config[NODE_CACHE_PROPS] = this.__cacheProps = {};
      }
    }, {
      key: "__layoutFlex",
      value: function __layoutFlex(data) {
        // 无children所以等同于block
        this.__layoutBlock(data);
      }
    }, {
      key: "__layoutInline",
      value: function __layoutInline(data) {
        var _this$__preLayout2 = this.__preLayout(data),
            fixedWidth = _this$__preLayout2.fixedWidth,
            fixedHeight = _this$__preLayout2.fixedHeight,
            x = _this$__preLayout2.x,
            y = _this$__preLayout2.y,
            w = _this$__preLayout2.w,
            h = _this$__preLayout2.h; // 元素的width不能超过父元素w


        var tw = this.__width = fixedWidth ? w : x - data.x;
        var th = this.__height = fixedHeight ? h : y - data.y;

        this.__ioSize(tw, th);

        this.__config[NODE_CACHE_PROPS] = this.__cacheProps = {};
      }
    }, {
      key: "__calCache",
      value: function __calCache(renderMode, ctx, parent, __cacheStyle, currentStyle, computedStyle, clientWidth, clientHeight, offsetWidth, offsetHeight, borderTopWidth, borderRightWidth, borderBottomWidth, borderLeftWidth, paddingTop, paddingRight, paddingBottom, paddingLeft, x1, x2, x3, x4, x5, x6, y1, y2, y3, y4, y5, y6) {
        var _this2 = this;

        var res = _get(_getPrototypeOf(Geom.prototype), "__calCache", this).call(this, renderMode, ctx, parent, __cacheStyle, currentStyle, computedStyle, clientWidth, clientHeight, offsetWidth, offsetHeight, borderTopWidth, borderRightWidth, borderBottomWidth, borderLeftWidth, paddingTop, paddingRight, paddingBottom, paddingLeft, x1, x2, x3, x4, x5, x6, y1, y2, y3, y4, y5, y6);

        if (isNil$7(__cacheStyle[STROKE_WIDTH$1])) {
          __cacheStyle[STROKE_WIDTH$1] = true;
          var strokeWidth = currentStyle[STROKE_WIDTH$1] || [];
          var w = this.width;
          computedStyle[STROKE_WIDTH$1] = strokeWidth.map(function (item) {
            if (item[1] === PX$a) {
              return item[0];
            } else if (item[1] === PERCENT$b) {
              return item[0] * w * 0.01;
            } else if (item[1] === REM$a) {
              return item[0] * _this2.root.computedStyle[FONT_SIZE$b];
            } else if (item[1] === VW$a) {
              return item[0] * _this2.root.width * 0.01;
            } else if (item[1] === VH$a) {
              return item[0] * _this2.root.height * 0.01;
            } else if (item[1] === VMAX$a) {
              return item[0] * Math.max(_this2.root.width, _this2.root.height) * 0.01;
            } else if (item[1] === VMIN$a) {
              return item[0] * Math.min(_this2.root.width, _this2.root.height) * 0.01;
            } else {
              return 0;
            }
          });
        }

        if (isNil$7(__cacheStyle[STROKE_DASHARRAY$1])) {
          __cacheStyle[STROKE_DASHARRAY$1] = true;
          computedStyle[STROKE_DASHARRAY$1] = currentStyle[STROKE_DASHARRAY$1] || [];
          __cacheStyle[STROKE_DASHARRAY_STR] = computedStyle[STROKE_DASHARRAY$1].map(function (item) {
            return joinArr$3(item, ',');
          });
        } // 直接赋值的


        [STROKE_LINECAP, STROKE_LINEJOIN, STROKE_MITERLIMIT, FILL_RULE].forEach(function (k) {
          computedStyle[k] = currentStyle[k];
        }); // stroke/fll移至render里处理，因为cache涉及渐变坐标偏移

        [STROKE$1, FILL$1].forEach(function (k) {
          if (isNil$7(__cacheStyle[k])) {
            var v = currentStyle[k];
            computedStyle[k] = v;
            var _res = [];

            if (Array.isArray(v)) {
              v.forEach(function (item) {
                if (item && (item.k === 'linear' || item.k === 'radial' || item.k === 'conic')) {
                  _res.push(_this2.__gradient(renderMode, ctx, x3, y3, x4, y4, item));
                } else if (item[3] > 0) {
                  _res.push(int2rgba$3(item));
                } else {
                  _res.push('none');
                }
              });
            }

            __cacheStyle[k] = _res;
          }
        });
        return res;
      }
    }, {
      key: "__calContent",
      value: function __calContent(renderMode, lv, currentStyle, computedStyle) {
        // Geom强制有内容
        return computedStyle[VISIBILITY$4] !== 'hidden';
      }
    }, {
      key: "__preSet",
      value: function __preSet(res) {
        var width = this.width,
            height = this.height,
            __cacheStyle = this.__cacheStyle,
            computedStyle = this.computedStyle;
        var cx = res.sx3 + width * 0.5;
        var cy = res.sy3 + height * 0.5;
        var fill = __cacheStyle[FILL$1],
            stroke = __cacheStyle[STROKE$1],
            strokeDasharrayStr = __cacheStyle[STROKE_DASHARRAY_STR];
        var strokeWidth = computedStyle[STROKE_WIDTH$1],
            strokeLinecap = computedStyle[STROKE_LINECAP],
            strokeLinejoin = computedStyle[STROKE_LINEJOIN],
            strokeMiterlimit = computedStyle[STROKE_MITERLIMIT],
            strokeDasharray = computedStyle[STROKE_DASHARRAY$1],
            fillRule = computedStyle[FILL_RULE];
        return {
          cx: cx,
          cy: cy,
          stroke: stroke,
          strokeWidth: strokeWidth,
          strokeDasharray: strokeDasharray,
          strokeDasharrayStr: strokeDasharrayStr,
          strokeLinecap: strokeLinecap,
          strokeLinejoin: strokeLinejoin,
          strokeMiterlimit: strokeMiterlimit,
          fill: fill,
          fillRule: fillRule
        };
      }
    }, {
      key: "__preSetCanvas",
      value: function __preSetCanvas(renderMode, ctx, res) {
        var stroke = res.stroke,
            strokeWidth = res.strokeWidth,
            strokeDasharray = res.strokeDasharray,
            strokeLinecap = res.strokeLinecap,
            strokeLinejoin = res.strokeLinejoin,
            strokeMiterlimit = res.strokeMiterlimit,
            fill = res.fill;

        if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
          if (fill) {
            if (fill.k === 'linear') {
              ctx.fillStyle = fill.v;
            } else if (fill.k === 'radial' && !Array.isArray(fill.v)) {
              ctx.fillStyle = fill.v;
            } else if (fill.k === 'conic') ; else if (!fill.k && ctx.fillStyle !== fill) {
              ctx.fillStyle = fill;
            }
          }

          if (stroke) {
            if (stroke.k === 'linear') {
              ctx.strokeStyle = stroke.v;
            } else if (stroke.k === 'radial' && !Array.isArray(stroke.v)) {
              ctx.strokeStyle = stroke.v;
            } else if (stroke.k === 'conic') ; else if (!stroke.k && ctx.strokeStyle !== stroke) {
              ctx.strokeStyle = stroke;
            }
          }

          if (strokeWidth !== undefined && ctx.lineWidth !== strokeWidth) {
            ctx.lineWidth = strokeWidth;
          }

          if (strokeLinecap !== undefined && ctx.lineCap !== strokeLinecap) {
            ctx.lineCap = strokeLinecap;
          }

          if (strokeLinejoin !== undefined && ctx.lineJoin !== strokeLinejoin) {
            ctx.lineJoin = strokeLinejoin;
          }

          if (strokeMiterlimit !== undefined && ctx.miterLimit !== strokeMiterlimit) {
            ctx.miterLimit = strokeMiterlimit;
          } // 小程序没这个方法


          if (util.isFunction(ctx.getLineDash)) {
            if (strokeDasharray && !util.equalArr(ctx.getLineDash(), strokeDasharray)) {
              ctx.setLineDash(strokeDasharray);
            }
          } else if (strokeDasharray) {
            ctx.setLineDash(strokeDasharray);
          }
        }
      }
    }, {
      key: "render",
      value: function render(renderMode, lv, ctx, cache, dx, dy) {
        var res = _get(_getPrototypeOf(Geom.prototype), "render", this).call(this, renderMode, lv, ctx, cache, dx, dy);

        if (renderMode === mode.SVG) {
          this.virtualDom.type = 'geom';
        } // 无论canvas/svg，break可提前跳出省略计算


        if (res["break"]) {
          return res;
        } // data在无cache时没有提前设置


        var preData = this.__preSet(res);

        return Object.assign(res, preData);
      }
    }, {
      key: "__renderPolygon",
      value: function __renderPolygon(renderMode, ctx, res) {
        var fills = res.fill,
            fillRules = res.fillRule,
            strokes = res.stroke,
            strokeWidths = res.strokeWidth,
            strokeDasharrays = res.strokeDasharray,
            strokeDasharrayStrs = res.strokeDasharrayStr,
            strokeLinecaps = res.strokeLinecap,
            strokeLinejoins = res.strokeLinejoin,
            strokeMiterlimits = res.strokeMiterlimit,
            dx = res.dx,
            dy = res.dy;
        var list = this.__cacheProps.list,
            isMulti = this.isMulti,
            bbox = this.bbox; // 普通情况下只有1个，按普通情况走

        if (fills.length <= 1 && strokes.length <= 1) {
          var o = {
            fill: fills[0],
            fillRule: fillRules[0],
            stroke: strokes[0],
            strokeWidth: strokeWidths[0],
            strokeDasharray: strokeDasharrays[0],
            strokeDasharrayStr: strokeDasharrayStrs[0],
            strokeLinecap: strokeLinecaps[0],
            strokeLinejoin: strokeLinejoins[0],
            strokeMiterlimit: strokeMiterlimits[0],
            dx: dx,
            dy: dy,
            bbox: bbox
          };

          this.__renderOnePolygon(renderMode, ctx, isMulti, list, o);
        } // 多个需要fill在下面，stroke在上面，依次循环
        else {
            for (var i = 0, len = fills.length; i < len; i++) {
              var fill = fills[i];

              if (fill) {
                var _o = {
                  fill: fill,
                  fillRule: fillRules[i],
                  dx: dx,
                  dy: dy,
                  bbox: bbox
                };

                this.__renderOnePolygon(renderMode, ctx, isMulti, list, _o);
              }
            }

            for (var _i = 0, _len = strokes.length; _i < _len; _i++) {
              var stroke = strokes[_i];

              if (stroke) {
                var _o2 = {
                  stroke: stroke,
                  strokeWidth: strokeWidths[_i],
                  strokeDasharray: strokeDasharrays[_i],
                  strokeDasharrayStr: strokeDasharrayStrs[_i],
                  strokeLinecap: strokeLinecaps[_i],
                  strokeLinejoin: strokeLinejoins[_i],
                  strokeMiterlimit: strokeMiterlimits[_i],
                  dx: dx,
                  dy: dy,
                  bbox: bbox
                };

                this.__renderOnePolygon(renderMode, ctx, isMulti, list, _o2);
              }
            }
          }
      }
    }, {
      key: "__renderOnePolygon",
      value: function __renderOnePolygon(renderMode, ctx, isMulti, list, res) {
        var fill = res.fill,
            stroke = res.stroke,
            strokeWidth = res.strokeWidth;
        var isFillCE = fill && fill.k === 'conic';
        var isStrokeCE = stroke && stroke.k === 'conic'; // 椭圆是array

        var isFillRE = fill && fill.k === 'radial' && Array.isArray(fill.v);
        var isStrokeRE = strokeWidth && strokeWidth > 0 && stroke && stroke.k === 'radial' && Array.isArray(stroke.v);

        if (isFillCE || isStrokeCE) {
          if (isFillCE) {
            this.__conicGradient(renderMode, ctx, list, isMulti, res);
          } else if (fill !== 'none') {
            this.__drawPolygon(renderMode, ctx, isMulti, list, res, true);
          }

          if (strokeWidth && strokeWidth > 0 && isStrokeCE) {
            inject.warn('Stroke style can not use conic-gradient');
          } else if (strokeWidth && strokeWidth > 0 && stroke !== 'none') {
            this.__drawPolygon(renderMode, ctx, isMulti, list, res, false, true);
          }
        } else if (isFillRE || isStrokeRE) {
          if (isFillRE) {
            this.__radialEllipse(renderMode, ctx, list, isMulti, res, 'fill');
          } else if (fill !== 'none') {
            this.__drawPolygon(renderMode, ctx, isMulti, list, res, true);
          } // stroke椭圆渐变matrix会变形，降级为圆


          if (strokeWidth && strokeWidth > 0 && isStrokeRE) {
            inject.warn('Stroke style can not use radial-gradient for ellipse');
            res.stroke.v = res.stroke.v[0];

            this.__drawPolygon(renderMode, ctx, isMulti, list, res, false, true);
          } else if (strokeWidth && strokeWidth > 0 && stroke !== 'none') {
            this.__drawPolygon(renderMode, ctx, isMulti, list, res, false, true);
          }
        } else {
          this.__drawPolygon(renderMode, ctx, isMulti, list, res, true, true);
        }
      }
    }, {
      key: "__drawPolygon",
      value: function __drawPolygon(renderMode, ctx, isMulti, list, res, isFill, isStroke) {
        var fill = res.fill,
            stroke = res.stroke,
            strokeWidth = res.strokeWidth,
            fillRule = res.fillRule,
            strokeDasharrayStr = res.strokeDasharrayStr,
            strokeLinecap = res.strokeLinecap,
            strokeLinejoin = res.strokeLinejoin,
            strokeMiterlimit = res.strokeMiterlimit,
            dx = res.dx,
            dy = res.dy;

        if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
          this.__preSetCanvas(renderMode, ctx, res);

          ctx.beginPath();

          if (isMulti) {
            list.forEach(function (item) {
              return canvasPolygon$6(ctx, item, dx, dy);
            });
          } else {
            canvasPolygon$6(ctx, list, dx, dy);
          }

          if (isFill && fill && fill !== 'none') {
            ctx.fill(fillRule);
          }

          if (isStroke && stroke && stroke !== 'none' && strokeWidth && strokeWidth > 0) {
            ctx.stroke();
          }

          ctx.closePath();
        } else if (renderMode === mode.SVG) {
          var d = '';

          if (isMulti) {
            list.forEach(function (item) {
              return d += svgPolygon$7(item);
            });
          } else {
            d = svgPolygon$7(list);
          }

          var props = [['d', d]]; // 2个都没有常出现在多fill/stroke时，也有可能特殊单个故意这样写的

          if ((!fill || fill === 'none') && (!stroke || stroke === 'none')) {
            return;
          }

          if (isFill && fill && fill !== 'none') {
            props.push(['fill', fill.v || fill]);

            if (fillRule && fillRule !== 'nonzero') {
              props.push(['fill-rule', fillRule]);
            }
          } else {
            props.push(['fill', 'none']);
          }

          if (isStroke && stroke && stroke !== 'none' && strokeWidth && strokeWidth > 0) {
            props.push(['stroke', stroke.v || stroke]);
            props.push(['stroke-width', strokeWidth]);

            this.__propsStrokeStyle(props, strokeDasharrayStr, strokeLinecap, strokeLinejoin, strokeMiterlimit);
          } else {
            props.push(['stroke-width', 0]);
          }

          this.addGeom('path', props);
        }
      }
    }, {
      key: "__inversePtList",
      value: function __inversePtList(list, isMulti, t) {
        if (isMulti) {
          return list.map(function (item) {
            if (!item || !item.length) {
              return null;
            }

            return item.map(function (item) {
              if (!item || !item.length) {
                return null;
              }

              var arr = [];

              for (var i = 0, len = item.length; i < len; i += 2) {
                var p = mx.calPoint([item[i], item[i + 1]], t);
                arr.push(p[0]);
                arr.push(p[1]);
              }

              return arr;
            });
          });
        } else {
          return list.map(function (item) {
            if (!item || !item.length) {
              return null;
            }

            var arr = [];

            for (var i = 0, len = item.length; i < len; i += 2) {
              var p = mx.calPoint([item[i], item[i + 1]], t);
              arr.push(p[0]);
              arr.push(p[1]);
            }

            return arr;
          });
        }
      }
    }, {
      key: "__radialEllipse",
      value: function __radialEllipse(renderMode, ctx, list, isMulti, res, method) {
        var strokeWidth = res.strokeWidth,
            strokeDasharrayStr = res.strokeDasharrayStr,
            strokeLinecap = res.strokeLinecap,
            strokeLinejoin = res.strokeLinejoin,
            strokeMiterlimit = res.strokeMiterlimit,
            dx = res.dx,
            dy = res.dy;

        var _res$method$v = _slicedToArray(res[method].v, 4),
            color = _res$method$v[0],
            matrix = _res$method$v[1],
            cx = _res$method$v[2],
            cy = _res$method$v[3]; // 椭圆渐变的转换，顶点逆矩阵变换


        var tfo = [cx, cy];
        matrix = transform$1.calMatrixByOrigin(matrix, tfo);
        var t = mx.inverse(matrix);
        list = this.__inversePtList(list, isMulti, t); // 用正向matrix渲染

        if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
          if (matrix) {
            ctx.save();
            var me = this.matrixEvent;
            matrix = mx.multiply(me, matrix);
            ctx.setTransform(matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]);
          }

          ctx.beginPath();

          if (ctx[method + 'Style'] !== color) {
            ctx[method + 'Style'] = color;
          }

          if (isMulti) {
            list.forEach(function (item) {
              return painter.canvasPolygon(ctx, item, dx, dy);
            });
          } else {
            canvasPolygon$6(ctx, list, dx, dy);
          }

          ctx[method]();
          ctx.closePath();

          if (matrix) {
            ctx.restore();
          }
        } else if (renderMode === mode.SVG) {
          var d = '';

          if (isMulti) {
            list.forEach(function (item) {
              return d += svgPolygon$7(item);
            });
          } else {
            d = svgPolygon$7(list);
          }

          var props = [['d', d]];

          if (method === 'fill') {
            props.push(['fill', color]);
            props.push(['strokeWidth', 0]);
          } else if (method === 'stroke') {
            props.push(['fill', 'none']);
            props.push(['stroke', color]);
            props.push(['stroke-width', strokeWidth]);

            this.__propsStrokeStyle(props, strokeDasharrayStr, strokeLinecap, strokeLinejoin, strokeMiterlimit);
          }

          props.push(['transform', "matrix(".concat(joinArr$3(mx.m2m6(matrix), ','), ")")]);
          this.addGeom('path', props);
        }
      }
    }, {
      key: "__conicGradient",
      value: function __conicGradient(renderMode, ctx, list, isMulti, res) {
        var _this3 = this;

        var fill = res.fill,
            bbox = res.bbox,
            _res$dx = res.dx,
            dx = _res$dx === void 0 ? 0 : _res$dx,
            _res$dy = res.dy,
            dy = _res$dy === void 0 ? 0 : _res$dy;
        var color = fill.v;

        if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
          var _bbox = _slicedToArray(bbox, 4),
              x1 = _bbox[0],
              y1 = _bbox[1],
              x2 = _bbox[2],
              y2 = _bbox[3];

          var w = x2 - x1,
              h = y2 - y1;
          var offscreen = inject.getCacheCanvas(w, h, '__$$CONIC_GRADIENT$$__');
          var imgData = offscreen.ctx.getImageData(0, 0, w, h);
          gradient.getConicGradientImage(w * 0.5, h * 0.5, w, h, fill.v.stop, imgData.data);
          offscreen.ctx.putImageData(imgData, 0, 0);

          if (isMulti) {
            list.forEach(function (item) {
              ctx.save();
              ctx.beginPath();
              canvasPolygon$6(ctx, item, dx, dy);
              ctx.clip();
              ctx.closePath();
              ctx.drawImage(offscreen.canvas, x1 + dx, y1 + dy);
              ctx.restore();
            });
          } else {
            ctx.save();
            ctx.beginPath();
            canvasPolygon$6(ctx, list, dx, dy);
            ctx.clip();
            ctx.closePath();
            ctx.drawImage(offscreen.canvas, x1 + dx, y1 + dy);
            ctx.restore();
          }

          offscreen.ctx.clearRect(0, 0, w, h);
        } else if (renderMode === mode.SVG) {
          if (isMulti) {
            list.forEach(function (item) {
              var v = {
                tagName: 'clipPath',
                children: [{
                  tagName: 'path',
                  props: [['d', svgPolygon$7(item)]]
                }]
              };
              var clip = ctx.add(v);

              _this3.__config[NODE_DEFS_CACHE$5].push(v);

              color.forEach(function (item) {
                _this3.virtualDom.bb.push({
                  type: 'item',
                  tagName: 'path',
                  props: [['d', svgPolygon$7(item[0])], ['fill', item[1]], ['clip-path', 'url(#' + clip + ')']]
                });
              });
            });
          } else {
            var v = {
              tagName: 'clipPath',
              children: [{
                tagName: 'path',
                props: [['d', svgPolygon$7(list)]]
              }]
            };
            var clip = ctx.add(v);

            this.__config[NODE_DEFS_CACHE$5].push(v);

            color.forEach(function (item) {
              _this3.virtualDom.bb.push({
                type: 'item',
                tagName: 'path',
                props: [['d', svgPolygon$7(item[0])], ['fill', item[1]], ['clip-path', 'url(#' + clip + ')']]
              });
            });
          }
        }
      }
    }, {
      key: "__propsStrokeStyle",
      value: function __propsStrokeStyle(props, strokeDasharrayStr, strokeLinecap, strokeLinejoin, strokeMiterlimit) {
        if (strokeDasharrayStr) {
          props.push(['stroke-dasharray', strokeDasharrayStr]);
        }

        if (strokeLinecap && strokeLinecap !== 'butt') {
          props.push(['stroke-linecap', strokeLinecap]);
        }

        if (strokeLinejoin && strokeLinejoin !== 'miter') {
          props.push(['stroke-linejoin', strokeLinejoin]);
        }

        if (strokeMiterlimit && strokeMiterlimit !== 4) {
          props.push(['stroke-miterlimit', strokeMiterlimit]);
        }
      } // geom的cache无内容也不清除，因为子类不清楚内容，除非看不见

    }, {
      key: "__releaseWhenEmpty",
      value: function __releaseWhenEmpty(cache, computedStyle) {
        return computedStyle[VISIBILITY$4] === 'hidden';
      } // offset/resize时要多一步清空props上记录的缓存

    }, {
      key: "__offsetX",
      value: function __offsetX(diff, isLayout, lv) {
        _get(_getPrototypeOf(Geom.prototype), "__offsetX", this).call(this, diff, isLayout, lv);

        this.__config[NODE_CACHE_PROPS] = this.__cacheProps = {};
      }
    }, {
      key: "__offsetY",
      value: function __offsetY(diff, isLayout, lv) {
        _get(_getPrototypeOf(Geom.prototype), "__offsetY", this).call(this, diff, isLayout, lv);

        this.__config[NODE_CACHE_PROPS] = this.__cacheProps = {};
      }
    }, {
      key: "__resizeX",
      value: function __resizeX(diff, lv) {
        _get(_getPrototypeOf(Geom.prototype), "__resizeX", this).call(this, diff, lv);

        this.__config[NODE_CACHE_PROPS] = this.__cacheProps = {};
      }
    }, {
      key: "__resizeY",
      value: function __resizeY(diff, lv) {
        _get(_getPrototypeOf(Geom.prototype), "__resizeY", this).call(this, diff, lv);

        this.__config[NODE_CACHE_PROPS] = this.__cacheProps = {};
      }
    }, {
      key: "addGeom",
      value: function addGeom(tagName, props) {
        props = util.hash2arr(props);
        this.virtualDom.children.push({
          type: 'item',
          tagName: tagName,
          props: props
        });
      }
    }, {
      key: "getProps",
      value: function getProps(k) {
        var v = this.currentProps[k];

        if (!isNil$7(v)) {
          return v;
        }

        return this['__' + k];
      }
    }, {
      key: "__isRealInline",
      value: function __isRealInline() {
        return false;
      }
    }, {
      key: "isMulti",
      get: function get() {
        return this.__isMulti;
      }
    }, {
      key: "currentProps",
      get: function get() {
        return this.__currentProps;
      }
    }], [{
      key: "REGISTER",
      get: function get() {
        return REGISTER$1;
      }
    }, {
      key: "getRegister",
      value: function getRegister(name) {
        if (!name || !util.isString(name) || name.charAt(0) !== '$') {
          throw new Error('Invalid param');
        }

        if (!REGISTER$1.hasOwnProperty(name)) {
          throw new Error("Geom has not register: ".concat(name));
        }

        return REGISTER$1[name];
      }
    }, {
      key: "register",
      value: function register(name, obj) {
        if (!name || !util.isString(name) || name.charAt(0) !== '$' || !obj.prototype || !(obj.prototype instanceof Geom)) {
          throw new Error('Invalid param');
        }

        if (Geom.hasRegister(name)) {
          throw new Error("Geom has already register: ".concat(name));
        }

        REGISTER$1[name] = obj;
      }
    }, {
      key: "hasRegister",
      value: function hasRegister(name) {
        return name && REGISTER$1.hasOwnProperty(name);
      }
    }, {
      key: "delRegister",
      value: function delRegister(name) {
        if (Geom.hasRegister(name)) {
          delete REGISTER$1[name];
        }
      }
    }]);

    return Geom;
  }(Xom$1);

  var _enums$NODE_KEY$7 = enums.NODE_KEY,
      NODE_STYLE$4 = _enums$NODE_KEY$7.NODE_STYLE,
      NODE_CURRENT_STYLE$4 = _enums$NODE_KEY$7.NODE_CURRENT_STYLE,
      NODE_COMPUTED_STYLE$2 = _enums$NODE_KEY$7.NODE_COMPUTED_STYLE,
      NODE_DOM_PARENT$4 = _enums$NODE_KEY$7.NODE_DOM_PARENT,
      NODE_MATRIX$2 = _enums$NODE_KEY$7.NODE_MATRIX,
      NODE_MATRIX_EVENT$3 = _enums$NODE_KEY$7.NODE_MATRIX_EVENT,
      NODE_STRUCT$3 = _enums$NODE_KEY$7.NODE_STRUCT;
  var TYPE_VD$3 = $$type.TYPE_VD,
      TYPE_GM$3 = $$type.TYPE_GM,
      TYPE_CP$3 = $$type.TYPE_CP;
  var updateList = [];
  var removeList = [];
  var KEY_FLAG = {};
  /**
   * setState后刷新前先根遍历检查组件开始进行shouldComponentUpdate判断
   */

  function check(vd) {
    if (vd instanceof Dom$1) {
      vd.children.forEach(function (child) {
        if (child instanceof Dom$1) {
          check(child);
        } // 当组件有setState更新时，从叶子到根链路会标识__hasUpdate，以便节约遍历成本忽略那些没变化的链路
        else if (child instanceof Component$1 && child.__hasUpdate) {
            child.__hasUpdate = false;
            checkCp(child, child.props);
          }
      });
    } // 高阶组件会进入此分支，被父组件调用
    else if (vd instanceof Component$1 && vd.__hasUpdate) {
        vd.__hasUpdate = false;
        checkCp(vd, vd.props);
      }
  }
  /**
   * 检查cp是否有state变更，注意递归检查时需要看shadow不能看shadowRoot，
   * 否则高阶组件会被跳过，其更新无法触发update生命周期
   * @param cp
   * @param nextProps
   * @param forceCheckUpdate，被render()后的json的二级组件，发现props有变更强制检查更新，否则可以跳过
   */


  function checkCp(cp, nextProps, forceCheckUpdate) {
    if (cp.__nextState || forceCheckUpdate) {
      var shouldUpdate;

      if (util.isFunction(cp.shouldComponentUpdate)) {
        shouldUpdate = cp.shouldComponentUpdate(nextProps, cp.__nextState || cp.state);
      } else {
        // 没有默认更新
        shouldUpdate = true;
      }

      if (shouldUpdate) {
        updateCp(cp, nextProps, cp.__nextState || cp.state);
      } // 不更新则递归检查子tree的cp
      else {
          cp.props = nextProps;
          cp.state = cp.__nextState || cp.state;
          check(cp.shadow);
        }
    } else {
      check(cp.shadow);
    }
  }
  /**
   * 更新组件的props和state，清空__nextState
   * @param cp
   * @param props
   * @param state
   */


  function updateCp(cp, props, state) {
    cp.props = props;
    cp.state = state;
    cp.__nextState = null; // 同步在refresh前清除component的新state标识，这样frame动画在after回调中可以新设

    var oldS = cp.shadow;
    var oldSr = cp.shadowRoot;
    var oldJson = cp.__cd;
    var json = flattenJson(cp.render()); // 对比新老render()返回的内容，更新后重新生成sr

    diffSr(oldS, oldJson, json);

    cp.__init(json); // 为了局部dom布局需要知道老的css信息


    var sr = cp.shadowRoot;

    if (sr instanceof Xom$1) {
      ['__outerWidth', '__outerHeight', '__sx', '__sy', '__sx2', '__sx3', '__sx4', '__sx5', '__sx6', '__sy2', '__sy3', '__sy4', '__sy5', '__sy6'].forEach(function (k) {
        sr[k] = oldSr[k];
      });
      sr.__computedStyle = sr.__config[NODE_COMPUTED_STYLE$2] = oldSr.computedStyle;
    } else {
      var domParent = cp.domParent;
      [NODE_STYLE$4, NODE_CURRENT_STYLE$4, NODE_COMPUTED_STYLE$2, NODE_MATRIX$2, NODE_MATRIX_EVENT$3].forEach(function (k) {
        sr.__config[k] = domParent.__config[k];
      });
    }

    ['__x', '__y', '__width', '__height', '__sx1', // text和xom
    '__sy1', '__layoutData', '__parent', '__domParent'].forEach(function (k) {
      sr[k] = oldSr[k];
    });
    sr.__config[NODE_DOM_PARENT$4] = oldSr.domParent;
    sr.__config[NODE_STRUCT$3] = oldSr.__config[NODE_STRUCT$3];
    updateList.push(cp); // 老的需回收，diff会生成新的dom，唯一列外是cp直接返回一个没变化的cp

    if (!util.isObject(json) || !json.__placeholder) {
      removeList.push(oldS);
    } // 子组件使用老的json时标识，更新后删除，render()返回空会没json对象


    if (json && json.__placeholder) {
      delete json.__placeholder;
    }

    if (json && json.__inheritAnimate) {
      delete json.__inheritAnimate;
    }

    if (json && json.__animateRecords) {
      delete json.__animateRecords;
    } // 高阶组件时需判断，子组件更新后生成新的sr，父组件的sr/host需要同时更新引用


    var host = cp.host;

    while (host) {
      if (host.shadow === cp) {
        host.__shadowRoot = sr;
        sr.__hostRoot = host;
        cp = host;
        host = host.host;
      } else {
        break;
      }
    }
  }
  /**
   * 非一级组件sr进行对比，key相同的无需重新生成且继承动画
   * @param vd
   * @param oj oldJson
   * @param nj
   */


  function diffSr(vd, oj, nj) {
    // 先遍历检查key相同的，将没有变化的key暂存下来，深度优先，这样叶子节点出现在前面，当key的叶子也有key时，确保叶子先对比
    var ojk = getKeyHash(oj, {}, vd);
    var njk = getKeyHash(nj, {});
    var keyList = [];
    var cpList = []; // 先对比key对应的节点，如果新老有一方对不上则落空

    Object.keys(ojk).forEach(function (k) {
      var o = ojk[k];
      var n = njk[k];

      if (!n) {
        o.json.key = KEY_FLAG;
      }
    });
    Object.keys(njk).forEach(function (k) {
      var o = ojk[k];
      var n = njk[k]; // 有可能老的没有这个key，新key落空

      if (!o) {
        n.json.key = KEY_FLAG;
        return;
      }

      var oj = o.json;
      var nj = n.json;
      var vd = o.vd; // 相同class的组件进行对比替换

      if (oj.$$type === TYPE_CP$3 && nj.$$type === TYPE_CP$3) {
        if (oj.klass === nj.klass) {
          // 对比props和children看是否全等，是则直接替换新json类型为占位符，引用老vd，否则强制更新
          diffCp(oj, nj, vd); // 标识对比过了

          oj.key = nj.key = KEY_FLAG; // 老的sr里需删除这个vd，因为老sr会回收

          cpList.push(vd);
        }
      } // 相同类型的vd进行对比继承动画
      else if (oj.$$type === nj.$$type && oj.tagName === nj.tagName) {
          // 需判断矢量标签mutil是否相等
          if (nj.$$type !== TYPE_GM$3 || oj.props.multi === nj.props.multi) {
            nj.__inheritAnimate = vd;
          }

          oj.key = nj.key = KEY_FLAG; // key相同的dom暂存下来

          if (nj.$$type === TYPE_VD$3) {
            keyList.push({
              vd: vd,
              oj: oj,
              nj: nj
            });
          }
        }
    }); // key相同的dom对比children，下面非key逻辑就不做了

    keyList.forEach(function (item) {
      diffChildren(item.vd, item.oj, item.nj);
    }); // 整体tree进行对比

    diffChild(vd, oj, nj); // 已更新的cp需被老sr删除，因为老sr会回收，而此cp继续存在于新sr中不能回收，这里处理key的

    cpList.forEach(function (vd) {
      removeCpFromOldTree(vd);
    });
  }
  /**
   * 递归检查dom的children，相同的无需重新生成，用PL类型占位符代替直接返回老vd
   * @param vd
   * @param oj
   * @param nj
   */


  function diffChild(vd, oj, nj) {
    if (util.isObject(nj)) {
      if (nj.$$type === TYPE_CP$3) {
        // key对比过了忽略
        if (nj.key === KEY_FLAG) {
          return;
        } // 相同class的组件处理


        if (oj && oj.$$type === nj.$$type && oj.klass === nj.klass) {
          diffCp(oj, nj, vd); // 已更新的cp需被老sr删除，因为老sr会回收，而此cp继续存在于新sr中不能回收

          removeCpFromOldTree(vd);
        }
      } else if (nj.$$type === TYPE_GM$3 && oj && oj.$$type === TYPE_GM$3) {
        // $geom的multi必须一致
        if (oj.tagName === nj.tagName && oj.props.multi === nj.props.multi) {
          nj.__inheritAnimate = vd;
        }
      } // dom类型递归children
      else if (nj.$$type === TYPE_VD$3 && oj && oj.$$type === TYPE_VD$3) {
          if (oj.tagName === nj.tagName) {
            nj.__inheritAnimate = vd;
          }

          diffChildren(vd, oj, nj);
        }
    }
  }
  /**
   * dom类型的vd对比children
   * @param vd
   * @param oj
   * @param nj
   */


  function diffChildren(vd, oj, nj) {
    var oc = oj.children;
    var nc = nj.children;
    var ol = oc.length;
    var nl = nc.length;
    var children = vd.children;

    for (var i = 0, of = 0, nf = 0, len = Math.min(ol, nl); i < len; i++) {
      var o = oc[i + of];
      var n = nc[i + nf]; // 新老都是key直接跳过

      if (o.key === KEY_FLAG && n.key === KEY_FLAG) ; // 其中一个是key对比过了调整索引和长度
      else if (o.key === KEY_FLAG) {
          of++;
          i--;
          ol--;
          len = Math.min(ol, nl);
        } else if (n.key === KEY_FLAG) {
          nf++;
          i--;
          nl--;
          len = Math.min(ol, nl);
        } else {
          diffChild(children[i + of], o, n);
        }
    } // 长度不同增减的无需关注，新json创建cp有didMount，老vd会调用cp的destroy

  }
  /**
   * 根据json对比看cp如何更新，被render()后的json的二级组件对比才会出现
   * @param oj
   * @param nj
   * @param vd
   */


  function diffCp(oj, nj, vd) {
    // props全等，直接替换新json类型为占位符，引用老vd内容，无需重新创建，暂时存在json的placeholder上
    // 否则需要强制触发组件更新，包含setState内容
    nj.__placeholder = vd;
    var sr = vd.shadowRoot; // 对比需忽略on开头的事件，直接改老的引用到新的上，这样只变了on的话无需更新

    var exist = {};
    Object.keys(oj.props).forEach(function (k) {
      var v = oj.props[k];
      exist[k] = v;
    });
    Object.keys(nj.props).forEach(function (k) {
      var v = nj.props[k];

      if (/^on[a-zA-Z]/.test(k)) {
        oj.props[k] = v;
        var ex = exist[k];

        if (ex) {
          delete exist[k];

          if (ex !== v) {
            k = k.slice(2).toLowerCase();
            sr.listener[k] = v;
          }
        } else {
          k = k.slice(2).toLowerCase();
          sr.listener[k] = v;
        }
      } else if (/^on-[a-zA-Z\d_$]/.test(k)) {
        oj.props[k] = v;
        var _ex = exist[k];

        if (_ex) {
          delete exist[k];

          if (_ex !== v) {
            k = k.slice(2).toLowerCase();
            vd.off(k, exist[k]);
            vd.on(k, v);
          }

          delete exist[k];
        } else {
          k = k.slice(2).toLowerCase();
          vd.on(k, v);
        }
      }
    }); // 新的少的事件取消

    Object.keys(exist).forEach(function (k) {
      var v = exist[k];

      if (/^on[a-zA-Z]/.test(k)) {
        nj.props[k] = v;
        k = k.slice(2).toLowerCase();
        delete sr.listener[k];
      } else if (/^on-[a-zA-Z\d_$]/.test(k)) {
        nj.props[k] = v;
        k = k.slice(2).toLowerCase();
        vd.off(k, v);
      }
    });
    checkCp(vd, nj.props, !util.equal(oj.props, nj.props));
  }
  /**
   * 深度优先遍历json，将有key的记录在hash中，如果传入根vd，同步递归保存对应位置的vd
   * @param json
   * @param hash
   * @param vd
   * @returns {*}
   */


  function getKeyHash(json, hash, vd) {
    if (Array.isArray(json)) {
      json.forEach(function (item, i) {
        return getKeyHash(item, hash, vd && vd[i]);
      });
    } else if (util.isObject(json)) {
      if (json.$$type === TYPE_VD$3 || json.$$type === TYPE_GM$3 || json.$$type === TYPE_CP$3) {
        // 深度优先
        if (json.$$type === TYPE_VD$3) {
          getKeyHash(json.children, hash, vd && vd.children);
        }

        var key = json.props.key;

        if (!util.isNil(key) && key !== '') {
          // 重复key错误警告
          if (hash.hasOwnProperty(key)) {
            inject.warn('Component ' + vd.tagName + ' has duplicate key: ' + key);
          }

          hash[key] = {
            json: json,
            vd: vd
          };
        }
      }
    }

    return hash;
  }
  /**
   * 非一级组件diff发生更新时，其需要从sr的tree中移除，因为sr会销毁
   */


  function removeCpFromOldTree(vd) {
    // root下的一级组件不会发生回收情况，忽略
    if (!vd.host) {
      return;
    }

    var parent = vd.parent;

    if (parent) {
      var i = parent.children.indexOf(vd);

      if (i > -1) {
        parent.children[i] = null;
      } else {
        throw new Error('Can not find child: ' + vd.tagName);
      }
    }
  }
  /**
   * 执行componentDidUpdate/destroy
   */


  function did() {
    updateList.forEach(function (item) {
      if (util.isFunction(item.componentDidUpdate)) {
        item.componentDidUpdate();
      }
    });
    updateList.splice(0);
    removeList.forEach(function (item) {
      item.__destroy();
    });
    removeList = [];
  }

  var updater = {
    updateList: updateList,
    check: check,
    did: did
  };

  var joinVd$1 = util.joinVd,
      joinDef$1 = util.joinDef;
  var contain$1 = o$3.contain,
      NONE$1 = o$3.NONE,
      TRANSFORM_ALL = o$3.TRANSFORM_ALL,
      OPACITY$4 = o$3.OPACITY,
      FILTER$4 = o$3.FILTER,
      MIX_BLEND_MODE$2 = o$3.MIX_BLEND_MODE;

  function diff$1(elem, ovd, nvd) {
    var cns = elem.childNodes;
    diffDefs(cns[0], ovd.defs, nvd.defs); // <REPAINT不会有lv属性，无需对比

    if (!nvd.hasOwnProperty('lv')) {
      diffBb(cns[1], ovd.bb, nvd.bb);
    }

    diffD2D(elem, ovd, nvd, true);
  }

  function diffDefs(elem, od, nd) {
    var ol = od.length;
    var nl = nd.length;
    var i = 0;
    var cns = elem.childNodes;

    for (; i < Math.min(ol, nl); i++) {
      diffDef(cns[i], od[i], nd[i]);
    }

    if (i < ol) {
      for (var j = ol - 1; j >= i; j--) {
        removeAt(elem, cns, j);
      }
    } else if (i < nl) {
      for (; i < nl; i++) {
        insertAt(elem, cns, i, joinDef$1(nd[i]));
      }
    }
  }

  function diffDef(elem, od, nd) {
    if (od.tagName !== nd.tagName) {
      insertAdjacentHTML(elem, 'beforebegin', joinDef$1(nd)); // elem.insertAdjacentHTML('beforebegin', joinDef(nd));

      elem.parentNode.removeChild(elem);
    } else {
      if (od.uuid !== nd.uuid) {
        elem.setAttribute('id', nd.uuid);
      }

      var op = {};

      for (var _i = 0, len = (od.props || []).length; _i < len; _i++) {
        var prop = od.props[_i];

        var _prop = _slicedToArray(prop, 2),
            k = _prop[0],
            v = _prop[1];

        op[k] = v;
      }

      for (var _i2 = 0, _len = (nd.props || []).length; _i2 < _len; _i2++) {
        var _prop2 = nd.props[_i2];

        var _prop3 = _slicedToArray(_prop2, 2),
            _k = _prop3[0],
            _v = _prop3[1]; // 已有不等更新，没有添加


        if (op.hasOwnProperty(_k)) {
          if (op[_k] !== _v) {
            elem.setAttribute(_k, _v);
          }

          delete op[_k];
        } else {
          elem.setAttribute(_k, _v);
        }
      } // 多余的删除


      Object.keys(op).forEach(function (i) {
        elem.removeAttribute(i);
      });
      var cns = elem.childNodes;
      var ol = od.children.length;
      var nl = nd.children.length;
      var i = 0;

      for (; i < Math.min(ol, nl); i++) {
        diffItem(elem, i, od.children[i], nd.children[i]);
      }

      if (i < ol) {
        for (var j = ol - 1; j >= i; j--) {
          removeAt(elem, cns, j);
        }
      } else if (i < nl) {
        for (; i < nl; i++) {
          insertAt(elem, cns, i, joinVd$1(nd.children[i]));
        }
      }
    }
  }

  function diffChild$1(elem, ovd, nvd) {
    if (ovd.type === 'dom') {
      if (nvd.type === 'dom') {
        diffD2D(elem, ovd, nvd);
      } else if (nvd.type === 'geom') {
        diffD2G(elem, ovd, nvd);
      } else {
        replaceWith(elem, nvd);
      }
    } else if (ovd.type === 'text') {
      if (nvd.type === 'text') {
        diffT2T(elem, ovd, nvd);
      } else {
        replaceWith(elem, nvd);
      }
    } else if (ovd.type === 'geom') {
      if (nvd.type === 'dom') {
        diffG2D(elem, ovd, nvd);
      } else if (nvd.type === 'geom') {
        diffG2G(elem, ovd, nvd);
      } else {
        replaceWith(elem, nvd);
      }
    } else if (ovd.type === 'img') {
      if (nvd.type === 'img') {
        diffItemSelf(elem, ovd, nvd);
      } else {
        replaceWith(elem, nvd);
      }
    }
  }

  function diffX2X(elem, ovd, nvd) {
    var transform = nvd.transform,
        opacity = nvd.opacity,
        visibility = nvd.visibility,
        mask = nvd.mask,
        overflow = nvd.overflow,
        filter = nvd.filter,
        mixBlendMode = nvd.mixBlendMode,
        conClip = nvd.conClip;

    if (ovd.transform !== transform) {
      if (transform) {
        elem.setAttribute('transform', transform);
      } else {
        elem.removeAttribute('transform');
      }
    }

    if (ovd.opacity !== opacity) {
      if (opacity !== 1 && opacity !== undefined) {
        elem.setAttribute('opacity', opacity);
      } else {
        elem.removeAttribute('opacity');
      }
    }

    if (ovd.visibility !== visibility) {
      elem.setAttribute('visibility', visibility);
    }

    if (ovd.mask !== mask) {
      if (mask) {
        elem.setAttribute('mask', mask);
      } else {
        elem.removeAttribute('mask');
      }
    }

    if (ovd.filter !== filter || ovd.mixBlendMode !== mixBlendMode) {
      var s = (filter ? "filter:".concat(filter, ";") : '') + (mixBlendMode ? "mix-blend-mode:".concat(mixBlendMode, ";") : '');

      if (s) {
        elem.setAttribute('style', s);
      } else {
        elem.removeAttribute('filter');
      }
    } // if(ovd.filter !== filter) {
    //   if(filter) {
    //     elem.setAttribute('filter', filter);
    //   }
    //   else {
    //     elem.removeAttribute('filter');
    //   }
    // }


    if (ovd.overflow !== overflow) {
      if (overflow) {
        elem.setAttribute('clipPath', overflow);
      } else {
        elem.removeAttribute('overflow');
      }
    }

    if (ovd.conClip !== conClip) {
      if (conClip) {
        elem.childNodes[1].setAttribute('clip-path', conClip);
      } else {
        elem.childNodes[1].removeAttribute('clip-path');
      }
    }
  }

  function diffByLessLv(elem, ovd, nvd, lv) {
    var transform = nvd.transform,
        opacity = nvd.opacity,
        mask = nvd.mask,
        filter = nvd.filter,
        mixBlendMode = nvd.mixBlendMode;

    if (mask) {
      elem.setAttribute('mask', mask);
    } else {
      elem.removeAttribute('mask');
    }

    if (lv === NONE$1) {
      return;
    }

    if (contain$1(lv, TRANSFORM_ALL)) {
      if (transform) {
        elem.setAttribute('transform', transform);
      } else {
        elem.removeAttribute('transform');
      }
    }

    if (contain$1(lv, OPACITY$4)) {
      if (opacity !== 1 && opacity !== undefined) {
        elem.setAttribute('opacity', opacity);
      } else {
        elem.removeAttribute('opacity');
      }
    }

    if (contain$1(lv, FILTER$4) || contain$1(lv, MIX_BLEND_MODE$2)) {
      var s = (filter ? "filter:".concat(filter, ";") : '') + (mixBlendMode ? "mix-blend-mode:".concat(mixBlendMode, ";") : '');

      if (s) {
        elem.setAttribute('style', s);
      } else {
        elem.removeAttribute('style');
      }
    }
  }

  function diffD2D(elem, ovd, nvd, root) {
    // cache表明children无变化缓存，一定是REPAINT以下的，只需看自身的lv以及mask
    if (nvd.cache) {
      diffByLessLv(elem, ovd, nvd, nvd.lv);
      return;
    } // 无cache且<REPAINT的情况快速对比且继续对比children


    if (nvd.hasOwnProperty('lv')) {
      diffByLessLv(elem, ovd, nvd, nvd.lv);
    } else {
      diffX2X(elem, ovd, nvd);

      if (!root) {
        diffBb(elem.firstChild, ovd.bb, nvd.bb);
      }
    }

    var ol = ovd.children.length;
    var nl = nvd.children.length;
    var i = 0;
    var lastChild = elem.lastChild;
    var cns = lastChild.childNodes;

    for (; i < Math.min(ol, nl); i++) {
      diffChild$1(cns[i], ovd.children[i], nvd.children[i]);
    }

    if (i < ol) {
      for (var j = ol - 1; j >= i; j--) {
        removeAt(lastChild, cns, j);
      }
    } else if (i < nl) {
      for (; i < nl; i++) {
        insertAt(lastChild, cns, i, joinVd$1(nvd.children[i]));
      }
    }
  }

  function diffD2G(elem, ovd, nvd) {
    diffX2X(elem, ovd, nvd);
    diffBb(elem.firstChild, ovd.bb, nvd.bb);
    var ol = ovd.children.length;
    var nl = nvd.children.length;
    var i = 0;
    var lastChild = elem.lastChild;
    var cns = lastChild.childNodes;

    for (; i < Math.min(ol, nl); i++) {
      replaceWith(cns[i], nvd.children[i]);
    }

    if (i < ol) {
      for (var j = ol - 1; j >= i; j--) {
        removeAt(lastChild, cns, j);
      }
    } else if (i < nl) {
      for (; i < nl; i++) {
        insertAt(lastChild, cns, i, joinVd$1(nvd.children[i]));
      }
    }
  }

  function diffT2T(elem, ovd, nvd) {
    if (nvd.cache) {
      return;
    }

    var ol = ovd.children.length;
    var nl = nvd.children.length;
    var i = 0;

    for (; i < Math.min(ol, nl); i++) {
      diffItem(elem, i, ovd.children[i], nvd.children[i], true);
    }

    var cns = elem.childNodes;

    if (i < ol) {
      for (var j = ol - 1; j >= i; j--) {
        removeAt(elem, cns, j);
      }
    } else if (i < nl) {
      for (; i < nl; i++) {
        insertAt(elem, cns, i, joinVd$1(nvd.children[i]));
      }
    }
  }

  function diffG2D(elem, ovd, nvd) {
    diffD2G(elem, ovd, nvd);
  }

  function diffG2G(elem, ovd, nvd) {
    if (nvd.cache) {
      diffByLessLv(elem, ovd, nvd, nvd.lv);
      return;
    } // 无cache且<REPAINT的情况快速对比且继续对比children


    if (nvd.hasOwnProperty('lv')) {
      diffByLessLv(elem, ovd, nvd, nvd.lv);
    } else {
      diffX2X(elem, ovd, nvd);
      diffBb(elem.firstChild, ovd.bb, nvd.bb);
      var ol = ovd.children.length;
      var nl = nvd.children.length;
      var i = 0;
      var lastChild = elem.lastChild;
      var cns = lastChild.childNodes;

      for (; i < Math.min(ol, nl); i++) {
        diffItem(lastChild, i, ovd.children[i], nvd.children[i]);
      }

      if (i < ol) {
        for (var j = ol - 1; j >= i; j--) {
          removeAt(lastChild, cns, j);
        }
      } else if (i < nl) {
        for (; i < nl; i++) {
          insertAt(lastChild, cns, i, joinVd$1(nvd.children[i]));
        }
      }
    }
  }

  function diffBb(elem, obb, nbb) {
    var ol = obb.length;
    var nl = nbb.length;
    var i = 0;

    for (; i < Math.min(ol, nl); i++) {
      diffItem(elem, i, obb[i], nbb[i]);
    }

    var cns = elem.childNodes;

    if (i < ol) {
      for (var j = ol - 1; j >= i; j--) {
        removeAt(elem, cns, j);
      }
    } else if (i < nl) {
      for (; i < nl; i++) {
        insertAt(elem, cns, i, joinVd$1(nbb[i]));
      }
    }
  }

  function diffItem(elem, i, ovd, nvd, isText) {
    var cns = elem.childNodes;

    if (ovd.tagName !== nvd.tagName) {
      replaceWith(cns[i], nvd);
    } else {
      diffItemSelf(cns[i], ovd, nvd);

      if (isText && ovd.content !== nvd.content) {
        cns[i].innerHTML = nvd.content;
      }
    }
  }

  function diffItemSelf(elem, ovd, nvd) {
    if (nvd.cache) {
      return;
    }

    var op = {};

    for (var i = 0, len = (ovd.props || []).length; i < len; i++) {
      var prop = ovd.props[i];

      var _prop4 = _slicedToArray(prop, 2),
          k = _prop4[0],
          v = _prop4[1];

      op[k] = v;
    }

    for (var _i3 = 0, _len2 = (nvd.props || []).length; _i3 < _len2; _i3++) {
      var _prop5 = nvd.props[_i3];

      var _prop6 = _slicedToArray(_prop5, 2),
          _k2 = _prop6[0],
          _v2 = _prop6[1]; // 已有不等更新，没有添加


      if (op.hasOwnProperty(_k2)) {
        if (op[_k2] !== _v2) {
          elem.setAttribute(_k2, _v2);
        }

        delete op[_k2];
      } else {
        elem.setAttribute(_k2, _v2);
      }
    } // 多余的删除


    Object.keys(op).forEach(function (i) {
      elem.removeAttribute(i);
    });
  }

  function replaceWith(elem, vd) {
    var res;

    if (Array.isArray(vd)) {
      res = '';
      vd.forEach(function (item) {
        res += joinVd$1(item);
      });
    } else {
      res = joinVd$1(vd);
    }

    insertAdjacentHTML(elem, 'beforebegin', res); // elem.insertAdjacentHTML('beforebegin', res);

    elem.parentNode.removeChild(elem);
  }

  function insertAt(elem, cns, index, html) {
    if (index >= cns.length) {
      insertAdjacentHTML(elem, 'beforeend', html); // elem.insertAdjacentHTML('beforeend', html);
    } else {
      insertAdjacentHTML(cns[index], 'beforebegin', html); // cns[index].insertAdjacentHTML('beforebegin', html);
    }
  }

  function removeAt(elem, cns, index) {
    if (cns[index]) {
      elem.removeChild(cns[index]);
    }
  }

  var svg;

  function insertAdjacentHTML(elem, where, content) {
    if (elem.insertAdjacentHTML) {
      elem.insertAdjacentHTML(where, content);
    } else {
      switch (where) {
        case 'beforeend':
          elem.innerHTML += content;
          break;

        case 'beforebegin':
          svg = svg || document.createElement('svg');
          svg.innerHTML = content;
          elem.parentNode.insertBefore(svg.childNodes[0], elem);
          break;
      }
    }
  }

  var isFunction$6 = util.isFunction;

  var Controller = /*#__PURE__*/function () {
    function Controller() {
      _classCallCheck(this, Controller);

      this.__records = []; // 默认记录和自动记录

      this.__records2 = []; // 非自动播放的动画记录

      this.__list = []; // 默认初始化播放列表，自动播放也存这里

      this.__list2 = []; // json中autoPlay为false的初始化存入这里

      this.__onList = []; // list中已存在的侦听事件，list2初始化时也需要增加上

      this.__lastTime = {}; // 每个类型的上次触发时间，防止重复emit
    }

    _createClass(Controller, [{
      key: "add",
      value: function add(v) {
        var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.list;

        if (list.indexOf(v) === -1) {
          list.push(v);
        }
      }
    }, {
      key: "remove",
      value: function remove(v) {
        var i = this.list.indexOf(v);

        if (i > -1) {
          this.list.splice(i, 1);
        }
      }
    }, {
      key: "__destroy",
      value: function __destroy() {
        this.__records = [];
        this.__records2 = [];
        this.__list = [];
        this.__list2 = [];
      }
    }, {
      key: "__action",
      value: function __action(k, args) {
        this.list.forEach(function (item) {
          item[k].apply(item, args);
        });
      }
    }, {
      key: "init",
      value: function init() {
        var _this = this;

        var records = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.__records;
        var list = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.list;

        // 检查尚未初始化的record，并初始化，后面才能调用各种控制方法
        if (records.length) {
          // 清除防止重复调用，并且新的json还会进入整体逻辑
          records.splice(0).forEach(function (item) {
            var target = item.target,
                animate = item.animate;

            if (target.isDestroyed) {
              return;
            }

            if (Array.isArray(animate)) {
              animate.forEach(function (animate) {
                var value = animate.value,
                    options = animate.options;
                options.autoPlay = false;
                var o = target.animate(value, options);

                _this.add(o, list);
              });
            } else {
              var value = animate.value,
                  options = animate.options;
              options.autoPlay = false;
              var o = target.animate(value, options);

              _this.add(o, list);
            }
          });
        } // 非自动播放后初始化需检测事件，给非自动播放添加上，并清空本次


        if (records === this.__records2) {
          var onList = this.__onList;
          var list2 = this.list2;

          if (list2.length && onList.length) {
            list2.forEach(function (item) {
              onList.forEach(function (arr) {
                item.off(arr[0], arr[1]);
                item.on(arr[0], arr[1]);
              });
            });
          }
        }
      }
    }, {
      key: "__playAuto",
      value: function __playAuto() {
        this.init();

        this.__action('play');
      }
    }, {
      key: "play",
      value: function play(cb) {
        this.__mergeAuto();

        this.__onList = [];
        var once = true;

        this.__action('play', [cb && function (diff) {
          if (once) {
            once = false;

            if (isFunction$6(cb)) {
              cb(diff);
            }
          }
        }]);
      }
    }, {
      key: "pause",
      value: function pause() {
        this.__action('pause');
      }
    }, {
      key: "resume",
      value: function resume(cb) {
        var once = true;

        this.__action('resume', [cb && function (diff) {
          if (once) {
            once = false;

            if (isFunction$6(cb)) {
              cb(diff);
            }
          }
        }]);
      }
    }, {
      key: "__mergeAuto",
      value: function __mergeAuto() {
        this.init();
        this.init(this.__records2);

        if (this.__list2.length) {
          this.__list = this.__list.concat(this.__list2);
          this.__list2 = [];
        }
      }
    }, {
      key: "cancel",
      value: function cancel(cb) {
        this.__mergeAuto();

        this.__onList = [];
        var once = true;

        this.__action('cancel', [cb && function (diff) {
          if (once) {
            once = false;

            if (isFunction$6(cb)) {
              cb(diff);
            }
          }
        }]);
      }
    }, {
      key: "finish",
      value: function finish(cb) {
        this.__mergeAuto();

        this.__onList = [];
        var once = true;

        this.__action('finish', [cb && function (diff) {
          if (once) {
            once = false;

            if (isFunction$6(cb)) {
              cb(diff);
            }
          }
        }]);
      }
    }, {
      key: "gotoAndStop",
      value: function gotoAndStop(v, options, cb) {
        this.__mergeAuto();

        this.__onList = [];
        var once = true;

        this.__action('gotoAndStop', [v, options, cb && function (diff) {
          if (once) {
            once = false;

            if (isFunction$6(cb)) {
              cb(diff);
            }
          }
        }]);
      }
    }, {
      key: "gotoAndPlay",
      value: function gotoAndPlay(v, options, cb) {
        this.__mergeAuto();

        this.__onList = [];
        var once = true;

        this.__action('gotoAndPlay', [v, options, cb && function (diff) {
          if (once) {
            once = false;

            if (isFunction$6(cb)) {
              cb(diff);
            }
          }
        }]);
      }
    }, {
      key: "on",
      value: function on(id, handle) {
        if (!isFunction$6(handle)) {
          return;
        }

        if (Array.isArray(id)) {
          for (var i = 0, len = id.length; i < len; i++) {
            this.__on(id[i], handle);
          }

          this.__onList.push([id, handle]);
        } else {
          this.__on(id, handle);

          this.__onList.push([id, handle]);
        }
      }
    }, {
      key: "__on",
      value: function __on(id, handle) {
        var _this2 = this;

        this.list.forEach(function (item) {
          var cb = function cb() {
            var time = item.timestamp;

            if (time !== _this2.__lastTime[id]) {
              _this2.__lastTime[id] = time;
              handle();
            }
          };

          cb.__karasEventCb = handle;
          item.on(id, cb);
        });
      }
    }, {
      key: "off",
      value: function off(id, handle) {
        if (Array.isArray(id)) {
          for (var i = 0, len = id.length; i < len; i++) {
            this.off(id[i], handle);
          }
        } else {
          this.list.forEach(function (item) {
            item.off(id, handle);
          });
        }
      }
    }, {
      key: "list",
      get: function get() {
        return this.__list;
      }
    }, {
      key: "list2",
      get: function get() {
        return this.__list2;
      }
    }, {
      key: "__set",
      value: function __set(key, value) {
        this.list.forEach(function (item) {
          item[key] = value;
        });
      }
    }, {
      key: "playbackRate",
      set: function set(v) {
        this.__set('playbackRate', v);
      }
    }, {
      key: "iterations",
      set: function set(v) {
        this.__set('iterations', v);
      }
    }, {
      key: "playCount",
      set: function set(v) {
        this.__set('playCount', v);
      }
    }, {
      key: "fps",
      set: function set(v) {
        this.__set('fps', v);
      }
    }, {
      key: "currentTime",
      set: function set(v) {
        this.__set('currentTime', v);
      }
    }, {
      key: "spfLimit",
      set: function set(v) {
        this.__set('spfLimit', v);
      }
    }, {
      key: "delay",
      set: function set(v) {
        this.__set('delay', v);
      }
    }, {
      key: "endDelay",
      set: function set(v) {
        this.__set('endDelay', v);
      }
    }, {
      key: "fill",
      set: function set(v) {
        this.__set('fill', v);
      }
    }, {
      key: "direction",
      set: function set(v) {
        this.__set('direction', v);
      }
    }]);

    return Controller;
  }();

  var canvasPolygon$7 = painter.canvasPolygon; // 无cache时应用离屏时的优先级，从小到大，OFFSCREEN_MASK2是个特殊的

  var OFFSCREEN_OVERFLOW = 0;
  var OFFSCREEN_FILTER = 1;
  var OFFSCREEN_MASK = 2;
  var OFFSCREEN_BLEND = 3;
  var OFFSCREEN_MASK2 = 4;

  function applyOffscreen(ctx, list, width, height) {
    list.sort(function (a, b) {
      if (a[1] === b[1]) {
        if (a[0] === b[0]) {
          return a[2] - b[2];
        }

        return b[0] - a[0];
      }

      return b[1] - a[1];
    });
    list.forEach(function (item) {
      var _item = _slicedToArray(item, 4),
          type = _item[2],
          offscreen = _item[3];

      if (type === OFFSCREEN_OVERFLOW) {
        var matrix = offscreen.matrix,
            target = offscreen.target,
            origin = offscreen.ctx,
            x = offscreen.x,
            y = offscreen.y,
            offsetWidth = offscreen.offsetWidth,
            offsetHeight = offscreen.offsetHeight,
            _list = offscreen.list;
        ctx.globalCompositeOperation = 'destination-in';
        ctx.globalAlpha = 1;
        ctx.setTransform(matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]);
        ctx.fillStyle = '#FFF';
        ctx.beginPath();

        if (_list) {
          canvasPolygon$7(ctx, _list);
        } else {
          ctx.rect(x, y, offsetWidth, offsetHeight);
        }

        ctx.fill();
        ctx.closePath();
        ctx.globalCompositeOperation = 'source-over';
        target.draw();
        ctx = origin;
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.globalAlpha = 1;
        ctx.drawImage(target.canvas, 0, 0, width, height, 0, 0, width, height);
        ctx.draw && ctx.draw(true);
        target.ctx.setTransform(1, 0, 0, 1, 0, 0);
        target.ctx.clearRect(0, 0, width, height);
        target.draw();
        inject.releaseCacheCanvas(target.canvas);
      } else if (type === OFFSCREEN_FILTER) {
        var _target = offscreen.target,
            _origin = offscreen.ctx,
            filter = offscreen.filter; // 申请一个新的离屏，应用blur并绘制，如没有则降级，默认ctx.filter为'none'

        if (ctx.filter) {
          var apply = inject.getCacheCanvas(width, height, null, 'filter');
          apply.ctx.filter = painter.canvasFilter(filter);
          apply.ctx.drawImage(_target.canvas, 0, 0, width, height, 0, 0, width, height);
          apply.ctx.filter = 'none';
          apply.draw();
          _target.ctx.globalAlpha = 1;

          _target.ctx.setTransform(1, 0, 0, 1, 0, 0);

          _target.ctx.clearRect(0, 0, width, height);

          _target.ctx.drawImage(apply.canvas, 0, 0, width, height, 0, 0, width, height);

          _target.draw();

          apply.ctx.setTransform(1, 0, 0, 1, 0, 0);
          apply.ctx.clearRect(0, 0, width, height);
          apply.draw();
          inject.releaseCacheCanvas(apply.canvas);
        } // 绘制回主画布，如果不支持则等同无filter原样绘制


        ctx = _origin;
        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.globalAlpha = 1;
        ctx.drawImage(_target.canvas, 0, 0, width, height, 0, 0, width, height);
        ctx.draw && ctx.draw(true);

        _target.ctx.setTransform(1, 0, 0, 1, 0, 0);

        _target.ctx.globalAlpha = 1;

        _target.ctx.clearRect(0, 0, width, height);

        _target.draw();

        inject.releaseCacheCanvas(_target.canvas);
      } else if (type === OFFSCREEN_MASK) {
        var mask = offscreen.mask,
            isClip = offscreen.isClip;

        if (isClip) {
          offscreen.target.draw();
          ctx = mask.ctx;
          ctx.globalCompositeOperation = 'source-out';
          ctx.globalAlpha = 1;
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.drawImage(offscreen.target.canvas, 0, 0, width, height, 0, 0, width, height);
          mask.draw();
          ctx.globalCompositeOperation = 'source-over';
          offscreen.target.ctx.setTransform(1, 0, 0, 1, 0, 0);
          offscreen.target.ctx.clearRect(0, 0, width, height);
          offscreen.target.draw();
          inject.releaseCacheCanvas(offscreen.target.canvas);
          ctx = offscreen.ctx;
          ctx.globalAlpha = 1;
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.drawImage(mask.canvas, 0, 0, width, height, 0, 0, width, height);
          ctx.draw && ctx.draw(true);
          mask.ctx.setTransform(1, 0, 0, 1, 0, 0);
          mask.ctx.clearRect(0, 0, width, height);
          mask.draw();
          inject.releaseCacheCanvas(mask.canvas);
        } else {
          mask.draw();
          var _target2 = offscreen.target;
          ctx = _target2.ctx;
          ctx.globalCompositeOperation = 'destination-in';
          ctx.globalAlpha = 1;
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.drawImage(mask.canvas, 0, 0, width, height, 0, 0, width, height);
          ctx.globalCompositeOperation = 'source-over';

          _target2.draw();

          mask.ctx.setTransform(1, 0, 0, 1, 0, 0);
          mask.ctx.clearRect(0, 0, width, height);
          mask.draw();
          inject.releaseCacheCanvas(mask.canvas);
          ctx = offscreen.ctx;
          ctx.globalAlpha = 1;
          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.drawImage(_target2.canvas, 0, 0, width, height, 0, 0, width, height);
          ctx.draw && ctx.draw(true);

          _target2.ctx.setTransform(1, 0, 0, 1, 0, 0);

          _target2.ctx.clearRect(0, 0, width, height);

          _target2.draw();

          inject.releaseCacheCanvas(_target2.canvas);
        }
      } else if (type === OFFSCREEN_BLEND) {
        var _target3 = offscreen.target;
        ctx = offscreen.ctx;
        ctx.globalCompositeOperation = offscreen.mixBlendMode;

        _target3.draw();

        ctx.setTransform(1, 0, 0, 1, 0, 0);
        ctx.globalAlpha = 1;
        ctx.drawImage(_target3.canvas, 0, 0, width, height, 0, 0, width, height);
        ctx.globalCompositeOperation = 'source-over';
        ctx.draw && ctx.draw(true);
        _target3.ctx.globalAlpha = 1;

        _target3.ctx.setTransform(1, 0, 0, 1, 0, 0);

        _target3.ctx.clearRect(0, 0, width, height);

        _target3.draw();

        inject.releaseCacheCanvas(_target3.canvas);
      } // 特殊的mask节点汇总结束，还原ctx
      else if (type === OFFSCREEN_MASK2) {
          ctx = offscreen.ctx;
        }
    });
    return ctx;
  }

  var offscreen = {
    OFFSCREEN_OVERFLOW: OFFSCREEN_OVERFLOW,
    OFFSCREEN_FILTER: OFFSCREEN_FILTER,
    OFFSCREEN_MASK: OFFSCREEN_MASK,
    OFFSCREEN_BLEND: OFFSCREEN_BLEND,
    OFFSCREEN_MASK2: OFFSCREEN_MASK2,
    applyOffscreen: applyOffscreen
  };

  var MockPage = function MockPage(texture, width, height) {
    _classCallCheck(this, MockPage);

    this.uuid = Page.genUuid();
    this.time = inject.now();
    this.texture = texture;
    this.width = width;
    this.height = height;
  };

  /**
   * 一个fbo离屏纹理，mock成cache，当webgl需要局部根节点汇总时生成，即cacheTotal，
   * 基于此纹理进行filter、mask等后处理渲染
   */

  var MockCache = /*#__PURE__*/function () {
    function MockCache(gl, texture, sx1, sy1, width, height, bbox) {
      _classCallCheck(this, MockCache);

      this.gl = gl;
      this.x = 0;
      this.y = 0;
      this.sx1 = sx1;
      this.sy1 = sy1;
      this.width = width;
      this.height = height;
      this.bbox = bbox;
      this.available = true;
      this.__page = new MockPage(texture, width, height);
      this.dx = -bbox[0];
      this.dy = -bbox[1];
      this.dbx = sx1 - bbox[0];
      this.dby = sy1 - bbox[1];
    }

    _createClass(MockCache, [{
      key: "release",
      value: function release() {
        this.available = false;
        this.gl.deleteTexture(this.page.texture);
      }
    }, {
      key: "page",
      get: function get() {
        return this.__page;
      }
    }]);

    return MockCache;
  }();

  var vertexBlur = "#version 100\n#define GLSLIFY 1\nattribute vec4 a_position;attribute vec2 a_texCoords;varying vec2 v_texCoordsBlur[3];uniform vec2 u_direction;void main(){gl_Position=a_position;}"; // eslint-disable-line

  var fragmentBlur = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoordsBlur[3];uniform sampler2D u_texture;void main(){gl_FragColor=vec4(0.0);}"; // eslint-disable-line

  var vertexMbm = "#version 100\n#define GLSLIFY 1\nattribute vec4 a_position;attribute vec2 a_texCoords;varying vec2 v_texCoords;void main(){gl_Position=a_position;v_texCoords=a_texCoords;}"; // eslint-disable-line

  var fragmentMultiply = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return((1.0-a2/a3)*c1*255.0+a2/a3*((1.0-a1)*c2*255.0+a1*c3*255.0))/255.0;}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=bottom*top;float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentScreen = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float op(float a,float b){return a+b-a*b;}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=vec3(op(bottom.r,top.r),op(bottom.g,top.g),op(bottom.b,top.b));float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentOverlay = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float op(float a,float b){return b<=0.5 ?(2.0*a*b):(a+2.0*b-1.0-a*(2.0*b-1.0));}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=vec3(op(top.r,bottom.r),op(top.g,bottom.g),op(top.b,bottom.b));float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentDarken = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float op(float a,float b){return min(a,b);}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=vec3(op(bottom.r,top.r),op(bottom.g,top.g),op(bottom.b,top.b));float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentLighten = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float op(float a,float b){return max(a,b);}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=vec3(op(bottom.r,top.r),op(bottom.g,top.g),op(bottom.b,top.b));float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentColorDodge = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float op(float a,float b){if(b==1.0){return a==0.0 ? a : 1.0;}return min(1.0,a/(1.0-b));}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=vec3(op(bottom.r,top.r),op(bottom.g,top.g),op(bottom.b,top.b));float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentColorBurn = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float op(float a,float b){if(b==0.0){return a==1.0 ? a : 0.0;}return 1.0-min(1.0,(1.0-a)/b);}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=vec3(op(bottom.r,top.r),op(bottom.g,top.g),op(bottom.b,top.b));float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentHardLight = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float op(float a,float b){return b<=0.5 ?(2.0*a*b):(a+2.0*b-1.0-a*(2.0*b-1.0));}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=vec3(op(bottom.r,top.r),op(bottom.g,top.g),op(bottom.b,top.b));float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentSoftLight = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float op(float a,float b){return b<=0.5? a-(1.0-2.0*b)*a*(1.0-a): a+(2.0*b-1.0)*(a<=0.25?((16.0*a-12.0)*a+4.0)*a: sqrt(a)-a);}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=vec3(op(bottom.r,top.r),op(bottom.g,top.g),op(bottom.b,top.b));float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentDifference = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float op(float a,float b){return abs(a-b);}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=vec3(op(bottom.r,top.r),op(bottom.g,top.g),op(bottom.b,top.b));float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentExclusion = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float op(float a,float b){return a+b-2.0*a*b;}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=vec3(op(bottom.r,top.r),op(bottom.g,top.g),op(bottom.b,top.b));float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentHue = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float getLuminosity(vec3 color){return 0.3*color[0]+0.59*color[1]+0.11*color[2];}float clipLowest(float channel,float lowestChannel,float luminosity){return luminosity+((channel-luminosity)*luminosity)/(luminosity-lowestChannel);}float clipHighest(float channel,float highestChannel,float luminosity){return luminosity+((channel-luminosity)*(1.0-luminosity))/(highestChannel-luminosity);}vec3 clipColor(vec3 rgb){float luminosity=getLuminosity(rgb);float lowestChannel=min(rgb[0],min(rgb[1],rgb[2]));float highestChannel=max(rgb[0],max(rgb[1],rgb[2]));float r=rgb[0],g=rgb[1],b=rgb[2];if(lowestChannel<0.0){r=clipLowest(r,lowestChannel,luminosity);g=clipLowest(g,lowestChannel,luminosity);b=clipLowest(b,lowestChannel,luminosity);}if(highestChannel>1.0){r=clipHighest(r,highestChannel,luminosity);g=clipHighest(g,highestChannel,luminosity);b=clipHighest(b,highestChannel,luminosity);}return vec3(r,g,b);}vec3 setLuminosity(vec3 rgb,float luminosity){float delta=luminosity-getLuminosity(rgb);float r=rgb[0],g=rgb[1],b=rgb[2];return clipColor(vec3(r+delta,g+delta,b+delta));}float getSaturation(vec3 rgb){return max(rgb[0],max(rgb[1],rgb[2]))-min(rgb[0],min(rgb[1],rgb[2]));}vec3 setSaturation(vec3 rgb,float saturation){float r=rgb[0],g=rgb[1],b=rgb[2];float maxC=0.0,minC=0.0,midC=0.0;int maxI=0,minI=0,midI=0;if(r>=g&&r>=b){maxI=0;maxC=r;if(g>=b){minI=2;midI=1;minC=b;midC=g;}else{minI=1;midI=2;minC=g;midC=b;}}else if(g>=r&&g>=b){maxI=1;maxC=g;if(r>=b){minI=2;midI=0;minC=b;midC=r;}else{minI=0;midI=2;minC=r;midC=b;}}else if(b>=r&&b>=g){maxI=2;maxC=b;if(r>=g){minI=1;midI=0;minC=g;midC=r;}else{minI=0;midI=1;minC=r;midC=g;}}vec3 result=vec3(r,g,b);if(maxC>minC){midC=(midC-minC)*saturation/(maxC-minC);maxC=saturation;}else{maxC=midC=0.0;}minC=0.0;if(maxI==0){result[0]=maxC;}else if(maxI==1){result[1]=maxC;}else if(maxI==2){result[2]=maxC;}if(minI==0){result[0]=minC;}else if(minI==1){result[1]=minC;}else if(minI==2){result[2]=minC;}if(midI==0){result[0]=midC;}else if(midI==1){result[1]=midC;}else if(midI==2){result[2]=midC;}return result;}vec3 op(vec3 a,vec3 b){float s=getSaturation(a);float l=getLuminosity(a);return setLuminosity(setSaturation(b,s),l);}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=op(bottom,top);float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentSaturation = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float getLuminosity(vec3 color){return 0.3*color[0]+0.59*color[1]+0.11*color[2];}float clipLowest(float channel,float lowestChannel,float luminosity){return luminosity+((channel-luminosity)*luminosity)/(luminosity-lowestChannel);}float clipHighest(float channel,float highestChannel,float luminosity){return luminosity+((channel-luminosity)*(1.0-luminosity))/(highestChannel-luminosity);}vec3 clipColor(vec3 rgb){float luminosity=getLuminosity(rgb);float lowestChannel=min(rgb[0],min(rgb[1],rgb[2]));float highestChannel=max(rgb[0],max(rgb[1],rgb[2]));float r=rgb[0],g=rgb[1],b=rgb[2];if(lowestChannel<0.0){r=clipLowest(r,lowestChannel,luminosity);g=clipLowest(g,lowestChannel,luminosity);b=clipLowest(b,lowestChannel,luminosity);}if(highestChannel>1.0){r=clipHighest(r,highestChannel,luminosity);g=clipHighest(g,highestChannel,luminosity);b=clipHighest(b,highestChannel,luminosity);}return vec3(r,g,b);}vec3 setLuminosity(vec3 rgb,float luminosity){float delta=luminosity-getLuminosity(rgb);float r=rgb[0],g=rgb[1],b=rgb[2];return clipColor(vec3(r+delta,g+delta,b+delta));}float getSaturation(vec3 rgb){return max(rgb[0],max(rgb[1],rgb[2]))-min(rgb[0],min(rgb[1],rgb[2]));}vec3 setSaturation(vec3 rgb,float saturation){float r=rgb[0],g=rgb[1],b=rgb[2];float maxC=0.0,minC=0.0,midC=0.0;int maxI=0,minI=0,midI=0;if(r>=g&&r>=b){maxI=0;maxC=r;if(g>=b){minI=2;midI=1;minC=b;midC=g;}else{minI=1;midI=2;minC=g;midC=b;}}else if(g>=r&&g>=b){maxI=1;maxC=g;if(r>=b){minI=2;midI=0;minC=b;midC=r;}else{minI=0;midI=2;minC=r;midC=b;}}else if(b>=r&&b>=g){maxI=2;maxC=b;if(r>=g){minI=1;midI=0;minC=g;midC=r;}else{minI=0;midI=1;minC=r;midC=g;}}vec3 result=vec3(r,g,b);if(maxC>minC){midC=(midC-minC)*saturation/(maxC-minC);maxC=saturation;}else{maxC=midC=0.0;}minC=0.0;if(maxI==0){result[0]=maxC;}else if(maxI==1){result[1]=maxC;}else if(maxI==2){result[2]=maxC;}if(minI==0){result[0]=minC;}else if(minI==1){result[1]=minC;}else if(minI==2){result[2]=minC;}if(midI==0){result[0]=midC;}else if(midI==1){result[1]=midC;}else if(midI==2){result[2]=midC;}return result;}vec3 op(vec3 a,vec3 b){float s=getSaturation(b);float l=getLuminosity(a);return setLuminosity(setSaturation(a,s),l);}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=op(bottom,top);float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentColor = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float getLuminosity(vec3 color){return 0.3*color[0]+0.59*color[1]+0.11*color[2];}float clipLowest(float channel,float lowestChannel,float luminosity){return luminosity+((channel-luminosity)*luminosity)/(luminosity-lowestChannel);}float clipHighest(float channel,float highestChannel,float luminosity){return luminosity+((channel-luminosity)*(1.0-luminosity))/(highestChannel-luminosity);}vec3 clipColor(vec3 rgb){float luminosity=getLuminosity(rgb);float lowestChannel=min(rgb[0],min(rgb[1],rgb[2]));float highestChannel=max(rgb[0],max(rgb[1],rgb[2]));float r=rgb[0],g=rgb[1],b=rgb[2];if(lowestChannel<0.0){r=clipLowest(r,lowestChannel,luminosity);g=clipLowest(g,lowestChannel,luminosity);b=clipLowest(b,lowestChannel,luminosity);}if(highestChannel>1.0){r=clipHighest(r,highestChannel,luminosity);g=clipHighest(g,highestChannel,luminosity);b=clipHighest(b,highestChannel,luminosity);}return vec3(r,g,b);}vec3 setLuminosity(vec3 rgb,float luminosity){float delta=luminosity-getLuminosity(rgb);float r=rgb[0],g=rgb[1],b=rgb[2];return clipColor(vec3(r+delta,g+delta,b+delta));}float getSaturation(vec3 rgb){return max(rgb[0],max(rgb[1],rgb[2]))-min(rgb[0],min(rgb[1],rgb[2]));}vec3 setSaturation(vec3 rgb,float saturation){float r=rgb[0],g=rgb[1],b=rgb[2];float maxC=0.0,minC=0.0,midC=0.0;int maxI=0,minI=0,midI=0;if(r>=g&&r>=b){maxI=0;maxC=r;if(g>=b){minI=2;midI=1;minC=b;midC=g;}else{minI=1;midI=2;minC=g;midC=b;}}else if(g>=r&&g>=b){maxI=1;maxC=g;if(r>=b){minI=2;midI=0;minC=b;midC=r;}else{minI=0;midI=2;minC=r;midC=b;}}else if(b>=r&&b>=g){maxI=2;maxC=b;if(r>=g){minI=1;midI=0;minC=g;midC=r;}else{minI=0;midI=1;minC=r;midC=g;}}vec3 result=vec3(r,g,b);if(maxC>minC){midC=(midC-minC)*saturation/(maxC-minC);maxC=saturation;}else{maxC=midC=0.0;}minC=0.0;if(maxI==0){result[0]=maxC;}else if(maxI==1){result[1]=maxC;}else if(maxI==2){result[2]=maxC;}if(minI==0){result[0]=minC;}else if(minI==1){result[1]=minC;}else if(minI==2){result[2]=minC;}if(midI==0){result[0]=midC;}else if(midI==1){result[1]=midC;}else if(midI==2){result[2]=midC;}return result;}vec3 op(vec3 a,vec3 b){float l=getLuminosity(a);return setLuminosity(b,l);}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=op(bottom,top);float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var fragmentLuminosity = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;float getLuminosity(vec3 color){return 0.3*color[0]+0.59*color[1]+0.11*color[2];}float clipLowest(float channel,float lowestChannel,float luminosity){return luminosity+((channel-luminosity)*luminosity)/(luminosity-lowestChannel);}float clipHighest(float channel,float highestChannel,float luminosity){return luminosity+((channel-luminosity)*(1.0-luminosity))/(highestChannel-luminosity);}vec3 clipColor(vec3 rgb){float luminosity=getLuminosity(rgb);float lowestChannel=min(rgb[0],min(rgb[1],rgb[2]));float highestChannel=max(rgb[0],max(rgb[1],rgb[2]));float r=rgb[0],g=rgb[1],b=rgb[2];if(lowestChannel<0.0){r=clipLowest(r,lowestChannel,luminosity);g=clipLowest(g,lowestChannel,luminosity);b=clipLowest(b,lowestChannel,luminosity);}if(highestChannel>1.0){r=clipHighest(r,highestChannel,luminosity);g=clipHighest(g,highestChannel,luminosity);b=clipHighest(b,highestChannel,luminosity);}return vec3(r,g,b);}vec3 setLuminosity(vec3 rgb,float luminosity){float delta=luminosity-getLuminosity(rgb);float r=rgb[0],g=rgb[1],b=rgb[2];return clipColor(vec3(r+delta,g+delta,b+delta));}float getSaturation(vec3 rgb){return max(rgb[0],max(rgb[1],rgb[2]))-min(rgb[0],min(rgb[1],rgb[2]));}vec3 setSaturation(vec3 rgb,float saturation){float r=rgb[0],g=rgb[1],b=rgb[2];float maxC=0.0,minC=0.0,midC=0.0;int maxI=0,minI=0,midI=0;if(r>=g&&r>=b){maxI=0;maxC=r;if(g>=b){minI=2;midI=1;minC=b;midC=g;}else{minI=1;midI=2;minC=g;midC=b;}}else if(g>=r&&g>=b){maxI=1;maxC=g;if(r>=b){minI=2;midI=0;minC=b;midC=r;}else{minI=0;midI=2;minC=r;midC=b;}}else if(b>=r&&b>=g){maxI=2;maxC=b;if(r>=g){minI=1;midI=0;minC=g;midC=r;}else{minI=0;midI=1;minC=r;midC=g;}}vec3 result=vec3(r,g,b);if(maxC>minC){midC=(midC-minC)*saturation/(maxC-minC);maxC=saturation;}else{maxC=midC=0.0;}minC=0.0;if(maxI==0){result[0]=maxC;}else if(maxI==1){result[1]=maxC;}else if(maxI==2){result[2]=maxC;}if(minI==0){result[0]=minC;}else if(minI==1){result[1]=minC;}else if(minI==2){result[2]=minC;}if(midI==0){result[0]=midC;}else if(midI==1){result[1]=midC;}else if(midI==2){result[2]=midC;}return result;}vec3 op(vec3 a,vec3 b){float l=getLuminosity(b);return setLuminosity(a,l);}vec3 premultipliedAlpha(vec4 color){float a=color.a;if(a==0.0){return vec3(0.0,0.0,0.0);}return vec3(color.r/a,color.g/a,color.b/a);}float alphaCompose(float a1,float a2,float a3,float c1,float c2,float c3){return(1.0-a2/a3)*c1+a2/a3*((1.0-a1)*c2+a1*c3);}void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);if(color1.a==0.0){gl_FragColor=color2;}else if(color2.a==0.0){gl_FragColor=color1;}else{vec3 bottom=premultipliedAlpha(color1);vec3 top=premultipliedAlpha(color2);vec3 res=op(bottom,top);float a=color1.a+color2.a-color1.a*color2.a;gl_FragColor=vec4(alphaCompose(color1.a,color2.a,a,bottom.r,top.r,res.r)*a,alphaCompose(color1.a,color2.a,a,bottom.g,top.g,res.g)*a,alphaCompose(color1.a,color2.a,a,bottom.b,top.b,res.b)*a,a);}}"; // eslint-disable-line

  var NA = Cache.NA,
      LOCAL$1 = Cache.LOCAL,
      CHILD = Cache.CHILD,
      SELF = Cache.SELF,
      getCache = Cache.getCache;
  var OFFSCREEN_OVERFLOW$1 = offscreen.OFFSCREEN_OVERFLOW,
      OFFSCREEN_FILTER$1 = offscreen.OFFSCREEN_FILTER,
      OFFSCREEN_MASK$1 = offscreen.OFFSCREEN_MASK,
      OFFSCREEN_BLEND$1 = offscreen.OFFSCREEN_BLEND,
      OFFSCREEN_MASK2$1 = offscreen.OFFSCREEN_MASK2,
      applyOffscreen$1 = offscreen.applyOffscreen;
  var _enums$STYLE_KEY$i = enums.STYLE_KEY,
      DISPLAY$8 = _enums$STYLE_KEY$i.DISPLAY,
      OPACITY$5 = _enums$STYLE_KEY$i.OPACITY,
      VISIBILITY$5 = _enums$STYLE_KEY$i.VISIBILITY,
      FILTER$5 = _enums$STYLE_KEY$i.FILTER,
      OVERFLOW$3 = _enums$STYLE_KEY$i.OVERFLOW,
      MIX_BLEND_MODE$3 = _enums$STYLE_KEY$i.MIX_BLEND_MODE,
      FILL$2 = _enums$STYLE_KEY$i.FILL,
      TRANSFORM$4 = _enums$STYLE_KEY$i.TRANSFORM,
      TRANSFORM_ORIGIN$5 = _enums$STYLE_KEY$i.TRANSFORM_ORIGIN,
      PERSPECTIVE$4 = _enums$STYLE_KEY$i.PERSPECTIVE,
      PERSPECTIVE_ORIGIN$4 = _enums$STYLE_KEY$i.PERSPECTIVE_ORIGIN,
      PADDING_LEFT$7 = _enums$STYLE_KEY$i.PADDING_LEFT,
      PADDING_RIGHT$6 = _enums$STYLE_KEY$i.PADDING_RIGHT,
      PADDING_TOP$5 = _enums$STYLE_KEY$i.PADDING_TOP,
      PADDING_BOTTOM$5 = _enums$STYLE_KEY$i.PADDING_BOTTOM,
      BORDER_TOP_WIDTH$6 = _enums$STYLE_KEY$i.BORDER_TOP_WIDTH,
      BORDER_RIGHT_WIDTH$7 = _enums$STYLE_KEY$i.BORDER_RIGHT_WIDTH,
      BORDER_BOTTOM_WIDTH$6 = _enums$STYLE_KEY$i.BORDER_BOTTOM_WIDTH,
      BORDER_LEFT_WIDTH$8 = _enums$STYLE_KEY$i.BORDER_LEFT_WIDTH,
      MATRIX$4 = _enums$STYLE_KEY$i.MATRIX,
      _enums$NODE_KEY$8 = enums.NODE_KEY,
      NODE_CACHE$3 = _enums$NODE_KEY$8.NODE_CACHE,
      NODE_CACHE_TOTAL$1 = _enums$NODE_KEY$8.NODE_CACHE_TOTAL,
      NODE_CACHE_OVERFLOW$1 = _enums$NODE_KEY$8.NODE_CACHE_OVERFLOW,
      NODE_CACHE_MASK$1 = _enums$NODE_KEY$8.NODE_CACHE_MASK,
      NODE_CACHE_FILTER$1 = _enums$NODE_KEY$8.NODE_CACHE_FILTER,
      NODE_MATRIX$3 = _enums$NODE_KEY$8.NODE_MATRIX,
      NODE_MATRIX_EVENT$4 = _enums$NODE_KEY$8.NODE_MATRIX_EVENT,
      NODE_OPACITY$2 = _enums$NODE_KEY$8.NODE_OPACITY,
      NODE_COMPUTED_STYLE$3 = _enums$NODE_KEY$8.NODE_COMPUTED_STYLE,
      NODE_CURRENT_STYLE$5 = _enums$NODE_KEY$8.NODE_CURRENT_STYLE,
      NODE_LIMIT_CACHE$2 = _enums$NODE_KEY$8.NODE_LIMIT_CACHE,
      NODE_REFRESH_LV$1 = _enums$NODE_KEY$8.NODE_REFRESH_LV,
      NODE_CACHE_STYLE$1 = _enums$NODE_KEY$8.NODE_CACHE_STYLE,
      NODE_DEFS_CACHE$6 = _enums$NODE_KEY$8.NODE_DEFS_CACHE,
      NODE_IS_MASK$2 = _enums$NODE_KEY$8.NODE_IS_MASK,
      NODE_DOM_PARENT$5 = _enums$NODE_KEY$8.NODE_DOM_PARENT,
      NODE_PERSPECTIVE_MATRIX$1 = _enums$NODE_KEY$8.NODE_PERSPECTIVE_MATRIX,
      NODE_VIRTUAL_DOM$2 = _enums$NODE_KEY$8.NODE_VIRTUAL_DOM,
      NODE_CACHE_AS_BITMAP$1 = _enums$NODE_KEY$8.NODE_CACHE_AS_BITMAP,
      NODE_STRUCT$4 = _enums$NODE_KEY$8.NODE_STRUCT,
      _enums$STRUCT_KEY$2 = enums.STRUCT_KEY,
      STRUCT_NODE$1 = _enums$STRUCT_KEY$2.STRUCT_NODE,
      STRUCT_INDEX$2 = _enums$STRUCT_KEY$2.STRUCT_INDEX,
      STRUCT_TOTAL$1 = _enums$STRUCT_KEY$2.STRUCT_TOTAL,
      STRUCT_HAS_MASK$1 = _enums$STRUCT_KEY$2.STRUCT_HAS_MASK,
      STRUCT_LV$2 = _enums$STRUCT_KEY$2.STRUCT_LV;
  var NONE$2 = o$3.NONE,
      TRANSFORM_ALL$1 = o$3.TRANSFORM_ALL,
      OP = o$3.OPACITY,
      FT = o$3.FILTER,
      REPAINT$2 = o$3.REPAINT,
      contain$2 = o$3.contain,
      MBM = o$3.MIX_BLEND_MODE,
      PPT = o$3.PERSPECTIVE;
  var isE$3 = mx.isE,
      inverse$1 = mx.inverse,
      multiply$2 = mx.multiply;
  var mbmName$2 = mbm.mbmName,
      isValidMbm$2 = mbm.isValidMbm;
  var assignMatrix$1 = util.assignMatrix,
      transformBbox$1 = util.transformBbox;
  /**
   * 生成一个节点及其子节点所包含的矩形范围盒，canvas和webgl的最大尺寸限制不一样，由外部传入
   * 如果某个子节点超限，则视为整个超限，超限返回空
   * @param node
   * @param __structs
   * @param index
   * @param total
   * @param parentIndexHash
   * @param opacityHash
   * @param MAX
   * @param includeLimitCache webgl时即便超限也要强制生成total，所以标识不能跳出
   * @returns {*}
   */

  function genBboxTotal(node, __structs, index, total, parentIndexHash, opacityHash, MAX, includeLimitCache) {
    var sx1 = node.__sx1,
        sy1 = node.__sy1,
        __config = node.__config;
    var cache = __config[NODE_CACHE$3],
        _config$NODE_COMPUTE = __config[NODE_COMPUTED_STYLE$3],
        filter = _config$NODE_COMPUTE[FILTER$5],
        perspective = _config$NODE_COMPUTE[PERSPECTIVE$4],
        perspectiveOrigin = _config$NODE_COMPUTE[PERSPECTIVE_ORIGIN$4]; // 先将局部根节点的bbox算好，可能没内容是空

    var bboxTotal;

    if (cache && cache.available) {
      bboxTotal = cache.bbox.slice(0);
    } else {
      bboxTotal = node.bbox.slice(0);
    } // 局部根节点如有perspective，则计算pm，这里不会出现嵌套，因为每个出现都会生成局部根节点


    var pm;

    if (perspective) {
      pm = transform$1.calPerspectiveMatrix(perspective, perspectiveOrigin);
    } // 广度遍历，不断一层层循环下去，用2个hash暂存每层的父matrix和opacity，blur只需记住顶层，因为子的如果有一定是cacheFilter


    var list = [index];
    var d = 0;
    filter.forEach(function (item) {
      var _item = _slicedToArray(item, 2),
          k = _item[0],
          v = _item[1];

      if (k === 'blur') {
        d = blur.outerSize(v);
      }
    });
    opacityHash[index] = 1; // opacity可以保存下来层级相乘结果供外部使用，但matrix不可以，因为这里按画布原点为坐标系计算，外部合并局部根节点以bbox左上角为原点

    var matrixHash = {};

    while (list.length) {
      var arr = list.splice(0);

      for (var i = 0, len = arr.length; i < len; i++) {
        var parentIndex = arr[i];

        var _total = __structs[parentIndex][STRUCT_TOTAL$1] || 0;

        for (var _i = parentIndex + 1, _len = parentIndex + _total + 1; _i < _len; _i++) {
          var _structs$_i = __structs[_i],
              node2 = _structs$_i[STRUCT_NODE$1],
              _total2 = _structs$_i[STRUCT_TOTAL$1]; // mask也不占bbox位置

          if (node2.isMask) {
            continue;
          }

          var __sx1 = node2.__sx1,
              __sy1 = node2.__sy1,
              _node2$__config = node2.__config,
              limitCache = _node2$__config[NODE_LIMIT_CACHE$2],
              __cache = _node2$__config[NODE_CACHE$3],
              __cacheTotal = _node2$__config[NODE_CACHE_TOTAL$1],
              __cacheFilter = _node2$__config[NODE_CACHE_FILTER$1],
              __cacheMask = _node2$__config[NODE_CACHE_MASK$1],
              __cacheOverflow = _node2$__config[NODE_CACHE_OVERFLOW$1],
              _node2$__config$NODE_ = _node2$__config[NODE_COMPUTED_STYLE$3],
              display = _node2$__config$NODE_[DISPLAY$8],
              visibility = _node2$__config$NODE_[VISIBILITY$5],
              transform = _node2$__config$NODE_[TRANSFORM$4],
              transformOrigin = _node2$__config$NODE_[TRANSFORM_ORIGIN$5],
              opacity = _node2$__config$NODE_[OPACITY$5]; // webgl不能跳过超限

          if (limitCache && !includeLimitCache) {
            return;
          } // display:none跳过整个节点树，visibility只跳过自身


          if (display === 'none') {
            _i += _total2 || 0;
            continue;
          }

          if (visibility === 'hidden') {
            continue;
          }

          parentIndexHash[_i] = parentIndex;
          opacityHash[_i] = opacityHash[parentIndex] * opacity; // 防止text的情况，其一定属于某个node，其bbox被计算过，text不应该计算

          if (node2 instanceof Text) {
            continue;
          }

          var bbox = void 0,
              dx = 0,
              dy = 0,
              hasTotal = void 0;
          var target = getCache([__cacheMask, __cacheFilter, __cacheOverflow, __cacheTotal]);

          if (target) {
            bbox = target.bbox.slice(0);
            dx = target.dbx;
            dy = target.dby;
            _i += _total2 || 0;
            hasTotal = true;
          } else if (__cache && __cache.available) {
            bbox = __cache.bbox.slice(0);
            dx = __cache.dbx;
            dy = __cache.dby;
          } else {
            bbox = node2.bbox.slice(0);
          } // 可能Xom没有内容


          if (bbox) {
            bbox[0] -= sx1;
            bbox[1] -= sy1;
            bbox[2] -= sx1;
            bbox[3] -= sy1;
            var matrix = matrixHash[parentIndex]; // 父级matrix初始化E为null，自身不为E时才运算，可以加速

            if (transform && !isE$3(transform)) {
              var tfo = transformOrigin.slice(0); // total下的节点tfo的计算，以total为原点，差值坐标即相对坐标

              tfo[0] += __sx1 - sx1 + dx;
              tfo[1] += __sy1 - sy1 + dy;
              var m = transform$1.calMatrixByOrigin(transform, tfo);

              if (matrix) {
                matrix = multiply$2(matrix, m);
              } else {
                matrix = m;
              }
            }

            if (matrix) {
              matrixHash[_i] = matrix;
            }

            if (pm) {
              matrix = multiply$2(pm, matrix);
            }

            bbox = transformBbox$1(bbox, matrix, d, d); // 有孩子才继续存入下层级广度运算

            if (_total2 && !hasTotal) {
              list.push(_i);
            }

            mergeBbox(bboxTotal, bbox, sx1, sy1);
          }
        }
      }
    }

    return [bboxTotal, pm];
  }

  function mergeBbox(bbox, t, sx1, sy1) {
    bbox[0] = Math.min(bbox[0], sx1 + t[0]);
    bbox[1] = Math.min(bbox[1], sy1 + t[1]);
    bbox[2] = Math.max(bbox[2], sx1 + t[2]);
    bbox[3] = Math.max(bbox[3], sy1 + t[3]);
  }
  /**
   * 生成局部根节点离屏缓存，超限时除外
   * cache是每个节点自身的缓存，且共享离屏canvas
   * cacheTotal是基础
   * cacheFilter基于total
   * cacheOverflow基于filter
   * cacheMask基于overflow
   * cacheBlend基于mask
   * @param renderMode
   * @param node
   * @param config
   * @param index
   * @param lv
   * @param total
   * @param __structs
   * @param hasMask
   * @param width
   * @param height
   * @returns {{enabled}|Cache|*}
   */


  function genTotal(renderMode, node, config, index, lv, total, __structs, hasMask, width, height) {
    var cacheTotal = config[NODE_CACHE_TOTAL$1],
        cacheFilter = config[NODE_CACHE_FILTER$1],
        cacheMask = config[NODE_CACHE_MASK$1],
        cacheOverflow = config[NODE_CACHE_OVERFLOW$1],
        currentStyle = config[NODE_CURRENT_STYLE$5],
        computedStyle = config[NODE_COMPUTED_STYLE$3];
    var needGen; // 先绘制形成基础的total，有可能已经存在无变化，就可省略

    if (!cacheTotal || !cacheTotal.available) {
      needGen = true; // total重新生成了，其它基于的也一定需要重新生成

      var bboxTotal, baseMatrix;
      var _sx = node.__sx1,
          _sy = node.__sy1; // 栈代替递归，存父节点的matrix/opacity，matrix为E时存null省略计算

      var matrixList = [];
      var parentMatrix;
      var opacityList = [];
      var parentOpacity = 1;
      var lastConfig;
      var lastLv = lv; // 先遍历每个节点，以局部根节点左上角为原点，求得所占的总的bbox，即合并所有bbox

      for (var i = index, len = index + (total || 0) + 1; i < len; i++) {
        var _structs$i = __structs[i],
            _node = _structs$i[STRUCT_NODE$1],
            _lv = _structs$i[STRUCT_LV$2],
            _total3 = _structs$i[STRUCT_TOTAL$1],
            _hasMask = _structs$i[STRUCT_HAS_MASK$1]; // 排除Text

        if (_node instanceof Text) {
          continue;
        }

        var __config = _node.__config;
        var refreshLevel = __config[NODE_REFRESH_LV$1],
            __cacheTotal = __config[NODE_CACHE_TOTAL$1],
            __cacheFilter = __config[NODE_CACHE_FILTER$1],
            __cacheMask = __config[NODE_CACHE_MASK$1],
            __cacheOverflow = __config[NODE_CACHE_OVERFLOW$1],
            _computedStyle = __config[NODE_COMPUTED_STYLE$3],
            isMask = __config[NODE_IS_MASK$2]; // 跳过display:none元素和它的所有子节点和mask

        if (_computedStyle[DISPLAY$8] === 'none') {
          i += (_total3 || 0) + countMaskNum(__structs, i + (_total3 || 0) + 1, _hasMask || 0);
          continue;
        } // mask不占bbox，本身除外


        if (i !== index && isMask) {
          i += (_total3 || 0) + countMaskNum(__structs, i + (_total3 || 0) + 1, _hasMask || 0);
          continue;
        } // lv变大说明是child，相等是sibling，变小可能是parent或另一棵子树，根节点是第一个特殊处理


        if (i === index) ; else if (_lv > lastLv) {
          parentMatrix = lastConfig[NODE_MATRIX_EVENT$4];

          if (isE$3(parentMatrix)) {
            parentMatrix = null;
          }

          matrixList.push(parentMatrix);
          parentOpacity = lastConfig[NODE_OPACITY$2];
          opacityList.push(parentOpacity);
        } // 变小出栈索引需注意，可能不止一层，多层计算diff层级
        else if (_lv < lastLv) {
            var diff = lastLv - _lv;
            matrixList.splice(-diff);
            parentMatrix = matrixList[_lv - 1];
            opacityList.splice(-diff);
            parentOpacity = opacityList[_lv - 1];
          } // 不变是同级兄弟，无需特殊处理 else {}


        lastConfig = __config;
        lastLv = _lv;
        var _currentStyle = __config[NODE_CURRENT_STYLE$5],
            __cacheStyle = __config[NODE_CACHE_STYLE$1];
        var matrix = void 0,
            opacity = void 0;
        /**
         * lv<REPAINT，bbox基本不变（除非filter），无需重新生成，否则置空后重新计算获得
         * 同时计算matrix，并以局部根节点为原点，计算matrixEvent，临时保存下来
         * 如果后续向主画布渲染时局部根节点为E，则可省略真正计算子节点matrixEvent的过程
         */

        if (refreshLevel < REPAINT$2) {
          if (contain$2(refreshLevel, TRANSFORM_ALL$1)) {
            matrix = _node.__calMatrix(refreshLevel, __cacheStyle, _currentStyle, _computedStyle, __config);
            assignMatrix$1(__config[NODE_MATRIX$3], matrix);
          } else {
            matrix = __config[NODE_MATRIX$3];
          }

          if (contain$2(refreshLevel, OP)) {
            _computedStyle[OPACITY$5] = _currentStyle[OPACITY$5];
          }

          opacity = _computedStyle[OPACITY$5];

          if (contain$2(refreshLevel, FT)) {
            _node.__bbox = null;

            _node.__calFilter(_currentStyle, _computedStyle);
          }

          matrix = __config[NODE_MATRIX$3];

          if (contain$2(refreshLevel, MBM)) {
            _computedStyle[MIX_BLEND_MODE$3] = _currentStyle[MIX_BLEND_MODE$3];
          }
        }
        /**
         * >=REPAINT重新渲染，bbox重新生成，matrix重新生成，filter重新生成
         */
        else {
            _node.__bbox = null;

            if (i === index) {
              _node.__calFilter(_currentStyle, _computedStyle);
            }

            matrix = _node.__calMatrix(refreshLevel, __cacheStyle, _currentStyle, _computedStyle, __config);
            assignMatrix$1(__config[NODE_MATRIX$3], matrix);
            opacity = _computedStyle[OPACITY$5] = _currentStyle[OPACITY$5];
          } // opacity可临时赋值下面循环渲染用，matrixEvent可能需重新计算，因为局部根节点为E没考虑继承，这里仅计算bbox用


        if (i === index) {
          opacity = 1;
          baseMatrix = matrix;
          matrix = mx.identity();
        } else if (!isE$3(parentMatrix)) {
          matrix = multiply$2(parentMatrix, matrix);
        }

        assignMatrix$1(__config[NODE_MATRIX_EVENT$4], matrix);
        __config[NODE_OPACITY$2] = parentOpacity * opacity;
        var bbox = void 0; // 子元素有cacheTotal优先使用，一定是子元素，局部根节点available为false不会进

        var target = getCache([__cacheMask, __cacheFilter, __cacheOverflow, __cacheTotal]);

        if (target) {
          i += (_total3 || 0) + countMaskNum(__structs, i + (_total3 || 0) + 1, _hasMask || 0);
          bbox = target.bbox;
        } else {
          bbox = _node.bbox;
        } // 老的不变，新的会各自重新生成，根据matrixEvent合并bboxTotal


        bbox = transformBbox$1(bbox, matrix, 0, 0);

        if (i === index) {
          bboxTotal = bbox.slice(0);
        } else {
          mergeBbox(bboxTotal, bbox, 0, 0);
        }
      } // 生成cacheTotal，获取偏移dx/dy


      config[NODE_CACHE_TOTAL$1] = cacheTotal = Cache.getInstance(bboxTotal, _sx, _sy);

      if (!cacheTotal || !cacheTotal.enabled) {
        return;
      }

      cacheTotal.__available = true;
      var _cacheTotal = cacheTotal,
          dx = _cacheTotal.dx,
          dy = _cacheTotal.dy,
          dbx = _cacheTotal.dbx,
          dby = _cacheTotal.dby,
          tx = _cacheTotal.x,
          ty = _cacheTotal.y;
      var ctxTotal = cacheTotal.ctx;
      /**
       * 再次遍历每个节点，以局部根节点左上角为基准原点，将所有节点绘制上去
       * 每个子节点的opacity有父继承计算在上面循环已经做好了，直接获取
       * 但matrixEvent可能需要重算，因为原点不一定是根节点的原点，影响tfo
       * 另外每个节点的refreshLevel需要设置REPAINT
       * 这样cacheTotal取消时子节点需确保重新计算一次matrix/opacity/filter，保证下次和父元素继承正确
       */

      parentMatrix = null;
      var lastMatrix;
      lastLv = lv; // 和外面没cache的类似，mask生成hash记录

      var maskStartHash = {};
      var offscreenHash = {};

      for (var _i2 = index, _len2 = index + (total || 0) + 1; _i2 < _len2; _i2++) {
        var _structs$_i2 = __structs[_i2],
            _node2 = _structs$_i2[STRUCT_NODE$1],
            _lv2 = _structs$_i2[STRUCT_LV$2],
            _total4 = _structs$_i2[STRUCT_TOTAL$1],
            _hasMask2 = _structs$_i2[STRUCT_HAS_MASK$1]; // 排除Text

        if (_node2 instanceof Text) {
          _node2.render(renderMode, REPAINT$2, ctxTotal, CHILD, dx, dy);

          if (offscreenHash.hasOwnProperty(_i2)) {
            ctxTotal = applyOffscreen$1(ctxTotal, offscreenHash[_i2], width, height);
          }
        } else {
          var _config = _node2.__config;
          var _refreshLevel = _config[NODE_REFRESH_LV$1],
              _cacheTotal2 = _config[NODE_CACHE_TOTAL$1],
              _cacheFilter = _config[NODE_CACHE_FILTER$1],
              _cacheMask = _config[NODE_CACHE_MASK$1],
              _cacheOverflow = _config[NODE_CACHE_OVERFLOW$1],
              _computedStyle2 = _config[NODE_COMPUTED_STYLE$3];

          if (maskStartHash.hasOwnProperty(_i2)) {
            var _maskStartHash$_i = _slicedToArray(maskStartHash[_i2], 3),
                idx = _maskStartHash$_i[0],
                n = _maskStartHash$_i[1],
                offscreenMask = _maskStartHash$_i[2];

            var _target2 = inject.getCacheCanvas(width, height, null, 'mask2');

            offscreenMask.mask = _target2; // 应用mask用到

            offscreenMask.isClip = _node2.isClip; // 定位到最后一个mask元素上的末尾

            var j = _i2 + (_total4 || 0) + 1;

            while (--n) {
              var _total5 = __structs[j][STRUCT_TOTAL$1];
              j += (_total5 || 0) + 1;
            }

            j--;
            var list = offscreenHash[j] = offscreenHash[j] || [];
            list.push([idx, _lv2, OFFSCREEN_MASK$1, offscreenMask]);
            list.push([j, _lv2, OFFSCREEN_MASK2$1, {
              ctx: ctxTotal,
              // 保存等待OFFSCREEN_MASK2时还原
              target: _target2
            }]);
            ctxTotal = _target2.ctx;
          } // lv变大说明是child，相等是sibling，变小可能是parent或另一棵子树，根节点是第一个特殊处理


          if (_i2 === index) ; else if (_lv2 > lastLv) {
            parentMatrix = lastMatrix;

            if (isE$3(parentMatrix)) {
              parentMatrix = null;
            }

            matrixList.push(parentMatrix);
          } // 变小出栈索引需注意，可能不止一层，多层计算diff层级
          else if (_lv2 < lastLv) {
              var _diff = lastLv - _lv2;

              matrixList.splice(-_diff);
              parentMatrix = matrixList[_lv2 - 1];
            } // 不变是同级兄弟，无需特殊处理 else {}


          var transform = _computedStyle2[TRANSFORM$4],
              tfo = _computedStyle2[TRANSFORM_ORIGIN$5],
              display = _computedStyle2[DISPLAY$8]; // 特殊渲染的matrix，局部根节点为原点考虑，当需要计算时再计算

          var m = void 0;

          if (_i2 !== index && (!isE$3(parentMatrix) || !isE$3(transform))) {
            tfo = tfo.slice(0);
            tfo[0] += dbx + _node2.__sx1 - _sx + tx;
            tfo[1] += dby + _node2.__sy1 - _sy + ty;
            m = transform$1.calMatrixByOrigin(transform, tfo);

            if (!isE$3(parentMatrix)) {
              m = multiply$2(parentMatrix, m);
            }
          } else {
            m = null;
          }

          if (m) {
            ctxTotal.setTransform(m[0], m[1], m[4], m[5], m[12], m[13]);
          } else {
            ctxTotal.setTransform(1, 0, 0, 1, 0, 0);
          }

          lastLv = _lv2;
          lastMatrix = m; // 子元素有cacheTotal优先使用，也一定是子元素，局部根节点不会进

          var _target = getCache([_cacheMask, _cacheFilter, _cacheOverflow, _cacheTotal2]);

          if (_i2 !== index && _target) {
            _i2 += (_total4 || 0) + countMaskNum(__structs, _i2 + (_total4 || 0) + 1, _hasMask2 || 0); // 跳过display:none元素和它的所有子节点

            if (display === 'none') {
              continue;
            }

            var mixBlendMode = _computedStyle2[MIX_BLEND_MODE$3];

            if (isValidMbm$2(mixBlendMode)) {
              ctxTotal.globalCompositeOperation = mbmName$2(mixBlendMode);
            } else {
              ctxTotal.globalCompositeOperation = 'source-over';
            }

            ctxTotal.globalAlpha = _config[NODE_OPACITY$2];
            Cache.drawCache(_target, cacheTotal);
            ctxTotal.globalCompositeOperation = 'source-over';
          } else {
            if (_refreshLevel >= REPAINT$2) {
              // 手动计算cacheStyle和根据border-box的坐标再渲染
              _node2.__calCache(renderMode, ctxTotal, _config[NODE_DOM_PARENT$5], _config[NODE_CACHE_STYLE$1], _config[NODE_CURRENT_STYLE$5], _computedStyle2, _node2.clientWidth, _node2.clientHeight, _node2.offsetWidth, _node2.offsetHeight, _computedStyle2[BORDER_TOP_WIDTH$6], _computedStyle2[BORDER_RIGHT_WIDTH$7], _computedStyle2[BORDER_BOTTOM_WIDTH$6], _computedStyle2[BORDER_LEFT_WIDTH$8], _computedStyle2[PADDING_TOP$5], _computedStyle2[PADDING_RIGHT$6], _computedStyle2[PADDING_BOTTOM$5], _computedStyle2[PADDING_LEFT$7], _node2.__sx1, _node2.__sx2, _node2.__sx3, _node2.__sx4, _node2.__sx5, _node2.__sx6, _node2.__sy1, _node2.__sy2, _node2.__sy3, _node2.__sy4, _node2.__sy5, _node2.__sy6);
            }

            var res = _node2.render(renderMode, _refreshLevel, ctxTotal, _i2 === index ? LOCAL$1 : CHILD, dx, dy);

            _config[NODE_REFRESH_LV$1] = REPAINT$2;

            var _ref = res || {},
                offscreenBlend = _ref.offscreenBlend,
                _offscreenMask = _ref.offscreenMask,
                offscreenFilter = _ref.offscreenFilter,
                offscreenOverflow = _ref.offscreenOverflow; // 这里离屏顺序和xom里返回的一致，和下面应用离屏时的list相反


            if (offscreenBlend) {
              var _j = _i2 + (_total4 || 0) + countMaskNum(__structs, _i2 + (_total4 || 0) + 1, _hasMask2 || 0);

              var _list = offscreenHash[_j] = offscreenHash[_j] || [];

              _list.push([_i2, _lv2, OFFSCREEN_BLEND$1, offscreenBlend]);

              ctxTotal = offscreenBlend.target.ctx;
            } // 被遮罩的节点要为第一个遮罩和最后一个遮罩的索引打标，被遮罩的本身在一个离屏canvas，遮罩的元素在另外一个
            // 最后一个遮罩索引因数量不好计算，放在maskStartHash做


            if (_offscreenMask) {
              var _j2 = _i2 + (_total4 || 0);

              maskStartHash[_j2 + 1] = [_i2, _hasMask2, _offscreenMask];
              ctxTotal = _offscreenMask.target.ctx;
            } // filter造成的离屏，需要将后续一段孩子节点区域的ctx替换，并在结束后应用结果，再替换回来


            if (offscreenFilter) {
              var _j3 = _i2 + (_total4 || 0) + countMaskNum(__structs, _i2 + (_total4 || 0) + 1, _hasMask2 || 0);

              var _list2 = offscreenHash[_j3] = offscreenHash[_j3] || [];

              _list2.push([_i2, _lv2, OFFSCREEN_FILTER$1, offscreenFilter]);

              ctxTotal = offscreenFilter.target.ctx;
            } // overflow:hidden的离屏，最后孩子进行截取


            if (offscreenOverflow) {
              var _j4 = _i2 + (_total4 || 0) + countMaskNum(__structs, _i2 + (_total4 || 0) + 1, _hasMask2 || 0);

              var _list3 = offscreenHash[_j4] = offscreenHash[_j4] || [];

              _list3.push([_i2, _lv2, OFFSCREEN_OVERFLOW$1, offscreenOverflow]);

              ctxTotal = offscreenOverflow.target.ctx;
            } // 离屏应用，按照lv从大到小即子节点在前先应用，同一个节点多个效果按offscreen优先级从小到大来，
            // 由于mask特殊索引影响，所有离屏都在最后一个mask索引判断，此时mask本身优先结算，以index序大到小判断


            if (offscreenHash.hasOwnProperty(_i2)) {
              ctxTotal = applyOffscreen$1(ctxTotal, offscreenHash[_i2], width, height);
            } // render后判断可见状态，此时computedStyle才有值


            if (display === 'none') {
              _i2 += (_total4 || 0) + countMaskNum(__structs, _i2 + (_total4 || 0) + 1, _hasMask2 || 0);
            }
          }
        }
      } // 恢复，且局部根节点设置NONE


      assignMatrix$1(config[NODE_MATRIX_EVENT$4], baseMatrix);
      config[NODE_REFRESH_LV$1] = NONE$2;
    } // cacheTotal仍在说明<REPAINT，需计算各种新的参数
    else {
        var _refreshLevel2 = config[NODE_REFRESH_LV$1],
            _cacheStyle = config[NODE_CACHE_STYLE$1];

        if (contain$2(_refreshLevel2, TRANSFORM_ALL$1)) {
          var _matrix = node.__calMatrix(_refreshLevel2, _cacheStyle, currentStyle, computedStyle, config);

          assignMatrix$1(config[NODE_MATRIX$3], _matrix);
        }

        if (contain$2(_refreshLevel2, OP)) {
          config[NODE_OPACITY$2] = computedStyle[OPACITY$5] = currentStyle[OPACITY$5];
        }

        if (contain$2(_refreshLevel2, FT)) {
          node.__calFilter(currentStyle, computedStyle);
        }

        if (contain$2(_refreshLevel2, MBM)) {
          computedStyle[MIX_BLEND_MODE$3] = currentStyle[MIX_BLEND_MODE$3];
        }
      } // 其它基于total的cache，为了防止失败超限，必须有total结果


    if (cacheTotal && cacheTotal.available) {
      var overflow = computedStyle[OVERFLOW$3],
          filter = computedStyle[FILTER$5];
      var _target3 = cacheTotal;

      if (overflow === 'hidden') {
        if (!cacheOverflow || !cacheOverflow.available || needGen) {
          config[NODE_CACHE_OVERFLOW$1] = genOverflow(node, _target3);
          needGen = true;
        }

        _target3 = config[NODE_CACHE_OVERFLOW$1] || _target3;
      }

      if (filter && filter.length) {
        if (!cacheFilter || !cacheFilter.available || needGen) {
          config[NODE_CACHE_FILTER$1] = genFilter(node, _target3, filter);
          needGen = true;
        }

        _target3 = config[NODE_CACHE_FILTER$1] || _target3;
      }

      if (hasMask && (!cacheMask || !cacheMask.available || needGen)) {
        /**
         * 回调给Cache.genMask()使用，汇集所有mask到离屏mask2中
         * 当mask节点有cache时内部直接调用绘制了cache位图
         * 当mask没有缓存可用时进这里的普通渲染逻辑
         */
        config[NODE_CACHE_MASK$1] = genMask(node, _target3, function (item, cacheMask, inverse) {
          // 和外面没cache的类似，mask生成hash记录，这里mask节点一定是个普通无cache的独立节点
          var maskStartHash = {};
          var offscreenHash = {};
          var dx = cacheMask.dx,
              dy = cacheMask.dy,
              dbx = cacheMask.dbx,
              dby = cacheMask.dby,
              tx = cacheMask.x,
              ty = cacheMask.y,
              ctx = cacheMask.ctx;
          var _item$__config$NODE_S = item.__config[NODE_STRUCT$4],
              index = _item$__config$NODE_S[STRUCT_INDEX$2],
              total = _item$__config$NODE_S[STRUCT_TOTAL$1],
              lv = _item$__config$NODE_S[STRUCT_LV$2];
          var matrixList = [];
          var parentMatrix;
          var lastMatrix;
          var opacityList = [];
          var parentOpacity = 1;
          var lastOpacity;
          var lastLv = lv;

          for (var _i3 = index, _len3 = index + (total || 0) + 1; _i3 < _len3; _i3++) {
            var _structs$_i3 = __structs[_i3],
                _node3 = _structs$_i3[STRUCT_NODE$1],
                _lv3 = _structs$_i3[STRUCT_LV$2],
                _total6 = _structs$_i3[STRUCT_TOTAL$1],
                _hasMask3 = _structs$_i3[STRUCT_HAS_MASK$1]; // 排除Text

            if (_node3 instanceof Text) {
              _node3.render(renderMode, REPAINT$2, ctx, CHILD, dx, dy);

              if (offscreenHash.hasOwnProperty(_i3)) {
                ctx = applyOffscreen$1(ctx, offscreenHash[_i3], width, height);
              }
            } else {
              var _config2 = _node3.__config;
              var _refreshLevel3 = _config2[NODE_REFRESH_LV$1],
                  _cacheTotal3 = _config2[NODE_CACHE_TOTAL$1],
                  _cacheFilter2 = _config2[NODE_CACHE_FILTER$1],
                  _cacheMask2 = _config2[NODE_CACHE_MASK$1],
                  _cacheOverflow2 = _config2[NODE_CACHE_OVERFLOW$1],
                  _computedStyle3 = _config2[NODE_COMPUTED_STYLE$3];

              if (maskStartHash.hasOwnProperty(_i3)) {
                var _maskStartHash$_i2 = _slicedToArray(maskStartHash[_i3], 3),
                    _idx = _maskStartHash$_i2[0],
                    _n = _maskStartHash$_i2[1],
                    _offscreenMask2 = _maskStartHash$_i2[2];

                var _target5 = inject.getCacheCanvas(width, height, null, 'mask2');

                _offscreenMask2.mask = _target5; // 应用mask用到

                _offscreenMask2.isClip = _node3.isClip; // 定位到最后一个mask元素上的末尾

                var _j5 = _i3 + (_total6 || 0) + 1;

                while (--_n) {
                  var _total7 = __structs[_j5][STRUCT_TOTAL$1];
                  _j5 += (_total7 || 0) + 1;
                }

                _j5--;

                var _list4 = offscreenHash[_j5] = offscreenHash[_j5] || [];

                _list4.push([_idx, _lv3, OFFSCREEN_MASK$1, _offscreenMask2]);

                _list4.push([_j5, _lv3, OFFSCREEN_MASK2$1, {
                  ctx: ctx,
                  // 保存等待OFFSCREEN_MASK2时还原
                  target: _target5
                }]);

                ctx = _target5.ctx;
              } // lv变大说明是child，相等是sibling，变小可能是parent或另一棵子树，根节点是第一个特殊处理


              if (_i3 === index) ; else if (_lv3 > lastLv) {
                parentMatrix = lastMatrix;

                if (isE$3(parentMatrix)) {
                  parentMatrix = null;
                }

                matrixList.push(parentMatrix);
                parentOpacity = lastOpacity;
                opacityList.push(parentOpacity);
              } // 变小出栈索引需注意，可能不止一层，多层计算diff层级
              else if (_lv3 < lastLv) {
                  var _diff2 = lastLv - _lv3;

                  matrixList.splice(-_diff2);
                  parentMatrix = matrixList[_lv3 - 1];
                  opacityList.splice(-_diff2);
                  parentOpacity = opacityList[_lv3 - 1];
                } // 不变是同级兄弟，无需特殊处理 else {}


              lastLv = _lv3; // 计算临时的matrix

              var _display = _computedStyle3[DISPLAY$8],
                  _transform = _computedStyle3[TRANSFORM$4],
                  _tfo = _computedStyle3[TRANSFORM_ORIGIN$5]; // 特殊渲染的matrix，局部根节点为原点考虑，本节点需inverse反向

              var _target4 = getCache([_cacheMask2, _cacheFilter2, _cacheOverflow2, _cacheTotal3]);

              if (_target4) {
                _i3 += (_total6 || 0) + countMaskNum(__structs, _i3 + (_total6 || 0) + 1, _hasMask3 || 0); // 跳过display:none元素和它的所有子节点

                if (_display === 'none') {
                  continue;
                }

                var _mixBlendMode = _computedStyle3[MIX_BLEND_MODE$3];

                if (isValidMbm$2(_mixBlendMode)) {
                  ctx.globalCompositeOperation = mbmName$2(_mixBlendMode);
                } else {
                  ctx.globalCompositeOperation = 'source-over';
                }

                ctx.globalAlpha = _config2[NODE_OPACITY$2];
                Cache.drawCache(_target4, cacheMask, _transform, mx.identity(), _tfo.slice(0), parentMatrix, inverse);
                ctx.globalCompositeOperation = 'source-over';
              } // 等于将外面bbox计算和渲染合一的过程，但不需要bbox本身的内容
              else {
                  var _currentStyle2 = _config2[NODE_CURRENT_STYLE$5],
                      _cacheStyle2 = _config2[NODE_CACHE_STYLE$1];

                  var _matrix2 = void 0,
                      _opacity = void 0;

                  if (_refreshLevel3 < REPAINT$2) {
                    if (contain$2(_refreshLevel3, TRANSFORM_ALL$1)) {
                      _matrix2 = _node3.__calMatrix(_refreshLevel3, _cacheStyle2, _currentStyle2, _computedStyle3, _config2);
                      assignMatrix$1(_config2[NODE_MATRIX$3], _matrix2);
                    } else {
                      _matrix2 = _config2[NODE_MATRIX$3];
                    }

                    if (contain$2(_refreshLevel3, OP)) {
                      _computedStyle3[OPACITY$5] = _currentStyle2[OPACITY$5];
                    }

                    _opacity = _computedStyle3[OPACITY$5];

                    if (contain$2(_refreshLevel3, FT)) {
                      _node3.__bbox = null;

                      _node3.__calFilter(_currentStyle2, _computedStyle3);
                    }

                    _matrix2 = _config2[NODE_MATRIX$3];

                    if (contain$2(_refreshLevel3, MBM)) {
                      _computedStyle3[MIX_BLEND_MODE$3] = _currentStyle2[MIX_BLEND_MODE$3];
                    }
                  } else {
                    _node3.__bbox = null;

                    if (_i3 === index) {
                      _node3.__calFilter(_currentStyle2, _computedStyle3);
                    }

                    _matrix2 = _node3.__calMatrix(_refreshLevel3, _cacheStyle2, _currentStyle2, _computedStyle3, _config2);
                    assignMatrix$1(_config2[NODE_MATRIX$3], _matrix2);
                    _opacity = _computedStyle3[OPACITY$5] = _currentStyle2[OPACITY$5];
                  } // opacity可临时赋值下面循环渲染用，matrixEvent可能需重新计算，因为局部根节点为E没考虑继承，这里仅计算bbox用


                  if (_i3 === index) {
                    _opacity = 1;
                    _matrix2 = mx.identity();
                  } else if (parentMatrix) {
                    _matrix2 = multiply$2(parentMatrix, _matrix2);
                  }

                  assignMatrix$1(_config2[NODE_MATRIX_EVENT$4], _matrix2);
                  lastOpacity = _config2[NODE_OPACITY$2] = parentOpacity * _opacity; // 特殊渲染的matrix，局部根节点为原点考虑，当需要计算时再计算

                  var _m = void 0;

                  if (_i3 !== index && (!isE$3(parentMatrix) || !isE$3(_transform))) {
                    _tfo = _tfo.slice(0);
                    _tfo[0] += dbx + _node3.__sx1 - sx1 + tx;
                    _tfo[1] += dby + _node3.__sy1 - sy1 + ty;
                    _m = transform$1.calMatrixByOrigin(_transform, _tfo);

                    if (!isE$3(parentMatrix)) {
                      _m = multiply$2(parentMatrix, _m);
                    }
                  } else {
                    _m = null;
                  }

                  lastMatrix = _m;

                  if (_m) {
                    // 很多情况mask和target相同matrix，可简化计算
                    if (util.equalArr(_m, inverse)) {
                      _m = mx.identity();
                    } else {
                      inverse = mx.inverse(inverse);
                      _m = mx.multiply(inverse, _m);
                    }
                  }

                  if (_m) {
                    ctx.setTransform(_m[0], _m[1], _m[4], _m[5], _m[12], _m[13]);
                  } else {
                    ctx.setTransform(1, 0, 0, 1, 0, 0);
                  }

                  if (_refreshLevel3 >= REPAINT$2) {
                    // 手动计算cacheStyle和根据border-box的坐标再渲染
                    _node3.__calCache(renderMode, ctx, _config2[NODE_DOM_PARENT$5], _config2[NODE_CACHE_STYLE$1], _config2[NODE_CURRENT_STYLE$5], _computedStyle3, _node3.clientWidth, _node3.clientHeight, _node3.offsetWidth, _node3.offsetHeight, _computedStyle3[BORDER_TOP_WIDTH$6], _computedStyle3[BORDER_RIGHT_WIDTH$7], _computedStyle3[BORDER_BOTTOM_WIDTH$6], _computedStyle3[BORDER_LEFT_WIDTH$8], _computedStyle3[PADDING_TOP$5], _computedStyle3[PADDING_RIGHT$6], _computedStyle3[PADDING_BOTTOM$5], _computedStyle3[PADDING_LEFT$7], _node3.__sx1, _node3.__sx2, _node3.__sx3, _node3.__sx4, _node3.__sx5, _node3.__sx6, _node3.__sy1, _node3.__sy2, _node3.__sy3, _node3.__sy4, _node3.__sy5, _node3.__sy6);
                  }

                  var _res = _node3.render(renderMode, _refreshLevel3, ctx, CHILD, dx, dy);

                  _config2[NODE_REFRESH_LV$1] = REPAINT$2;

                  var _ref2 = _res || {},
                      _offscreenBlend = _ref2.offscreenBlend,
                      _offscreenMask3 = _ref2.offscreenMask,
                      _offscreenFilter = _ref2.offscreenFilter,
                      _offscreenOverflow = _ref2.offscreenOverflow; // 这里离屏顺序和xom里返回的一致，和下面应用离屏时的list相反


                  if (_offscreenBlend) {
                    var _j6 = _i3 + (_total6 || 0) + countMaskNum(__structs, _i3 + (_total6 || 0) + 1, _hasMask3 || 0);

                    var _list5 = offscreenHash[_j6] = offscreenHash[_j6] || [];

                    _list5.push([_i3, _lv3, OFFSCREEN_BLEND$1, _offscreenBlend]);

                    ctx = _offscreenBlend.target.ctx;
                  } // 被遮罩的节点要为第一个遮罩和最后一个遮罩的索引打标，被遮罩的本身在一个离屏canvas，遮罩的元素在另外一个
                  // 最后一个遮罩索引因数量不好计算，放在maskStartHash做


                  if (_offscreenMask3) {
                    var _j7 = _i3 + (_total6 || 0);

                    maskStartHash[_j7 + 1] = [_i3, _hasMask3, _offscreenMask3];
                    ctx = _offscreenMask3.target.ctx;
                  } // filter造成的离屏，需要将后续一段孩子节点区域的ctx替换，并在结束后应用结果，再替换回来


                  if (_offscreenFilter) {
                    var _j8 = _i3 + (_total6 || 0) + countMaskNum(__structs, _i3 + (_total6 || 0) + 1, _hasMask3 || 0);

                    var _list6 = offscreenHash[_j8] = offscreenHash[_j8] || [];

                    _list6.push([_i3, _lv3, OFFSCREEN_FILTER$1, _offscreenFilter]);

                    ctx = _offscreenFilter.target.ctx;
                  } // overflow:hidden的离屏，最后孩子进行截取


                  if (_offscreenOverflow) {
                    var _j9 = _i3 + (_total6 || 0) + countMaskNum(__structs, _i3 + (_total6 || 0) + 1, _hasMask3 || 0);

                    var _list7 = offscreenHash[_j9] = offscreenHash[_j9] || [];

                    _list7.push([_i3, _lv3, OFFSCREEN_OVERFLOW$1, _offscreenOverflow]);

                    ctx = _offscreenOverflow.target.ctx;
                  } // 离屏应用，按照lv从大到小即子节点在前先应用，同一个节点多个效果按offscreen优先级从小到大来，
                  // 由于mask特殊索引影响，所有离屏都在最后一个mask索引判断，此时mask本身优先结算，以index序大到小判断


                  if (offscreenHash.hasOwnProperty(_i3)) {
                    ctx = applyOffscreen$1(ctx, offscreenHash[_i3], width, height);
                  } // render后判断可见状态，此时computedStyle才有值


                  if (_display === 'none') {
                    _i3 += (_total6 || 0) + countMaskNum(__structs, _i3 + (_total6 || 0) + 1, _hasMask3 || 0);
                  }
                }
            }
          }
        });
      }
    }
  }

  function genFilter(node, cache, v) {
    return Cache.genFilter(cache, v);
  }

  function genMask(node, cache, cb) {
    return Cache.genMask(cache, node, cb);
  }

  function genOverflow(node, cache) {
    var sbox = node.bbox;
    var bbox = cache.bbox; // 没超过无需生成

    if (bbox[0] >= sbox[0] && bbox[1] >= sbox[1] && bbox[2] <= sbox[2] && bbox[3] <= sbox[3]) {
      return;
    }

    return Cache.genOverflow(cache, node);
  }

  function resetMatrixCacheTotal(__structs, index, total, lv, matrixEvent) {
    var matrixList = [];
    var parentMatrix;
    var lastMatrix = matrixEvent;
    var lastLv = lv;

    for (var i = index + 1, len = index + (total || 0) + 1; i < len; i++) {
      var _structs$i2 = __structs[i],
          node = _structs$i2[STRUCT_NODE$1],
          _lv4 = _structs$i2[STRUCT_LV$2],
          _total8 = _structs$i2[STRUCT_TOTAL$1],
          hasMask = _structs$i2[STRUCT_HAS_MASK$1]; // 排除Text

      if (node instanceof Text) {
        continue;
      }

      var __config = node.__config;
      var old = __config[NODE_MATRIX_EVENT$4],
          __cacheTotal = __config[NODE_CACHE_TOTAL$1],
          currentStyle = __config[NODE_CURRENT_STYLE$5],
          computedStyle = __config[NODE_COMPUTED_STYLE$3],
          cacheStyle = __config[NODE_CACHE_STYLE$1]; // 跳过display:none元素和它的所有子节点和mask

      if (computedStyle[DISPLAY$8] === 'none') {
        i += (_total8 || 0) + countMaskNum(__structs, i + (_total8 || 0) + 1, hasMask || 0);
        continue;
      } // lv变大说明是child，相等是sibling，变小可能是parent或另一棵子树


      if (_lv4 > lastLv) {
        parentMatrix = lastMatrix;

        if (isE$3(parentMatrix)) {
          parentMatrix = null;
        }

        matrixList.push(parentMatrix);
      } // 变小出栈索引需注意，可能不止一层，多层计算diff层级
      else if (_lv4 < lastLv) {
          var diff = lastLv - _lv4;
          matrixList.splice(-diff);
          parentMatrix = matrixList[_lv4 - 1];
        } // 不变是同级兄弟，无需特殊处理 else {}


      lastLv = _lv4;
      old = old.slice(0); // 计算真正的相对于root原点的matrix

      cacheStyle[MATRIX$4] = null;

      var matrix = node.__calMatrix(REPAINT$2, cacheStyle, currentStyle, computedStyle, __config);

      assignMatrix$1(__config[NODE_MATRIX$3], matrix);

      if (!isE$3(parentMatrix)) {
        matrix = multiply$2(parentMatrix, matrix);
      }

      assignMatrix$1(__config[NODE_MATRIX_EVENT$4], matrix);
      lastMatrix = matrix; // 深度遍历递归进行

      if (__cacheTotal && __cacheTotal.available) {
        var needReset = __cacheTotal.isNew;

        if (!needReset && !util.equalArr(old, matrix)) {
          needReset = true;
        }

        if (needReset) {
          resetMatrixCacheTotal(__structs, i, _total8 || 0, _lv4, matrix);
        }

        __cacheTotal.__isNew = false;
        i += (_total8 || 0) + countMaskNum(__structs, i + (_total8 || 0) + 1, hasMask || 0);
      }
    }
  }
  /**
   * canvas/webgl支持任意节点为mask，不像svg仅单节点
   * hasMask的num是指遮罩对象后面的兄弟节点数，需要换算成包含子节点的总数
   * @param __structs
   * @param start
   * @param hasMask
   */


  function countMaskNum(__structs, start, hasMask) {
    var count = 0;

    while (hasMask--) {
      var total = __structs[start][STRUCT_TOTAL$1];
      count += total || 0;
      start += total || 0; // total不算自身，所以还得+1

      count++;
      start++;
    }

    return count;
  } // webgl不太一样，使用fbo离屏绘制到一个纹理上进行汇总


  function genFrameBufferWithTexture(gl, texCache, width, height) {
    var n = texCache.lockOneChannel();
    var texture = webgl.createTexture(gl, null, n, width, height);
    var frameBuffer = gl.createFramebuffer();
    gl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);
    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, texture, 0);
    var check = gl.checkFramebufferStatus(gl.FRAMEBUFFER);

    if (check !== gl.FRAMEBUFFER_COMPLETE) {
      inject.error('Framebuffer object is incomplete: ' + check.toString());
    } // 离屏窗口0开始


    gl.viewport(0, 0, width, height);
    gl.clearColor(0, 0, 0, 0);
    gl.clear(gl.COLOR_BUFFER_BIT);
    return [n, frameBuffer, texture];
  }
  /**
   * 局部根节点复合图层生成，汇总所有子节点到一颗局部树上的位图缓存，包含超限特殊情况
   * 即便只有自己一个也要返回，因为webgl生成total的原因是有类似filter/mask等必须离屏处理的东西
   * @param gl
   * @param texCache
   * @param node
   * @param __config
   * @param index
   * @param total
   * @param __structs
   * @param cache
   * @param limitCache
   * @param hasMbm
   * @param W
   * @param H
   * @returns {*}
   */


  function genTotalWebgl(gl, texCache, node, __config, index, total, __structs, cache, limitCache, hasMbm, W, H) {
    // 存每层父亲的matrix和opacity和index，bbox计算过程中生成，缓存给下面渲染过程用
    var parentIndexHash = {};
    var opacityHash = {};

    var _genBboxTotal = genBboxTotal(node, __structs, index, total, parentIndexHash, opacityHash, gl.getParameter(gl.MAX_TEXTURE_SIZE), limitCache),
        _genBboxTotal2 = _slicedToArray(_genBboxTotal, 2),
        bboxTotal = _genBboxTotal2[0],
        parentPm = _genBboxTotal2[1]; // 可能局部根节点合成过程中发现整体超限


    var totalLimitCache;

    if (!bboxTotal) {
      totalLimitCache = true;
    } // 超限情况生成画布大小的特殊纹理


    if (limitCache || totalLimitCache) {
      bboxTotal = [0, 0, W, H];
    }

    var width = bboxTotal[2] - bboxTotal[0];
    var height = bboxTotal[3] - bboxTotal[1];

    var _genFrameBufferWithTe = genFrameBufferWithTexture(gl, texCache, width, height),
        _genFrameBufferWithTe2 = _slicedToArray(_genFrameBufferWithTe, 3),
        n = _genFrameBufferWithTe2[0],
        frameBuffer = _genFrameBufferWithTe2[1],
        texture = _genFrameBufferWithTe2[2]; // 以bboxTotal的左上角为原点生成离屏texture


    var sx1 = node.__sx1,
        sy1 = node.__sy1;
    var cx = width * 0.5,
        cy = height * 0.5;
    var dx = -bboxTotal[0],
        dy = -bboxTotal[1];
    var dbx = sx1 - bboxTotal[0],
        dby = sy1 - bboxTotal[1]; // 先绘制自己的cache，起点所以matrix视作E为空，opacity固定1

    if (cache && cache.available) {
      texCache.addTexAndDrawWhenLimit(gl, cache, 1, null, cx, cy, dx, dy);
    } // limitCache无cache需先绘制到统一的离屏画布上
    else if (limitCache) {
        var c = inject.getCacheCanvas(width, height, '__$$OVERSIZE$$__');
        node.render(mode.WEBGL, 0, gl, NA, 0, 0);
        var j = texCache.lockOneChannel();

        var _texture = webgl.createTexture(gl, c.canvas, j);

        var _mockCache = new MockCache(gl, _texture, 0, 0, width, height, [0, 0, width, height]);

        texCache.addTexAndDrawWhenLimit(gl, _mockCache, 1, null, cx, cy, 0, 0);
        texCache.refresh(gl, cx, cy);
        c.ctx.setTransform(1, 0, 0, 1, 0, 0);
        c.ctx.globalAlpha = 1;
        c.ctx.clearRect(0, 0, width, height);

        _mockCache.release();

        texCache.releaseLockChannel(j);
      } // 因为cacheTotal不总是以左上角原点为开始，所以必须每个节点重算matrix，合并box时计算的无法用到


    var matrixHash = {}; // 先序遍历汇总到total

    for (var i = index + 1, len = index + (total || 0) + 1; i < len; i++) {
      var _structs$i3 = __structs[i],
          _node4 = _structs$i3[STRUCT_NODE$1],
          _total9 = _structs$i3[STRUCT_TOTAL$1],
          hasMask = _structs$i3[STRUCT_HAS_MASK$1];
      var _config3 = _node4.__config;
      var parentIndex = parentIndexHash[i];
      var matrix = matrixHash[parentIndex]; // 父节点的在每个节点计算后保存，第一个为top的默认为E（空）

      var opacity = opacityHash[i]; // opacity在合并box时已经计算可以直接用
      // 先看text，visibility会在内部判断，display会被parent判断

      if (_node4 instanceof Text) {
        if (parentPm) {
          matrix = multiply$2(parentPm, matrix);
        }

        texCache.addTexAndDrawWhenLimit(gl, _config3[NODE_CACHE$3], opacity, matrix, cx, cy, dx, dy);
      } // 再看total缓存/cache，都没有的是无内容的Xom节点
      else {
          var __cache = _config3[NODE_CACHE$3],
              __cacheTotal = _config3[NODE_CACHE_TOTAL$1],
              __cacheFilter = _config3[NODE_CACHE_FILTER$1],
              __cacheMask = _config3[NODE_CACHE_MASK$1],
              __cacheOverflow = _config3[NODE_CACHE_OVERFLOW$1],
              isMask = _config3[NODE_IS_MASK$2],
              _config3$NODE_COMPUTE = _config3[NODE_COMPUTED_STYLE$3],
              display = _config3$NODE_COMPUTE[DISPLAY$8],
              visibility = _config3$NODE_COMPUTE[VISIBILITY$5],
              transform = _config3$NODE_COMPUTE[TRANSFORM$4],
              transformOrigin = _config3$NODE_COMPUTE[TRANSFORM_ORIGIN$5],
              mixBlendMode = _config3$NODE_COMPUTE[MIX_BLEND_MODE$3];

          if (display === 'none') {
            i += (_total9 || 0) + countMaskNum(__structs, i + (_total9 || 0) + 1, hasMask || 0);
            continue;
          } // mask和不可见不能被汇总到top上


          if (visibility === 'hidden' || isMask) {
            continue;
          }

          if (transform && !isE$3(transform)) {
            var tfo = transformOrigin.slice(0); // total下的节点tfo的计算，以total为原点，差值坐标即相对坐标

            if (__cache && __cache.available) {
              tfo[0] += __cache.sx1;
              tfo[1] += __cache.sy1;
            } else {
              tfo[0] += _node4.__sx1;
              tfo[1] += _node4.__sy1;
            }

            var _dx = -sx1 + dbx;

            var _dy = -sy1 + dby;

            tfo[0] += _dx;
            tfo[1] += _dy;
            var m = transform$1.calMatrixByOrigin(transform, tfo);

            if (matrix) {
              matrix = multiply$2(matrix, m);
            } else {
              matrix = m;
            }
          }

          if (matrix) {
            matrixHash[i] = matrix;
          }

          if (parentPm) {
            matrix = multiply$2(parentPm, matrix);
          }

          var target = getCache([__cacheMask, __cacheFilter, __cacheOverflow, __cacheTotal, __cache]);

          if (target) {
            // 局部的mbm和主画布一样，先刷新当前fbo，然后把后面这个mbm节点绘入一个新的等画布尺寸的fbo中，再进行2者mbm合成
            if (isValidMbm$2(mixBlendMode)) {
              texCache.refresh(gl, cx, cy);

              var _genFrameBufferWithTe3 = genFrameBufferWithTexture(gl, texCache, width, height),
                  _genFrameBufferWithTe4 = _slicedToArray(_genFrameBufferWithTe3, 3),
                  n2 = _genFrameBufferWithTe4[0],
                  frameBuffer2 = _genFrameBufferWithTe4[1],
                  texture2 = _genFrameBufferWithTe4[2];

              texCache.addTexAndDrawWhenLimit(gl, target, opacity, matrix, cx, cy, dx, dy);
              texCache.refresh(gl, cx, cy); // 合成结果作为当前frameBuffer，以及纹理和单元，等于替代了当前fbo作为绘制对象

              var _genMbmWebgl = genMbmWebgl(gl, texCache, n, n2, frameBuffer, texture, mbmName$2(mixBlendMode), width, height);

              var _genMbmWebgl2 = _slicedToArray(_genMbmWebgl, 3);

              n = _genMbmWebgl2[0];
              frameBuffer = _genMbmWebgl2[1];
              texture = _genMbmWebgl2[2];
              gl.deleteFramebuffer(frameBuffer2);
              gl.deleteTexture(texture2);
            } else {
              texCache.addTexAndDrawWhenLimit(gl, target, opacity, matrix, cx, cy, dx, dy);
            }

            if (target !== __cache) {
              i += (_total9 || 0) + countMaskNum(__structs, i + (_total9 || 0) + 1, hasMask || 0);
            }
          } // webgl特殊的外部钩子，比如粒子组件自定义渲染时调用
          else if (_node4.__hookGlRender) {
              _node4.__hookGlRender(gl, opacity, cx, cy, dx, dy);
            }
        }
    } // 绘制到fbo的纹理对象上并删除fbo恢复


    texCache.refresh(gl, cx, cy);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.viewport(0, 0, W, H);
    gl.deleteFramebuffer(frameBuffer); // 生成的纹理对象本身已绑定一个纹理单元了，释放lock的同时可以给texCache的channel缓存，避免重复上传

    var mockCache = new MockCache(gl, texture, sx1, sy1, width, height, bboxTotal);
    texCache.releaseLockChannel(n, mockCache.page);
    return [limitCache || totalLimitCache, mockCache];
  }

  function genFilterWebgl(gl, texCache, node, cache, filter, W, H) {
    var sx1 = cache.sx1,
        sy1 = cache.sy1,
        width = cache.width,
        height = cache.height,
        bbox = cache.bbox;
    var mockCache = cache;
    filter.forEach(function (item) {
      var _item2 = _slicedToArray(item, 2),
          k = _item2[0],
          v = _item2[1];

      if (k === 'blur' && v > 0) {
        var res = genBlurWebgl(gl, texCache, mockCache, v, width, height, sx1, sy1, bbox);

        if (res) {
          var _res2 = _slicedToArray(res, 4);

          mockCache = _res2[0];
          width = _res2[1];
          height = _res2[2];
          bbox = _res2[3];
        }
      } else if (k === 'hue-rotate') {
        var rotation = geom.d2r(v % 360);
        var cosR = Math.cos(rotation);
        var sinR = Math.sin(rotation);

        var _res3 = genColorMatrixWebgl(gl, texCache, mockCache, [0.213 + cosR * 0.787 - sinR * 0.213, 0.715 - cosR * 0.715 - sinR * 0.715, 0.072 - cosR * 0.072 + sinR * 0.928, 0, 0, 0.213 - cosR * 0.213 + sinR * 0.143, 0.715 + cosR * 0.285 + sinR * 0.140, 0.072 - cosR * 0.072 - sinR * 0.283, 0, 0, 0.213 - cosR * 0.213 - sinR * 0.787, 0.715 - cosR * 0.715 + sinR * 0.715, 0.072 + cosR * 0.928 + sinR * 0.072, 0, 0, 0, 0, 0, 1, 0], width, height, sx1, sy1, bbox);

        if (_res3) {
          var _res4 = _slicedToArray(_res3, 4);

          mockCache = _res4[0];
          width = _res4[1];
          height = _res4[2];
          bbox = _res4[3];
        }
      } else if (k === 'saturate' && v !== 100) {
        var amount = v * 0.01;

        var _res5 = genColorMatrixWebgl(gl, texCache, mockCache, [0.213 + 0.787 * amount, 0.715 - 0.715 * amount, 0.072 - 0.072 * amount, 0, 0, 0.213 - 0.213 * amount, 0.715 + 0.285 * amount, 0.072 - 0.072 * amount, 0, 0, 0.213 - 0.213 * amount, 0.715 - 0.715 * amount, 0.072 + 0.928 * amount, 0, 0, 0, 0, 0, 1, 0], width, height, sx1, sy1, bbox);

        if (_res5) {
          var _res6 = _slicedToArray(_res5, 4);

          mockCache = _res6[0];
          width = _res6[1];
          height = _res6[2];
          bbox = _res6[3];
        }
      } else if (k === 'brightness' && v !== 100) {
        var b = v * 0.01;

        var _res7 = genColorMatrixWebgl(gl, texCache, mockCache, [b, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, b, 0, 0, 0, 0, 0, 1, 0], width, height, sx1, sy1, bbox);

        if (_res7) {
          var _res8 = _slicedToArray(_res7, 4);

          mockCache = _res8[0];
          width = _res8[1];
          height = _res8[2];
          bbox = _res8[3];
        }
      } else if (k === 'grayscale' && v > 0) {
        var oneMinusAmount = 1 - v * 0.01;

        if (oneMinusAmount < 0) {
          oneMinusAmount = 0;
        } else if (oneMinusAmount > 1) {
          oneMinusAmount = 1;
        }

        var _res9 = genColorMatrixWebgl(gl, texCache, mockCache, [0.2126 + 0.7874 * oneMinusAmount, 0.7152 - 0.7152 * oneMinusAmount, 0.0722 - 0.0722 * oneMinusAmount, 0, 0, 0.2126 - 0.2126 * oneMinusAmount, 0.7152 + 0.2848 * oneMinusAmount, 0.0722 - 0.0722 * oneMinusAmount, 0, 0, 0.2126 - 0.2126 * oneMinusAmount, 0.7152 - 0.7152 * oneMinusAmount, 0.0722 + 0.9278 * oneMinusAmount, 0, 0, 0, 0, 0, 1, 0], width, height, sx1, sy1, bbox);

        if (_res9) {
          var _res10 = _slicedToArray(_res9, 4);

          mockCache = _res10[0];
          width = _res10[1];
          height = _res10[2];
          bbox = _res10[3];
        }
      } else if (k === 'contrast' && v !== 100) {
        var _amount = v * 0.01;

        var o = -0.5 * _amount;

        var _res11 = genColorMatrixWebgl(gl, texCache, mockCache, [_amount, 0, 0, 0, o, 0, _amount, 0, 0, o, 0, 0, _amount, 0, o, 0, 0, 0, 1, 0], width, height, sx1, sy1, bbox);

        if (_res11) {
          var _res12 = _slicedToArray(_res11, 4);

          mockCache = _res12[0];
          width = _res12[1];
          height = _res12[2];
          bbox = _res12[3];
        }
      }
    }); // 切换回主程序

    gl.useProgram(gl.program);
    gl.viewport(0, 0, W, H);
    return mockCache;
  }
  /**
   * https://www.w3.org/TR/2018/WD-filter-effects-1-20181218/#feGaussianBlurElement
   * 根据cacheTotal生成cacheFilter，按照css规范的优化方法执行3次，避免卷积核d扩大3倍性能慢
   * 规范的优化方法对d的值分奇偶优化，这里再次简化，d一定是奇数，即卷积核大小
   * 先动态生成gl程序，默认3核源码示例已注释，根据sigma获得d（一定奇数），再计算权重
   * 然后将d尺寸和权重拼接成真正程序并编译成program，再开始绘制
   */


  function genBlurWebgl(gl, texCache, cache, sigma, width, height, sx1, sy1, bbox) {
    var d = blur.kernelSize(sigma);
    var max = Math.max(15, gl.getParameter(gl.MAX_VARYING_VECTORS));

    while (d > max) {
      d -= 2;
    }

    var spread = blur.outerSizeByD(d);
    width += spread * 2;
    height += spread * 2; // 防止超限，webgl最大纹理尺寸限制

    var limit = gl.getParameter(gl.MAX_TEXTURE_SIZE);

    if (width > limit || height > limit) {
      return;
    }

    bbox = bbox.slice(0);
    bbox[0] -= spread;
    bbox[1] -= spread;
    bbox[2] += spread;
    bbox[3] += spread;
    var cx = width * 0.5,
        cy = height * 0.5;
    var weights = blur.gaussianWeight(sigma, d);
    var vert = '';
    var frag = '';
    var r = Math.floor(d * 0.5);

    for (var _i4 = 0; _i4 < r; _i4++) {
      var c = (r - _i4) * 0.01;
      vert += "v_texCoordsBlur[".concat(_i4, "] = a_texCoords + vec2(-").concat(c, ", -").concat(c, ") * u_direction;");
      frag += "gl_FragColor += texture2D(u_texture, v_texCoordsBlur[".concat(_i4, "]) * ").concat(weights[_i4], ";");
    }

    vert += "v_texCoordsBlur[".concat(r, "] = a_texCoords;");
    frag += "gl_FragColor += texture2D(u_texture, v_texCoordsBlur[".concat(r, "]) * ").concat(weights[r], ";");

    for (var _i5 = 0; _i5 < r; _i5++) {
      var _c = (_i5 + 1) * 0.01;

      vert += "v_texCoordsBlur[".concat(_i5 + r + 1, "] = a_texCoords + vec2(").concat(_c, ", ").concat(_c, ") * u_direction;");
      frag += "gl_FragColor += texture2D(u_texture, v_texCoordsBlur[".concat(_i5 + r + 1, "]) * ").concat(weights[_i5 + r + 1], ";");
    }

    vert = vertexBlur.replace('[3]', '[' + d + ']').replace(/}$/, vert + '}');
    frag = fragmentBlur.replace('[3]', '[' + d + ']').replace(/}$/, frag + '}');
    var program = webgl.initShaders(gl, vert, frag);
    gl.useProgram(program);

    var _genFrameBufferWithTe5 = genFrameBufferWithTexture(gl, texCache, width, height),
        _genFrameBufferWithTe6 = _slicedToArray(_genFrameBufferWithTe5, 3),
        i = _genFrameBufferWithTe6[0],
        frameBuffer = _genFrameBufferWithTe6[1],
        texture = _genFrameBufferWithTe6[2]; // 将本身total的page纹理放入一个单元，一般刚生成已经在了，少部分情况变更引发的可能不在


    var j = texCache.findExistTexChannel(cache.page);

    if (j === -1) {
      // 直接绑定，因为一定是个mockCache
      j = texCache.lockOneChannel();
      webgl.bindTexture(gl, cache.page.texture, j);
    } else {
      texCache.lockChannel(j);
    }

    texture = webgl.drawBlur(gl, program, frameBuffer, texCache, texture, cache.page.texture, i, j, width, height, cx, cy, spread, d, sigma); // 销毁这个临时program

    gl.deleteShader(program.vertexShader);
    gl.deleteShader(program.fragmentShader);
    gl.deleteProgram(program);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.deleteFramebuffer(frameBuffer);
    texCache.releaseLockChannel(j);
    var mockCache = new MockCache(gl, texture, sx1, sy1, width, height, bbox);
    texCache.releaseLockChannel(i, mockCache.page);
    return [mockCache, width, height, bbox];
  }

  function genColorMatrixWebgl(gl, texCache, cache, m, width, height, sx1, sy1, bbox) {
    // 生成最终纹理，尺寸为被遮罩节点大小
    var _genFrameBufferWithTe7 = genFrameBufferWithTexture(gl, texCache, width, height),
        _genFrameBufferWithTe8 = _slicedToArray(_genFrameBufferWithTe7, 3),
        i = _genFrameBufferWithTe8[0],
        frameBuffer = _genFrameBufferWithTe8[1],
        texture = _genFrameBufferWithTe8[2]; // 将本身total的page纹理放入一个单元，一般刚生成已经在了，少部分情况变更引发的可能不在


    var j = texCache.findExistTexChannel(cache.page);

    if (j === -1) {
      // 直接绑定，因为一定是个mockCache
      j = texCache.lockOneChannel();
      webgl.bindTexture(gl, cache.page.texture, j);
    } else {
      texCache.lockChannel(j);
    }

    gl.useProgram(gl.programCm);
    webgl.drawCm(gl, gl.programCm, j, m);
    texCache.releaseLockChannel(j); // 切回

    gl.useProgram(gl.program);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.deleteFramebuffer(frameBuffer); // 同total一样生成一个mockCache

    var mockCache = new MockCache(gl, texture, sx1, sy1, width, height, bbox.slice(0));
    texCache.releaseLockChannel(i, mockCache.page);
    return [mockCache, width, height, bbox];
  }

  function genOverflowWebgl(gl, texCache, node, cache, W, H) {
    var sbox = node.bbox.slice(0);
    var bbox = cache.bbox; // 没超过无需生成

    if (bbox[0] >= sbox[0] && bbox[1] >= sbox[1] && bbox[2] <= sbox[2] && bbox[3] <= sbox[3]) {
      return;
    }

    var width = sbox[2] - sbox[0],
        height = sbox[3] - sbox[1]; // 生成最终纹理，尺寸为被遮罩节点大小

    var _genFrameBufferWithTe9 = genFrameBufferWithTexture(gl, texCache, width, height),
        _genFrameBufferWithTe10 = _slicedToArray(_genFrameBufferWithTe9, 3),
        i = _genFrameBufferWithTe10[0],
        frameBuffer = _genFrameBufferWithTe10[1],
        texture = _genFrameBufferWithTe10[2]; // 将本身total的page纹理放入一个单元，一般刚生成已经在了，少部分情况变更引发的可能不在


    var j = texCache.findExistTexChannel(cache.page);

    if (j === -1) {
      // 直接绑定，因为一定是个mockCache
      j = texCache.lockOneChannel();
      webgl.bindTexture(gl, cache.page.texture, j);
    } else {
      texCache.lockChannel(j);
    } // 绘制，根据坐标裁剪使用原本纹理的一部分


    gl.useProgram(gl.programOverflow);
    webgl.drawOverflow(gl, j, sbox[0] - bbox[0], sbox[1] - bbox[1], width, height, cache.width, cache.height);
    texCache.releaseLockChannel(j); // 切回

    gl.useProgram(gl.program);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.viewport(0, 0, W, H);
    gl.deleteFramebuffer(frameBuffer); // 同total一样生成一个mockCache

    var overflowCache = new MockCache(gl, texture, cache.sx1, cache.sy1, width, height, sbox);
    texCache.releaseLockChannel(i, overflowCache.page);
    return overflowCache;
  }

  function genMaskWebgl(gl, texCache, node, __config, cache, W, H, lv, __structs) {
    var sx1 = cache.sx1,
        sy1 = cache.sy1,
        width = cache.width,
        height = cache.height,
        bbox = cache.bbox,
        dx = cache.dx,
        dy = cache.dy; // cache一定是mockCache，可能是total/filter/overflow一种

    var cx = width * 0.5,
        cy = height * 0.5; // 先求得被遮罩的matrix，用作inverse给mask计算

    var _config$NODE_COMPUTE2 = __config[NODE_COMPUTED_STYLE$3],
        transform = _config$NODE_COMPUTE2[TRANSFORM$4],
        transformOrigin = _config$NODE_COMPUTE2[TRANSFORM_ORIGIN$5];
    var inverse;

    if (isE$3(transform)) {
      inverse = mx.identity();
    } else {
      var tfo = transformOrigin.slice(0);
      tfo[0] += sx1 + dx;
      tfo[1] += sy1 + dy;
      inverse = transform$1.calMatrixByOrigin(transform, tfo);
    }

    inverse = mx.inverse(inverse); // 将所有mask绘入一个单独纹理中，尺寸和原点与被遮罩total相同，才能做到顶点坐标一致

    var _genFrameBufferWithTe11 = genFrameBufferWithTexture(gl, texCache, width, height),
        _genFrameBufferWithTe12 = _slicedToArray(_genFrameBufferWithTe11, 3),
        i = _genFrameBufferWithTe12[0],
        frameBuffer = _genFrameBufferWithTe12[1],
        texture = _genFrameBufferWithTe12[2];

    var next = node.next;
    var isClip = next.isClip;
    var list = [];

    while (next && next.isMask && next.isClip === isClip) {
      list.push(next);
      next = next.next;
    }

    for (var _i6 = 0, len = list.length; _i6 < len; _i6++) {
      var item = list[_i6];
      var matrixList = [];
      var parentMatrix = void 0;
      var lastMatrix = void 0;
      var opacityList = [];
      var parentOpacity = 1;
      var lastOpacity = void 0;
      var lastLv = lv;
      var _item$__config$NODE_S2 = item.__config[NODE_STRUCT$4],
          index = _item$__config$NODE_S2[STRUCT_INDEX$2],
          total = _item$__config$NODE_S2[STRUCT_TOTAL$1]; // 可以忽略mbm，因为只有透明遮罩

      for (var _i7 = index, _len4 = index + (total || 0) + 1; _i7 < _len4; _i7++) {
        var _structs$_i4 = __structs[_i7],
            _node5 = _structs$_i4[STRUCT_NODE$1],
            _lv5 = _structs$_i4[STRUCT_LV$2],
            _total10 = _structs$_i4[STRUCT_TOTAL$1],
            hasMask = _structs$_i4[STRUCT_HAS_MASK$1];
        var _config4 = _node5.__config;
        var __cache = _config4[NODE_CACHE$3],
            computedStyle = _config4[NODE_COMPUTED_STYLE$3],
            limitCache = _config4[NODE_LIMIT_CACHE$2]; // 跳过display:none元素和它的所有子节点和mask

        if (computedStyle[DISPLAY$8] === 'none') {
          _i7 += (_total10 || 0) + countMaskNum(__structs, _i7 + (_total10 || 0) + 1, hasMask || 0);
          continue;
        }

        if (_node5 instanceof Text) {
          if (__cache && __cache.available) {
            // text用父级的matrixEvent，在之前texCache添加到末尾了
            texCache.addTexAndDrawWhenLimit(gl, __cache, parentOpacity, texCache.last[2], cx, cy, 0, 0, true);
          } else if (limitCache) {
            return;
          }
        } else {
          var _cache = _config4[NODE_CACHE$3],
              __cacheMask = _config4[NODE_CACHE_MASK$1],
              __cacheFilter = _config4[NODE_CACHE_FILTER$1],
              __cacheOverflow = _config4[NODE_CACHE_OVERFLOW$1],
              __cacheTotal = _config4[NODE_CACHE_TOTAL$1],
              _config4$NODE_COMPUTE = _config4[NODE_COMPUTED_STYLE$3],
              opacity = _config4$NODE_COMPUTE[OPACITY$5],
              _transform2 = _config4$NODE_COMPUTE[TRANSFORM$4],
              _transformOrigin = _config4$NODE_COMPUTE[TRANSFORM_ORIGIN$5]; // lv变大说明是child，相等是sibling，变小可能是parent或另一棵子树，根节点是第一个特殊处理

          if (_i7 === index) ; else if (_lv5 > lastLv) {
            parentMatrix = lastMatrix;

            if (isE$3(parentMatrix)) {
              parentMatrix = null;
            }

            matrixList.push(parentMatrix);
            parentOpacity = lastOpacity;
            opacityList.push(parentOpacity);
          } // 变小出栈索引需注意，可能不止一层，多层计算diff层级
          else if (_lv5 < lastLv) {
              var diff = lastLv - _lv5;
              matrixList.splice(-diff);
              parentMatrix = matrixList[_lv5 - 1];
              opacityList.splice(-diff);
              parentOpacity = opacityList[_lv5 - 1];
            } // 不变是同级兄弟，无需特殊处理 else {}


          lastLv = _lv5;
          var target = getCache([__cacheMask, __cacheFilter, __cacheOverflow, __cacheTotal, _cache]); // total和自身cache的尝试，visibility不可见时没有cache

          if (target) {
            var m = void 0;

            if (isE$3(_transform2)) {
              m = mx.identity();
            } else {
              var _tfo3 = _transformOrigin.slice(0);

              _tfo3[0] += target.bbox[0] + dx;
              _tfo3[1] += target.bbox[1] + dy;
              m = transform$1.calMatrixByOrigin(_transform2, _tfo3);
            }

            m = mx.multiply(inverse, m);

            var _tfo2 = _transformOrigin.slice(0);

            _tfo2[0] += target.bbox[0] + dx;
            _tfo2[1] += target.bbox[1] + dy;
            lastMatrix = transform$1.calMatrixByOrigin(_transform2, _tfo2);

            if (!isE$3(parentMatrix)) {
              lastMatrix = multiply$2(parentMatrix, lastMatrix);
            }

            lastOpacity = parentOpacity * opacity;
            texCache.addTexAndDrawWhenLimit(gl, target, lastOpacity, m, cx, cy, dx, dy, true);

            if (target !== _cache) {
              _i7 += (_total10 || 0) + countMaskNum(__structs, _i7 + (_total10 || 0) + 1, hasMask || 0);
            }
          } else if (limitCache) {
            return;
          }
        }
      }
    }

    texCache.refresh(gl, cx, cy);
    gl.deleteFramebuffer(frameBuffer); // 将本身total的page纹理放入一个单元，一般刚生成已经在了，少部分情况mask变更引发的可能不在

    var j = texCache.findExistTexChannel(cache.page);

    if (j === -1) {
      // 直接绑定，因为一定是个mockCache
      j = texCache.lockOneChannel();
      webgl.bindTexture(gl, cache.page.texture, j);
    } else {
      texCache.lockChannel(j);
    } // 生成最终纹理，汇总total和maskCache


    var _genFrameBufferWithTe13 = genFrameBufferWithTexture(gl, texCache, width, height),
        _genFrameBufferWithTe14 = _slicedToArray(_genFrameBufferWithTe13, 3),
        n = _genFrameBufferWithTe14[0],
        frameBuffer2 = _genFrameBufferWithTe14[1],
        texture2 = _genFrameBufferWithTe14[2];

    var program;

    if (isClip) {
      program = gl.programClip;
    } else {
      program = gl.programMask;
    }

    gl.useProgram(program);
    webgl.drawMask(gl, i, j, program);
    gl.deleteTexture(texture);
    texCache.releaseLockChannel(i);
    texCache.releaseLockChannel(j); // 切换回主程序

    gl.useProgram(gl.program);
    gl.bindFramebuffer(gl.FRAMEBUFFER, null);
    gl.viewport(0, 0, W, H);
    gl.deleteFramebuffer(frameBuffer2); // 同total一样生成一个mockCache

    var maskCache = new MockCache(gl, texture2, sx1, sy1, width, height, bbox);
    texCache.releaseLockChannel(n, maskCache.page);
    return maskCache;
  }
  /**
   * 生成blendMode混合fbo纹理结果，原本是所有元素向一个fbo记A进行绘制，当出现mbm时，进入到这里，
   * 先生成一个新的fbo记B，将A和待混合节点进行对应的mbm模式混合，结果绘制到B中，然后返回B来替换A，包括纹理单元
   * @param gl
   * @param texCache
   * @param i 之前已有的fbo和纹理单元
   * @param j 当前节点绘制的fbo和纹理单元
   * @param mbm
   * @param fbo 之前舞台绑定的fbo和纹理
   * @param tex
   * @param W
   * @param H
   * @returns {number|*}
   */


  function genMbmWebgl(gl, texCache, i, j, fbo, tex, mbm, W, H) {
    var frag;
    mbm = mbmName$2(mbm);

    if (mbm === 'multiply') {
      frag = fragmentMultiply;
    } else if (mbm === 'screen') {
      frag = fragmentScreen;
    } else if (mbm === 'overlay') {
      frag = fragmentOverlay;
    } else if (mbm === 'darken') {
      frag = fragmentDarken;
    } else if (mbm === 'lighten') {
      frag = fragmentLighten;
    } else if (mbm === 'color-dodge') {
      frag = fragmentColorDodge;
    } else if (mbm === 'color-burn') {
      frag = fragmentColorBurn;
    } else if (mbm === 'hard-light') {
      frag = fragmentHardLight;
    } else if (mbm === 'soft-light') {
      frag = fragmentSoftLight;
    } else if (mbm === 'difference') {
      frag = fragmentDifference;
    } else if (mbm === 'exclusion') {
      frag = fragmentExclusion;
    } else if (mbm === 'hue') {
      frag = fragmentHue;
    } else if (mbm === 'saturation') {
      frag = fragmentSaturation;
    } else if (mbm === 'color') {
      frag = fragmentColor;
    } else if (mbm === 'luminosity') {
      frag = fragmentLuminosity;
    }

    var program = webgl.initShaders(gl, vertexMbm, frag);
    gl.useProgram(program); // 生成新的fbo，将混合结果绘入

    var _genFrameBufferWithTe15 = genFrameBufferWithTexture(gl, texCache, W, H),
        _genFrameBufferWithTe16 = _slicedToArray(_genFrameBufferWithTe15, 3),
        n = _genFrameBufferWithTe16[0],
        frameBuffer = _genFrameBufferWithTe16[1],
        texture = _genFrameBufferWithTe16[2];

    webgl.drawMbm(gl, program, i, j, W, H); // 切换回主程序并销毁这个临时program

    gl.useProgram(gl.program);
    gl.deleteShader(program.vertexShader);
    gl.deleteShader(program.fragmentShader);
    gl.deleteProgram(program);
    gl.deleteFramebuffer(fbo);
    gl.deleteTexture(tex);
    texCache.releaseLockChannel(i);
    texCache.releaseLockChannel(j);
    return [n, frameBuffer, texture];
  }

  function renderSvg(renderMode, ctx, root, isFirst) {
    var __structs = root.__structs,
        width = root.width,
        height = root.height; // mask节点很特殊，本身有matrix会影响，本身没改变但对象节点有改变也需要计算逆矩阵应用顶点

    var maskEffectHash = {};

    if (!isFirst) {
      // 先遍历一遍收集完全不变的defs，缓存起来id，随后再执行遍历渲染生成新的，避免掉重复的id
      for (var i = 0, len = __structs.length; i < len; i++) {
        var _structs$i4 = __structs[i],
            node = _structs$i4[STRUCT_NODE$1],
            total = _structs$i4[STRUCT_TOTAL$1],
            hasMask = _structs$i4[STRUCT_HAS_MASK$1];
        var _node$__config = node.__config,
            refreshLevel = _node$__config[NODE_REFRESH_LV$1],
            defsCache = _node$__config[NODE_DEFS_CACHE$6]; // 只要涉及到matrix和opacity就影响mask

        var hasEffectMask = hasMask && (refreshLevel >= REPAINT$2 || contain$2(refreshLevel, TRANSFORM_ALL$1 | OP));

        if (hasEffectMask) {
          var start = i + (total || 0) + 1;
          var end = start + hasMask; // mask索引遍历时处理，暂存遮罩对象的刷新lv

          maskEffectHash[end - 1] = refreshLevel;
        } // >=REPAINT重绘生成走render()跳过这里


        if (refreshLevel < REPAINT$2) {
          // 特殊的mask判断，遮罩对象影响这个mask了，除去filter、遮罩对象无TRANSFORM变化外都可缓存
          if (maskEffectHash.hasOwnProperty(i)) {
            var v = maskEffectHash[i];

            if (!contain$2(refreshLevel, TRANSFORM_ALL$1) && v < REPAINT$2 && !contain$2(v, TRANSFORM_ALL$1)) {
              defsCache.forEach(function (item) {
                ctx.addCache(item);
              });
            }
          } // 去除特殊的filter，普通节点或不影响的mask在<REPAINT下defs的其它都可缓存
          else {
              defsCache.forEach(function (item) {
                ctx.addCache(item);
              });
            }
        }
      }
    }

    var maskHash = {}; // 栈代替递归，存父节点的matrix/opacity，matrix为E时存null省略计算

    var matrixList = [];
    var parentMatrix;
    var vdList = [];
    var parentVd;
    var lastLv = 0;
    var lastConfig;

    for (var _i8 = 0, _len5 = __structs.length; _i8 < _len5; _i8++) {
      var _structs$_i5 = __structs[_i8],
          _node6 = _structs$_i5[STRUCT_NODE$1],
          _total11 = _structs$_i5[STRUCT_TOTAL$1],
          _hasMask4 = _structs$_i5[STRUCT_HAS_MASK$1],
          lv = _structs$_i5[STRUCT_LV$2];
      var __config = _node6.__config;
      var __cacheTotal = __config[NODE_CACHE_TOTAL$1],
          _refreshLevel4 = __config[NODE_REFRESH_LV$1],
          _defsCache = __config[NODE_DEFS_CACHE$6],
          computedStyle = __config[NODE_COMPUTED_STYLE$3];
      var display = computedStyle[DISPLAY$8]; // 将随后的若干个mask节点范围存下来

      if (_hasMask4 && display !== 'none') {
        var _start = _i8 + (_total11 || 0) + 1;

        var _end = _start + _hasMask4; // svg限制了只能Geom单节点，不可能是Dom，所以end只有唯一


        maskHash[_end - 1] = {
          index: _i8,
          start: _start,
          end: _end,
          isClip: __structs[_start][STRUCT_NODE$1].isClip // 第一个节点是clip为准

        };
      } // lv变大说明是child，相等是sibling，变小可能是parent或另一棵子树，Root节点第一个特殊处理


      if (lv < lastLv) {
        var diff = lastLv - lv;
        matrixList.splice(-diff);
        parentMatrix = matrixList[lv - 1];
        vdList.splice(-diff);
        parentVd = vdList[lv - 1];
      } else if (lv > lastLv) {
        matrixList.push(lastConfig[NODE_MATRIX$3]);
        var vd = lastConfig[NODE_VIRTUAL_DOM$2];
        vdList.push(vd);
        parentVd = vd;
      }

      lastConfig = __config;
      var virtualDom = void 0; // svg小刷新等级时直接修改vd，这样Geom不再感知

      if (_refreshLevel4 < REPAINT$2 && !(_node6 instanceof Text)) {
        __config[NODE_REFRESH_LV$1] = NONE$2;
        virtualDom = __config[NODE_VIRTUAL_DOM$2]; // total可以跳过所有孩子节点省略循环

        if (__cacheTotal && __cacheTotal.available) {
          _i8 += _total11 || 0;
          virtualDom.cache = true;
        } else {
          __cacheTotal && (__cacheTotal.available = true);
          virtualDom = __config[NODE_VIRTUAL_DOM$2] = _node6.__virtualDom = util.extend({}, virtualDom); // dom要清除children缓存，geom和img无需

          if (_node6 instanceof Dom$1 && !(_node6 instanceof Img$1)) {
            virtualDom.children = [];
          } // 还得判断，和img加载混在一起时，触发刷新如果display:none，则还有cacheTotal


          if (display === 'none') {
            _i8 += _total11 || 0;

            if (_hasMask4) {
              _i8 += _hasMask4;
            }
          } else {
            delete virtualDom.cache;
          }
        }

        var currentStyle = __config[NODE_CURRENT_STYLE$5],
            _computedStyle4 = __config[NODE_COMPUTED_STYLE$3],
            __cacheStyle = __config[NODE_CACHE_STYLE$1];

        if (contain$2(_refreshLevel4, TRANSFORM_ALL$1)) {
          var matrix = _node6.__calMatrix(_refreshLevel4, __cacheStyle, currentStyle, _computedStyle4, __config); // 恶心的v8性能优化


          var m = __config[NODE_MATRIX$3];
          assignMatrix$1(m, matrix);

          if (!matrix || isE$3(matrix)) {
            delete virtualDom.transform;
          } else {
            virtualDom.transform = 'matrix(' + util.joinArr(mx.m2m6(matrix), ',') + ')';
          }

          if (parentMatrix && matrix) {
            matrix = multiply$2(parentMatrix, matrix);
          } // 恶心的v8性能优化


          m = __config[NODE_MATRIX_EVENT$4];
          assignMatrix$1(m, matrix);
        }

        if (contain$2(_refreshLevel4, OP)) {
          var opacity = _computedStyle4[OPACITY$5] = currentStyle[OPACITY$5];

          if (opacity === 1) {
            delete virtualDom.opacity;
          } else {
            virtualDom.opacity = opacity;
          }
        }

        if (contain$2(_refreshLevel4, FT)) {
          var filter = _node6.__calFilter(currentStyle, _computedStyle4);

          var s = painter.svgFilter(filter);

          if (s) {
            virtualDom.filter = s;
          } else {
            delete virtualDom.filter;
          }
        }

        if (contain$2(_refreshLevel4, MBM)) {
          var mixBlendMode = _computedStyle4[MIX_BLEND_MODE$3] = currentStyle[MIX_BLEND_MODE$3];

          if (isValidMbm$2(mixBlendMode)) {
            virtualDom.mixBlendMode = mbmName$2(mixBlendMode);
          } else {
            delete virtualDom.mixBlendMode;
          }
        }

        virtualDom.lv = _refreshLevel4;
      } else {
        // >=REPAINT会调用render，重新生成defsCache，text没有这个东西
        __config[NODE_DEFS_CACHE$6] && __config[NODE_DEFS_CACHE$6].splice(0);

        _node6.render(renderMode, _refreshLevel4, ctx, NA, 0, 0);

        virtualDom = __config[NODE_VIRTUAL_DOM$2]; // 渲染后更新取值

        display = computedStyle[DISPLAY$8];

        if (display === 'none') {
          _i8 += _total11 || 0;

          if (_hasMask4) {
            _i8 += _hasMask4;
          }
        }
      }
      /**
       * mask会在join时过滤掉，这里将假设正常渲染的vd的内容获取出来组成defs的mask内容
       * 另外最初遍历时记录了会影响的mask，在<REPAINT时比较，>=REPAINT始终重新设置
       * 本身有matrix也需要重设
       */


      if (maskHash.hasOwnProperty(_i8) && (maskEffectHash.hasOwnProperty(_i8) || _refreshLevel4 >= REPAINT$2 || contain$2(_refreshLevel4, TRANSFORM_ALL$1 | OP))) {
        var _maskHash$_i = maskHash[_i8],
            index = _maskHash$_i.index,
            _start2 = _maskHash$_i.start,
            _end2 = _maskHash$_i.end,
            isClip = _maskHash$_i.isClip;
        var target = __structs[index];
        var dom = target[STRUCT_NODE$1];
        var mChildren = []; // clip模式时，先添加兜底整个白色使得全部都可见，mask本身变反色（黑色）

        if (isClip) {
          mChildren.push({
            type: 'item',
            tagName: 'path',
            props: [['d', "M0,0L".concat(width, ",0L").concat(width, ",").concat(height, "L0,").concat(height, "L0,0")], ['fill', 'rgba(255,255,255,1)'], ['stroke-width', 0]]
          });
        }

        for (var j = _start2; j < _end2; j++) {
          var _node7 = __structs[j][STRUCT_NODE$1];
          var _node7$computedStyle = _node7.computedStyle,
              _display2 = _node7$computedStyle[DISPLAY$8],
              visibility = _node7$computedStyle[VISIBILITY$5],
              fill = _node7$computedStyle[FILL$2],
              _node7$virtualDom = _node7.virtualDom,
              children = _node7$virtualDom.children,
              _opacity2 = _node7$virtualDom.opacity;

          if (_display2 !== 'none' && visibility !== 'hidden') {
            // 引用相同无法diff，需要clone
            children = util.clone(children);
            mChildren = mChildren.concat(children);

            for (var k = 0, _len6 = children.length; k < _len6; k++) {
              var _children$k = children[k],
                  tagName = _children$k.tagName,
                  props = _children$k.props;

              if (tagName === 'path') {
                if (isClip) {
                  for (var _j10 = 0, _len7 = props.length; _j10 < _len7; _j10++) {
                    var item = props[_j10];

                    if (item[0] === 'fill') {
                      item[1] = util.int2invert(fill[0]);
                    }
                  }
                }

                var _matrix3 = _node7.matrix;
                var ivs = inverse$1(dom.matrix);
                _matrix3 = multiply$2(ivs, _matrix3); // path没有transform属性，在vd上，需要弥补

                props.push(['transform', "matrix(".concat(util.joinArr(mx.m2m6(_matrix3), ','), ")")]); // path没有opacity属性，在vd上，需要弥补

                if (!util.isNil(_opacity2) && _opacity2 !== 1) {
                  props.push(['opacity', _opacity2]);
                }
              } // img可能有matrix属性，需判断
              else if (tagName === 'image') {
                  var hasTransform = -1;

                  for (var _m2 = 0, _len8 = props.length; _m2 < _len8; _m2++) {
                    if (props[_m2][0] === 'transform') {
                      hasTransform = _m2;
                      break;
                    }
                  }

                  if (hasTransform === -1) {
                    var _ivs = inverse$1(dom.matrix);

                    if (!isE$3(_ivs)) {
                      props.push(['transform', "matrix(".concat(util.joinArr(mx.m2m6(_ivs), ','), ")")]);
                    }
                  } else {
                    var _matrix4 = props[hasTransform][1].match(/[\d.]+/g).map(function (i) {
                      return parseFloat(i);
                    });

                    var _ivs2 = inverse$1(dom.matrix);

                    _matrix4 = multiply$2(_ivs2, _matrix4);
                    props[hasTransform][1] = "matrix(".concat(util.joinArr(mx.m2m6(_matrix4), ','), ")");
                  }
                }
            }
          }
        } // 清掉上次的


        for (var _i9 = _defsCache.length - 1; _i9 >= 0; _i9--) {
          var _item3 = _defsCache[_i9];

          if (_item3.tagName === 'mask') {
            _defsCache.splice(_i9, 1);
          }
        }

        var o = {
          tagName: 'mask',
          props: [],
          children: mChildren
        };
        var id = ctx.add(o);

        _defsCache.push(o);

        id = 'url(#' + id + ')';
        dom.virtualDom.mask = id;
      } // mask不入children


      if (parentVd && !_node6.isMask) {
        parentVd.children.push(virtualDom);
      }

      if (_i8 === 0) {
        parentMatrix = __config[NODE_MATRIX$3];
        parentVd = virtualDom;
      }

      lastLv = lv;
    }
  }

  function renderWebgl(renderMode, gl, root) {
    var __structs = root.__structs,
        width = root.width,
        height = root.height,
        texCache = root.texCache;
    var cx = width * 0.5,
        cy = height * 0.5; // 栈代替递归，存父节点的matrix/opacity，matrix为E时存null省略计算

    var matrixList = [];
    var parentMatrix;
    var opacityList = [];
    var parentOpacity = 1;
    var pmList = [];
    var parentPm;
    var lastRefreshLevel;
    var lastConfig;
    var lastLv = 0;
    var mergeList = [];
    var hasMbm; // 是否有混合模式出现

    /**
     * 先一遍先序遍历每个节点绘制到自己__cache上，排除Text和已有的缓存以及局部根缓存，
     * 根据refreshLevel进行等级区分，可能是<REPAINT或>=REPAINT，REFLOW布局已前置处理完。
     * 首次绘制没有catchTotal等，后续则可能会有，在<REPAINT可据此跳过所有子节点加快循环，布局过程会提前删除它们。
     * lv的变化根据大小相等进行出入栈parent操作，实现获取节点parent数据的方式，
     * 同时过程中计算出哪些节点要生成局部根，存下来
     */

    for (var i = 0, len = __structs.length; i < len; i++) {
      var _structs$i5 = __structs[i],
          node = _structs$i5[STRUCT_NODE$1],
          lv = _structs$i5[STRUCT_LV$2],
          total = _structs$i5[STRUCT_TOTAL$1],
          hasMask = _structs$i5[STRUCT_HAS_MASK$1]; // Text特殊处理，webgl中先渲染为bitmap，再作为贴图绘制，缓存交由text内部判断，直接调用渲染纹理方法

      if (node instanceof Text) {
        if (lastRefreshLevel >= REPAINT$2) {
          node.render(renderMode, REPAINT$2, gl, SELF, 0, 0);
        }

        continue;
      }

      var __config = node.__config;
      var refreshLevel = __config[NODE_REFRESH_LV$1]; // lv变大说明是child，相等是sibling，变小可能是parent或另一棵子树，Root节点是第一个特殊处理

      if (i === 0) ; else if (lv > lastLv) {
        parentMatrix = lastConfig[NODE_MATRIX_EVENT$4];

        if (isE$3(parentMatrix)) {
          parentMatrix = null;
        }

        matrixList.push(parentMatrix);
        parentOpacity = lastConfig[NODE_OPACITY$2];
        opacityList.push(parentOpacity);
        parentPm = lastConfig[NODE_PERSPECTIVE_MATRIX$1];

        if (isE$3(parentPm)) {
          parentPm = null;
        }

        pmList.push(parentPm);
      } // 变小出栈索引需注意，可能不止一层，多层计算diff层级
      else if (lv < lastLv) {
          var diff = lastLv - lv;
          matrixList.splice(-diff);
          parentMatrix = matrixList[lv - 1];
          opacityList.splice(-diff);
          parentOpacity = opacityList[lv - 1];
          pmList.splice(-diff);
          parentPm = pmList[lv - 1];
        } // 不变是同级兄弟，无需特殊处理 else {}


      lastRefreshLevel = refreshLevel;
      lastConfig = __config;
      lastLv = lv;
      var __cacheTotal = __config[NODE_CACHE_TOTAL$1],
          computedStyle = __config[NODE_COMPUTED_STYLE$3]; // 跳过display:none元素和它的所有子节点

      if (computedStyle[DISPLAY$8] === 'none') {
        i += total || 0; // 只跳过自身不能跳过后面的mask，mask要渲染自身并进行缓存cache，以备对象切换display用

        continue;
      }

      var hasRecordAsMask = void 0;
      /**
       * lv<REPAINT，一般会有__cache，跳过渲染过程，快速运算，没有cache则是自身超限或无内容，目前不感知
       * 可能有cacheTotal，为之前生成的局部根，清除逻辑在更新检查是否>=REPAINT那里，小变化不动
       * 当有遮罩时，如果被遮罩节点本身无变更，需要检查其next的遮罩节点有无变更，
       * 但其实不用检查，因为next变更一定会清空cacheMask，只要检查cacheMask即可
       * 如果没有或无效，直接添加，无视节点本身变化，后面防重即可
       */

      if (refreshLevel < REPAINT$2) {
        __config[NODE_REFRESH_LV$1] = NONE$2;

        if (hasMask) {
          var cacheMask = __config[NODE_CACHE_MASK$1];

          if (!cacheMask || !cacheMask.available) {
            hasRecordAsMask = [i, lv, total, node, __config, null, hasMask];
            mergeList.push(hasRecordAsMask);
          }
        }

        var currentStyle = __config[NODE_CURRENT_STYLE$5],
            __cacheStyle = __config[NODE_CACHE_STYLE$1],
            matrixEvent = __config[NODE_MATRIX_EVENT$4];

        if (contain$2(refreshLevel, PPT)) {
          node.__calPerspective(__cacheStyle, currentStyle, computedStyle, __config);
        } // transform变化，父元素的perspective变化也会在Root特殊处理重新计算


        var matrix = void 0;

        if (contain$2(refreshLevel, TRANSFORM_ALL$1)) {
          matrix = node.__calMatrix(refreshLevel, __cacheStyle, currentStyle, computedStyle, __config); // 恶心的v8性能优化

          var m = __config[NODE_MATRIX$3];
          assignMatrix$1(m, matrix);
        } else {
          matrix = __config[NODE_MATRIX$3];
        } // node本身有或者父有perspective都认为需要生成3d渲染上下文


        if (transform$1.isPerspectiveMatrix(matrix) || parentPm) {
          if (hasRecordAsMask) {
            hasRecordAsMask[9] = true;
          } else {
            hasRecordAsMask = [i, lv, total, node, __config, null, null, null, null, true];
          }
        } // 先左乘perspective的矩阵，再左乘父级的总矩阵


        if (parentPm) {
          matrix = multiply$2(parentPm, matrix);
        }

        if (parentMatrix) {
          matrix = multiply$2(parentMatrix, matrix);
        } // 恶心的v8性能优化


        assignMatrix$1(matrixEvent, matrix);
        var opacity = void 0;

        if (contain$2(refreshLevel, OP)) {
          opacity = computedStyle[OPACITY$5] = currentStyle[OPACITY$5];
        } else {
          opacity = computedStyle[OPACITY$5];
        }

        __config[NODE_OPACITY$2] = parentOpacity * opacity; // filter会改变bbox范围

        if (contain$2(refreshLevel, FT)) {
          node.__bbox = null;

          var _filter = node.__calFilter(currentStyle, computedStyle); // 防重


          if (hasRecordAsMask) {
            hasRecordAsMask[7] = _filter;
          } else {
            // 强制存hasMask，因为filter改变影响mask
            hasRecordAsMask = [i, lv, total, node, __config, null, hasMask, _filter];
            mergeList.push(hasRecordAsMask);
          }
        }

        if (contain$2(refreshLevel, MBM)) {
          computedStyle[MIX_BLEND_MODE$3] = currentStyle[MIX_BLEND_MODE$3];
        } // total可以跳过所有孩子节点省略循环，filter/mask等的强制前提是有total


        if (__cacheTotal && __cacheTotal.available) {
          i += total || 0;
          continue;
        }
      }
      /**
       * >=REPAINT重新渲染，并根据结果判断是否离屏限制错误
       * Geom没有子节点无需汇总局部根，Dom中Img也是，它们的局部根等于自身的cache，其它符合条件的Dom需要生成
       */
      else {
          var res = node.render(renderMode, refreshLevel, gl, SELF, 0, 0); // geom可返回texture纹理，替代原有xom的__cache纹理

          if (res && inject.isWebGLTexture(res.texture)) {
            var _sx2 = node.__sx1,
                _sy2 = node.__sy1,
                w = node.offsetWidth,
                h = node.offsetHeight,
                bbox = node.bbox;
            __config[NODE_CACHE$3] = new MockCache(gl, res.texture, _sx2, _sy2, w, h, bbox);
            gl.viewport(0, 0, width, height);
            gl.useProgram(gl.program);
          }
        } // 每个元素检查cacheTotal生成，已有的上面会continue跳过


      var limitCache = __config[NODE_LIMIT_CACHE$2],
          cacheAsBitmap = __config[NODE_CACHE_AS_BITMAP$1];
      var overflow = computedStyle[OVERFLOW$3],
          filter = computedStyle[FILTER$5],
          mixBlendMode = computedStyle[MIX_BLEND_MODE$3],
          transform = computedStyle[TRANSFORM$4];
      var validMbm = isValidMbm$2(mixBlendMode); // 3d渲染上下文

      var isPerspective = transform$1.isPerspectiveMatrix(transform) || parentPm;

      if (cacheAsBitmap || hasMask || filter.length || overflow === 'hidden' && total || validMbm || isPerspective) {
        if (validMbm) {
          hasMbm = true;
        }

        if (hasRecordAsMask) {
          hasRecordAsMask[5] = limitCache;
          hasRecordAsMask[7] = filter;
          hasRecordAsMask[8] = overflow;
          hasRecordAsMask[9] = isPerspective;
          hasRecordAsMask[10] = cacheAsBitmap;
        } else {
          mergeList.push([i, lv, total, node, __config, limitCache, hasMask, filter, overflow, isPerspective, cacheAsBitmap]);
        }
      }
    }

    var limitHash = {}; // 根据收集的需要合并局部根的索引，尝试合并，按照层级从大到小，索引从大到小的顺序，
    // 这样保证子节点在前，后节点在前，后节点是为了mask先应用自身如filter之后再进行遮罩

    if (mergeList.length) {
      mergeList.sort(function (a, b) {
        if (a[1] === b[1]) {
          return b[0] - a[0];
        }

        return b[1] - a[1];
      }); // ppt只有嵌套才需要生成，最下面的孩子节点的ppt无需，因此记录一个hash存index，
      // 同时因为是后序遍历，孩子先存所有父亲的index即可保证父亲才能生成cacheTotal

      var pptHash = {};
      mergeList.forEach(function (item) {
        var _item4 = _slicedToArray(item, 11),
            i = _item4[0],
            lv = _item4[1],
            total = _item4[2],
            node = _item4[3],
            __config = _item4[4],
            limitCache = _item4[5],
            hasMask = _item4[6],
            filter = _item4[7],
            overflow = _item4[8],
            isPerspective = _item4[9],
            cacheAsBitmap = _item4[10]; // 有ppt的，向上查找所有父亲index记录，可能出现重复记得提前跳出


        if (isPerspective) {
          var parent = __config[NODE_DOM_PARENT$5];

          while (parent) {
            var config = parent.__config;
            var idx = config[NODE_STRUCT$4][STRUCT_INDEX$2];

            if (pptHash[idx]) {
              break;
            }

            if (transform$1.isPerspectiveMatrix(config[NODE_MATRIX$3]) || config[NODE_PERSPECTIVE_MATRIX$1]) {
              pptHash[idx] = true;
            }

            parent = config[NODE_DOM_PARENT$5];
          }

          if (!pptHash[i] && !hasMask && !filter.length && overflow !== 'hidden' && !cacheAsBitmap) {
            return;
          }
        }

        var __cache = __config[NODE_CACHE$3],
            __cacheTotal = __config[NODE_CACHE_TOTAL$1],
            __cacheFilter = __config[NODE_CACHE_FILTER$1],
            __cacheMask = __config[NODE_CACHE_MASK$1],
            __cacheOverflow = __config[NODE_CACHE_OVERFLOW$1];
        var needGen; // 可能没变化，比如被遮罩节点、filter变更等

        if (!__cacheTotal || !__cacheTotal.available) {
          var _genTotalWebgl = genTotalWebgl(gl, texCache, node, __config, i, total || 0, __structs, __cache, limitCache, hasMbm, width, height),
              _genTotalWebgl2 = _slicedToArray(_genTotalWebgl, 2),
              limit = _genTotalWebgl2[0],
              _res13 = _genTotalWebgl2[1];

          __cacheTotal = _res13;
          needGen = true;
          limitCache = limit; // 返回的limit包含各种情况超限，一旦超限，只能生成临时cacheTotal不能保存

          if (!limitCache) {
            __config[NODE_CACHE_TOTAL$1] = _res13;
          }
        } // 即使超限，也有total结果


        var target = __cacheTotal;

        if (overflow === 'hidden') {
          if (!__cacheOverflow || !__cacheOverflow.available || needGen) {
            var temp = genOverflowWebgl(gl, texCache, node, target, width, height);

            if (temp) {
              target = temp;
              needGen = true;

              if (!limitCache) {
                __config[NODE_CACHE_FILTER$1] = target;
              }
            }
          }
        }

        if (filter.length) {
          if (!__cacheFilter || !__cacheFilter.available || needGen) {
            var old = target;
            target = genFilterWebgl(gl, texCache, node, target, filter, width, height);

            if (target !== old) {
              needGen = true;

              if (!limitCache) {
                __config[NODE_CACHE_FILTER$1] = target;
              }
            }
          }
        }

        if (hasMask && (!__cacheMask || !__cacheMask.available || needGen)) {
          target = genMaskWebgl(gl, texCache, node, __config, target, width, height, lv, __structs);

          if (!limitCache) {
            __config[NODE_CACHE_MASK$1] = target;
          }
        } // 保存临时的局部根节点


        if (limitCache) {
          limitHash[i] = target;
        }
      });
    }
    /**
     * 最后先序遍历一次应用__cacheTotal即可，没有的用__cache，以及剩下的超尺寸的和Text
     * 由于mixBlendMode的存在，需先申请个fbo纹理，所有绘制默认向该纹理绘制，最后fbo纹理再进入主画布
     * 前面循环时有记录是否出现mbm，只有出现才申请，否则不浪费直接输出到主画布
     * 超尺寸的要走无cache逻辑render，和canvas很像，除了离屏canvas超限，汇总total也会纹理超限
     */


    var n, frameBuffer, texture;

    if (hasMbm) {
      var _genFrameBufferWithTe17 = genFrameBufferWithTexture(gl, texCache, width, height);

      var _genFrameBufferWithTe18 = _slicedToArray(_genFrameBufferWithTe17, 3);

      n = _genFrameBufferWithTe18[0];
      frameBuffer = _genFrameBufferWithTe18[1];
      texture = _genFrameBufferWithTe18[2];
    }

    for (var _i10 = 0, _len9 = __structs.length; _i10 < _len9; _i10++) {
      var _structs$_i6 = __structs[_i10],
          _node8 = _structs$_i6[STRUCT_NODE$1],
          _total12 = _structs$_i6[STRUCT_TOTAL$1],
          _hasMask5 = _structs$_i6[STRUCT_HAS_MASK$1];
      var _config5 = _node8.__config; // text如果display不可见，parent会直接跳过，不会走到这里，这里一定是直接绘制到root的，visibility在其内部判断

      if (_node8 instanceof Text) {
        // text特殊之处，__config部分是复用parent的
        var __cache = _config5[NODE_CACHE$3],
            _limitCache = _config5[NODE_LIMIT_CACHE$2],
            _config5$NODE_DOM_PAR = _config5[NODE_DOM_PARENT$5].__config,
            _matrixEvent = _config5$NODE_DOM_PAR[NODE_MATRIX_EVENT$4],
            _opacity3 = _config5$NODE_DOM_PAR[NODE_OPACITY$2];

        if (__cache && __cache.available) {
          texCache.addTexAndDrawWhenLimit(gl, __cache, _opacity3, _matrixEvent, cx, cy, 0, 0, true);
        } // 超限特殊处理，先生成画布尺寸大小的纹理然后原始位置绘制
        else if (_limitCache) {
            var c = inject.getCacheCanvas(width, height, '__$$OVERSIZE$$__');

            _node8.render(renderMode, 0, gl, NA, 0, 0);

            var j = texCache.lockOneChannel();

            var _texture2 = webgl.createTexture(gl, c.canvas, j);

            var mockCache = new MockCache(gl, _texture2, 0, 0, width, height, [0, 0, width, height]);
            texCache.addTexAndDrawWhenLimit(gl, mockCache, _opacity3, _matrixEvent, cx, cy, 0, 0, true);
            texCache.refresh(gl, cx, cy, true);
            c.ctx.setTransform(1, 0, 0, 1, 0, 0);
            c.ctx.globalAlpha = 1;
            c.ctx.clearRect(0, 0, width, height);
            mockCache.release();
            texCache.releaseLockChannel(j);
          }
      } else {
        var _opacity4 = _config5[NODE_OPACITY$2],
            _matrixEvent2 = _config5[NODE_MATRIX_EVENT$4],
            _limitCache2 = _config5[NODE_LIMIT_CACHE$2],
            _cache2 = _config5[NODE_CACHE$3],
            _cacheTotal4 = _config5[NODE_CACHE_TOTAL$1],
            __cacheFilter = _config5[NODE_CACHE_FILTER$1],
            __cacheMask = _config5[NODE_CACHE_MASK$1],
            __cacheOverflow = _config5[NODE_CACHE_OVERFLOW$1],
            _refreshLevel5 = _config5[NODE_REFRESH_LV$1],
            _config5$NODE_COMPUTE = _config5[NODE_COMPUTED_STYLE$3],
            display = _config5$NODE_COMPUTE[DISPLAY$8],
            visibility = _config5$NODE_COMPUTE[VISIBILITY$5],
            _mixBlendMode2 = _config5$NODE_COMPUTE[MIX_BLEND_MODE$3];

        if (display === 'none') {
          _i10 += (_total12 || 0) + countMaskNum(__structs, _i10 + (_total12 || 0) + 1, _hasMask5 || 0);
          continue;
        } // 有total的可以直接绘制并跳过子节点索引，忽略total本身，其独占用纹理单元，注意特殊不取cacheTotal，
        // 这种情况发生在只有overflow:hidden声明但无效没有生成__cacheOverflow的情况，
        // 因为webgl纹理单元缓存原因，所以不用cacheTotal防止切换性能损耗
        // 已取消，因为perspective需要进行独立上下文渲染


        var target = getCache([__cacheMask, __cacheFilter, __cacheOverflow, _cacheTotal4, _cache2]); // total和自身cache的尝试，visibility不可见时没有cache

        if (target) {
          // 有mbm先刷新当前fbo，然后把后面这个mbm节点绘入一个新的等画布尺寸的fbo中，再进行2者mbm合成
          if (hasMbm && isValidMbm$2(_mixBlendMode2)) {
            texCache.refresh(gl, cx, cy, true);

            var _genFrameBufferWithTe19 = genFrameBufferWithTexture(gl, texCache, width, height),
                _genFrameBufferWithTe20 = _slicedToArray(_genFrameBufferWithTe19, 3),
                n2 = _genFrameBufferWithTe20[0],
                frameBuffer2 = _genFrameBufferWithTe20[1],
                texture2 = _genFrameBufferWithTe20[2];

            texCache.addTexAndDrawWhenLimit(gl, target, _opacity4, _matrixEvent2, cx, cy, 0, 0, true);
            texCache.refresh(gl, cx, cy, true); // 合成结果作为当前frameBuffer，以及纹理和单元，等于替代了当前画布作为绘制对象

            var _genMbmWebgl3 = genMbmWebgl(gl, texCache, n, n2, frameBuffer, texture, mbmName$2(_mixBlendMode2), width, height);

            var _genMbmWebgl4 = _slicedToArray(_genMbmWebgl3, 3);

            n = _genMbmWebgl4[0];
            frameBuffer = _genMbmWebgl4[1];
            texture = _genMbmWebgl4[2];
            gl.deleteFramebuffer(frameBuffer2);
            gl.deleteTexture(texture2);
          } else {
            texCache.addTexAndDrawWhenLimit(gl, target, _opacity4, _matrixEvent2, cx, cy, 0, 0, true);
          }

          if (target !== _cache2) {
            _i10 += (_total12 || 0) + countMaskNum(__structs, _i10 + (_total12 || 0) + 1, _hasMask5 || 0);
          }
        } else if (limitHash.hasOwnProperty(_i10)) {
          var _target6 = limitHash[_i10];

          if (hasMbm && isValidMbm$2(_mixBlendMode2)) {
            texCache.refresh(gl, cx, cy, true);

            var _genFrameBufferWithTe21 = genFrameBufferWithTexture(gl, texCache, width, height),
                _genFrameBufferWithTe22 = _slicedToArray(_genFrameBufferWithTe21, 3),
                _n2 = _genFrameBufferWithTe22[0],
                _frameBuffer = _genFrameBufferWithTe22[1],
                _texture3 = _genFrameBufferWithTe22[2];

            texCache.addTexAndDrawWhenLimit(gl, _target6, _opacity4, _matrixEvent2, cx, cy, 0, 0, true);
            texCache.refresh(gl, cx, cy, true); // 合成结果作为当前frameBuffer，以及纹理和单元，等于替代了当前画布作为绘制对象

            var _genMbmWebgl5 = genMbmWebgl(gl, texCache, n, _n2, frameBuffer, texture, mbmName$2(_mixBlendMode2), width, height);

            var _genMbmWebgl6 = _slicedToArray(_genMbmWebgl5, 3);

            n = _genMbmWebgl6[0];
            frameBuffer = _genMbmWebgl6[1];
            texture = _genMbmWebgl6[2];
            gl.deleteFramebuffer(_frameBuffer);
            gl.deleteTexture(_texture3);
          } else {
            texCache.addTexAndDrawWhenLimit(gl, _target6, _opacity4, _matrixEvent2, cx, cy, 0, 0, true);
          }

          _i10 += (_total12 || 0) + countMaskNum(__structs, _i10 + (_total12 || 0) + 1, _hasMask5 || 0);
        } // 超限的情况，这里是普通单节点超限，没有合成total后再合成特殊cache如filter/mask/mbm之类的，
        // 直接按原始位置绘制到离屏canvas，再作为纹理绘制即可，特殊的在total那做过降级了
        else if (_limitCache2 && display !== 'none' && visibility !== 'hidden') {
            var _c2 = inject.getCacheCanvas(width, height, '__$$OVERSIZE$$__');

            _node8.render(renderMode, _refreshLevel5, gl, NA, 0, 0);

            var _j11 = texCache.lockOneChannel();

            var _texture4 = webgl.createTexture(gl, _c2.canvas, _j11);

            var _mockCache2 = new MockCache(gl, _texture4, 0, 0, width, height, [0, 0, width, height]);

            texCache.addTexAndDrawWhenLimit(gl, _mockCache2, _opacity4, _matrixEvent2, cx, cy, 0, 0, true);
            texCache.refresh(gl, cx, cy, true);

            _c2.ctx.setTransform(1, 0, 0, 1, 0, 0);

            _c2.ctx.globalAlpha = 1;

            _c2.ctx.clearRect(0, 0, width, height);

            _mockCache2.release();

            texCache.releaseLockChannel(_j11);
          } // webgl特殊的外部钩子，比如粒子组件自定义渲染时调用
          else if (_node8.__hookGlRender) {
              _node8.__hookGlRender(gl, _opacity4, cx, cy, 0, 0, true);
            }
      }
    }

    texCache.refresh(gl, cx, cy, true); // 有mbm时将汇总的fbo绘入主画布，否则本身就是到主画布无需多余操作

    if (hasMbm) {
      gl.bindFramebuffer(gl.FRAMEBUFFER, null);
      texCache.releaseLockChannel(n);
      gl.deleteFramebuffer(frameBuffer); // 顶点buffer

      var pointBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, pointBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1, -1, -1, 1, 1, -1, -1, 1, 1, -1, 1, 1]), gl.STATIC_DRAW);
      var a_position = gl.getAttribLocation(gl.program, 'a_position');
      gl.vertexAttribPointer(a_position, 2, gl.FLOAT, false, 0, 0);
      gl.enableVertexAttribArray(a_position); // 纹理buffer

      var texBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, texBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 1]), gl.STATIC_DRAW);
      var a_texCoords = gl.getAttribLocation(gl.program, 'a_texCoords');
      gl.vertexAttribPointer(a_texCoords, 2, gl.FLOAT, false, 0, 0);
      gl.enableVertexAttribArray(a_texCoords); // opacity buffer

      var opacityBuffer = gl.createBuffer();
      gl.bindBuffer(gl.ARRAY_BUFFER, opacityBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([1, 1, 1, 1, 1, 1]), gl.STATIC_DRAW);
      var a_opacity = gl.getAttribLocation(gl.program, 'a_opacity');
      gl.vertexAttribPointer(a_opacity, 1, gl.FLOAT, false, 0, 0);
      gl.enableVertexAttribArray(a_opacity); // 纹理单元

      var u_texture = gl.getUniformLocation(gl.program, 'u_texture');
      gl.uniform1i(u_texture, n);
      gl.drawArrays(gl.TRIANGLES, 0, 6);
      gl.deleteBuffer(pointBuffer);
      gl.deleteBuffer(texBuffer);
      gl.deleteBuffer(opacityBuffer);
      gl.disableVertexAttribArray(a_position);
      gl.disableVertexAttribArray(a_texCoords);
      gl.deleteTexture(texture);
    }
  }

  function renderCanvas(renderMode, ctx, root) {
    var __structs = root.__structs,
        width = root.width,
        height = root.height;
    var mergeList = [];
    /**
     * 先一遍先序遍历收集cacheAsBitmap的节点，说明这棵子树需要缓存，可能出现嵌套，高层级优先
     * 可能遇到已有缓存没变化的，这时候不要收集忽略掉，没有缓存的走后面遍历普通渲染
     */

    for (var i = 0, len = __structs.length; i < len; i++) {
      var _structs$i6 = __structs[i],
          node = _structs$i6[STRUCT_NODE$1],
          lv = _structs$i6[STRUCT_LV$2],
          total = _structs$i6[STRUCT_TOTAL$1],
          hasMask = _structs$i6[STRUCT_HAS_MASK$1]; // 排除Text，要么根节点直接绘制，要么被局部根节点汇总，自身并不缓存（fillText比位图更快）

      if (node instanceof Text) {
        continue;
      }

      var __config = node.__config;
      var refreshLevel = __config[NODE_REFRESH_LV$1],
          cacheAsBitmap = __config[NODE_CACHE_AS_BITMAP$1],
          computedStyle = __config[NODE_COMPUTED_STYLE$3];

      if (refreshLevel >= REPAINT$2) {
        node.__calCache(renderMode, ctx, __config[NODE_DOM_PARENT$5], __config[NODE_CACHE_STYLE$1], __config[NODE_CURRENT_STYLE$5], computedStyle, node.clientWidth, node.clientHeight, node.offsetWidth, node.offsetHeight, computedStyle[BORDER_TOP_WIDTH$6], computedStyle[BORDER_RIGHT_WIDTH$7], computedStyle[BORDER_BOTTOM_WIDTH$6], computedStyle[BORDER_LEFT_WIDTH$8], computedStyle[PADDING_TOP$5], computedStyle[PADDING_RIGHT$6], computedStyle[PADDING_BOTTOM$5], computedStyle[PADDING_LEFT$7], node.__sx1, node.__sx2, node.__sx3, node.__sx4, node.__sx5, node.__sx6, node.__sy1, node.__sy2, node.__sy3, node.__sy4, node.__sy5, node.__sy6);
      }

      if (cacheAsBitmap) {
        // 跳过display:none元素和它的所有子节点
        if (computedStyle[DISPLAY$8] === 'none') {
          i += (total || 0) + countMaskNum(__structs, i + (total || 0) + 1, hasMask || 0);
          continue;
        }

        mergeList.push([i, lv, total, node, __config, hasMask]);
      }
    }
    /**
     * 根据收集的需要合并局部根的索引，尝试合并，按照层级从大到小，索引从大到小的顺序，
     * 这样保证子节点在前，后节点在前（mask在后面），渲染顺序正确
     */


    if (mergeList.length) {
      mergeList.sort(function (a, b) {
        if (a[1] === b[1]) {
          return b[0] - a[0];
        }

        return b[1] - a[1];
      });
      mergeList.forEach(function (item) {
        var _item5 = _slicedToArray(item, 6),
            i = _item5[0],
            lv = _item5[1],
            total = _item5[2],
            node = _item5[3],
            __config = _item5[4],
            hasMask = _item5[5];

        genTotal(renderMode, node, __config, i, lv, total || 0, __structs, hasMask, width, height);
      });
    }
    /**
     * 最后先序遍历一次并应用__cacheTotal即可，没有的普通绘制，以及剩下的超尺寸的和Text
     * 特殊离屏和cacheAsBitmap的离屏都已经产生了cacheTotal，除非超限
     * 离屏功能的数据结构和算法逻辑非常复杂，需用到下面2个hash，来完成一些filter、mask等离屏才能完成的绘制
     * 其中overflow、filter、mix-blend-mode是对自身及子节点，mask则是对自身和后续next遮罩节点
     * 一个节点在Xom渲染中申请离屏canvas，是按照一定顺序来的，且多个离屏后面的有前面的ctx引用，第一个则引用最初非离屏的ctx
     * 这个顺序在应用离屏时以反向顺序开始，这样最后ctx被还原到最初的ctx
     * mask是个十分特殊的离屏，因为除了自身外，next节点也需要汇总到另外一个离屏上，为了逻辑一致性
     * 所有离屏应用的索引都以最后一个节点的索引为准，即有mask时以最后一个mask，无mask则以自身节点的最后一个（+total)为索引
     * 由于存在普通非cache绘制，所以依然要用到栈代替递归计算matrix
     */


    var maskStartHash = {};
    var offscreenHash = {};

    for (var _i11 = 0, _len10 = __structs.length; _i11 < _len10; _i11++) {
      var _structs$_i7 = __structs[_i11],
          _node9 = _structs$_i7[STRUCT_NODE$1],
          _lv6 = _structs$_i7[STRUCT_LV$2],
          _total13 = _structs$_i7[STRUCT_TOTAL$1],
          _hasMask6 = _structs$_i7[STRUCT_HAS_MASK$1]; // text如果display不可见，parent会直接跳过，不会走到这里，这里一定是直接绘制到root的，visibility在其内部判断

      if (_node9 instanceof Text) {
        _node9.render(renderMode, REPAINT$2, ctx, NA, 0, 0);

        if (offscreenHash.hasOwnProperty(_i11)) {
          ctx = applyOffscreen$1(ctx, offscreenHash[_i11], width, height);
        }
      } else {
        var _config6 = _node9.__config;
        var __cacheTotal = _config6[NODE_CACHE_TOTAL$1],
            __cacheFilter = _config6[NODE_CACHE_FILTER$1],
            __cacheMask = _config6[NODE_CACHE_MASK$1],
            __cacheOverflow = _config6[NODE_CACHE_OVERFLOW$1],
            _refreshLevel6 = _config6[NODE_REFRESH_LV$1],
            _config6$NODE_COMPUTE = _config6[NODE_COMPUTED_STYLE$3],
            display = _config6$NODE_COMPUTE[DISPLAY$8],
            mixBlendMode = _config6$NODE_COMPUTE[MIX_BLEND_MODE$3],
            opacity = _config6$NODE_COMPUTE[OPACITY$5]; // 遮罩对象申请了个离屏，其第一个mask申请另外一个离屏mask2，开始聚集所有mask元素的绘制，
        // 这是一个十分特殊的逻辑，保存的index是最后一个节点的索引，OFFSCREEN_MASK2是最低优先级，
        // 这样当mask本身有filter时优先自身，然后才是OFFSCREEN_MASK2

        if (maskStartHash.hasOwnProperty(_i11)) {
          var _maskStartHash$_i3 = _slicedToArray(maskStartHash[_i11], 3),
              idx = _maskStartHash$_i3[0],
              n = _maskStartHash$_i3[1],
              offscreenMask = _maskStartHash$_i3[2];

          var _target7 = inject.getCacheCanvas(width, height, null, 'mask2');

          offscreenMask.mask = _target7; // 应用mask用到

          offscreenMask.isClip = _node9.isClip; // 定位到最后一个mask元素上的末尾

          var j = _i11 + (_total13 || 0) + 1;

          while (--n) {
            var _total14 = __structs[j][STRUCT_TOTAL$1];
            j += (_total14 || 0) + 1;
          }

          j--;
          var list = offscreenHash[j] = offscreenHash[j] || [];
          list.push([idx, _lv6, OFFSCREEN_MASK$1, offscreenMask]);
          list.push([j, _lv6, OFFSCREEN_MASK2$1, {
            ctx: ctx,
            // 保存等待OFFSCREEN_MASK2时还原
            target: _target7
          }]);
          ctx = _target7.ctx;
        } // 有cache声明从而有total的可以直接绘制并跳过子节点索，total生成可能会因超限而失败


        var target = getCache([__cacheMask, __cacheFilter, __cacheOverflow, __cacheTotal]);

        if (target) {
          var _j12 = _i11;
          _i11 += (_total13 || 0) + countMaskNum(__structs, _i11 + (_total13 || 0) + 1, _hasMask6 || 0); // total的none直接跳过

          if (display === 'none') {
            continue;
          }

          if (isValidMbm$2(mixBlendMode)) {
            ctx.globalCompositeOperation = mbmName$2(mixBlendMode);
          } else {
            ctx.globalCompositeOperation = 'source-over';
          } // cache需要计算matrixEvent，因为局部根节点临时视为E，根据refreshLevel决定


          var matrix = _config6[NODE_MATRIX$3],
              matrixEvent = _config6[NODE_MATRIX_EVENT$4];
          var old = matrixEvent.slice(0);
          var parentMatrix = _config6[NODE_DOM_PARENT$5].matrixEvent;

          if (parentMatrix && !isE$3(parentMatrix)) {
            matrix = multiply$2(parentMatrix, matrix);
          }

          util.assignMatrix(matrixEvent, matrix);
          Cache.draw(ctx, opacity, matrixEvent, target); // total应用后记得设置回来

          ctx.globalCompositeOperation = 'source-over'; // 父超限但子有total的时候，i此时已经增加到了末尾，也需要检查

          if (offscreenHash.hasOwnProperty(_i11)) {
            ctx = applyOffscreen$1(ctx, offscreenHash[_i11], width, height);
          } // 有cache的可以跳过子节点，但如果matrixEvent变化还是需要遍历计算一下的，虽然跳过了渲染
          // 如果cache是新的，则需要完整遍历设置一次
          // 如果isNew为false，则计算下局部根节点再对比下看是否有变化，无变化可省略


          var needReset = __cacheTotal.isNew;

          if (!needReset && !util.equalArr(old, matrixEvent)) {
            needReset = true;
          }

          if (needReset) {
            resetMatrixCacheTotal(__structs, _j12, _total13 || 0, _lv6, matrixEvent);
          }

          __cacheTotal.__isNew = false;
        } // 没有cacheTotal是普通节点绘制
        else {
            var res = _node9.render(renderMode, _refreshLevel6, ctx, NA, 0, 0);

            var _ref3 = res || {},
                offscreenBlend = _ref3.offscreenBlend,
                _offscreenMask4 = _ref3.offscreenMask,
                offscreenFilter = _ref3.offscreenFilter,
                offscreenOverflow = _ref3.offscreenOverflow; // 这里离屏顺序和xom里返回的一致，和下面应用离屏时的list相反


            if (offscreenBlend) {
              var _j13 = _i11 + (_total13 || 0) + countMaskNum(__structs, _i11 + (_total13 || 0) + 1, _hasMask6 || 0);

              var _list8 = offscreenHash[_j13] = offscreenHash[_j13] || [];

              _list8.push([_i11, _lv6, OFFSCREEN_BLEND$1, offscreenBlend]);

              ctx = offscreenBlend.target.ctx;
            } // 被遮罩的节点要为第一个遮罩和最后一个遮罩的索引打标，被遮罩的本身在一个离屏canvas，遮罩的元素在另外一个
            // 最后一个遮罩索引因数量不好计算，放在maskStartHash做


            if (_offscreenMask4) {
              var _j14 = _i11 + (_total13 || 0);

              maskStartHash[_j14 + 1] = [_i11, _hasMask6, _offscreenMask4];
              ctx = _offscreenMask4.target.ctx;
            } // filter造成的离屏，需要将后续一段孩子节点区域的ctx替换，并在结束后应用结果，再替换回来


            if (offscreenFilter) {
              var _j15 = _i11 + (_total13 || 0) + countMaskNum(__structs, _i11 + (_total13 || 0) + 1, _hasMask6 || 0);

              var _list9 = offscreenHash[_j15] = offscreenHash[_j15] || [];

              _list9.push([_i11, _lv6, OFFSCREEN_FILTER$1, offscreenFilter]);

              ctx = offscreenFilter.target.ctx;
            } // overflow:hidden的离屏，最后孩子进行截取


            if (offscreenOverflow) {
              var _j16 = _i11 + (_total13 || 0) + countMaskNum(__structs, _i11 + (_total13 || 0) + 1, _hasMask6 || 0);

              var _list10 = offscreenHash[_j16] = offscreenHash[_j16] || [];

              _list10.push([_i11, _lv6, OFFSCREEN_OVERFLOW$1, offscreenOverflow]);

              ctx = offscreenOverflow.target.ctx;
            } // 离屏应用，按照lv从大到小即子节点在前先应用，同一个节点多个效果按offscreen优先级从小到大来，
            // 由于mask特殊索引影响，所有离屏都在最后一个mask索引判断，此时mask本身优先结算，以index序大到小判断


            if (offscreenHash.hasOwnProperty(_i11)) {
              ctx = applyOffscreen$1(ctx, offscreenHash[_i11], width, height);
            } // render后判断可见状态，此时computedStyle才有值


            if (display === 'none') {
              _i11 += (_total13 || 0) + countMaskNum(__structs, _i11 + (_total13 || 0) + 1, _hasMask6 || 0);
            }
          }
      }
    }
  }

  var struct = {
    renderCanvas: renderCanvas,
    renderSvg: renderSvg,
    renderWebgl: renderWebgl
  };

  var vertex = "#version 100\n#define GLSLIFY 1\nattribute vec4 a_position;attribute vec2 a_texCoords;varying vec2 v_texCoords;attribute float a_opacity;varying float v_opacity;void main(){gl_Position=a_position;v_texCoords=a_texCoords;v_opacity=a_opacity;}"; // eslint-disable-line

  var fragment = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;varying float v_opacity;uniform sampler2D u_texture;void main(){float opacity=v_opacity;if(opacity<=0.0){discard;}opacity=clamp(opacity,0.0,1.0);vec4 color=texture2D(u_texture,v_texCoords);gl_FragColor=color*opacity;}"; // eslint-disable-line

  var vertexMask = "#version 100\n#define GLSLIFY 1\nattribute vec4 a_position;attribute vec2 a_texCoords;varying vec2 v_texCoords;void main(){gl_Position=a_position;v_texCoords=a_texCoords;}"; // eslint-disable-line

  var fragmentMask = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);float a=color1.a*color2.a;gl_FragColor=vec4(color1.rgb*color2.a,a);}"; // eslint-disable-line

  var fragmentClip = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture1;uniform sampler2D u_texture2;void main(){vec4 color1=texture2D(u_texture1,v_texCoords);vec4 color2=texture2D(u_texture2,v_texCoords);float a=color1.a*(1.0-color2.a);gl_FragColor=vec4(color1.rgb*(1.0-color2.a),a);}"; // eslint-disable-line

  var fragmentOverflow = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture;void main(){gl_FragColor=texture2D(u_texture,v_texCoords);}"; // eslint-disable-line

  var vertexCm = "#version 100\n#define GLSLIFY 1\nattribute vec4 a_position;attribute vec2 a_texCoords;varying vec2 v_texCoords;void main(){gl_Position=a_position;v_texCoords=a_texCoords;}"; // eslint-disable-line

  var fragmentCm = "#version 100\n#ifdef GL_ES\nprecision mediump float;\n#define GLSLIFY 1\n#endif\nvarying vec2 v_texCoords;uniform sampler2D u_texture;uniform float u_m[20];void main(){vec4 c=texture2D(u_texture,v_texCoords);if(c.a>0.0){c.rgb/=c.a;}vec4 result;result.r=(u_m[0]*c.r);result.r+=(u_m[1]*c.g);result.r+=(u_m[2]*c.b);result.r+=(u_m[3]*c.a);result.r+=u_m[4];result.g=(u_m[5]*c.r);result.g+=(u_m[6]*c.g);result.g+=(u_m[7]*c.b);result.g+=(u_m[8]*c.a);result.g+=u_m[9];result.b=(u_m[10]*c.r);result.b+=(u_m[11]*c.g);result.b+=(u_m[12]*c.b);result.b+=(u_m[13]*c.a);result.b+=u_m[14];result.a=(u_m[15]*c.r);result.a+=(u_m[16]*c.g);result.a+=(u_m[17]*c.b);result.a+=(u_m[18]*c.a);result.a+=u_m[19];gl_FragColor=vec4(result.rgb*result.a,result.a);}"; // eslint-disable-line

  var TexCache = /*#__PURE__*/function () {
    function TexCache(units) {
      _classCallCheck(this, TexCache);

      this.__units = units; // 通道数量限制，8~16

      this.__pages = []; // 存当前page列表，通道数量8~16，缓存收留尽可能多的page

      this.__list = []; // 本次渲染暂存的数据，[cache, opacity, matrix, dx, dy]

      this.__channels = []; // 每个纹理通道记录还是个数组，下标即纹理单元，内容为Page

      this.__locks = []; // 锁定纹理单元列表，下标即纹理单元，内容true为锁定

      this.__lockUnits = 0;
    }
    /**
     * webgl每次绘制为添加纹理并绘制，此处尝试尽可能收集所有纹理贴图，以达到尽可能多的共享纹理，再一次性绘制
     * 收集的是Page对象（从cache中取得），里面包含了若干个节点的贴图，canvas本身是2的幂次方大小
     * webgl最少有8个纹理单元最多16个，因此存了一个列表来放这些Page的canvas，刷新后清空，但纹理通道映射记录保留
     * 当8个纹理单元全部满了，进行绘制并清空这个队列，外部主循环结束时也会检查队列是否还有余留并绘制
     * 初始调用队列为空，存入Page对象，后续调用先查看是否存在以便复用，再决定是否存入Page，直到8个满了
     * Page上存有update表示是否更新，每次cache绘制时会变true，以此表示是否有贴图更新，删除可以忽视
     * 还需要一个记录上次纹理通道使用哪个Page的canvas的地方，即映射，清空后队列再次添加时，如果Page之前被添加过，
     * 此次又被添加且没有变更update，可以直接复用上次的纹理单元号且无需再次上传纹理，节省性能
     * 后续接入局部纹理更新也是复用单元号，如果update变更可以选择局部上传纹理而非整个重新上传
     * 判断上传的逻辑在收集满8个后绘制前进行，因为添加队列过程中可能会变更Page及其update
     * @param gl
     * @param cache
     * @param opacity
     * @param matrix
     * @param cx
     * @param cy
     * @param dx
     * @param dy
     * @param revertY
     */


    _createClass(TexCache, [{
      key: "addTexAndDrawWhenLimit",
      value: function addTexAndDrawWhenLimit(gl, cache, opacity, matrix, cx, cy) {
        var dx = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : 0;
        var dy = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
        var revertY = arguments.length > 8 ? arguments[8] : undefined;
        var pages = this.__pages;
        var list = this.__list;
        var page = cache.page;
        var i = pages.indexOf(page); // 找到说明已有page在此索引的通道中，记录下来info

        if (i > -1) {
          list.push([cache, opacity, matrix, dx, dy]);
        } // 找不到说明是新的纹理贴图，此时看是否超过纹理单元限制，超过则刷新绘制并清空，然后/否则 存入纹理列表
        else {
            i = pages.length;

            if (i >= this.__units - this.__lockUnits) {
              // 绘制且清空，队列索引重新为0
              this.refresh(gl, cx, cy, revertY);
            }

            pages.push(page);
            list.push([cache, opacity, matrix, dx, dy]);
          }
      }
      /**
       * 刷新
       * @param gl
       * @param cx
       * @param cy
       * @param revertY
       */

    }, {
      key: "refresh",
      value: function refresh(gl, cx, cy, revertY) {
        var pages = this.__pages;
        var list = this.__list; // 防止空调用刷新，struct循环结尾会强制调用一次防止有未渲染的

        if (pages.length) {
          var channels = this.channels;
          var locks = this.locks; // 先将上次渲染的纹理单元使用的Page形成一个hash，键为page的uuid，值为纹理单元

          var lastHash = {};
          channels.forEach(function (item, i) {
            if (item) {
              var uuid = item.uuid;
              lastHash[uuid] = i;
            }
          });
          var units = this.__units; // 再遍历，查找相同的Page并保持其使用的纹理单元不变，存入相同索引下标oldList，不同的按顺序收集放newList

          var oldList = new Array(units),
              newList = [];
          pages.forEach(function (page) {
            var uuid = page.uuid;

            if (lastHash.hasOwnProperty(uuid)) {
              var index = lastHash[uuid];
              oldList[index] = page;
            } else {
              newList.push(page);
            }
          });
          /**
           * 以oldList为基准，将newList依次存入oldList中
           * 优先使用未用过的纹理单元，以便用过的可能下次用到无需重新上传
           * 找不到未用过的后，尝试NRU算法，优先淘汰最近未使用的Page，相等则尺寸小的
           */

          if (newList.length) {
            // 先循环找空的，oldList空且channels空且locks空
            for (var i = 0; i < units; i++) {
              if (!oldList[i] && !channels[i] && !locks[i]) {
                oldList[i] = newList.shift();

                if (!newList.length) {
                  break;
                }
              }
            }

            var len = newList.length;

            if (len) {
              // 按时间排序已使用channel且未被当前占用的，以便淘汰最久未使用的
              var cl = [];

              for (var _i = 0; _i < units; _i++) {
                if (!oldList[_i] && !locks[_i]) {
                  cl.push([_i, channels[_i]]);
                }
              }

              cl.sort(function (a, b) {
                if (a[1].time !== b[1].time) {
                  return (a[1].time || 0) - (b[1].time || 0);
                }

                if (a[1].fullSize !== b[1].fullSize) {
                  return a[1].fullSize - b[1].fullSize;
                }

                return a[0] - b[0];
              }); // cl靠前是时间小尺寸小的，优先使用替换

              for (var _i2 = 0; _i2 < len; _i2++) {
                oldList[cl[_i2][0]] = newList[_i2];
              }
            }
          }
          /**
           * 对比上帧渲染的和这次纹理单元情况，Page相同且!update可以省略更新，其它均重新赋值纹理
           * 后续局部更新Page相同但有update，会出现没有上帧的情况如初始渲染，此时先创建纹理单元再更新
           * 将新的数据赋给老的，可能新的一帧使用的少于上一帧，老的没用到的需继续保留
           */


          var hash = {};

          for (var _i3 = 0, _len = oldList.length; _i3 < _len; _i3++) {
            var page = oldList[_i3]; // 可能为空，不满的情况下前面单元保留老tex先用的后面的单元

            if (!page) {
              continue;
            }

            var last = channels[_i3];

            if (!last || last !== page || page.update) {
              // page可能为一个已有fbo纹理，或者贴图
              if (page instanceof MockPage) {
                webgl.bindTexture(gl, page.texture, _i3);
              } else {
                // 可能老的先删除，注意只删Page，MockPage是fbo生成的texture即total缓存不能自动清除
                if (last && !(last instanceof MockPage)) {
                  gl.deleteTexture(last.texture);
                }

                page.texture = webgl.createTexture(gl, page.canvas, _i3);
              }

              channels[_i3] = page;
            }

            hash[page.uuid] = _i3; // 标识没有更新，以及最后使用时间

            page.update = false;
            page.time = inject.now();
          } // 再次遍历开始本次渲染并清空


          webgl.drawTextureCache(gl, list, hash, cx, cy, revertY);
          pages.splice(0);
          list.splice(0);
        }
      }
    }, {
      key: "findExistTexChannel",
      value: function findExistTexChannel(page) {
        return this.channels.indexOf(page);
      }
      /**
       * 获取并锁定一个纹理单元优先使用空的，其次最久未使用的
       * @returns {number|*}
       */

    }, {
      key: "lockOneChannel",
      value: function lockOneChannel() {
        // 优先返回空单元
        var channels = this.channels;
        var locks = this.locks;

        for (var i = 0; i < this.__units; i++) {
          if (!channels[i] && !locks[i]) {
            locks[i] = true;
            this.__lockUnits++;
            return i;
          }
        } // 根据NRU返回最久未使用的


        var units = this.__units;
        var cl = [];

        for (var _i4 = 0; _i4 < units; _i4++) {
          if (!locks[_i4]) {
            cl.push([_i4, channels[_i4]]);
          }
        }

        if (cl.length) {
          cl.sort(function (a, b) {
            if (a[1].time !== b[1].time) {
              return (a[1].time || 0) - (b[1].time || 0);
            }

            if (a[1].fullSize !== b[1].fullSize) {
              return a[1].fullSize - b[1].fullSize;
            }

            return a[0] - b[0];
          });
          var _i5 = cl[0][0];
          channels[_i5] = null;
          locks[_i5] = true;
          this.__lockUnits++;
          return _i5;
        }

        throw new Error('No free texture unit');
      }
      /**
       * 释放掉i单元，并且设置内容到缓存channel中
       * @param i
       * @param setToChannel
       */

    }, {
      key: "releaseLockChannel",
      value: function releaseLockChannel(i, setToChannel) {
        if (this.locks[i]) {
          this.locks[i] = false;
          this.__lockUnits--;

          if (setToChannel) {
            this.channels[i] = setToChannel;
          }
        }
      } // 指定锁定一个单元

    }, {
      key: "lockChannel",
      value: function lockChannel(i) {
        var channels = this.channels;
        var locks = this.locks;

        if (!locks[i]) {
          channels[i] = null;
          locks[i] = true;
          this.__lockUnits++;
        }
      }
      /**
       * 释放纹理单元
       * @param gl
       */

    }, {
      key: "release",
      value: function release(gl) {
        this.channels.forEach(function (item) {
          if (item) {
            gl.deleteTexture(item.texture);
          }
        });
      }
    }, {
      key: "channels",
      get: function get() {
        return this.__channels;
      }
    }, {
      key: "locks",
      get: function get() {
        return this.__locks;
      }
    }, {
      key: "last",
      get: function get() {
        var list = this.__list,
            len = list.length;

        if (len) {
          return list[len - 1];
        }
      }
    }]);

    return TexCache;
  }();

  var _DIRECTION_HASH;
  var _enums$STYLE_KEY$j = enums.STYLE_KEY,
      TOP$4 = _enums$STYLE_KEY$j.TOP,
      RIGHT$2 = _enums$STYLE_KEY$j.RIGHT,
      BOTTOM$4 = _enums$STYLE_KEY$j.BOTTOM,
      LEFT$2 = _enums$STYLE_KEY$j.LEFT,
      POSITION$4 = _enums$STYLE_KEY$j.POSITION,
      DISPLAY$9 = _enums$STYLE_KEY$j.DISPLAY,
      VISIBILITY$6 = _enums$STYLE_KEY$j.VISIBILITY,
      COLOR$5 = _enums$STYLE_KEY$j.COLOR,
      WIDTH$8 = _enums$STYLE_KEY$j.WIDTH,
      HEIGHT$8 = _enums$STYLE_KEY$j.HEIGHT,
      Z_INDEX$4 = _enums$STYLE_KEY$j.Z_INDEX,
      MARGIN_TOP$4 = _enums$STYLE_KEY$j.MARGIN_TOP,
      MARGIN_LEFT$6 = _enums$STYLE_KEY$j.MARGIN_LEFT,
      MARGIN_BOTTOM$4 = _enums$STYLE_KEY$j.MARGIN_BOTTOM,
      PADDING_TOP$6 = _enums$STYLE_KEY$j.PADDING_TOP,
      PADDING_LEFT$8 = _enums$STYLE_KEY$j.PADDING_LEFT,
      PADDING_BOTTOM$6 = _enums$STYLE_KEY$j.PADDING_BOTTOM,
      BORDER_TOP_WIDTH$7 = _enums$STYLE_KEY$j.BORDER_TOP_WIDTH,
      BORDER_LEFT_WIDTH$9 = _enums$STYLE_KEY$j.BORDER_LEFT_WIDTH,
      BORDER_BOTTOM_WIDTH$7 = _enums$STYLE_KEY$j.BORDER_BOTTOM_WIDTH,
      POINTER_EVENTS$2 = _enums$STYLE_KEY$j.POINTER_EVENTS,
      _enums$UPDATE_KEY$5 = enums.UPDATE_KEY,
      UPDATE_NODE$5 = _enums$UPDATE_KEY$5.UPDATE_NODE,
      UPDATE_STYLE$2 = _enums$UPDATE_KEY$5.UPDATE_STYLE,
      UPDATE_KEYS$2 = _enums$UPDATE_KEY$5.UPDATE_KEYS,
      UPDATE_COMPONENT = _enums$UPDATE_KEY$5.UPDATE_COMPONENT,
      UPDATE_FOCUS$4 = _enums$UPDATE_KEY$5.UPDATE_FOCUS,
      UPDATE_MEASURE$2 = _enums$UPDATE_KEY$5.UPDATE_MEASURE,
      UPDATE_OVERWRITE$1 = _enums$UPDATE_KEY$5.UPDATE_OVERWRITE,
      UPDATE_LIST = _enums$UPDATE_KEY$5.UPDATE_LIST,
      UPDATE_CONFIG$5 = _enums$UPDATE_KEY$5.UPDATE_CONFIG,
      UPDATE_ADD_DOM$1 = _enums$UPDATE_KEY$5.UPDATE_ADD_DOM,
      UPDATE_REMOVE_DOM$1 = _enums$UPDATE_KEY$5.UPDATE_REMOVE_DOM,
      _enums$NODE_KEY$9 = enums.NODE_KEY,
      NODE_TAG_NAME$1 = _enums$NODE_KEY$9.NODE_TAG_NAME,
      NODE_CACHE_STYLE$2 = _enums$NODE_KEY$9.NODE_CACHE_STYLE,
      NODE_CACHE_PROPS$1 = _enums$NODE_KEY$9.NODE_CACHE_PROPS,
      NODE_CURRENT_STYLE$6 = _enums$NODE_KEY$9.NODE_CURRENT_STYLE,
      NODE_COMPUTED_STYLE$4 = _enums$NODE_KEY$9.NODE_COMPUTED_STYLE,
      NODE_CURRENT_PROPS$1 = _enums$NODE_KEY$9.NODE_CURRENT_PROPS,
      NODE_DOM_PARENT$6 = _enums$NODE_KEY$9.NODE_DOM_PARENT,
      NODE_IS_MASK$3 = _enums$NODE_KEY$9.NODE_IS_MASK,
      NODE_REFRESH_LV$2 = _enums$NODE_KEY$9.NODE_REFRESH_LV,
      NODE_IS_DESTROYED$2 = _enums$NODE_KEY$9.NODE_IS_DESTROYED,
      NODE_STYLE$5 = _enums$NODE_KEY$9.NODE_STYLE,
      NODE_UPDATE_HASH = _enums$NODE_KEY$9.NODE_UPDATE_HASH,
      NODE_UNIQUE_UPDATE_ID = _enums$NODE_KEY$9.NODE_UNIQUE_UPDATE_ID,
      NODE_CACHE$4 = _enums$NODE_KEY$9.NODE_CACHE,
      NODE_CACHE_TOTAL$2 = _enums$NODE_KEY$9.NODE_CACHE_TOTAL,
      NODE_CACHE_FILTER$2 = _enums$NODE_KEY$9.NODE_CACHE_FILTER,
      NODE_CACHE_OVERFLOW$2 = _enums$NODE_KEY$9.NODE_CACHE_OVERFLOW,
      NODE_CACHE_MASK$2 = _enums$NODE_KEY$9.NODE_CACHE_MASK,
      NODE_STRUCT$5 = _enums$NODE_KEY$9.NODE_STRUCT,
      _enums$STRUCT_KEY$3 = enums.STRUCT_KEY,
      STRUCT_INDEX$3 = _enums$STRUCT_KEY$3.STRUCT_INDEX,
      STRUCT_TOTAL$2 = _enums$STRUCT_KEY$3.STRUCT_TOTAL,
      STRUCT_NODE$2 = _enums$STRUCT_KEY$3.STRUCT_NODE;
  var DIRECTION_HASH = (_DIRECTION_HASH = {}, _defineProperty(_DIRECTION_HASH, TOP$4, true), _defineProperty(_DIRECTION_HASH, RIGHT$2, true), _defineProperty(_DIRECTION_HASH, BOTTOM$4, true), _defineProperty(_DIRECTION_HASH, LEFT$2, true), _DIRECTION_HASH);
  var isNil$8 = util.isNil,
      isObject$2 = util.isObject,
      isFunction$7 = util.isFunction;
  var AUTO$8 = o.AUTO,
      PX$b = o.PX,
      PERCENT$c = o.PERCENT,
      INHERIT$5 = o.INHERIT;
  var isRelativeOrAbsolute$2 = css.isRelativeOrAbsolute,
      equalStyle$1 = css.equalStyle;
  var contain$3 = o$3.contain,
      getLevel = o$3.getLevel,
      isRepaint = o$3.isRepaint,
      NONE$3 = o$3.NONE,
      FILTER$6 = o$3.FILTER,
      PERSPECTIVE$5 = o$3.PERSPECTIVE,
      REPAINT$3 = o$3.REPAINT,
      REFLOW$2 = o$3.REFLOW,
      REBUILD = o$3.REBUILD;
  var isIgnore = o$2.isIgnore,
      isGeom$2 = o$2.isGeom,
      isMeasure = o$2.isMeasure;
  var ROOT_DOM_NAME = {
    canvas: 'canvas',
    svg: 'svg',
    webgl: 'canvas'
  };

  function getDom(dom) {
    if (util.isString(dom) && dom) {
      var o = document.querySelector(dom);

      if (!o) {
        throw new Error('Can not find dom of selector: ' + dom);
      }

      return o;
    }

    if (!dom) {
      throw new Error('Can not find dom: ' + dom);
    }

    return dom;
  }

  function renderProp(k, v) {
    var s = Array.isArray(v) ? util.joinSourceArray(v) : util.stringify(v);

    if (k === 'className') {
      k = 'class';
    } else if (k === 'style') {
      return '';
    }

    return ' ' + k + '="' + util.encodeHtml(s, true) + '"';
  }

  var EVENT_LIST = ['click', 'dblclick', 'mousedown', 'mousemove', 'mouseup', 'touchstart', 'touchmove', 'touchend', 'touchcancel'];

  function initEvent(dom, Root) {
    var list = [];
    EVENT_LIST.forEach(function (type) {
      function cb(e) {
        var root = dom.__root;

        if (root && root instanceof Root) {
          if (['touchend', 'touchcancel', 'touchmove'].indexOf(type) > -1) {
            var target = root.__touchstartTarget;

            var event = root.__wrapEvent(e);

            event.target = target;

            while (target) {
              target.__emitEvent(event, true);

              target = target.domParent;
            }
          } else {
            root.__cb(e);
          }
        }
      }

      dom.addEventListener(type, cb);
      list.push([type, cb]);
    });
    return list;
  }

  function removeEvent(dom, list) {
    list.forEach(function (item) {
      dom.removeEventListener(item[0], item[1]);
    });
  } // 提取出对比节点尺寸是否固定非AUTO


  function isFixedWidthOrHeight(node, k) {
    var c = node.currentStyle[k];
    return c[1] !== AUTO$8;
  } // 除了固定尺寸，父级也不能是flex或变化flex


  function isFixedSize(node, includeParentFlex) {
    var res = isFixedWidthOrHeight(node, WIDTH$8) && isFixedWidthOrHeight(node, HEIGHT$8);

    if (res && includeParentFlex) {
      var parent = node.domParent;

      if (parent) {
        if (parent.currentStyle[DISPLAY$9] === 'flex' || parent.computedStyle[DISPLAY$9] === 'flex') {
          return false;
        }
      }
    }

    return res;
  }

  function isLAYOUT(node) {
    return node.hasOwnProperty('__uniqueReflowId');
  }

  var __uniqueReflowId = 0;

  function setLAYOUT(node, hash, component, addDom) {
    if (!node.hasOwnProperty('__uniqueReflowId')) {
      node.__uniqueReflowId = __uniqueReflowId;
      hash[__uniqueReflowId++] = {
        node: node,
        component: component,
        addDom: addDom
      };
    }
  }
  /**
   * 单独提出共用检测影响的函数，从节点本身开始向上分析影响，找到最上层的影响节点设置其重新布局
   * 过程即__checkReflow中所提及的，各种情况
   * 将影响升至最近的父级节点，并添加布局标识，这样后面的深度遍历会以父级为准忽略本身
   * 如果最终是root，则返回true标识，直接整个重新开始布局
   * ====
   * addDom情况下的特殊影响检测，类似checkInfluence
   * 添加的是absolute则只影响自己，大部分交互游戏情况属于此类型优化
   * 添加的是inline/inlineBlock的话，影响最近非inline父节点
   * 父为flex则直接影响父节点，不管添加情况如何
   * 添加block/flex的话，上下都block/flex则只影响自己，否则还是影响父节点
   * 如果最终是root，则返回true标识，直接整个重新开始布局
   * @returns {boolean}
   */


  function checkInfluence(root, reflowHash, node, component, addDom) {
    // add情况abs节点特殊对待不影响其它节点，不能判断display，因为inline会强制block
    if (addDom && node.currentStyle[POSITION$4] === 'absolute') {
      return;
    }

    var target = node; // inline新老都影响，节点变为最近的父非inline

    if (['inline', 'inlineBlock', 'inline-block'].indexOf(target.currentStyle[DISPLAY$9]) > -1 || ['inline', 'inlineBlock', 'inline-block'].indexOf(target.computedStyle[DISPLAY$9]) > -1) {
      do {
        target = target.domParent; // 父到root提前跳出

        if (target === root) {
          return true;
        } // 父已有LAYOUT跳出防重


        if (isLAYOUT(target)) {
          return;
        } // 遇到absolute跳出，设置其布局；如果absolute不变化普通处理，如果absolute发生变化，一定会存在于列表中，不用考虑


        if (target.currentStyle[POSITION$4] === 'absolute' || target.computedStyle[POSITION$4] === 'absolute') {
          setLAYOUT(target, reflowHash, component, addDom);
          return;
        }
      } while (target && (['inline', 'inlineBlock', 'inline-block'].indexOf(target.currentStyle[DISPLAY$9]) > -1 || ['inline', 'inlineBlock', 'inline-block'].indexOf(target.computedStyle[DISPLAY$9]) > -1)); // target已不是inline，父固定宽高跳出直接父进行LAYOUT即可，不影响上下文，但不能是flex孩子，此时固定尺寸无用


      if (isFixedSize(target, true)) {
        setLAYOUT(target, reflowHash, component, addDom);
        return;
      }
    } // 此时target指向node，如果原本是inline则是其flow的非inline父


    var parent = target.domParent; // parent有LAYOUT跳出，已被包含

    if (isLAYOUT(parent)) {
      return;
    } // 向上检查flex，如果父级中有flex，以最上层的flex视作其更改，node本身flex不进入


    var topFlex;

    do {
      // 父已有LAYOUT跳出防重
      if (isLAYOUT(parent)) {
        return;
      } // flex相关，包含变化或不变化


      if (parent.computedStyle[DISPLAY$9] === 'flex' || parent.currentStyle[DISPLAY$9] === 'flex') {
        topFlex = parent;
      } // 遇到absolute跳出，如果absolute不变化普通处理，如果absolute发生变化，一定会存在于列表中，不用考虑


      if (parent.currentStyle[POSITION$4] === 'absolute' || parent.computedStyle[POSITION$4] === 'absolute') {
        break;
      } // 父固定宽高跳出


      if (isFixedSize(parent, true)) {
        break;
      }

      parent = parent.domParent;
    } while (parent); // 找到最上层flex，视作其更改


    if (topFlex) {
      target = topFlex;
    }

    if (target === root) {
      return true;
    }

    parent = target; // 向上检查非固定尺寸的absolute，找到则视为其变更，上面过程中一定没有出现absolute

    while (parent) {
      // 无论新老absolute，不变化则设置，变化一定会出现在列表中
      if (parent.currentStyle[POSITION$4] === 'absolute' || parent.computedStyle[POSITION$4] === 'absolute') {
        if (parent === root) {
          break;
        } // 固定尺寸的不用设置，需要跳出循环


        if (isFixedSize(parent)) {
          break;
        } else {
          setLAYOUT(parent, reflowHash, component, addDom);
          return;
        }
      }

      parent = parent.domParent;
    } // 向上查找了并且没提前跳出的target如果不等于自身则重新布局，自身外面设置过了


    if (target !== node) {
      setLAYOUT(target, reflowHash, component, addDom);
    } else if (addDom) {
      // 前后必须都是block，否则还是视为父布局
      var isSiblingBlock = true;
      var prev = node.prev,
          next = node.next;

      if (prev && ['inline', 'inline-block', 'inlineBlock'].indexOf(prev.currentStyle[DISPLAY$9]) > -1) {
        isSiblingBlock = false;
      } else if (next && ['inline', 'inline-block', 'inlineBlock'].indexOf(next.currentStyle[DISPLAY$9]) > -1) {
        isSiblingBlock = false;
      }

      if (!isSiblingBlock) {
        target = node.domParent;

        if (target === root) {
          return true;
        }

        setLAYOUT(target, reflowHash, false, true);
      }
    }
  }

  var uniqueUpdateId = 0;

  function parseUpdate(renderMode, root, target, reflowList, measureList, cacheHash, cacheList, zHash, zList) {
    var node = target[UPDATE_NODE$5],
        style = target[UPDATE_STYLE$2],
        overwrite = target[UPDATE_OVERWRITE$1],
        focus = target[UPDATE_FOCUS$4],
        component = target[UPDATE_COMPONENT],
        measure = target[UPDATE_MEASURE$2],
        list = target[UPDATE_LIST],
        keys = target[UPDATE_KEYS$2],
        __config = target[UPDATE_CONFIG$5],
        addDom = target[UPDATE_ADD_DOM$1],
        removeDom = target[UPDATE_REMOVE_DOM$1];

    if (__config[NODE_IS_DESTROYED$2]) {
      return;
    } // updateStyle()这样的调用需要覆盖原有样式，因为是按顺序遍历，后面的优先级自动更高不怕重复


    if (overwrite) {
      Object.assign(__config[NODE_STYLE$5], overwrite);
    } // 多次调用更新才会有list，一般没有，优化；component无需，因为多次都是它自己


    if (list && !component) {
      keys = (keys || []).slice(0); // 防止原始值被更改

      var hash = {};
      keys.forEach(function (k) {
        hash[k] = true;
      });
      list.forEach(function (item) {
        var style2 = item[UPDATE_STYLE$2],
            overwrite = item[UPDATE_OVERWRITE$1],
            keys2 = item[UPDATE_KEYS$2];
        (keys2 || []).forEach(function (k2) {
          if (!hash.hasOwnProperty(k2)) {
            hash[k2] = true;
            keys.push(k2);
          }
        });

        if (overwrite) {
          Object.assign(__config[NODE_STYLE$5], overwrite);
        }

        if (style2) {
          if (style) {
            Object.assign(style, style2);
          } else {
            style = style2;
          }
        }
      });
    } // 按节点合并完style后判断改变等级


    var tagName = __config[NODE_TAG_NAME$1],
        __cacheStyle = __config[NODE_CACHE_STYLE$2],
        __cacheProps = __config[NODE_CACHE_PROPS$1],
        currentStyle = __config[NODE_CURRENT_STYLE$6],
        computedStyle = __config[NODE_COMPUTED_STYLE$4],
        currentProps = __config[NODE_CURRENT_PROPS$1],
        domParent = __config[NODE_DOM_PARENT$6],
        isMask = __config[NODE_IS_MASK$3];
    var lv = focus || NONE$3;
    var hasMeasure = measure;
    var hasZ, hasVisibility, hasColor, hasDisplay; // component无需遍历直接赋值，img重新加载等情况没有样式更新

    if (!component && style && keys) {
      for (var i = 0, len = keys.length; i < len; i++) {
        var k = keys[i];
        var v = style[k]; // 只有geom的props和style2种可能

        if (node instanceof Geom$1 && isGeom$2(tagName, k)) {
          if (!equalStyle$1(k, v, currentProps[k], node)) {
            lv |= REPAINT$3;
            __cacheProps[k] = undefined;
            currentProps[k] = v;
          }
        } else {
          // 需和现在不等，且不是pointerEvents这种无关的
          if (!equalStyle$1(k, v, currentStyle[k], node)) {
            // pointerEvents这种无关的只需更新
            if (isIgnore(k)) {
              __cacheStyle[k] = undefined;
              currentStyle[k] = v;
            } else {
              // TRBL变化只对relative/absolute起作用，其它忽视
              if (DIRECTION_HASH.hasOwnProperty(k)) {
                var position = currentStyle[POSITION$4];

                if (position !== 'relative' && position !== 'absolute') {
                  delete style[k];
                  continue;
                }
              } else if (k === DISPLAY$9) {
                hasDisplay = true;
              } // repaint细化等级，reflow在checkReflow()


              lv |= getLevel(k);

              if (isMeasure(k)) {
                hasMeasure = true;
              } // repaint置空，如果reflow会重新生成空的


              __cacheStyle[k] = undefined;
              currentStyle[k] = v;

              if (k === Z_INDEX$4 && node !== root) {
                hasZ = true;
              }

              if (k === VISIBILITY$6) {
                hasVisibility = true;
              }

              if (k === COLOR$5) {
                hasColor = true;
              }
            }
          }
        }
      }
    } // 无任何改变处理的去除记录，如pointerEvents、无效的left
    // 但是perspective需考虑进来，虽然不影响自己但影响别人，要返回true表明有变更


    if (lv === NONE$3 && !component) {
      delete __config[NODE_UNIQUE_UPDATE_ID];
      return;
    } // 由于父节点中有display:none，或本身节点也为none，执行普通动画是无效的，此时没有display变化


    if (computedStyle[DISPLAY$9] === 'none' && !hasDisplay) {
      return;
    } // 记录下来清除parent的zIndexChildren缓存


    if (hasZ && domParent) {
      delete domParent.__zIndexChildren;
    } // visibility/color变化，影响子继承


    if (hasVisibility || hasColor) {
      for (var __structs = root.__structs, __struct = node.__config[NODE_STRUCT$5], _i = __struct[STRUCT_INDEX$3] + 1, _len = _i + __struct[STRUCT_TOTAL$2]; _i < _len; _i++) {
        var _structs$_i = __structs[_i],
            _node = _structs$_i[STRUCT_NODE$2],
            total = _structs$_i[STRUCT_TOTAL$2];
        var _config = _node.__config;
        var _currentStyle = _config[NODE_CURRENT_STYLE$6];

        var _need = void 0; // text的style指向parent，因此text一定变更


        if (hasVisibility && (_node instanceof Text || _currentStyle[VISIBILITY$6][1] === INHERIT$5)) {
          _need = true;
        }

        if (hasColor && (_node instanceof Text || _currentStyle[COLOR$5][1] === INHERIT$5)) {
          _need = true;
        }

        if (_need) {
          _config[NODE_REFRESH_LV$2] |= REPAINT$3;

          if (_node instanceof Xom$1) {
            _node.clearCache();
          }
        } else {
          _i += total || 0;
        }
      }
    } // mask需清除遮罩对象的缓存


    if (isMask) {
      var prev = node.prev;

      while (prev && prev.isMask) {
        prev = prev.prev;
      }

      if (prev && prev.__config[NODE_CACHE_MASK$2]) {
        prev.__config[NODE_CACHE_MASK$2].release();
      }
    } // 特殊情况，父节点display:none，子节点进行任意变更，应视为无效
    // 如果父节点由none变block，这里也return false，因为父节点会重新layout+render
    // 如果父节点由block变none，同上，所以只要current/computed里有none就return false


    var parent = domParent;

    if (hasDisplay && parent) {
      var _config2 = parent.__config;

      if (_config2[NODE_CURRENT_STYLE$6][DISPLAY$9] === 'none' || _config2[NODE_COMPUTED_STYLE$4][DISPLAY$9] === 'none') {
        computedStyle[DISPLAY$9] = 'none';
        return;
      }
    } // reflow/repaint/measure相关的记录下来


    var isRp = !component && isRepaint(lv);

    if (isRp) {
      // zIndex变化需清空svg缓存
      if (hasZ && renderMode === mode.SVG) {
        lv |= REPAINT$3;
        domParent && cleanSvgCache(domParent);
      } // z改变影响struct局部重排，它的数量不会变因此不影响外围，此处先收集，最后统一对局部根节点进行更新


      if (hasZ && !component && zHash) {
        if (domParent && !domParent.hasOwnProperty('__uniqueZId')) {
          zHash[uniqueUpdateId] = true;
          domParent.__uniqueZId = uniqueUpdateId++;
          zList.push(domParent);
        }
      }
    } // reflow在root的refresh中做
    else {
        reflowList.push({
          node: node,
          style: style,
          component: component,
          addDom: addDom,
          removeDom: removeDom
        }); // measure需要提前先处理

        if (hasMeasure) {
          measureList.push(node);
        }
      } // 这里也需|运算，每次刷新会置0，但是如果父元素进行继承变更，会在此元素分析前更改，比如visibility，此时不能直接赋值


    __config[NODE_REFRESH_LV$2] |= lv;

    if (component || addDom || removeDom) {
      root.__rlv = REBUILD;
    } else {
      root.__rlv = Math.max(root.__rlv, lv);
    } // dom在>=REPAINT时total失效，svg的Geom比较特殊


    var need = lv >= REPAINT$3 || renderMode === mode.SVG && node instanceof Geom$1;

    if (need) {
      if (__config[NODE_CACHE$4]) {
        __config[NODE_CACHE$4].release();
      }
    } // perspective也特殊只清空total的cache，和>=REPAINT清空total共用


    if (need || contain$3(lv, PERSPECTIVE$5)) {
      if (__config[NODE_CACHE_TOTAL$2]) {
        __config[NODE_CACHE_TOTAL$2].release();
      }

      if (__config[NODE_CACHE_MASK$2]) {
        __config[NODE_CACHE_MASK$2].release();
      }

      if (__config[NODE_CACHE_OVERFLOW$2]) {
        __config[NODE_CACHE_OVERFLOW$2].release();
      }
    } // 特殊的filter清除cache


    if ((need || contain$3(lv, FILTER$6)) && __config[NODE_CACHE_FILTER$2]) {
      __config[NODE_CACHE_FILTER$2].release();
    } // 向上清除等级>=REPAINT的汇总缓存信息，过程中可能会出现重复，因此节点上记录一个临时标防止重复递归


    while (parent) {
      var _config3 = parent.__config; // 向上查找，出现重复跳出

      if (_config3.hasOwnProperty(NODE_UNIQUE_UPDATE_ID)) {
        var id = _config3[NODE_UNIQUE_UPDATE_ID];

        if (cacheHash.hasOwnProperty(id)) {
          break;
        }

        cacheHash[id] = true;
      } // 没有的需要设置一个标识
      else {
          cacheHash[uniqueUpdateId] = true;
          _config3[NODE_UNIQUE_UPDATE_ID] = uniqueUpdateId++;
          cacheList.push(_config3);
        }

      var _lv = _config3[NODE_REFRESH_LV$2];

      var _need2 = _lv >= REPAINT$3;

      if (_need2 && _config3[NODE_CACHE$4]) {
        _config3[NODE_CACHE$4].release();
      } // 前面已经过滤了无改变NONE的，只要孩子有任何改变父亲就要清除


      if (_config3[NODE_CACHE_TOTAL$2]) {
        _config3[NODE_CACHE_TOTAL$2].release();
      }

      if (_config3[NODE_CACHE_FILTER$2]) {
        _config3[NODE_CACHE_FILTER$2].release();
      }

      if (_config3[NODE_CACHE_MASK$2]) {
        _config3[NODE_CACHE_MASK$2].release();
      }

      if (_config3[NODE_CACHE_OVERFLOW$2]) {
        _config3[NODE_CACHE_OVERFLOW$2].release();
      }

      parent = _config3[NODE_DOM_PARENT$6];
    }

    return true;
  }

  function cleanSvgCache(node, child) {
    var __config = node.__config;

    if (child) {
      __config[NODE_REFRESH_LV$2] |= REPAINT$3;
    } else {
      __config[NODE_CACHE_TOTAL$2].release();
    }

    if (Array.isArray(node.children)) {
      node.children.forEach(function (child) {
        if (child instanceof Component$1) {
          child = child.shadowRoot;
        }

        if (!(child instanceof Text)) {
          cleanSvgCache(child, true);
        }
      });
    }
  }

  var uuid$2 = 0;

  var Root = /*#__PURE__*/function (_Dom) {
    _inherits(Root, _Dom);

    var _super = _createSuper(Root);

    function Root(tagName, props, children) {
      var _this;

      _classCallCheck(this, Root);

      _this = _super.call(this, tagName, props);
      _this.__cd = children || []; // 原始children，再初始化过程中生成真正的dom

      _this.__dom = null; // 真实DOM引用

      _this.__mw = 0; // 记录最大宽高，防止尺寸变化清除不完全

      _this.__mh = 0; // this.__scx = 1; // 默认缩放，css改变canvas/svg缩放后影响事件坐标，有值手动指定，否则自动计算
      // this.__scy = 1;

      _this.__taskUp = [];
      _this.__taskCp = [];
      _this.__ref = {};
      _this.__reflowList = [{
        node: _assertThisInitialized(_this)
      }]; // 初始化填自己，第一次布局时复用逻辑完全重新布局

      _this.__animateController = new Controller();
      Event.mix(_assertThisInitialized(_this));
      _this.__config[NODE_UPDATE_HASH] = _this.__updateHash = {};
      _this.__uuid = uuid$2++;
      _this.__rlv = REBUILD; // 每次刷新最大lv

      return _this;
    }

    _createClass(Root, [{
      key: "__initProps",
      value: function __initProps() {
        var w = this.props.width;

        if (!isNil$8(w)) {
          var value = parseFloat(w) || 0;

          if (value > 0) {
            this.__width = value;
          }
        }

        var h = this.props.height;

        if (!isNil$8(h)) {
          var _value = parseFloat(h) || 0;

          if (_value > 0) {
            this.__height = _value;
          }
        }
      }
    }, {
      key: "__genHtml",
      value: function __genHtml(domName) {
        var _this2 = this;

        var res = "<".concat(domName); // 拼接处理属性

        Object.keys(this.props).forEach(function (k) {
          var v = _this2.props[k]; // 忽略事件

          if (!/^on[a-zA-Z]/.test(k)) {
            res += renderProp(k, v);
          }
        });
        res += "></".concat(domName, ">");
        return res;
      }
    }, {
      key: "__wrapEvent",
      value: function __wrapEvent(e) {
        var x, y; // 触摸结束取消特殊没有touches

        if (['touchend', 'touchcancel'].indexOf(e.type) === -1) {
          var dom = this.dom,
              __scx = this.__scx,
              __scy = this.__scy;

          var _dom$getBoundingClien = dom.getBoundingClientRect(),
              x2 = _dom$getBoundingClien.x,
              y2 = _dom$getBoundingClien.y,
              left = _dom$getBoundingClien.left,
              top = _dom$getBoundingClien.top,
              width = _dom$getBoundingClien.width,
              height = _dom$getBoundingClien.height;

          x = x2 || left || 0;
          y = y2 || top || 0;

          var _ref = e.touches ? e.touches[0] : e,
              clientX = _ref.clientX,
              clientY = _ref.clientY;

          x = clientX - x;
          y = clientY - y; // 外边的scale影响元素事件响应，根据倍数计算真实的坐标，优先手动指定，否则自动计算

          if (!isNil$8(__scx)) {
            x /= __scx;
          } else {
            x *= this.width / width;
          }

          if (!isNil$8(__scy)) {
            y /= __scy;
          } else {
            y *= this.height / height;
          }
        }

        return {
          event: e,
          stopPropagation: function stopPropagation() {
            this.__stopPropagation = true;
            e.stopPropagation();
          },
          stopImmediatePropagation: function stopImmediatePropagation() {
            this.__stopPropagation = true;
            this.__stopImmediatePropagation = true;
            e.stopImmediatePropagation();
          },
          preventDefault: function preventDefault() {
            e.preventDefault();
          },
          x: x,
          y: y,
          __hasEmitted: false
        };
      } // 类似touchend/touchcancel/touchmove这种无需判断是否发生于元素上，直接响应

    }, {
      key: "__cb",
      value: function __cb(e) {
        if (e.type === 'touchmove' && !this.__touchstartTarget) {
          return;
        }

        var data = this.__wrapEvent(e);

        this.__emitEvent(data);

        return data;
      }
      /**
       * 添加到真实Dom上，优先已存在的同名canvas/svg节点，没有则dom下生成新的
       * @param dom
       */

    }, {
      key: "appendTo",
      value: function appendTo(dom) {
        dom = getDom(dom);
        this.__children = builder.initRoot(this.__cd, this);

        this.__initProps();

        this.__root = this;
        var tagName = this.tagName;
        var domName = ROOT_DOM_NAME[tagName]; // OffscreenCanvas兼容，包含worker的

        if (typeof window !== 'undefined' && window.OffscreenCanvas && dom instanceof window.OffscreenCanvas || typeof self !== 'undefined' && self.OffscreenCanvas && dom instanceof self.OffscreenCanvas) {
          this.__dom = dom;
          this.__width = dom.width;
          this.__height = dom.height;
        } // 已有root节点
        else if (dom.nodeName.toLowerCase() === domName) {
            this.__dom = dom;

            if (this.width) {
              dom.setAttribute('width', this.width);
            }

            if (this.height) {
              dom.setAttribute('height', this.height);
            }
          } // 没有canvas/svg节点则生成一个新的
          else {
              this.__dom = dom.querySelector(domName);

              if (!this.__dom) {
                dom.innerHTML = this.__genHtml(domName);
                this.__dom = dom.querySelector(domName);
              }
            }

        this.__defs = this.dom.__defs || Defs.getInstance(this.__uuid); // 没有设置width/height则采用css计算形式

        if (!this.width || !this.height) {
          var _css = window.getComputedStyle(dom, null);

          if (!this.width) {
            this.__width = parseFloat(_css.getPropertyValue('width')) || 0;
            dom.setAttribute('width', this.width);
          }

          if (!this.height) {
            this.__height = parseFloat(_css.getPropertyValue('height')) || 0;
            dom.setAttribute('height', this.height);
          }
        }

        var params = Object.assign({}, ca, this.props.contextAttributes); // 只有canvas有ctx，svg用真实dom

        if (this.tagName === 'canvas') {
          this.__ctx = this.__dom.getContext('2d', params);
          this.__renderMode = mode.CANVAS;
        } else if (this.tagName === 'svg') {
          this.__renderMode = mode.SVG;
        } else if (this.tagName === 'webgl') {
          var gl = this.__ctx = this.__dom.getContext('webgl', params);

          this.__renderMode = mode.WEBGL;
          gl.program = webgl.initShaders(gl, vertex, fragment);
          gl.programMask = webgl.initShaders(gl, vertexMask, fragmentMask);
          gl.programClip = webgl.initShaders(gl, vertexMask, fragmentClip);
          gl.programOverflow = webgl.initShaders(gl, vertexMask, fragmentOverflow);
          gl.programCm = webgl.initShaders(gl, vertexCm, fragmentCm);
          gl.useProgram(gl.program); // 第一次渲染生成纹理缓存管理对象，收集渲染过程中生成的纹理并在gl纹理单元满了时进行绘制和清空，减少texImage2d耗时问题

          var MAX_TEXTURE_IMAGE_UNITS = Math.min(16, gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS));
          this.__texCache = new TexCache(MAX_TEXTURE_IMAGE_UNITS);
        }

        this.refresh(null, true); // 第一次节点没有__root，渲染一次就有了才能diff

        if (this.dom.__root && this.dom.__root instanceof Root) {
          this.dom.__root.destroy();
        }

        this.__eventCbList = initEvent(this.dom, Root);
        this.dom.__root = this;
      }
    }, {
      key: "refresh",
      value: function refresh(cb, isFirst) {
        this.__hookTask = null;
        var isDestroyed = this.isDestroyed,
            renderMode = this.renderMode,
            ctx = this.ctx,
            defs = this.defs,
            width = this.width,
            height = this.height;

        if (isDestroyed) {
          return;
        }

        defs.clear(); // 首次递归测量整树的继承，后续更改各自更新机制做，防止每次整树遍历；root检查首次直接做，后续在checkUpdate()中插入

        if (isFirst) {
          this.__checkRoot(renderMode, width, height);

          this.__computeMeasure(renderMode, ctx);
        } // 非首次刷新如果没有更新则无需继续
        else if (!this.__checkUpdate(renderMode, ctx, width, height)) {
            return;
          } // 获取所有字体和大小测量，仅svg需要，canvas直接做


        inject.measureText();

        this.__checkReflow(width, height);

        if (renderMode === mode.CANVAS && !this.props.noRender) {
          this.__clear(ctx, renderMode);

          struct.renderCanvas(renderMode, ctx, this);
        } // svg的特殊diff需要
        else if (renderMode === mode.SVG && !this.props.noRender) {
            struct.renderSvg(renderMode, defs, this, isFirst);
            var nvd = this.virtualDom;
            nvd.defs = defs.value;

            if (this.dom.__vd) {
              // console.log(this.dom.__vd);
              // console.log(nvd);
              diff$1(this.dom, this.dom.__vd, nvd);
            } else {
              this.dom.innerHTML = util.joinVirtualDom(nvd);
            }

            this.dom.__vd = nvd;
            this.dom.__defs = defs;
          } else if (renderMode === mode.WEBGL && !this.props.noRender) {
            this.__clear(ctx, renderMode);

            struct.renderWebgl(renderMode, ctx, this);
          } // 特殊cb，供小程序绘制完回调使用


        if (isFunction$7(cb)) {
          cb();
        }

        this.emit(Event.REFRESH, this.__rlv);
        this.__rlv = NONE$3;
      }
    }, {
      key: "destroy",
      value: function destroy() {
        this.__destroy();

        this.animateController.__destroy();

        var n = this.dom;

        if (n) {
          removeEvent(n, this.__eventCbList || []);
          n.__root = null;
        }

        var gl = this.ctx;

        if (this.__texCache && gl) {
          this.__texCache.release(gl);

          if (gl.program) {
            gl.deleteShader(gl.program.vertexShader);
            gl.deleteShader(gl.program.fragmentShader);
            gl.deleteProgram(gl.program);
          }

          if (gl.programMask) {
            gl.deleteShader(gl.programMask.vertexShader);
            gl.deleteShader(gl.programMask.fragmentShader);
            gl.deleteProgram(gl.programMask);
          }

          if (gl.programOverflow) {
            gl.deleteShader(gl.programOverflow.vertexShader);
            gl.deleteShader(gl.programOverflow.fragmentShader);
            gl.deleteProgram(gl.programOverflow);
          }
        }
      }
    }, {
      key: "scale",
      value: function scale() {
        var x = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
        var y = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : x;
        this.__scx = x;
        this.__scy = y;
      }
    }, {
      key: "resize",
      value: function resize(w, h, cb) {
        var self = this;

        if (w !== self.width || h !== self.height) {
          self.__width = w;
          self.__height = h;
          self.updateStyle({
            width: w,
            height: h
          }, cb);
        } else if (isFunction$7(cb)) {
          cb(-1);
        }
      }
    }, {
      key: "addRefreshTask",
      value: function addRefreshTask(cb) {
        var _this3 = this;

        var taskUp = this.taskUp,
            isDestroyed = this.isDestroyed;

        if (isDestroyed) {
          return;
        } // 第一个添加延迟侦听，后续放队列等待一并执行


        if (!taskUp.length) {
          var clone;
          frame.nextFrame({
            __before: function __before(diff) {
              if (_this3.isDestroyed) {
                return;
              }

              clone = taskUp.splice(0); // 前置一般是动画计算此帧样式应用，然后刷新后出发frame事件，图片加载等同

              if (clone.length) {
                clone.forEach(function (item, i) {
                  if (isObject$2(item) && isFunction$7(item.__before)) {
                    item.__before(diff);
                  }
                });
              }
            },
            __after: function __after(diff) {
              if (_this3.isDestroyed) {
                return;
              }

              clone.forEach(function (item) {
                if (isObject$2(item) && isFunction$7(item.__after)) {
                  item.__after(diff);
                } else if (isFunction$7(item)) {
                  item(diff);
                }
              });
            }
          });

          this.__frameHook();
        }

        if (taskUp.indexOf(cb) === -1) {
          taskUp.push(cb);
        }
      }
    }, {
      key: "delRefreshTask",
      value: function delRefreshTask(cb) {
        if (!cb) {
          return;
        }

        var taskUp = this.taskUp;

        for (var i = 0, len = taskUp.length; i < len; i++) {
          if (taskUp[i] === cb) {
            taskUp.splice(i, 1);
            break;
          }
        }
      }
      /**
       * 为component的setState更新专门开辟个独立的流水线，root/frame中以taskCp存储更新列表
       * 普通的动画、img加载等都走普通的refresh的task，component走这里，frame中的结构同样
       * 在frame的每帧调用中，先执行普通的动画task，再执行component的task
       * 这样动画执行完后，某个cp的sr及子节点依旧先进行了动画变更，进入__addUpdate()环节
       * 然后此cp再更新sr及子节点，这样会被__addUpdate()添加到尾部，依赖目前浏览器默认实现
       * 上一行cp更新过程中是updater.check()进行的，如果有新老交换且有动画，动画的assigning是true，进行继承
       * root刷新parseUpdate()时，老的sr及子节点先进行，随后新的sr后进行且有component标识，sr子节点不会有更新
       * @param cb
       */

    }, {
      key: "addRefreshCp",
      value: function addRefreshCp(cb) {
        var _this4 = this;

        var taskCp = this.taskCp,
            isDestroyed = this.isDestroyed;

        if (isDestroyed) {
          return;
        } // 每次只执行1次


        if (!taskCp.length) {
          var clone;

          frame.__nextFrameCp({
            __before: function __before(diff) {
              if (_this4.isDestroyed) {
                return;
              }

              clone = taskCp.splice(0);

              if (clone.length) {
                clone.forEach(function (item) {
                  item.__before(diff);
                });
                updater.check(_this4);
                var len = updater.updateList.length;

                if (len) {
                  updater.updateList.forEach(function (cp) {
                    var root = cp.root; // 多个root并存时可能cp的引用不相同，需分别获取

                    var sr = cp.shadowRoot; // 可能返回text，需视为其parentNode

                    if (sr instanceof Text) {
                      sr = sr.domParent;
                    }

                    var res = {};
                    res[UPDATE_NODE$5] = sr;
                    res[UPDATE_STYLE$2] = sr.currentStyle;
                    res[UPDATE_FOCUS$4] = REFLOW$2;
                    res[UPDATE_MEASURE$2] = true;
                    res[UPDATE_COMPONENT] = cp;
                    res[UPDATE_CONFIG$5] = sr.__config;

                    _this4.__addUpdate(sr, sr.__config, root, root.__config, res);
                  });
                }
              }
            },
            __after: function __after(diff) {
              if (_this4.isDestroyed) {
                return;
              }

              clone.forEach(function (item) {
                item.__after(diff);
              }); // 触发didUpdate

              updater.did();
            }
          });

          this.__frameHook();
        }

        if (taskCp.indexOf(cb) === -1) {
          taskCp.push(cb);
        }
      }
    }, {
      key: "getTargetAtPoint",
      value: function getTargetAtPoint(x, y, includeIgnore) {
        function scan(vd, x, y, path, zPath) {
          var __sx1 = vd.__sx1,
              __sy1 = vd.__sy1,
              offsetWidth = vd.offsetWidth,
              offsetHeight = vd.offsetHeight,
              matrixEvent = vd.matrixEvent,
              children = vd.children,
              zIndexChildren = vd.zIndexChildren,
              _vd$computedStyle = vd.computedStyle,
              display = _vd$computedStyle[DISPLAY$9],
              pointerEvents = _vd$computedStyle[POINTER_EVENTS$2];

          if (!includeIgnore && display === 'none') {
            return;
          }

          if (Array.isArray(zIndexChildren)) {
            for (var i = 0, len = children.length; i < len; i++) {
              children[i].__index__ = i;
            }

            for (var _i2 = zIndexChildren.length - 1; _i2 >= 0; _i2--) {
              var item = zIndexChildren[_i2];

              if (item instanceof karas.Text) {
                continue;
              }

              var path2 = path.slice();
              path2.push(item.__index__);
              var zPath2 = zPath.slice();
              zPath2.push(_i2);
              var res = scan(item, x, y, path2, zPath2);

              if (res) {
                return res;
              }
            }
          }

          if (!includeIgnore && pointerEvents === 'none') {
            return;
          }

          var inThis = geom.pointInQuadrilateral(x, y, __sx1, __sy1, __sx1 + offsetWidth, __sy1, __sx1 + offsetWidth, __sy1 + offsetHeight, __sx1, __sy1 + offsetHeight, matrixEvent);

          if (inThis) {
            return {
              target: vd,
              path: path,
              zPath: zPath
            };
          }
        }

        return scan(this, x, y, [], []);
      }
      /**
       * 每次刷新前检查root节点的样式，有些固定的修改无效，有些继承的作为根初始化
       * @param renderMode
       * @param width
       * @param height
       * @private
       */

    }, {
      key: "__checkRoot",
      value: function __checkRoot(renderMode, width, height) {
        var dom = this.dom,
            currentStyle = this.currentStyle,
            computedStyle = this.computedStyle; // canvas/svg作为根节点一定是block或flex，不会是inline

        if (['flex', 'block'].indexOf(currentStyle[DISPLAY$9]) === -1) {
          computedStyle[DISPLAY$9] = currentStyle[DISPLAY$9] = 'block';
        } // 同理position不能为absolute


        if (currentStyle[POSITION$4] === 'absolute') {
          computedStyle[POSITION$4] = currentStyle[POSITION$4] = 'static';
        } // 根节点满宽高


        currentStyle[WIDTH$8] = [width, PX$b];
        currentStyle[HEIGHT$8] = [height, PX$b];
        computedStyle[WIDTH$8] = width;
        computedStyle[HEIGHT$8] = height; // 可能调用resize()导致变更，要重设，canvas无论离屏与否都可使用直接赋值，svg则按dom属性api

        if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
          if (dom.width !== width) {
            dom.width = width;
          }

          if (dom.height !== height) {
            dom.height = height;
          }
        } else if (renderMode === mode.SVG) {
          dom.setAttribute('width', width);
          dom.setAttribute('height', height);
        }
      }
      /**
       * 添加更新入口，按节点汇总更新信息
       * @private
       */

    }, {
      key: "__addUpdate",
      value: function __addUpdate(node, nodeConfig, root, rootConfig, o) {
        var updateHash = rootConfig[NODE_UPDATE_HASH]; // root特殊处理，检查变更时优先看继承信息

        if (node === root) {
          updateHash = root.__updateRoot;

          if (updateHash) {
            if (o[UPDATE_FOCUS$4]) {
              updateHash[UPDATE_FOCUS$4] |= o[UPDATE_FOCUS$4];
            }

            if (o[UPDATE_MEASURE$2]) {
              updateHash[UPDATE_MEASURE$2] = true;
            } // 后续存在新建list上，需增加遍历逻辑


            if (o[UPDATE_STYLE$2]) {
              var _list$push;

              var list = updateHash[UPDATE_LIST] = updateHash[UPDATE_LIST] || [];
              list.push((_list$push = {}, _defineProperty(_list$push, UPDATE_STYLE$2, o[UPDATE_STYLE$2]), _defineProperty(_list$push, UPDATE_OVERWRITE$1, o[UPDATE_OVERWRITE$1]), _defineProperty(_list$push, UPDATE_KEYS$2, o[UPDATE_KEYS$2]), _list$push));
            }
          } else {
            root.__updateRoot = o;
          }
        } else if (!nodeConfig.hasOwnProperty(NODE_UNIQUE_UPDATE_ID)) {
          nodeConfig[NODE_UNIQUE_UPDATE_ID] = uniqueUpdateId; // 大多数情况节点都只有一次更新，所以优化首次直接存在style上，后续存在list

          updateHash[uniqueUpdateId++] = o;
        } else if (updateHash.hasOwnProperty(nodeConfig[NODE_UNIQUE_UPDATE_ID])) {
          var target = updateHash[nodeConfig[NODE_UNIQUE_UPDATE_ID]];

          if (o[UPDATE_FOCUS$4]) {
            target[UPDATE_FOCUS$4] |= o[UPDATE_FOCUS$4];
          }

          if (o[UPDATE_MEASURE$2]) {
            target[UPDATE_MEASURE$2] = true;
          } // 后续存在新建list上，需增加遍历逻辑


          if (o[UPDATE_STYLE$2]) {
            var _list$push2;

            var _list = target[UPDATE_LIST] = target[UPDATE_LIST] || [];

            _list.push((_list$push2 = {}, _defineProperty(_list$push2, UPDATE_STYLE$2, o[UPDATE_STYLE$2]), _defineProperty(_list$push2, UPDATE_OVERWRITE$1, o[UPDATE_OVERWRITE$1]), _defineProperty(_list$push2, UPDATE_KEYS$2, o[UPDATE_KEYS$2]), _list$push2));
          }
        } else {
          inject.error('Update process miss uniqueUpdateId');
        }
      }
      /**
       * 除首次外每次刷新前检查更新列表，计算样式变化，以及测量信息
       * @private
       */

    }, {
      key: "__checkUpdate",
      value: function __checkUpdate(renderMode, ctx, width, height) {
        var root = this;
        var measureList = [];
        var reflowList = [];
        var cacheHash = {};
        var cacheList = [];
        var zHash = {};
        var zList = [];
        var updateRoot = root.__updateRoot;
        var updateHash = root.__updateHash;
        var hasUpdate; // root更新特殊提前，因为有继承因素

        if (updateRoot) {
          root.__updateRoot = null;
          hasUpdate = parseUpdate(renderMode, root, updateRoot, reflowList, measureList, cacheHash, cacheList); // 此时做root检查，防止root出现继承等无效样式，或者发生resize()

          if (hasUpdate) {
            root.__checkRoot(renderMode, width, height);
          }
        } // 汇总处理每个节点，k是递增数字直接循环遍历


        var keys = Object.keys(updateHash);

        for (var i = 0, len = keys.length; i < len; i++) {
          var t = parseUpdate(renderMode, root, updateHash[keys[i]], reflowList, measureList, cacheHash, cacheList, zHash, zList);
          hasUpdate = hasUpdate || t;
        } // 先做一部分reset避免下面measureList干扰，cacheList的是专门收集新增的额外节点


        root.__reflowList = reflowList;
        uniqueUpdateId = 0;
        root.__updateHash = root.__config[NODE_UPDATE_HASH] = {};
        cacheList.forEach(function (__config) {
          delete __config[NODE_UNIQUE_UPDATE_ID];
        }); // zIndex改变的汇总修改，防止重复操作

        zList.forEach(function (item) {
          if (item.hasOwnProperty('__uniqueZId')) {
            delete item.__uniqueZId;

            item.__updateStruct(root.__structs);
          }
        });
        /**
         * 遍历每项节点，计算测量信息，节点向上向下查找继承信息，如果parent也是继承，先计算parent的
         * 过程中可能会出现重复，因此节点上记录一个临时标防止重复递归
         */

        var measureHash = {};
        measureList.forEach(function (node) {
          var _node$__config = node.__config,
              __uniqueUpdateId = _node$__config[NODE_UNIQUE_UPDATE_ID],
              parent = _node$__config[NODE_DOM_PARENT$6]; // 在root下的component变更时root会进入，但其没有__uniqueUpdateId

          if (node !== root) {
            if (measureHash.hasOwnProperty(__uniqueUpdateId)) {
              return;
            }

            measureHash[__uniqueUpdateId] = true;
          }

          var last = node; // 检查measure的属性是否是inherit，在root下的component变更时root会进入，但其没有__uniqueUpdateId
          // 另外dom标识表明有dom变更强制进入

          var isInherit = node !== root && (updateHash[__uniqueUpdateId][UPDATE_ADD_DOM$1] || o$2.isMeasureInherit(updateHash[__uniqueUpdateId][UPDATE_STYLE$2])); // 是inherit，需要向上查找，从顶部向下递归计算继承信息

          if (isInherit) {
            while (parent && parent !== root) {
              var _parent = parent,
                  _uniqueUpdateId = _parent.__config[NODE_UNIQUE_UPDATE_ID],
                  currentStyle = _parent.currentStyle;

              var _isInherit = void 0;

              if (parent.__config.hasOwnProperty(NODE_UNIQUE_UPDATE_ID)) {
                var style = updateHash[_uniqueUpdateId][UPDATE_STYLE$2];
                measureHash[_uniqueUpdateId] = true;
                var temp = o$2.measureInheritList(style);
                _isInherit = !!temp.length;
              } else {
                _isInherit = o$2.isMeasureInherit(currentStyle);
              } // 如果parent有inherit存入列表且继续向上，否则跳出循环


              if (_isInherit) {
                last = parent;
              } else {
                break;
              } // 考虑component下的继续往上继承


              parent = parent.domParent;
            }
          } // 自顶向下查找inherit的，利用已有的方法+回调，当递归包含重复时标记防止重复


          last.__computeMeasure(renderMode, ctx, function (target) {
            if (target.__config.hasOwnProperty(NODE_UNIQUE_UPDATE_ID)) {
              measureHash[target.__config[NODE_UNIQUE_UPDATE_ID]] = true;
            }
          });
        }); // 做完清空留待下次刷新重来

        for (var _i3 = 0, _len2 = keys.length; _i3 < _len2; _i3++) {
          delete updateHash[keys[_i3]][UPDATE_CONFIG$5][NODE_UNIQUE_UPDATE_ID];
        }

        return hasUpdate;
      }
      /**
       * 除首次外每次刷新前检查reflow列表，计算需要reflow的节点局部重新布局
       * 当一个元素absolute不变时，其变化不会影响父元素和兄弟元素，直接自己重新局部LAYOUT包含子节点
       * 当absolute发生改变时，其变化会影响父和兄弟，视作父重新布局
       * 当inline变化时，视为其最近block/flex父变化
       * 当block变化时，往上查找最上层flex视为其变化，如不是则影响后面兄弟offset和父resize
       * 当flex变化时，往上查找最上层flex视为其变化，如不是则影响所有递归子节点layout和父resize
       * 以上3种情况向上查找时遇到absolute父均提前跳出，并标记absolute父LAYOUT
       * 上面所有情况即便结束还得额外看是否处于absolute中，是还是标记absolute重新布局
       * 当relative只变化left/top/right/bottom时，自己重新layout
       * 检测节点时记录影响的所有节点，最终形成一棵或n棵局部树
       * 需要重新布局的记作LAYOUT，被兄弟影响只需偏移的记作OFFSET，OFFSET可能会重复变为LAYOUT
       * 上述情况倘若发生包含重复，去掉子树，因子树视为被包含的重新布局
       * 如果有从root开始的，直接重新布局像首次那样即可
       * 如果非root，所有树根按先根顺序记录下来，依次执行局部布局
       * =========================
       * addDom比较特殊，是向已有节点中添加新的节点，检查影响与普通domDiff变化不同
       * @private
       */

    }, {
      key: "__checkReflow",
      value: function __checkReflow(width, height) {
        var _this5 = this;

        var reflowList = this.__reflowList;

        if (!reflowList.length) {
          return;
        }

        var root = this;
        var uniqueList = [];
        var hasRoot;
        __uniqueReflowId = 0;
        var reflowHash = {}; // 遍历检查发生布局改变的节点列表，此时computedStyle还是老的，currentStyle是新的

        for (var i = 0, len = reflowList.length; i < len; i++) {
          var item = reflowList[i];
          var node = item.node,
              component = item.component,
              addDom = item.addDom,
              removeDom = item.removeDom; // root提前跳出，完全重新布局

          if (node === this) {
            hasRoot = true;
            break;
          } // 添加时如果是cp则node取sr来布局


          if (addDom && node instanceof Component$1) {
            node = node.shadowRoot;
          } // 每个节点生成唯一的布局识别id存入hash防止重复


          if (!node.hasOwnProperty('__uniqueReflowId')) {
            node.__uniqueReflowId = __uniqueReflowId;
            reflowHash[__uniqueReflowId++] = item;
          } // 每个节点都向上检查影响，以及是否从root开始完全重新，remove特殊对待，影响父节点视为普通父节点relay


          if (checkInfluence(root, reflowHash, node, component, addDom)) {
            hasRoot = true;

            if (addDom) {
              this.__zIndexChildren = null;
            }

            break;
          } // remove的要特殊对待，因为提前删除了父子兄弟关系，下面deepScan不会出现
          else if (removeDom) {
              uniqueList.push(item);
            }
        }

        __uniqueReflowId = 0;
        this.__reflowList = []; // 有root提前跳出

        if (hasRoot) {
          reflow.clearUniqueReflowId(reflowHash); // 布局分为两步，普通流和定位流，互相递归

          this.__layout({
            x: 0,
            y: 0,
            w: width,
            h: height
          }); // 绝对布局需要从根开始保存相对坐标系的容器引用，并根据relative/absolute情况变更


          this.__layoutAbs(this, {
            x: 0,
            y: 0,
            w: width,
            h: height
          });

          this.__structs = this.__structure(0, 0);
          return true;
        }
        /**
         * 修剪树，自顶向下深度遍历
         * LAYOUT节点作为局部根，其递归子节点无需重复任何操作，直接去重
         * OFFSET节点作为局部根，其递归子节点先执行任何操作，后续根节点再偏移一次
         */
        else {
            this.__deepScan(function (node, options) {
              if (node.hasOwnProperty('__uniqueReflowId')) {
                var o = reflowHash[node.__uniqueReflowId];
                options.uniqueList.push(o); // 返回true即可提前结束深度遍历，在reflowHash有记录时提前跳出，子节点交由上面逻辑执行

                return true;
              } // reflowHash没有记录则无返回继续递归执行

            }, {
              uniqueList: uniqueList
            });
            /**
             * 按顺序执行列表即可，上层LAYOUT先执行且停止递归子节点，上层OFFSET后执行等子节点先LAYOUT/OFFSET
             * 同级按先后顺序排列，过程中记录diff在结束后进行structs更新
             * 这里要注意margin合并的逻辑，因为最终都是block（flex等同），需要进行合并
             * 在处理一个block时，先判断是否是空block，同时看后面紧邻的有没有在uniqueList的下一个
             * 单独空block处理、2个相邻的非block处理直接可以进行判断
             * 中间的空block（即非空block的下一个是空block，且下一个不是最后一个），先记录下来list，合并后一并offset
             * 合并margin和Dom的逻辑一样，抽离共有方法
             **/


            var diffList = [];
            var diffI = 0;
            var mergeOffsetList = [];
            var __uniqueMergeOffsetId = 0;
            uniqueList.forEach(function (item) {
              var node = item.node,
                  component = item.component,
                  addDom = item.addDom,
                  removeDom = item.removeDom; // 重新layout的w/h数据使用之前parent暂存的，x使用parent，y使用prev或者parent的

              var cps = node.computedStyle,
                  cts = node.currentStyle;
              var zIndex = cps[Z_INDEX$4],
                  position = cps[POSITION$4],
                  display = cps[DISPLAY$9];
              var isLastAbs = position === 'absolute';
              var isNowAbs = cts[POSITION$4] === 'absolute';
              var isLastNone = display === 'none';
              var isNowNone = cts[DISPLAY$9] === 'none'; // none不可见布局无效可以无视

              if (isLastNone && isNowNone) {
                return;
              }

              var parent = node.domParent;
              var _parent$__layoutData = parent.__layoutData,
                  x = _parent$__layoutData.x,
                  y = _parent$__layoutData.y,
                  h = _parent$__layoutData.h,
                  width = parent.width,
                  computedStyle = parent.computedStyle;
              var current = node; // cp的shadowRoot要向上到cp本身，考虑高阶组件在内到真正的顶层cp

              if (current.isShadowRoot) {
                current = current.hostRoot;
              } // y使用prev或者parent的，首个节点无prev，prev要忽略absolute的和display:none的


              var ref = current.prev;
              var hasFlowPrev;

              while (ref) {
                if (ref instanceof Text || ref.computedStyle[POSITION$4] !== 'absolute' && ref.computedStyle[DISPLAY$9] !== 'none') {
                  y = ref.y + ref.outerHeight;
                  hasFlowPrev = true;
                  break;
                }

                ref = ref.prev;
              } // 找不到prev以parent为基准，找到则增加自身，排除remove


              if (!removeDom) {
                if (!hasFlowPrev) {
                  y += computedStyle[MARGIN_TOP$4] + computedStyle[BORDER_TOP_WIDTH$7] + computedStyle[PADDING_TOP$6];
                }

                x += computedStyle[MARGIN_LEFT$6] + computedStyle[BORDER_LEFT_WIDTH$9] + computedStyle[PADDING_LEFT$8];
              } // 找到最上层容器，如果是组件的子节点，以sr为container，sr本身往上找


              var container = node; // remove的节点本身无需再次布局

              if (!removeDom) {
                if (isNowAbs) {
                  container = container.domParent;

                  while (container && container !== root) {
                    if (isRelativeOrAbsolute$2(container)) {
                      break;
                    } // 不能用domParent，必须在组件环境内


                    if (container.parent) {
                      container = container.parent;
                    } else if (container.host) {
                      break;
                    }
                  }

                  if (!container) {
                    container = root;
                  } // 由setState引发的要检查是cp自身还是更上层，如果cp被abs包含，那么node是cp的父亲，否则node是cp的sr
                  // 而这种情况下传cp或node都一样，所以最终统一传node


                  parent.__layoutAbs(container, null, node); // 优先判断dom变更


                  if (addDom) {
                    var arr = parent.__modifyStruct(root, diffI);

                    diffI += arr[1];
                    diffList.push(arr);

                    parent.__updateStruct(root.__structs);

                    if (_this5.renderMode === mode.SVG) {
                      cleanSvgCache(parent);
                    }

                    return;
                  } // 前后都是abs无需偏移后面兄弟和parent调整，component变化节点需更新struct
                  else if (isLastAbs) {
                      if (component) {
                        var _arr = node.__modifyStruct(root, diffI);

                        diffI += _arr[1];
                        diffList.push(_arr);

                        if (position !== cts[POSITION$4] && (position === 'static' || cts[POSITION$4] === 'static') || zIndex !== cts[Z_INDEX$4]) {
                          parent.__updateStruct(root.__structs);

                          if (_this5.renderMode === mode.SVG) {
                            cleanSvgCache(parent);
                          }
                        }
                      } else if (isLastNone || isNowNone) {
                        node.__zIndexChildren = null;

                        var _arr2 = node.__modifyStruct(root, diffI);

                        diffI += _arr2[1];
                        diffList.push(_arr2);
                      }

                      return;
                    } // 标识flow变abs，可能引发zIndex变更，重设struct和svg


                  parent.__updateStruct(root.__structs);

                  if (_this5.renderMode === mode.SVG) {
                    cleanSvgCache(parent);
                  }
                } // 现在是普通流，不管之前是啥直接布局，排除remove删除的
                else {
                    node.__layout({
                      x: x,
                      y: y,
                      w: width,
                      h: h
                    });

                    y += node.outerHeight;

                    if (component) {
                      container = node;
                    } else {
                      container = container.domParent;

                      while (container && container !== root) {
                        if (isRelativeOrAbsolute$2(container)) {
                          break;
                        } // 不能用domParent，必须在组件环境内


                        if (container.parent) {
                          container = container.parent;
                        } else if (container.host) {
                          break;
                        }
                      }
                    }

                    if (!container) {
                      container = root;
                    } // 防止geom


                    if (node instanceof Dom$1) {
                      node.__layoutAbs(container, {
                        x: x,
                        y: y,
                        w: width,
                        h: h
                      });
                    }
                  }
              } // 向上查找最近的parent是relative，需再次累加ox/oy，无需继续向上递归，因为parent已经递归包含了
              // 这样node重新布局后再次设置其使用parent的偏移


              var p = node;

              while (p && p !== root) {
                p = p.domParent;
                computedStyle = p.computedStyle;

                if (computedStyle[POSITION$4] === 'relative') {
                  var _p = p,
                      ox = _p.ox,
                      oy = _p.oy;
                  ox && node.__offsetX(ox);
                  oy && node.__offsetY(oy);
                  break;
                }
              } // 向下调整next的flow位置，遇到重复LAYOUT的跳出等待其调用并处理其next，忽视掉abs，margin和abs在merge中做


              if (node.isShadowRoot) {
                node = node.hostRoot;
              }

              var next = node.next;

              while (next && !next.hasOwnProperty('__uniqueReflowId')) {
                if (next.computedStyle[POSITION$4] === 'absolute') {
                  next = next.next;
                  continue;
                }

                var _next = next,
                    _oy = _next.y;

                var _diff = y - _oy;

                if (_diff) {
                  while (next && !next.hasOwnProperty('__uniqueReflowId')) {
                    var target = next;

                    if (target instanceof Component$1) {
                      target = target.shadowRoot;
                    }

                    var cs = target.computedStyle;

                    if (cs[POSITION$4] !== 'absolute' && cs[DISPLAY$9] !== 'none') {
                      target.__offsetY(_diff, true, REPAINT$3);
                    }

                    next = next.next;
                  }
                }

                break;
              } // 去重防止abs并记录parent，整个结束后按先序顺序进行margin合并以及偏移，注意忽略有display:none变block同时为absolute的


              if (!parent.hasOwnProperty('__uniqueMergeOffsetId') && !(isNowAbs && isLastNone)) {
                parent.__uniqueMergeOffsetId = __uniqueMergeOffsetId++;
                mergeOffsetList.push(parent);
              } // add和remove都需父节点重新生成struct，zIndexChildren已在对应api操作的before()侦听做了


              if (addDom || removeDom) {
                var _arr3 = parent.__modifyStruct(root, diffI);

                diffI += _arr3[1];
                diffList.push(_arr3);

                if (_this5.renderMode === mode.SVG) {
                  cleanSvgCache(parent);
                }
              } // component未知dom变化，所以强制重新struct，text则为其父节点，同时防止zIndex变更影响父节点
              else if (component) {
                  var _arr4 = node.__modifyStruct(root, diffI);

                  diffI += _arr4[1];
                  diffList.push(_arr4);

                  if (position !== cts[POSITION$4] && (position === 'static' || cts[POSITION$4] === 'static') || zIndex !== cts[Z_INDEX$4]) {
                    node.domParent.__updateStruct(root.__structs);

                    if (_this5.renderMode === mode.SVG) {
                      cleanSvgCache(node.domParent);
                    }
                  }
                } // display有none变化，重置struct和zIndexChildren
                else if (isLastNone || isNowNone) {
                    node.__zIndexChildren = null;

                    var _arr5 = node.__modifyStruct(root, diffI);

                    diffI += _arr5[1];
                    diffList.push(_arr5);
                  }
            });
            /**
             * mergeMargin后续调整，记录的是变更节点的父节点，因此每个节点内部直接遍历孩子进行
             * 由于保持先根遍历的顺序，因此会从最上最里的节点开始，先进行margin合并
             * 由于之前忽略掉abs节点，因此再检查直接abs是否要调整
             * 完成后对此父节点的后续兄弟节点进行调整，多次不会干扰影响
             * 然后继续往上循环，直到root结束
             */

            var inDirectAbsList = [];
            mergeOffsetList.forEach(function (parent) {
              delete parent.__uniqueMergeOffsetId;
              var flowChildren = parent.flowChildren,
                  absChildren = parent.absChildren;
              var mergeMarginBottomList = [],
                  mergeMarginTopList = [];
              var length = flowChildren.length,
                  lastChild;
              var isStart, startIndex; // 遍历flow孩子，从开始变化的节点开始，看变化造成的影响，对其后面节点进行偏移，并统计总偏移量

              for (var _i4 = 0; _i4 < length; _i4++) {
                var _item = flowChildren[_i4];

                if (_item instanceof Component$1) {
                  _item = _item.shadowRoot;
                }

                var isXom = _item instanceof Xom$1; // 忽略掉前面没有变更的节点，不能合并

                if (!isStart && isXom) {
                  if (_item.hasOwnProperty('__uniqueReflowId')) {
                    isStart = true;
                    startIndex = _i4;
                  }
                } // 开始变更的节点，至少不是第0个


                var _cs = isXom && _item.currentStyle;

                var isInline = isXom && _cs[DISPLAY$9] === 'inline';
                var isInlineBlock = isXom && ['inlineBlock', 'inline-block'].indexOf(_cs[DISPLAY$9]) > -1;
                lastChild = _item; // 每次循环开始前，这次不是block的话，看之前遗留的，可能是以空block结束，需要特殊处理，单独一个空block也包含

                if (!isXom || isInline || isInlineBlock) {
                  if (mergeMarginBottomList.length && mergeMarginTopList.length && isStart) {
                    var _diff2 = reflow.getMergeMarginTB(mergeMarginTopList, mergeMarginBottomList);

                    if (_diff2) {
                      for (var j = Math.max(startIndex, _i4 - mergeMarginBottomList.length + 1); j < length; j++) {
                        flowChildren[j].__offsetY(_diff2, true, REPAINT$3);
                      }
                    }
                  }

                  mergeMarginTopList = [];
                  mergeMarginBottomList = [];
                } // 和普通布局类似，只是不用重新布局只需处理合并margin再根据差值偏移


                if (isXom && !isInline) {
                  var isNone = isXom && _cs[DISPLAY$9] === 'none';
                  var isEmptyBlock = void 0;

                  if (!isNone && _item.flowChildren && _item.flowChildren.length === 0) {
                    var _item$computedStyle = _item.computedStyle,
                        marginTop = _item$computedStyle[MARGIN_TOP$4],
                        marginBottom = _item$computedStyle[MARGIN_BOTTOM$4],
                        paddingTop = _item$computedStyle[PADDING_TOP$6],
                        paddingBottom = _item$computedStyle[PADDING_BOTTOM$6],
                        _height = _item$computedStyle[HEIGHT$8],
                        borderTopWidth = _item$computedStyle[BORDER_TOP_WIDTH$7],
                        borderBottomWidth = _item$computedStyle[BORDER_BOTTOM_WIDTH$7]; // 无内容高度为0的空block特殊情况，记录2个margin下来等后续循环判断处理

                    if (paddingTop <= 0 && paddingBottom <= 0 && _height <= 0 && borderTopWidth <= 0 && borderBottomWidth <= 0) {
                      mergeMarginBottomList.push(marginBottom);
                      mergeMarginTopList.push(marginTop);
                      isEmptyBlock = true;
                    }
                  } // 空block要留下轮循环看，除非是最后一个，非空本轮处理掉看是否要合并


                  if (!isNone && !isEmptyBlock) {
                    var _item$computedStyle2 = _item.computedStyle,
                        _marginTop = _item$computedStyle2[MARGIN_TOP$4],
                        _marginBottom = _item$computedStyle2[MARGIN_BOTTOM$4]; // 有bottom值说明之前有紧邻的block，任意个甚至空block，自己有个top所以无需判断top
                    // 如果是只有紧邻的2个非空block，也被包含在情况内，取上下各1合并

                    if (mergeMarginBottomList.length) {
                      mergeMarginTopList.push(_marginTop);

                      if (isStart) {
                        var _diff3 = reflow.getMergeMarginTB(mergeMarginTopList, mergeMarginBottomList); // 需要合并的情况，根据记录数和索引向上向下遍历节点设置偏移，同时设置总偏移量供父级使用


                        if (_diff3) {
                          for (var _j = Math.max(startIndex, _i4 - mergeMarginBottomList.length + 1); _j < length; _j++) {
                            flowChildren[_j].__offsetY(_diff3, true, REPAINT$3);
                          }
                        }
                      }
                    } // 同时自己保存bottom，为后续block准备


                    mergeMarginTopList = [];
                    mergeMarginBottomList = [_marginBottom];
                  } // 最后一个空block当是正正和负负时要处理，正负在outHeight处理了结果是0，最后一个一定有不必判断isStart
                  else if (_i4 === length - 1) {
                      var _diff4 = reflow.getMergeMarginTB(mergeMarginTopList, mergeMarginBottomList);

                      if (_diff4) {
                        for (var _j2 = Math.max(startIndex, _i4 - mergeMarginBottomList.length + 1); _j2 < length; _j2++) {
                          flowChildren[_j2].__offsetY(_diff4, true, REPAINT$3);
                        }
                      }
                    }
                }
              } // 先检查parent的尺寸是否发生了变化，从而决定是否调整next以及向上递归调整


              var cs = parent.currentStyle;
              var height = cs[HEIGHT$8];
              var isContainer = parent === root || parent.isShadowRoot || cs[POSITION$4] === 'absolute' || cs[POSITION$4] === 'relative';

              if (height[1] === AUTO$8 && lastChild) {
                var oldH = parent.height + parent.computedStyle[PADDING_TOP$6];
                var nowH = lastChild.y + lastChild.outerHeight - parent.y;

                var _diff5 = nowH - oldH; // 调整next以及非固定PX的abs，再递归向上


                if (_diff5) {
                  parent.__resizeY(_diff5, REPAINT$3);

                  var container;

                  for (var _i5 = 0, _len3 = absChildren.length; _i5 < _len3; _i5++) {
                    var _item2 = absChildren[_i5];
                    var _item2$currentStyle = _item2.currentStyle,
                        top = _item2$currentStyle[TOP$4],
                        bottom = _item2$currentStyle[BOTTOM$4],
                        _height2 = _item2$currentStyle[HEIGHT$8]; // 是容器，所有的都调整，不是容器，其偏移是上级parent的某一个，根据情况具体不同

                    if (top[1] === AUTO$8) {
                      if (bottom[1] === AUTO$8) {
                        var prev = _item2.prev;

                        while (prev) {
                          var target = prev;

                          if (target instanceof Component$1) {
                            target = target.shadowRoot;
                          }

                          var _isXom = target instanceof Xom$1;

                          var _cs2 = _isXom && target.currentStyle;

                          var isAbs = _isXom && _cs2[POSITION$4] === 'absolute';

                          if (!isAbs) {
                            var y = target.y + target.outerHeight;
                            var d = y - _item2.y;

                            if (d) {
                              _item2.__offsetY(d, true, REPAINT$3);
                            }

                            break;
                          }

                          prev = prev.prev;
                        }
                      } else if (bottom[1] === PX$b) {
                        _item2.__offsetY(_diff5, true, REPAINT$3);
                      } else if (bottom[1] === PERCENT$c) {
                        var v = (1 - bottom[0] * 0.01) * _diff5;

                        _item2.__offsetY(v, true, REPAINT$3);
                      }
                    } else if (top[1] === PERCENT$c) {
                      if (isContainer) {
                        var _v = top[0] * 0.01 * _diff5;

                        _item2.__offsetY(_v, true, REPAINT$3);
                      } // 非容器的特殊处理
                      else {
                          if (!container) {
                            container = parent.domParent;

                            while (container) {
                              if (container === root || container.isShadowRoot) {
                                break;
                              }

                              var _cs3 = container.currentStyle;

                              if (_cs3[POSITION$4] === 'absolute' || _cs3[POSITION$4] === 'relative') {
                                break;
                              }

                              container = container.domParent;
                            }
                          }

                          if (container.currentStyle[HEIGHT$8][1] !== PX$b) {
                            var _v2 = top[0] * 0.01 * _diff5;

                            _item2.__offsetY(_v2, true, REPAINT$3);
                          }
                        }
                    } // 高度百分比需发生变化的重新布局，需要在容器内


                    if (_height2[1] === PERCENT$c) {
                      if (isContainer) {
                        parent.__layoutAbs(parent, null, _item2);
                      } // 不在容器内说明在上级，存入等结束后统一重新布局
                      else {
                          if (!container) {
                            container = parent.domParent;

                            while (container) {
                              if (container === root || container.isShadowRoot) {
                                break;
                              }

                              var _cs4 = container.currentStyle;

                              if (_cs4[POSITION$4] === 'absolute' || _cs4[POSITION$4] === 'relative') {
                                break;
                              }

                              container = container.domParent;
                            }
                          }

                          inDirectAbsList.push([parent, container, _item2]);
                        }
                    }
                  }

                  reflow.offsetAndResizeByNodeOnY(parent, root, reflowHash, _diff5, inDirectAbsList);
                  return;
                }
              } // 没有diff变化或者固定尺寸，可能内部发生变化，调整AUTO的abs，不递归向上


              for (var _i6 = 0, _len4 = absChildren.length; _i6 < _len4; _i6++) {
                var _item3 = absChildren[_i6];
                var _item3$currentStyle = _item3.currentStyle,
                    _top = _item3$currentStyle[TOP$4],
                    _bottom = _item3$currentStyle[BOTTOM$4];

                if (_top[1] === AUTO$8 && _bottom[1] === AUTO$8) {
                  var _prev = _item3.prev;

                  while (_prev) {
                    var _target = _prev;

                    if (_target instanceof Component$1) {
                      _target = _target.shadowRoot;
                    }

                    var _isXom2 = _target instanceof Xom$1;

                    var _cs5 = _isXom2 && _target.currentStyle;

                    var _isAbs = _isXom2 && _cs5[POSITION$4] === 'absolute';

                    if (!_isAbs) {
                      var _y = _target.y + _target.outerHeight;

                      var _d = _y - _item3.y;

                      if (_d) {
                        _item3.__offsetY(_d, true, REPAINT$3);
                      }

                      break;
                    }

                    _prev = _prev.prev;
                  }
                }
              }
            }); // merge过程中需要重新布局的abs

            inDirectAbsList.forEach(function (arr) {
              arr[0].__layoutAbs(arr[1], null, arr[2]);
            }); // 调整因reflow造成的原struct数据索引数量偏差，纯zIndex的已经在repaint里面重新生成过了
            // 这里因为和update保持一致的顺序，因此一定是先根顺序且互不包含

            var diff = 0,
                lastIndex = 0,
                isFirst = true,
                structs = root.__structs;
            diffList.forEach(function (item) {
              var _item4 = _slicedToArray(item, 2),
                  ns = _item4[0],
                  d = _item4[1]; // 第一个有变化的，及后面无论有无变化都需更新
              // 第1个变化区域无需更改前面一段


              if (isFirst) {
                isFirst = false;
                lastIndex = ns[STRUCT_INDEX$3] + (ns[STRUCT_TOTAL$2] || 0) + 1;
                diff += d;
              } // 第2+个变化区域看是否和前面一个相连，有不变的段则先偏移它，然后再偏移自己
              else {
                  var j = ns[STRUCT_INDEX$3] + (ns[STRUCT_TOTAL$2] || 0) + 1 + diff;

                  for (var _i7 = lastIndex; _i7 < j; _i7++) {
                    structs[_i7][STRUCT_INDEX$3] += diff;
                  }

                  lastIndex = j;
                  diff += d;
                }
            }); // 后面的要根据偏移量校正索引

            if (diff) {
              for (var _i8 = lastIndex, _len5 = structs.length; _i8 < _len5; _i8++) {
                structs[_i8][STRUCT_INDEX$3] += diff;
              }
            } // 清除id


            reflow.clearUniqueReflowId(reflowHash);
          }
      } // 特殊覆盖方法，不需要super()计算自己，因为放在每次checkRoot()做过了

    }, {
      key: "__computeMeasure",
      value: function __computeMeasure(renderMode, ctx) {
        css.computeMeasure(this, true);
        this.children.forEach(function (item) {
          item.__computeMeasure(renderMode, ctx);
        });
      } // 每个root拥有一个刷新hook，多个root塞到frame的__hookTask里
      // frame在所有的帧刷新逻辑执行后检查hook列表，进行root刷新操作

    }, {
      key: "__frameHook",
      value: function __frameHook() {
        var _this6 = this;

        if (!this.__hookTask) {
          var r = this.__hookTask = function () {
            _this6.refresh();
          };

          frame.__hookTask.push(r);
        }
      }
    }, {
      key: "__clear",
      value: function __clear(ctx, renderMode) {
        if (renderMode === mode.CANVAS) {
          // 可能会调整宽高，所以每次清除用最大值
          this.__mw = Math.max(this.__mw, this.width);
          this.__mh = Math.max(this.__mh, this.height); // 清除前得恢复默认matrix，防止每次布局改变了属性

          ctx.setTransform(1, 0, 0, 1, 0, 0);
          ctx.clearRect(0, 0, this.__mw, this.__mh);
        } else if (renderMode === mode.WEBGL) {
          ctx.clearColor(0, 0, 0, 0);
          ctx.clear(ctx.COLOR_BUFFER_BIT);
        }
      }
    }, {
      key: "dom",
      get: function get() {
        return this.__dom;
      }
    }, {
      key: "uuid",
      get: function get() {
        return this.__uuid;
      }
    }, {
      key: "renderMode",
      get: function get() {
        return this.__renderMode;
      }
    }, {
      key: "ctx",
      get: function get() {
        return this.__ctx;
      }
    }, {
      key: "defs",
      get: function get() {
        return this.__defs;
      }
    }, {
      key: "taskUp",
      get: function get() {
        return this.__taskUp;
      }
    }, {
      key: "taskCp",
      get: function get() {
        return this.__taskCp;
      }
    }, {
      key: "ref",
      get: function get() {
        return this.__ref;
      }
    }, {
      key: "animateController",
      get: function get() {
        return this.__animateController;
      }
    }, {
      key: "texCache",
      get: function get() {
        return this.__texCache;
      }
    }]);

    return Root;
  }(Dom$1);

  var _enums$STYLE_KEY$k = enums.STYLE_KEY,
      STROKE_WIDTH$2 = _enums$STYLE_KEY$k.STROKE_WIDTH,
      BOX_SHADOW$4 = _enums$STYLE_KEY$k.BOX_SHADOW,
      FONT_SIZE$c = _enums$STYLE_KEY$k.FONT_SIZE;
  var isNil$9 = util.isNil;
  var REM$b = o.REM,
      VW$b = o.VW,
      VH$b = o.VH,
      VMAX$b = o.VMAX,
      VMIN$b = o.VMIN;

  function reBuild(target, origin, base, isMulti) {
    if (isMulti) {
      return target.map(function (item) {
        return origin + item * base;
      });
    } else {
      return origin + target * base;
    }
  }

  function reBuildC(target, originX, originY, width, height, isMulti) {
    if (isMulti) {
      if (target) {
        return target.map(function (item) {
          return reBuildC(item, originX, originY, width, height);
        });
      }
    } else {
      if (target && target.length >= 2) {
        return [originX + target[0] * width, originY + target[1] * height];
      }
    }

    return [];
  }

  function curveNum(controlA, controlB) {
    var num = 0;

    if (controlA.length >= 2) {
      num++;
    }

    if (controlB.length >= 2) {
      num += 2;
    }

    return num;
  }

  function getNewPoint(x1, y1, x2, y2, controlA, controlB, num) {
    var start = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0;
    var end = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : 1;

    if (start === 0 && end === 1) {
      return [x1, y1, x2, y2, controlA, controlB];
    }

    if (start === end) {
      return [];
    }

    if (start > end) {
      var _ref = [end, start];
      start = _ref[0];
      end = _ref[1];
    }

    start = Math.max(0, start);
    end = Math.min(1, end);

    if (num === 3) {
      var _geom$sliceBezier2Bot = geom.sliceBezier2Both([[x1, y1], controlA, controlB, [x2, y2]], start, end);

      var _geom$sliceBezier2Bot2 = _slicedToArray(_geom$sliceBezier2Bot, 4);

      var _geom$sliceBezier2Bot3 = _slicedToArray(_geom$sliceBezier2Bot2[0], 2);

      x1 = _geom$sliceBezier2Bot3[0];
      y1 = _geom$sliceBezier2Bot3[1];
      controlA = _geom$sliceBezier2Bot2[1];
      controlB = _geom$sliceBezier2Bot2[2];

      var _geom$sliceBezier2Bot4 = _slicedToArray(_geom$sliceBezier2Bot2[3], 2);

      x2 = _geom$sliceBezier2Bot4[0];
      y2 = _geom$sliceBezier2Bot4[1];
    } else if (num === 2) {
      var _geom$sliceBezier2Bot5 = geom.sliceBezier2Both([[x1, y1], controlB, [x2, y2]], start, end);

      var _geom$sliceBezier2Bot6 = _slicedToArray(_geom$sliceBezier2Bot5, 3);

      var _geom$sliceBezier2Bot7 = _slicedToArray(_geom$sliceBezier2Bot6[0], 2);

      x1 = _geom$sliceBezier2Bot7[0];
      y1 = _geom$sliceBezier2Bot7[1];
      controlB = _geom$sliceBezier2Bot6[1];

      var _geom$sliceBezier2Bot8 = _slicedToArray(_geom$sliceBezier2Bot6[2], 2);

      x2 = _geom$sliceBezier2Bot8[0];
      y2 = _geom$sliceBezier2Bot8[1];
    } else if (num === 1) {
      var _geom$sliceBezier2Bot9 = geom.sliceBezier2Both([[x1, y1], controlA, [x2, y2]], start, end);

      var _geom$sliceBezier2Bot10 = _slicedToArray(_geom$sliceBezier2Bot9, 3);

      var _geom$sliceBezier2Bot11 = _slicedToArray(_geom$sliceBezier2Bot10[0], 2);

      x1 = _geom$sliceBezier2Bot11[0];
      y1 = _geom$sliceBezier2Bot11[1];
      controlA = _geom$sliceBezier2Bot10[1];

      var _geom$sliceBezier2Bot12 = _slicedToArray(_geom$sliceBezier2Bot10[2], 2);

      x2 = _geom$sliceBezier2Bot12[0];
      y2 = _geom$sliceBezier2Bot12[1];
    } else {
      var a = x2 - x1;
      var b = y2 - y1;
      x1 += a * start;
      y1 += b * start;
      x2 += a * (1 - end);
      y2 += b * (1 - end);
    }

    return [x1, y1, x2, y2, controlA, controlB];
  }

  var Line = /*#__PURE__*/function (_Geom) {
    _inherits(Line, _Geom);

    var _super = _createSuper(Line);

    function Line(tagName, props) {
      var _this;

      _classCallCheck(this, Line);

      _this = _super.call(this, tagName, props); // x1,y1和x2,y2表明线段的首尾坐标，control表明控制点坐标

      if (_this.isMulti) {
        _this.__x1 = [0];
        _this.__y1 = [0];
        _this.__x2 = [1];
        _this.__y2 = [1];
        _this.__controlA = [[]];
        _this.__controlB = [[]];
        _this.__start = [0];
        _this.__end = [1];

        if (Array.isArray(props.x1)) {
          _this.__x1 = props.x1.map(function (i) {
            return parseFloat(i) || 0;
          });
        } else if (!isNil$9(props.x1)) {
          _this.__x1 = [parseFloat(props.x1) || 0];
        }

        if (Array.isArray(props.y1)) {
          _this.__y1 = props.y1.map(function (i) {
            return parseFloat(i) || 0;
          });
        } else if (!isNil$9(props.y1)) {
          _this.__y1 = [parseFloat(props.y1) || 0];
        }

        if (Array.isArray(props.x2)) {
          _this.__x2 = props.x2.map(function (i) {
            return parseFloat(i) || 0;
          });
        } else if (!isNil$9(props.x2)) {
          _this.__x2 = [parseFloat(props.x2) || 0];
        }

        if (Array.isArray(props.y2)) {
          _this.__y2 = props.y2.map(function (i) {
            return parseFloat(i) || 0;
          });
        } else if (!isNil$9(props.y2)) {
          _this.__y2 = [parseFloat(props.y2) || 0];
        }

        if (Array.isArray(props.controlA)) {
          _this.__controlA = props.controlA.map(function (item) {
            if (Array.isArray(item)) {
              return item;
            }

            return [];
          });
        }

        if (Array.isArray(props.controlB)) {
          _this.__controlB = props.controlB.map(function (item) {
            if (Array.isArray(item)) {
              return item;
            }

            return [];
          });
        }

        if (Array.isArray(props.start)) {
          _this.__start = props.start.map(function (i) {
            return parseFloat(i) || 0;
          });

          for (var i = _this.__start.length; i < _this.__x1.length; i++) {
            _this.__start.push(0);
          }
        } else if (!isNil$9(props.start)) {
          var v = parseFloat(props.start) || 0;
          _this.__start = _this.__x1.map(function () {
            return v;
          });
        }

        if (Array.isArray(props.end)) {
          _this.__end = props.end.map(function (i) {
            var v = parseFloat(i);

            if (isNaN(v)) {
              v = 1;
            }

            return v;
          });

          for (var _i = _this.__end.length; _i < _this.__x1.length; _i++) {
            _this.__end.push(1);
          }
        } else if (!isNil$9(props.end)) {
          var _v = parseFloat(props.end);

          if (isNaN(_v)) {
            _v = 1;
          }

          _v = _v;
          _this.__end = _this.__x1.map(function () {
            return _v;
          });
        }
      } else {
        _this.__x1 = _this.__y1 = _this.__start = 0;
        _this.__x2 = _this.__y2 = _this.__end = 1;
        _this.__controlA = [];
        _this.__controlB = [];

        if (!isNil$9(props.x1)) {
          _this.__x1 = parseFloat(props.x1) || 0;
        }

        if (!isNil$9(props.y1)) {
          _this.__y1 = parseFloat(props.y1) || 0;
        }

        if (!isNil$9(props.x2)) {
          _this.__x2 = parseFloat(props.x2) || 0;
        }

        if (!isNil$9(props.y2)) {
          _this.__y2 = parseFloat(props.y2) || 0;
        }

        if (!isNil$9(props.start)) {
          _this.__start = parseFloat(props.start) || 0;
        }

        if (!isNil$9(props.end)) {
          var _v2 = parseFloat(props.end);

          if (isNaN(_v2)) {
            _v2 = 1;
          }

          _this.__end = _v2;
        }

        if (Array.isArray(props.controlA)) {
          _this.__controlA = props.controlA;
        }

        if (Array.isArray(props.controlB)) {
          _this.__controlB = props.controlB;
        }
      }

      return _this;
    }

    _createClass(Line, [{
      key: "buildCache",
      value: function buildCache(originX, originY, focus) {
        var _this2 = this;

        var width = this.width,
            height = this.height,
            __cacheProps = this.__cacheProps,
            isMulti = this.isMulti;
        var rebuild;
        ['x1', 'x2'].forEach(function (k) {
          if (isNil$9(__cacheProps[k]) || focus) {
            rebuild = true;
            __cacheProps[k] = reBuild(_this2[k], originX, width, isMulti);
          }
        });
        ['y1', 'y2'].forEach(function (k) {
          if (isNil$9(__cacheProps[k]) || focus) {
            rebuild = true;
            __cacheProps[k] = reBuild(_this2[k], originY, height, isMulti);
          }
        });
        ['controlA', 'controlB'].forEach(function (k) {
          if (isNil$9(__cacheProps[k]) || focus) {
            rebuild = true;
            __cacheProps[k] = reBuildC(_this2[k], originX, originY, width, height, isMulti);
          }
        });
        ['start', 'end'].forEach(function (k) {
          if (isNil$9(__cacheProps[k]) || focus) {
            rebuild = true;
            __cacheProps[k] = _this2[k];
          }
        });
        return rebuild;
      }
    }, {
      key: "render",
      value: function render(renderMode, lv, ctx, cache, dx2, dy2) {
        var _this3 = this;

        var res = _get(_getPrototypeOf(Line.prototype), "render", this).call(this, renderMode, lv, ctx, cache, dx2, dy2);

        if (res["break"]) {
          return res;
        }

        ctx = res.ctx;
        var sx3 = res.sx3,
            sy3 = res.sy3,
            strokes = res.stroke,
            strokeWidths = res.strokeWidth,
            strokeDasharrays = res.strokeDasharray,
            strokeDasharrayStrs = res.strokeDasharrayStr,
            strokeLinecaps = res.strokeLinecap,
            strokeLinejoins = res.strokeLinejoin,
            strokeMiterlimits = res.strokeMiterlimit,
            dx = res.dx,
            dy = res.dy;
        var __cacheProps = this.__cacheProps,
            isMulti = this.isMulti;
        var rebuild = this.buildCache(sx3, sy3);

        if (rebuild && renderMode === mode.SVG) {
          var d = '';

          if (isMulti) {
            __cacheProps.x1.forEach(function (xa, i) {
              var xb = __cacheProps.x2[i];
              var ya = __cacheProps.y1[i];
              var yb = __cacheProps.y2[i];
              var ca = __cacheProps.controlA[i];
              var cb = __cacheProps.controlB[i];
              var start = __cacheProps.start[i];
              var end = __cacheProps.end[i];
              var curve = curveNum(ca, cb);

              if (start !== 0 || end !== 1) {
                var _getNewPoint = getNewPoint(xa, ya, xb, ya, ca, cb, curve, start, end, __cacheProps.len);

                var _getNewPoint2 = _slicedToArray(_getNewPoint, 6);

                xa = _getNewPoint2[0];
                ya = _getNewPoint2[1];
                xb = _getNewPoint2[2];
                ya = _getNewPoint2[3];
                ca = _getNewPoint2[4];
                cb = _getNewPoint2[5];
              }

              d += painter.svgLine(xa, ya, xb, yb, ca, cb, curve);
            });
          } else {
            var curve = curveNum(__cacheProps.controlA, __cacheProps.controlB);
            var x1 = __cacheProps.x1,
                y1 = __cacheProps.y1,
                x2 = __cacheProps.x2,
                y2 = __cacheProps.y2,
                controlA = __cacheProps.controlA,
                controlB = __cacheProps.controlB,
                start = __cacheProps.start,
                end = __cacheProps.end;

            if (start !== 0 || end !== 1) {
              var _getNewPoint3 = getNewPoint(x1, y1, x2, y2, controlA, controlB, curve, start, end, __cacheProps.len);

              var _getNewPoint4 = _slicedToArray(_getNewPoint3, 6);

              x1 = _getNewPoint4[0];
              y1 = _getNewPoint4[1];
              x2 = _getNewPoint4[2];
              y2 = _getNewPoint4[3];
              controlA = _getNewPoint4[4];
              controlB = _getNewPoint4[5];
            }

            d = painter.svgLine(x1, y1, x2, y2, controlA, controlB, curve);
          }

          __cacheProps.d = d;
        }

        if (renderMode === mode.CANVAS || renderMode === mode.WEBGL) {
          strokes.forEach(function (stroke, i) {
            var strokeWidth = strokeWidths[i];
            var isStrokeRE = strokeWidth > 0 && stroke.k === 'radial' && Array.isArray(stroke.v);

            if (strokeWidth > 0 && stroke !== 'none') {
              _this3.__preSetCanvas(renderMode, ctx, {
                stroke: stroke,
                strokeWidth: strokeWidth,
                strokeDasharray: strokeDasharrays[i],
                strokeLinecap: strokeLinecaps[i],
                strokeLinejoin: strokeLinejoins[i],
                strokeMiterlimit: strokeMiterlimits[i]
              });

              if (isStrokeRE) {
                ctx.strokeStyle = stroke.v[0];
              }

              ctx.beginPath();

              if (isMulti) {
                __cacheProps.x1.forEach(function (xa, i) {
                  var xb = __cacheProps.x2[i];
                  var ya = __cacheProps.y1[i];
                  var yb = __cacheProps.y2[i];
                  var ca = __cacheProps.controlA[i];
                  var cb = __cacheProps.controlB[i];
                  var start = __cacheProps.start[i];
                  var end = __cacheProps.end[i];
                  var curve = curveNum(ca, cb);

                  if (start !== 0 || end !== 1) {
                    var _getNewPoint5 = getNewPoint(xa, ya, xb, ya, ca, cb, curve, start, end, __cacheProps.len);

                    var _getNewPoint6 = _slicedToArray(_getNewPoint5, 6);

                    xa = _getNewPoint6[0];
                    ya = _getNewPoint6[1];
                    xb = _getNewPoint6[2];
                    ya = _getNewPoint6[3];
                    ca = _getNewPoint6[4];
                    cb = _getNewPoint6[5];
                  }

                  painter.canvasLine(ctx, xa, ya, xb, yb, ca, cb, curve, dx, dy);
                });
              } else {
                var _curve = curveNum(__cacheProps.controlA, __cacheProps.controlB);

                var _x = __cacheProps.x1,
                    _y = __cacheProps.y1,
                    _x2 = __cacheProps.x2,
                    _y2 = __cacheProps.y2,
                    _controlA = __cacheProps.controlA,
                    _controlB = __cacheProps.controlB,
                    _start = __cacheProps.start,
                    _end = __cacheProps.end;

                if (_start !== 0 || _end !== 1) {
                  var _getNewPoint7 = getNewPoint(_x, _y, _x2, _y2, _controlA, _controlB, _curve, _start, _end, __cacheProps.len);

                  var _getNewPoint8 = _slicedToArray(_getNewPoint7, 6);

                  _x = _getNewPoint8[0];
                  _y = _getNewPoint8[1];
                  _x2 = _getNewPoint8[2];
                  _y2 = _getNewPoint8[3];
                  _controlA = _getNewPoint8[4];
                  _controlB = _getNewPoint8[5];
                }

                painter.canvasLine(ctx, _x, _y, _x2, _y2, _controlA, _controlB, _curve, dx, dy);
              }

              ctx.stroke();
              ctx.closePath();
            }
          });
        } else if (renderMode === mode.SVG) {
          strokes.forEach(function (stroke, i) {
            var strokeWidth = strokeWidths[i];
            var isStrokeRE = strokeWidth > 0 && stroke.k === 'radial' && Array.isArray(stroke.v);
            var props = [['d', __cacheProps.d], ['fill', 'none'], ['stroke', isStrokeRE ? stroke.v[0] : stroke.v || stroke], ['stroke-width', strokeWidth]];

            _this3.__propsStrokeStyle(props, strokeDasharrayStrs[i], strokeLinecaps[i], strokeLinejoins[i], strokeMiterlimits[i]);

            _this3.addGeom('path', props);
          });
        }

        return res;
      }
    }, {
      key: "x1",
      get: function get() {
        return this.getProps('x1');
      }
    }, {
      key: "y1",
      get: function get() {
        return this.getProps('y1');
      }
    }, {
      key: "x2",
      get: function get() {
        return this.getProps('x2');
      }
    }, {
      key: "y2",
      get: function get() {
        return this.getProps('y2');
      }
    }, {
      key: "controlA",
      get: function get() {
        return this.getProps('controlA');
      }
    }, {
      key: "controlB",
      get: function get() {
        return this.getProps('controlB');
      }
    }, {
      key: "start",
      get: function get() {
        return this.getProps('start');
      }
    }, {
      key: "end",
      get: function get() {
        return this.getProps('end');
      }
    }, {
      key: "bbox",
      get: function get() {
        var isMulti = this.isMulti,
            __cacheProps = this.__cacheProps,
            root = this.root,
            originX = this.__sx3,
            originY = this.__sy3,
            _this$currentStyle = this.currentStyle,
            strokeWidth = _this$currentStyle[STROKE_WIDTH$2],
            boxShadow = _this$currentStyle[BOX_SHADOW$4];
        this.buildCache(originX, originY);
        var x1 = __cacheProps.x1,
            y1 = __cacheProps.y1,
            x2 = __cacheProps.x2,
            y2 = __cacheProps.y2,
            controlA = __cacheProps.controlA,
            controlB = __cacheProps.controlB;

        var bbox = _get(_getPrototypeOf(Line.prototype), "bbox", this);

        var half = 0;
        strokeWidth.forEach(function (item) {
          if (item[1] === REM$b) {
            half = Math.max(item[0] * root.computedStyle[FONT_SIZE$c] * 0.5, half);
          } else if (item[1] === VW$b) {
            half = Math.max(item[0] * root.width * 0.01 * 0.5, half);
          } else if (item[1] === VH$b) {
            half = Math.max(item[0] * root.height * 0.01 * 0.5, half);
          } else if (item[1] === VMAX$b) {
            half = Math.max(item[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
          } else if (item[1] === VMIN$b) {
            half = Math.max(item[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
          } else {
            half = Math.max(item[0] * 0.5, half);
          }
        });
        half += 1;

        var _this$__spreadBbox = this.__spreadBbox(boxShadow),
            _this$__spreadBbox2 = _slicedToArray(_this$__spreadBbox, 2),
            ox = _this$__spreadBbox2[0],
            oy = _this$__spreadBbox2[1];

        ox += half;
        oy += half;

        if (!isMulti) {
          x1 = [x1];
          x2 = [x2];
          y1 = [y1];
          y2 = [y2];
          controlA = [controlA];
          controlB = [controlB];
        }

        x1.forEach(function (xa, i) {
          var ya = y1[i];
          var xb = x2[i];
          var yb = y2[i];
          var ca = controlA[i];
          var cb = controlB[i];

          if ((isNil$9(ca) || ca.length < 2) && (isNil$9(cb) || cb.length < 2)) {
            bbox[0] = Math.min(bbox[0], xa - ox);
            bbox[0] = Math.min(bbox[0], xb - ox);
            bbox[1] = Math.min(bbox[1], ya - oy);
            bbox[1] = Math.min(bbox[1], yb - oy);
            bbox[2] = Math.max(bbox[2], xa + ox);
            bbox[2] = Math.max(bbox[2], xb + ox);
            bbox[3] = Math.max(bbox[3], ya + oy);
            bbox[3] = Math.max(bbox[3], yb + oy);
          } else if (isNil$9(ca) || ca.length < 2) {
            var bezierBox = geom.bboxBezier(xa, ya, cb[0], cb[1], xb, yb);
            bbox[0] = Math.min(bbox[0], bezierBox[0] - ox);
            bbox[0] = Math.min(bbox[0], bezierBox[2] - ox);
            bbox[1] = Math.min(bbox[1], bezierBox[1] - oy);
            bbox[1] = Math.min(bbox[1], bezierBox[3] - oy);
            bbox[2] = Math.max(bbox[2], bezierBox[0] + ox);
            bbox[2] = Math.max(bbox[2], bezierBox[2] + ox);
            bbox[3] = Math.max(bbox[3], bezierBox[1] + oy);
            bbox[3] = Math.max(bbox[3], bezierBox[3] + oy);
          } else if (isNil$9(cb) || cb.length < 2) {
            var _bezierBox = geom.bboxBezier(xa, ya, ca[0], ca[1], xb, yb);

            bbox[0] = Math.min(bbox[0], _bezierBox[0] - ox);
            bbox[0] = Math.min(bbox[0], _bezierBox[2] - ox);
            bbox[1] = Math.min(bbox[1], _bezierBox[1] - oy);
            bbox[1] = Math.min(bbox[1], _bezierBox[3] - oy);
            bbox[2] = Math.max(bbox[2], _bezierBox[0] + ox);
            bbox[2] = Math.max(bbox[2], _bezierBox[2] + ox);
            bbox[3] = Math.max(bbox[3], _bezierBox[1] + oy);
            bbox[3] = Math.max(bbox[3], _bezierBox[3] + oy);
          } else {
            var _bezierBox2 = geom.bboxBezier(xa, ya, ca[0], ca[1], cb[0], cb[1], xb, yb);

            bbox[0] = Math.min(bbox[0], _bezierBox2[0] - ox);
            bbox[0] = Math.min(bbox[0], _bezierBox2[2] - ox);
            bbox[1] = Math.min(bbox[1], _bezierBox2[1] - oy);
            bbox[1] = Math.min(bbox[1], _bezierBox2[3] - oy);
            bbox[2] = Math.max(bbox[2], _bezierBox2[0] + ox);
            bbox[2] = Math.max(bbox[2], _bezierBox2[2] + ox);
            bbox[3] = Math.max(bbox[3], _bezierBox2[1] + oy);
            bbox[3] = Math.max(bbox[3], _bezierBox2[3] + oy);
          }
        });
        return bbox;
      }
    }]);

    return Line;
  }(Geom$1);

  var _enums$STYLE_KEY$l = enums.STYLE_KEY,
      STROKE_WIDTH$3 = _enums$STYLE_KEY$l.STROKE_WIDTH,
      BOX_SHADOW$5 = _enums$STYLE_KEY$l.BOX_SHADOW,
      FONT_SIZE$d = _enums$STYLE_KEY$l.FONT_SIZE;
  var isNil$a = util.isNil;
  var REM$c = o.REM,
      VW$c = o.VW,
      VH$c = o.VH,
      VMAX$c = o.VMAX,
      VMIN$c = o.VMIN;

  function concatPointAndControl(point, control) {
    if (Array.isArray(control) && (control.length === 2 || control.length === 4) && Array.isArray(point) && point.length === 2) {
      return control.concat(point);
    }

    return point;
  }

  function getLength(list, isMulti) {
    var res = [];
    var total = 0;
    var increase = [];

    if (isMulti) {
      total = [];
      list.forEach(function (list) {
        var temp = getLength(list);
        res.push(temp.list);
        total.push(temp.total);
        increase.push([0].concat(temp.increase));
      });
    } else if (Array.isArray(list)) {
      total = 0;
      increase.push(0);
      var start = 0;

      for (var i = 0, len = list.length; i < len; i++) {
        var item = list[i];

        if (Array.isArray(item)) {
          start = i;
          break;
        }
      }

      var prev = list[start];

      for (var _i = start + 1, _len = list.length; _i < _len; _i++) {
        var _item = list[_i];

        if (!Array.isArray(_item)) {
          continue;
        }

        if (_item.length === 2) {
          var a = Math.abs(_item[0] - prev[0]);
          var b = Math.abs(_item[1] - prev[1]);
          var c = Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2));
          res.push(c);
          total += c;
          increase.push(total);
          prev = _item;
        } else if (_item.length === 4) {
          var _c = geom.bezierLength([prev, [_item[0], _item[1]], [_item[2], _item[3]]], 2);

          res.push(_c);
          total += _c;
          increase.push(total);
          prev = [_item[2], _item[3]];
        } else if (_item.length === 6) {
          var _c2 = geom.bezierLength([prev, [_item[0], _item[1]], [_item[2], _item[3]], [_item[4], _item[5]]], 3);

          res.push(_c2);
          total += _c2;
          increase.push(total);
          prev = [_item[4], _item[5]];
        }
      }
    }

    return {
      list: res,
      total: total,
      increase: increase
    };
  }

  function getIndex(list, t, i, j) {
    if (i === j) {
      if (list[i] > t) {
        return i - 1;
      }

      return i;
    }

    var middle = i + (j - i >> 1);

    if (list[middle] === t) {
      return middle;
    } else if (list[middle] > t) {
      return getIndex(list, t, i, Math.max(middle - 1, i));
    } else {
      return getIndex(list, t, Math.min(middle + 1, j), j);
    }
  }

  function getNewList(list, len) {
    var start = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
    var end = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;

    if (start === 0 && end === 1) {
      return list;
    }

    if (start === end) {
      return [];
    }

    if (start > end) {
      var _ref = [end, start];
      start = _ref[0];
      end = _ref[1];
    } // start和end只能相差<=1，如果>1则校正


    while (end - start > 1) {
      end--;
    } // 将start和end统一至最接近0的正值


    while (end < 0 || start < 0) {
      end++;
      start++;
    }

    while (end >= 1 && start >= 1) {
      end--;
      start--;
    } // clone出原本顶点列表，防止干扰


    var length = list.length;
    list = util.clone(list);
    var res = [];
    var start2 = start > 1 ? start - 1 : start;
    var end2 = end > 1 ? end - 1 : end;
    var i = getIndex(len.increase, start2 * len.total, 0, length - 1);
    var j = getIndex(len.increase, end2 * len.total, 0, length - 1); // start<0或者end>1或者普通情况，一共3种，start和end不可能同时超限

    var isStartLt0 = start < 0;
    var isEndGt1 = end > 1;
    end2 *= len.total;
    var prePercent = 1;
    var endPoint;

    if (end2 > len.increase[j]) {
      var prev = list[j].slice(list[j].length - 2); // 最后2个点是x,y，前面是control

      var current = list[j + 1];
      var l = len.list[j];
      var diff = end2 - len.increase[j];
      var t = diff / l;
      prePercent = t;

      if (current.length === 2) {
        var a = current[0] - prev[0];
        var b = current[1] - prev[1];

        if (isEndGt1) {
          endPoint = [prev[0] + t * a, prev[1] + t * b];
        } else {
          t = 1 - t;
          endPoint = [current[0] - t * a, current[1] - t * b];
        }
      } else if (current.length === 4) {
        var r = geom.sliceBezier([prev, [current[0], current[1]], [current[2], current[3]]], t);
        endPoint = [r[1][0], r[1][1], r[2][0], r[2][1]];
      } else if (current.length === 6) {
        var _r = geom.sliceBezier([prev, [current[0], current[1]], [current[2], current[3]], [current[4], current[5]]], t);

        endPoint = [_r[1][0], _r[1][1], _r[2][0], _r[2][1], _r[3][0], _r[3][1]];
      }
    }

    start2 *= len.total;

    if (start2 > len.increase[i]) {
      var _current;

      var _prev = list[i].slice(list[i].length - 2);

      var _l = len.list[i]; // 同一条线段时如果有end裁剪，会影响start长度，这里还要防止头尾绕了一圈的情况

      if (i === j && !isStartLt0 && !isEndGt1 && prePercent !== 1) {
        _l *= prePercent;

        if (endPoint) {
          _current = endPoint;
        }
      }

      if (!_current) {
        _current = list[i + 1];
      }

      var _diff = start2 - len.increase[i];

      var _t = _diff / _l;

      if (_current.length === 2) {
        var _a = _current[0] - _prev[0];

        var _b = _current[1] - _prev[1];

        if (isStartLt0) {
          _t = 1 - _t;
          res.push([_current[0] - _t * _a, _current[1] - _t * _b]);
        } else {
          res.push([_prev[0] + _t * _a, _prev[1] + _t * _b]);
        }

        res.push(_current);
      } else if (_current.length === 4) {
        var _r2 = geom.sliceBezier([[_current[2], _current[3]], [_current[0], _current[1]], _prev], 1 - _t).reverse();

        res.push(_r2[0]);
        res.push([_r2[1][0], _r2[1][1], _r2[2][0], _r2[2][1]]); // 同一条线段上去除end冲突

        if (i === j && !isStartLt0 && !isEndGt1) {
          endPoint = null;
        }
      } else if (_current.length === 6) {
        var _r3 = geom.sliceBezier([[_current[4], _current[5]], [_current[2], _current[3]], [_current[0], _current[1]], _prev], 1 - _t).reverse();

        res.push(_r3[0]);
        res.push([_r3[1][0], _r3[1][1], _r3[2][0], _r3[2][1], _current[4], _current[5]]);

        if (i === j && !isStartLt0 && !isEndGt1) {
          endPoint = null;
        }
      }
    } // start和end之间的线段，注意头尾饶了一圈的情况，以及起始点被上方考虑过了


    for (var k = i + 2; k <= j + (!isStartLt0 && !isEndGt1 ? 0 : length); k++) {
      res.push(list[k % length]);
    }

    if (endPoint) {
      res.push(endPoint);
    }

    return res;
  }

  var Polyline = /*#__PURE__*/function (_Geom) {
    _inherits(Polyline, _Geom);

    var _super = _createSuper(Polyline);

    function Polyline(tagName, props) {
      var _this;

      _classCallCheck(this, Polyline);

      _this = _super.call(this, tagName, props); // 所有点的列表

      if (_this.isMulti) {
        _this.__points = [[]];
        _this.__controls = [[]];
        _this.__start = [0];
        _this.__end = [1];

        if (Array.isArray(props.start)) {
          _this.__start = props.start.map(function (i) {
            return parseFloat(i) || 0;
          });

          for (var i = _this.__start.length; i < _this.__points.length; i++) {
            _this.__start.push(0);
          }
        } else if (!isNil$a(props.start)) {
          var v = parseFloat(props.start) || 0;
          _this.__start = _this.__points.map(function () {
            return v;
          });
        }

        if (Array.isArray(props.end)) {
          _this.__end = props.end.map(function (i) {
            var v = parseFloat(i);

            if (isNaN(v)) {
              v = 1;
            }

            return v;
          });

          for (var _i2 = _this.__end.length; _i2 < _this.__points.length; _i2++) {
            _this.__end.push(1);
          }
        } else if (!isNil$a(props.end)) {
          var _v = parseFloat(props.end);

          if (isNaN(_v)) {
            _v = 1;
          }

          _this.__end = _this.__points.map(function () {
            return _v;
          });
        }
      } else {
        _this.__points = []; // 控制点

        _this.__controls = [];
        _this.__start = 0;
        _this.__end = 1;

        if (!isNil$a(props.start)) {
          _this.__start = parseFloat(props.start) || 0;
        }

        if (!isNil$a(props.end)) {
          var _v2 = parseFloat(props.end);

          if (isNaN(_v2)) {
            _v2 = 1;
          }

          _this.__end = _v2;
        }
      }

      if (Array.isArray(props.controls)) {
        _this.__controls = props.controls;
      }

      if (Array.isArray(props.points)) {
        _this.__points = props.points;
      }

      return _this;
    }

    _createClass(Polyline, [{
      key: "__getPoints",
      value: function __getPoints(originX, originY, width, height, points, isControl) {
        return points.map(function (item, i) {
          if (!Array.isArray(item)) {
            return;
          }

          var len = item.length;

          if (isControl) {
            if (len !== 0 && len !== 2 && len !== 4) {
              return;
            }
          } else {
            if (len !== 0 && len !== 2) {
              return;
            }
          }

          var res = [];

          for (var _i3 = 0; _i3 < len; _i3++) {
            if (_i3 % 2 === 0) {
              res.push(originX + item[_i3] * width);
            } else {
              res.push(originY + item[_i3] * height);
            }
          }

          return res;
        });
      } // 供polygon覆盖，后处理booleanOperations

    }, {
      key: "__reprocessing",
      value: function __reprocessing(list) {
        return list;
      } // 同polygon覆盖，booleanOperations改变时需刷新缓冲顶点坐标

    }, {
      key: "__needRebuildSE",
      value: function __needRebuildSE() {}
    }, {
      key: "buildCache",
      value: function buildCache(originX, originY) {
        var _this2 = this;

        var width = this.width,
            height = this.height,
            points = this.points,
            controls = this.controls,
            start = this.start,
            end = this.end,
            __cacheProps = this.__cacheProps,
            isMulti = this.isMulti;
        var rebuild, rebuildSE;

        if (isNil$a(__cacheProps.points)) {
          rebuild = true;

          if (isMulti) {
            __cacheProps.points = points.map(function (item) {
              if (Array.isArray(item)) {
                return _this2.__getPoints(originX, originY, width, height, item);
              }
            });
          } else {
            __cacheProps.points = this.__getPoints(originX, originY, width, height, points);
          }
        }

        if (isNil$a(__cacheProps.controls)) {
          rebuild = true;

          if (isMulti) {
            __cacheProps.controls = controls.map(function (item) {
              if (Array.isArray(item)) {
                return _this2.__getPoints(originX, originY, width, height, item, true);
              }

              return item;
            });
          } else {
            __cacheProps.controls = this.__getPoints(originX, originY, width, height, controls, true);
          }
        }

        if (isNil$a(__cacheProps.start)) {
          rebuildSE = true;
          __cacheProps.start = start;
        }

        if (isNil$a(__cacheProps.end)) {
          rebuildSE = true;
          __cacheProps.end = end;
        } // polygon会覆盖检查booleanOperations缓存


        if (this.__needRebuildSE(__cacheProps)) {
          rebuildSE = true;
        } // points/controls有变化就需要重建顶点


        if (rebuild) {
          var _points = __cacheProps.points,
              _controls = __cacheProps.controls;

          if (isMulti) {
            __cacheProps.list2 = _points.map(function (item, i) {
              var cl = _controls[i];

              if (Array.isArray(item)) {
                return item.map(function (point, j) {
                  if (j) {
                    return concatPointAndControl(point, cl && cl[j - 1]);
                  }

                  return point;
                });
              }
            });
            __cacheProps.len = getLength(__cacheProps.list2, isMulti);
          } else {
            __cacheProps.list2 = _points.map(function (point, i) {
              if (i) {
                return concatPointAndControl(point, _controls[i - 1]);
              }

              return point;
            });
            __cacheProps.len = getLength(__cacheProps.list2, isMulti);
          }
        }

        if (rebuild || rebuildSE) {
          if (isMulti) {
            __cacheProps.list = __cacheProps.list2.map(function (item, i) {
              if (Array.isArray(item)) {
                var len = __cacheProps.len;
                return getNewList(item, {
                  list: len.list[i],
                  total: len.total[i],
                  increase: len.increase[i]
                }, __cacheProps.start[i], __cacheProps.end[i]);
              }
            });
          } else {
            __cacheProps.list = getNewList(__cacheProps.list2, __cacheProps.len, __cacheProps.start, __cacheProps.end);
          } // 后处理一次，让polygon支持布尔运算


          __cacheProps.list = this.__reprocessing(__cacheProps.list, isMulti);
        }

        return rebuild || rebuildSE;
      }
    }, {
      key: "render",
      value: function render(renderMode, lv, ctx, cache, dx, dy) {
        var res = _get(_getPrototypeOf(Polyline.prototype), "render", this).call(this, renderMode, lv, ctx, cache, dx, dy);

        if (res["break"]) {
          return res;
        }

        this.buildCache(res.sx3, res.sy3);
        ctx = res.ctx;

        this.__renderPolygon(renderMode, ctx, res);

        return res;
      }
    }, {
      key: "points",
      get: function get() {
        return this.getProps('points');
      }
    }, {
      key: "controls",
      get: function get() {
        return this.getProps('controls');
      }
    }, {
      key: "start",
      get: function get() {
        return this.getProps('start');
      }
    }, {
      key: "end",
      get: function get() {
        return this.getProps('end');
      }
    }, {
      key: "bbox",
      get: function get() {
        if (!this.__bbox) {
          var isMulti = this.isMulti,
              __cacheProps = this.__cacheProps,
              root = this.root,
              originX = this.__sx3,
              originY = this.__sy3,
              _this$currentStyle = this.currentStyle,
              strokeWidth = _this$currentStyle[STROKE_WIDTH$3],
              boxShadow = _this$currentStyle[BOX_SHADOW$5];
          this.buildCache(originX, originY);

          var bbox = _get(_getPrototypeOf(Polyline.prototype), "bbox", this);

          var half = 0;
          strokeWidth.forEach(function (item) {
            if (item[1] === REM$c) {
              half = Math.max(item[0] * root.computedStyle[FONT_SIZE$d] * 0.5, half);
            } else if (item[1] === VW$c) {
              half = Math.max(item[0] * root.width * 0.01 * 0.5, half);
            } else if (item[1] === VH$c) {
              half = Math.max(item[0] * root.height * 0.01 * 0.5, half);
            } else if (item[1] === VMAX$c) {
              half = Math.max(item[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
            } else if (item[1] === VMIN$c) {
              half = Math.max(item[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
            } else {
              half = Math.max(item[0] * 0.5, half);
            }
          });
          half += 1;

          var _this$__spreadBbox = this.__spreadBbox(boxShadow),
              _this$__spreadBbox2 = _slicedToArray(_this$__spreadBbox, 2),
              ox = _this$__spreadBbox2[0],
              oy = _this$__spreadBbox2[1];

          ox += half;
          oy += half;
          var points = __cacheProps.points,
              controls = __cacheProps.controls;

          if (!isMulti) {
            points = [points];
            controls = [controls];
          }

          points.forEach(function (pointList, i) {
            if (!pointList || pointList.length < 2 || !pointList[0] || !pointList[1] || pointList[0].length < 2 || pointList[1].length < 2) {
              return;
            }

            var controlList = controls[i] || [];

            var _pointList$ = _slicedToArray(pointList[0], 2),
                xa = _pointList$[0],
                ya = _pointList$[1];

            for (var _i4 = 1, len = pointList.length; _i4 < len; _i4++) {
              var _pointList$_i = _slicedToArray(pointList[_i4], 2),
                  xb = _pointList$_i[0],
                  yb = _pointList$_i[1];

              var c = controlList[_i4 - 1];

              if (c && c.length === 4) {
                var bezierBox = geom.bboxBezier(xa, ya, c[0], c[1], c[2], c[3], xb, yb);
                bbox[0] = Math.min(bbox[0], bezierBox[0] - ox);
                bbox[1] = Math.min(bbox[1], bezierBox[1] - oy);
                bbox[2] = Math.max(bbox[2], bezierBox[2] + ox);
                bbox[3] = Math.max(bbox[3], bezierBox[3] + oy);
              } else if (c && c.length === 2) {
                var _bezierBox = geom.bboxBezier(xa, ya, c[0], c[1], xb, yb);

                bbox[0] = Math.min(bbox[0], _bezierBox[0] - ox);
                bbox[1] = Math.min(bbox[1], _bezierBox[1] - oy);
                bbox[2] = Math.max(bbox[2], _bezierBox[2] + ox);
                bbox[3] = Math.max(bbox[3], _bezierBox[3] + oy);
              } else {
                bbox[0] = Math.min(bbox[0], xa - ox);
                bbox[1] = Math.min(bbox[1], ya - oy);
                bbox[2] = Math.max(bbox[2], xa + ox);
                bbox[3] = Math.max(bbox[3], ya + oy);
              }

              xa = xb;
              ya = yb;
            }
          });
          this.__bbox = bbox;
        }

        return this.__bbox;
      }
    }]);

    return Polyline;
  }(Geom$1);

  var Polygon = /*#__PURE__*/function (_Polyline) {
    _inherits(Polygon, _Polyline);

    var _super = _createSuper(Polygon);

    function Polygon(tagName, props) {
      var _this;

      _classCallCheck(this, Polygon);

      _this = _super.call(this, tagName, props);

      if (props.booleanOperations) {
        _this.__booleanOperations = props.booleanOperations;
      }

      return _this;
    }

    _createClass(Polygon, [{
      key: "__getPoints",
      value: function __getPoints(originX, originY, width, height, points, isControl) {
        var res = _get(_getPrototypeOf(Polygon.prototype), "__getPoints", this).call(this, originX, originY, width, height, points, isControl);

        if (!isControl) {
          res.push(res[0]);
        }

        return res;
      } // 布尔运算覆盖，仅multi才发生，因为需要多个多边形数据

    }, {
      key: "__reprocessing",
      value: function __reprocessing(list, isMulti) {
        if (!isMulti) {
          return list;
        }

        var bo = this.booleanOperations,
            len = list.length;

        if (!Array.isArray(bo) && bo) {
          var old = bo;
          bo = [bo];

          for (var i = 1; i < len - 1; i++) {
            bo.push(old);
          }
        }

        if (Array.isArray(bo) && bo.length) {
          var _ret = function () {
            var res = [];
            var last;

            for (var _i = 0; _i < len - 1; _i++) {
              var a = list[_i],
                  b = list[_i + 1];

              switch (bo[_i]) {
                case 'intersection':
                  if (!a || !a.length || !b || !b.length) {
                    res.push(null);
                  } else {
                    intersection$1([a], [b]).forEach(function (item) {
                      res.push(item[0]);
                    });
                  }

                  last = true;
                  break;

                case 'union':
                  if ((!a || !a.length) && (!b || !b.length)) {
                    res.push(null);
                  } else if (!a || !a.length) {
                    res.push(b);
                  } else if (!b || !b.length) {
                    res.push(a);
                  } else {
                    union([a], [b]).forEach(function (item) {
                      res.push(item[0]);
                    });
                  }

                  last = true;
                  break;

                case 'diff':
                  if (!a || !a.length) {
                    res.push(null);
                  } else if (!b || !b.length) {
                    res.push(a);
                  } else {
                    diff([a], [b]).forEach(function (item) {
                      res.push(item[0]);
                    });
                  }

                  last = true;
                  break;

                case 'xor':
                  if ((!a || !a.length) && (!b || !b.length)) {
                    res.push(null);
                  } else if (!a || !a.length) {
                    res.push(b);
                  } else if (!b || !b.length) {
                    res.push(a);
                  } else {
                    xor([a], [b]).forEach(function (item) {
                      res.push(item[0]);
                    });
                  }

                  last = true;
                  break;

                default:
                  res.push(list[_i]);
                  last = false;
                  break;
              }
            } // 最后一个没参与布尔运算，原封不动装载


            if (!last) {
              res.push(list[len - 1]);
            }

            return {
              v: res
            };
          }();

          if (_typeof(_ret) === "object") return _ret.v;
        }

        return list;
      } // 覆盖，当booleanOperations动画改变时刷新顶点缓存

    }, {
      key: "__needRebuildSE",
      value: function __needRebuildSE(__cacheProps) {
        if (util.isNil(__cacheProps.booleanOperations)) {
          __cacheProps.booleanOperations = true;
          return true;
        }
      }
    }, {
      key: "booleanOperations",
      get: function get() {
        return this.getProps('booleanOperations');
      }
    }]);

    return Polygon;
  }(Polyline);

  var _enums$STYLE_KEY$m = enums.STYLE_KEY,
      STROKE_WIDTH$4 = _enums$STYLE_KEY$m.STROKE_WIDTH,
      BOX_SHADOW$6 = _enums$STYLE_KEY$m.BOX_SHADOW,
      FONT_SIZE$e = _enums$STYLE_KEY$m.FONT_SIZE;
  var isNil$b = util.isNil;
  var sectorPoints$1 = geom.sectorPoints;
  var REM$d = o.REM,
      VW$d = o.VW,
      VH$d = o.VH,
      VMAX$d = o.VMAX,
      VMIN$d = o.VMIN;

  function getR(v, dft) {
    v = parseFloat(v);

    if (isNaN(v)) {
      v = dft;
    }

    return v;
  }

  var Sector = /*#__PURE__*/function (_Geom) {
    _inherits(Sector, _Geom);

    var _super = _createSuper(Sector);

    function Sector(tagName, props) {
      var _this;

      _classCallCheck(this, Sector);

      _this = _super.call(this, tagName, props); // 角度

      if (_this.isMulti) {
        _this.__begin = [0];
        _this.__end = [0];
        _this.__r = [1];

        if (Array.isArray(props.begin)) {
          _this.__begin = props.begin.map(function (i) {
            return getR(i, 0);
          });
        }

        if (Array.isArray(props.end)) {
          _this.__end = props.end.map(function (i) {
            return getR(i, 0);
          });
        }

        if (Array.isArray(props.r)) {
          _this.__r = props.r.map(function (i) {
            return getR(i, 1);
          });
        }

        if (Array.isArray(props.edge)) {
          _this.__edge = props.edge.map(function (i) {
            return !!i;
          });
        }

        if (Array.isArray(props.closure)) {
          _this.__closure = props.closure.map(function (i) {
            return !!i;
          });
        }
      } else {
        _this.__begin = _this.__end = 0; // 半径[0, ∞)，默认1

        _this.__r = 1; // 扇形两侧是否有边

        _this.__edge = false; // 扇形大于180°时，是否闭合两端

        _this.__closure = false;

        if (!isNil$b(props.begin)) {
          _this.__begin = getR(props.begin, 0);
        }

        if (!isNil$b(props.end)) {
          _this.__end = getR(props.end, 0);
        }

        if (!isNil$b(props.r)) {
          _this.__r = getR(props.r, 1);
        }

        if (!isNil$b(props.edge)) {
          _this.__edge = !!props.edge;
        }

        if (!isNil$b(props.closure)) {
          _this.__closure = !!props.closure;
        }
      }

      return _this;
    }

    _createClass(Sector, [{
      key: "buildCache",
      value: function buildCache(cx, cy, focus) {
        var width = this.width,
            begin = this.begin,
            end = this.end,
            r = this.r,
            edge = this.edge,
            closure = this.closure,
            __cacheProps = this.__cacheProps,
            isMulti = this.isMulti;
        var rebuild;

        if (isNil$b(__cacheProps.begin) || focus) {
          rebuild = true;
          __cacheProps.begin = (begin || 0) % 360;
        }

        if (isNil$b(__cacheProps.end) || focus) {
          rebuild = true;
          __cacheProps.end = (end || 0) % 360;
        }

        if (isNil$b(__cacheProps.r) || focus) {
          rebuild = true;

          if (isMulti) {
            __cacheProps.r = r.map(function (r) {
              return r * width * 0.5;
            });
          } else {
            __cacheProps.r = r * width * 0.5;
          }
        }

        r = __cacheProps.r;

        if (isNil$b(__cacheProps.edge) || focus) {
          rebuild = true;
          __cacheProps.edge = edge;
        }

        if (isNil$b(__cacheProps.closure) || focus) {
          rebuild = true;
          __cacheProps.closure = closure;
        }

        if (rebuild) {
          if (isMulti) {
            __cacheProps.list = [];
            __cacheProps.sList = [];
            begin.forEach(function (begin, i) {
              var r2 = isNil$b(r[i]) ? width * 0.5 : r[i];
              var list = sectorPoints$1(cx, cy, r2, parseFloat(begin || 0) % 360, parseFloat(end[i] || 0) % 360);
              var sList = list.slice(0);

              if (closure[i]) {
                list.push(list[0].slice(0));

                if (edge) {
                  sList.push(sList[0].slice(0));
                }
              } else {
                list.unshift([cx, cy]);
                list.push([cx, cy]);

                if (edge) {
                  sList.unshift([cx, cy]);
                  sList.push([cx, cy]);
                }
              }

              __cacheProps.list.push(list);

              __cacheProps.sList.push(sList);
            });
          } else {
            var list = sectorPoints$1(cx, cy, r, parseFloat(begin || 0), parseFloat(end || 0));
            var sList = list.slice(0);

            if (closure) {
              list.push(list[0].slice(0));

              if (edge) {
                sList.push(sList[0].slice(0));
              }
            } else {
              list.unshift([cx, cy]);
              list.push([cx, cy]);

              if (edge) {
                sList.unshift([cx, cy]);
                sList.push([cx, cy]);
              }
            }

            __cacheProps.list = list;
            __cacheProps.sList = sList;
          }
        }

        return rebuild;
      }
    }, {
      key: "render",
      value: function render(renderMode, lv, ctx, cache, dx2, dy2) {
        var res = _get(_getPrototypeOf(Sector.prototype), "render", this).call(this, renderMode, lv, ctx, cache, dx2, dy2);

        if (res["break"]) {
          return res;
        }

        this.buildCache(res.cx, res.cy);
        ctx = res.ctx;
        var fills = res.fill,
            fillRules = res.fillRule,
            strokes = res.stroke,
            strokeWidths = res.strokeWidth,
            strokeDasharrays = res.strokeDasharray,
            strokeDasharrayStrs = res.strokeDasharrayStr,
            strokeLinecaps = res.strokeLinecap,
            strokeLinejoins = res.strokeLinejoin,
            strokeMiterlimits = res.strokeMiterlimit,
            dx = res.dx,
            dy = res.dy;
        var _this$__cacheProps = this.__cacheProps,
            list = _this$__cacheProps.list,
            sList = _this$__cacheProps.sList,
            isMulti = this.isMulti; // 普通情况下只有1个，按普通情况走

        if (fills.length <= 1 && strokes.length <= 1) {
          var o = {
            fill: fills[0],
            fillRule: fillRules[0],
            stroke: strokes[0],
            strokeWidth: strokeWidths[0],
            strokeDasharray: strokeDasharrays[0],
            strokeDasharrayStr: strokeDasharrayStrs[0],
            strokeLinecap: strokeLinecaps[0],
            strokeLinejoin: strokeLinejoins[0],
            strokeMiterlimit: strokeMiterlimits[0],
            dx: dx,
            dy: dy
          };

          this.__renderOneSector(renderMode, ctx, isMulti, list, sList, o);
        } // 多个需要fill在下面，stroke在上面，依次循环
        else {
            for (var i = 0, len = fills.length; i < len; i++) {
              var fill = fills[i];

              if (fill) {
                var _o = {
                  fill: fill,
                  fillRule: fillRules[i],
                  dx: dx,
                  dy: dy
                };

                this.__renderOneSector(renderMode, ctx, isMulti, list, sList, _o);
              }
            }

            for (var _i = 0, _len = strokes.length; _i < _len; _i++) {
              var stroke = strokes[_i];

              if (stroke) {
                var _o2 = {
                  stroke: stroke,
                  strokeWidth: strokeWidths[_i],
                  strokeDasharray: strokeDasharrays[_i],
                  strokeDasharrayStr: strokeDasharrayStrs[_i],
                  strokeLinecap: strokeLinecaps[_i],
                  strokeLinejoin: strokeLinejoins[_i],
                  strokeMiterlimit: strokeMiterlimits[_i],
                  dx: dx,
                  dy: dy
                };

                this.__renderOnePolygon(renderMode, ctx, isMulti, list, sList, _o2);
              }
            }
          }

        return res;
      }
    }, {
      key: "__renderOneSector",
      value: function __renderOneSector(renderMode, ctx, isMulti, list, sList, res) {
        var fill = res.fill,
            stroke = res.stroke,
            strokeWidth = res.strokeWidth;
        var isFillCE = fill.k === 'conic';
        var isStrokeCE = stroke.k === 'conic';
        var isFillRE = fill.k === 'radial' && Array.isArray(fill.v);
        var isStrokeRE = strokeWidth > 0 && stroke.k === 'radial' && Array.isArray(stroke.v);

        if (isFillCE || isStrokeCE) {
          if (isFillCE) {
            this.__conicGradient(renderMode, ctx, list, isMulti, res);
          } else if (fill && fill !== 'none') {
            this.__drawPolygon(renderMode, ctx, isMulti, list, res, true);
          }

          if (strokeWidth > 0 && isStrokeCE) {
            inject.warn('Stroke style can not use conic-gradient');
          } else if (strokeWidth > 0 && stroke && stroke !== 'none') {
            this.__drawPolygon(renderMode, ctx, isMulti, sList, res, false, true);
          }
        } else if (isFillRE || isStrokeRE) {
          if (isFillRE) {
            this.__radialEllipse(renderMode, ctx, list, isMulti, res, 'fill');
          } else if (fill && fill !== 'none') {
            this.__drawPolygon(renderMode, ctx, isMulti, list, res, true);
          } // stroke椭圆渐变matrix会变形，降级为圆


          if (strokeWidth > 0 && isStrokeRE) {
            inject.warn('Stroke style can not use radial-gradient for ellipse');
            res.stroke = res.stroke.v[0];

            this.__drawPolygon(renderMode, ctx, isMulti, sList, res, false, true);
          } else if (strokeWidth > 0 && stroke && stroke !== 'none') {
            this.__drawPolygon(renderMode, ctx, isMulti, sList, res, false, true);
          }
        } else {
          if (fill && fill !== 'none') {
            this.__drawPolygon(renderMode, ctx, isMulti, list, res, true, false);
          }

          if (strokeWidth > 0 && stroke && stroke !== 'none') {
            this.__drawPolygon(renderMode, ctx, isMulti, sList, res, false, true);
          }
        }
      }
    }, {
      key: "__genSector",
      value: function __genSector(edge, d, fill, stroke, strokeWidth, strokeDasharrayStr, strokeLinecap, strokeLinejoin, strokeMiterlimit) {
        if (edge) {
          var props = [['d', d[0]], ['fill', fill.v || fill], ['stroke', stroke.v || stroke], ['stroke-width', strokeWidth]];

          this.__propsStrokeStyle(props, strokeDasharrayStr, strokeLinecap, strokeLinejoin, strokeMiterlimit);

          this.addGeom('path', props);
        } else {
          this.addGeom('path', [['d', d[0]], ['fill', fill.v || fill]]);

          if (strokeWidth > 0) {
            var _props = [['d', d[1]], ['fill', 'none'], ['stroke', stroke.v || stroke], ['stroke-width', strokeWidth]];

            this.__propsStrokeStyle(_props, strokeDasharrayStr, strokeLinecap, strokeLinejoin, strokeMiterlimit);

            this.addGeom('path', _props);
          }
        }
      }
    }, {
      key: "begin",
      get: function get() {
        return this.getProps('begin');
      }
    }, {
      key: "end",
      get: function get() {
        return this.getProps('end');
      }
    }, {
      key: "r",
      get: function get() {
        return this.getProps('r');
      }
    }, {
      key: "edge",
      get: function get() {
        return this.getProps('edge');
      } // >180°时是否链接端点

    }, {
      key: "closure",
      get: function get() {
        return this.getProps('closure');
      }
    }, {
      key: "bbox",
      get: function get() {
        if (!this.__bbox) {
          var isMulti = this.isMulti,
              __cacheProps = this.__cacheProps,
              root = this.root,
              originX = this.__sx3,
              originY = this.__sy3,
              width = this.width,
              height = this.height,
              _this$currentStyle = this.currentStyle,
              strokeWidth = _this$currentStyle[STROKE_WIDTH$4],
              boxShadow = _this$currentStyle[BOX_SHADOW$6];
          var cx = originX + width * 0.5;
          var cy = originY + height * 0.5;
          this.buildCache(cx, cy);
          var r = 0;

          if (isMulti) {
            var max = 0;

            __cacheProps.r.forEach(function (r) {
              max = Math.max(r, max);
            });

            r = max;
          } else {
            r = __cacheProps.r;
          }

          var bbox = _get(_getPrototypeOf(Sector.prototype), "bbox", this);

          var half = 0;
          strokeWidth.forEach(function (item) {
            if (item[1] === REM$d) {
              half = Math.max(item[0] * root.computedStyle[FONT_SIZE$e] * 0.5, half);
            } else if (item[1] === VW$d) {
              half = Math.max(item[0] * root.width * 0.01 * 0.5, half);
            } else if (item[1] === VH$d) {
              half = Math.max(item[0] * root.height * 0.01 * 0.5, half);
            } else if (item[1] === VMAX$d) {
              half = Math.max(item[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
            } else if (item[1] === VMIN$d) {
              half = Math.max(item[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
            } else {
              half = Math.max(item[0] * 0.5, half);
            }
          });
          half += 1;

          var _this$__spreadBbox = this.__spreadBbox(boxShadow),
              _this$__spreadBbox2 = _slicedToArray(_this$__spreadBbox, 2),
              ox = _this$__spreadBbox2[0],
              oy = _this$__spreadBbox2[1];

          ox += half;
          oy += half;
          var xa = cx - r - ox;
          var xb = cx + r + ox;
          var ya = cy - r - oy;
          var yb = cy + r + oy;
          bbox[0] = Math.min(bbox[0], xa);
          bbox[1] = Math.min(bbox[1], ya);
          bbox[2] = Math.max(bbox[2], xb);
          bbox[3] = Math.max(bbox[3], yb);
          this.__bbox = bbox;
        }

        return this.__bbox;
      }
    }]);

    return Sector;
  }(Geom$1);

  var _enums$STYLE_KEY$n = enums.STYLE_KEY,
      STROKE_WIDTH$5 = _enums$STYLE_KEY$n.STROKE_WIDTH,
      BOX_SHADOW$7 = _enums$STYLE_KEY$n.BOX_SHADOW,
      FONT_SIZE$f = _enums$STYLE_KEY$n.FONT_SIZE;
  var isNil$c = util.isNil;
  var REM$e = o.REM,
      VW$e = o.VW,
      VH$e = o.VH,
      VMAX$e = o.VMAX,
      VMIN$e = o.VMIN;

  function genVertex(x, y, width, height) {
    var rx = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var ry = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

    if (rx === 0 || ry === 0) {
      return [[x, y], [x + width, y], [x + width, y + height], [x, y + height], [x, y]];
    }

    var ox = rx * geom.H;
    var oy = ry * geom.H;
    return [[x + rx, y], [x + width - rx, y], [x + width + ox - rx, y, x + width, y + ry - oy, x + width, y + ry], [x + width, y + height - ry], [x + width, y + height + oy - ry, x + width + ox - rx, y + height, x + width - rx, y + height], [x + rx, y + height], [x + rx - ox, y + height, x, y + height + oy - ry, x, y + height - ry], [x, y + ry], [x, y + ry - oy, x + rx - ox, y, x + rx, y]];
  }

  function getR$1(v) {
    v = parseFloat(v);

    if (isNaN(v)) {
      v = 0;
    }

    return v;
  }

  var Rect = /*#__PURE__*/function (_Geom) {
    _inherits(Rect, _Geom);

    var _super = _createSuper(Rect);

    function Rect(tagName, props) {
      var _this;

      _classCallCheck(this, Rect);

      _this = _super.call(this, tagName, props); // 圆角

      if (_this.isMulti) {
        _this.__rx = [0];
        _this.__ry = [0];

        if (Array.isArray(props.rx)) {
          _this.__rx = props.rx.map(function (i) {
            return getR$1(i);
          });
        }

        if (Array.isArray(props.ry)) {
          _this.__ry = props.ry.map(function (i) {
            return getR$1(i);
          });
        }
      } else {
        _this.__rx = _this.__ry = 0;

        if (!isNil$c(props.rx)) {
          _this.__rx = getR$1(props.rx);
        }

        if (!isNil$c(props.ry)) {
          _this.__ry = getR$1(props.ry);
        }
      }

      return _this;
    }

    _createClass(Rect, [{
      key: "buildCache",
      value: function buildCache(originX, originY, focus) {
        var width = this.width,
            height = this.height,
            rx = this.rx,
            ry = this.ry,
            __cacheProps = this.__cacheProps,
            isMulti = this.isMulti;
        var rebuild;

        if (isNil$c(__cacheProps.rx) || focus) {
          rebuild = true;

          if (isMulti) {
            __cacheProps.rx = rx.map(function (rx) {
              return Math.min(rx, 0.5) * width;
            });
          } else {
            __cacheProps.rx = Math.min(rx, 0.5) * width;
          }
        }

        if (isNil$c(__cacheProps.ry) || focus) {
          rebuild = true;

          if (isMulti) {
            __cacheProps.ry = rx.map(function (ry) {
              return Math.min(ry, 0.5) * height;
            });
          } else {
            __cacheProps.ry = Math.min(ry, 0.5) * height;
          }
        }

        if (rebuild) {
          var _rx = __cacheProps.rx,
              _ry = __cacheProps.ry;

          if (isMulti) {
            __cacheProps.list = _rx.map(function (rx, i) {
              return genVertex(originX, originY, width, height, rx, _ry[i]);
            });
          } else {
            __cacheProps.list = genVertex(originX, originY, width, height, _rx, _ry);
          }
        }

        return rebuild;
      }
    }, {
      key: "render",
      value: function render(renderMode, lv, ctx, cache, dx, dy) {
        var res = _get(_getPrototypeOf(Rect.prototype), "render", this).call(this, renderMode, lv, ctx, cache, dx, dy);

        if (res["break"]) {
          return res;
        }

        this.buildCache(res.sx3, res.sy3);
        ctx = res.ctx;

        this.__renderPolygon(renderMode, ctx, res);

        return res;
      }
    }, {
      key: "rx",
      get: function get() {
        return this.getProps('rx');
      }
    }, {
      key: "ry",
      get: function get() {
        return this.getProps('ry');
      }
    }, {
      key: "bbox",
      get: function get() {
        if (!this.__bbox) {
          var root = this.root,
              originX = this.__sx3,
              originY = this.__sy3,
              width = this.width,
              height = this.height,
              _this$currentStyle = this.currentStyle,
              strokeWidth = _this$currentStyle[STROKE_WIDTH$5],
              boxShadow = _this$currentStyle[BOX_SHADOW$7];
          this.buildCache(originX, originY);

          var bbox = _get(_getPrototypeOf(Rect.prototype), "bbox", this);

          var half = 0;
          strokeWidth.forEach(function (item) {
            if (item[1] === REM$e) {
              half = Math.max(item[0] * root.computedStyle[FONT_SIZE$f] * 0.5, half);
            } else if (item[1] === VW$e) {
              half = Math.max(item[0] * root.width * 0.01 * 0.5, half);
            } else if (item[1] === VH$e) {
              half = Math.max(item[0] * root.height * 0.01 * 0.5, half);
            } else if (item[1] === VMAX$e) {
              half = Math.max(item[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
            } else if (item[1] === VMIN$e) {
              half = Math.max(item[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
            } else {
              half = Math.max(item[0] * 0.5, half);
            }
          });
          half += 1;

          var _this$__spreadBbox = this.__spreadBbox(boxShadow),
              _this$__spreadBbox2 = _slicedToArray(_this$__spreadBbox, 2),
              ox = _this$__spreadBbox2[0],
              oy = _this$__spreadBbox2[1];

          ox += half;
          oy += half;
          bbox[0] = Math.min(bbox[0], originX - ox);
          bbox[1] = Math.min(bbox[1], originY - oy);
          bbox[2] = Math.max(bbox[2], originX + width + ox);
          bbox[3] = Math.max(bbox[3], originY + height + oy);
          this.__bbox = bbox;
        }

        return this.__bbox;
      }
    }]);

    return Rect;
  }(Geom$1);

  var _enums$STYLE_KEY$o = enums.STYLE_KEY,
      STROKE_WIDTH$6 = _enums$STYLE_KEY$o.STROKE_WIDTH,
      BOX_SHADOW$8 = _enums$STYLE_KEY$o.BOX_SHADOW,
      FONT_SIZE$g = _enums$STYLE_KEY$o.FONT_SIZE;
  var isNil$d = util.isNil;
  var REM$f = o.REM,
      VW$f = o.VW,
      VH$f = o.VH,
      VMAX$f = o.VMAX,
      VMIN$f = o.VMIN;

  function getR$2(v) {
    v = parseFloat(v);

    if (isNaN(v)) {
      v = 1;
    }

    return v;
  }

  var Circle = /*#__PURE__*/function (_Geom) {
    _inherits(Circle, _Geom);

    var _super = _createSuper(Circle);

    function Circle(tagName, props) {
      var _this;

      _classCallCheck(this, Circle);

      _this = _super.call(this, tagName, props); // 半径[0, ∞)，默认1

      if (_this.isMulti) {
        _this.__r = [1];

        if (Array.isArray(props.r)) {
          _this.__r = props.r.map(function (i) {
            return getR$2(i);
          });
        } else if (!isNil$d(props.r)) {
          _this.__r = getR$2(props.r);
        }
      } else {
        _this.__r = 1;

        if (!isNil$d(props.r)) {
          _this.__r = getR$2(props.r);
        }
      }

      return _this;
    }

    _createClass(Circle, [{
      key: "buildCache",
      value: function buildCache(cx, cy, focus) {
        var width = this.width,
            r = this.r,
            __cacheProps = this.__cacheProps,
            isMulti = this.isMulti;

        if (isNil$d(__cacheProps.r) || focus) {
          if (isMulti) {
            __cacheProps.r = r.map(function (i) {
              return i * width * 0.5;
            });
            __cacheProps.list = __cacheProps.r.map(function (r) {
              return geom.ellipsePoints(cx, cy, r, r);
            });
          } else {
            __cacheProps.r = r * width * 0.5;
            __cacheProps.list = geom.ellipsePoints(cx, cy, __cacheProps.r, __cacheProps.r);
          }
        }
      }
    }, {
      key: "render",
      value: function render(renderMode, lv, ctx, cache, dx, dy) {
        var res = _get(_getPrototypeOf(Circle.prototype), "render", this).call(this, renderMode, lv, ctx, cache, dx, dy);

        if (res["break"]) {
          return res;
        }

        this.buildCache(res.cx, res.cy);
        ctx = res.ctx;

        this.__renderPolygon(renderMode, ctx, res);

        return res;
      }
    }, {
      key: "r",
      get: function get() {
        return this.getProps('r');
      }
    }, {
      key: "bbox",
      get: function get() {
        if (!this.__bbox) {
          var isMulti = this.isMulti,
              __cacheProps = this.__cacheProps,
              root = this.root,
              originX = this.__sx3,
              originY = this.__sy3,
              width = this.width,
              height = this.height,
              _this$currentStyle = this.currentStyle,
              strokeWidth = _this$currentStyle[STROKE_WIDTH$6],
              boxShadow = _this$currentStyle[BOX_SHADOW$8];
          var cx = originX + width * 0.5;
          var cy = originY + height * 0.5;
          this.buildCache(cx, cy);
          var r = 0;

          if (isMulti) {
            var max = 0;

            __cacheProps.r.forEach(function (r) {
              max = Math.max(r, max);
            });

            r = max;
          } else {
            r = __cacheProps.r;
          }

          var bbox = _get(_getPrototypeOf(Circle.prototype), "bbox", this);

          var half = 0;
          strokeWidth.forEach(function (item) {
            if (item[1] === REM$f) {
              half = Math.max(item[0] * root.computedStyle[FONT_SIZE$g] * 0.5, half);
            } else if (item[1] === VW$f) {
              half = Math.max(item[0] * root.width * 0.01 * 0.5, half);
            } else if (item[1] === VH$f) {
              half = Math.max(item[0] * root.height * 0.01 * 0.5, half);
            } else if (item[1] === VMAX$f) {
              half = Math.max(item[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
            } else if (item[1] === VMIN$f) {
              half = Math.max(item[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
            } else {
              half = Math.max(item[0] * 0.5, half);
            }
          });
          half += 1;

          var _this$__spreadBbox = this.__spreadBbox(boxShadow),
              _this$__spreadBbox2 = _slicedToArray(_this$__spreadBbox, 2),
              ox = _this$__spreadBbox2[0],
              oy = _this$__spreadBbox2[1];

          ox += half;
          oy += half;
          var xa = cx - r - ox;
          var xb = cx + r + ox;
          var ya = cy - r - oy;
          var yb = cy + r + oy;
          bbox[0] = Math.min(bbox[0], xa);
          bbox[1] = Math.min(bbox[1], ya);
          bbox[2] = Math.max(bbox[2], xb);
          bbox[3] = Math.max(bbox[3], yb);
          this.__bbox = bbox;
        }

        return this.__bbox;
      }
    }]);

    return Circle;
  }(Geom$1);

  var _enums$STYLE_KEY$p = enums.STYLE_KEY,
      STROKE_WIDTH$7 = _enums$STYLE_KEY$p.STROKE_WIDTH,
      BOX_SHADOW$9 = _enums$STYLE_KEY$p.BOX_SHADOW,
      FONT_SIZE$h = _enums$STYLE_KEY$p.FONT_SIZE;
  var isNil$e = util.isNil;
  var REM$g = o.REM,
      VW$g = o.VW,
      VH$g = o.VH,
      VMAX$g = o.VMAX,
      VMIN$g = o.VMIN;

  function getR$3(v) {
    v = parseFloat(v);

    if (isNaN(v)) {
      v = 1;
    }

    return v;
  }

  var Ellipse = /*#__PURE__*/function (_Geom) {
    _inherits(Ellipse, _Geom);

    var _super = _createSuper(Ellipse);

    function Ellipse(tagName, props) {
      var _this;

      _classCallCheck(this, Ellipse);

      _this = _super.call(this, tagName, props); // 半径[0, ∞)，默认1

      if (_this.isMulti) {
        _this.__rx = [1];
        _this.__ry = [1];

        if (Array.isArray(props.rx)) {
          _this.__rx = props.rx.map(function (i) {
            return getR$3(i);
          });
        } else if (!isNil$e(props.rx)) {
          _this.__rx = [getR$3(props.rx)];
        }

        if (Array.isArray(props.ry)) {
          _this.__ry = props.ry.map(function (i) {
            return getR$3(i);
          });
        } else if (!isNil$e(props.ry)) {
          _this.__ry = [getR$3(props.ry)];
        }
      } else {
        _this.__rx = 1;

        if (!isNil$e(props.rx)) {
          _this.__rx = getR$3(props.rx);
        }

        _this.__ry = 1;

        if (!isNil$e(props.ry)) {
          _this.__ry = getR$3(props.ry);
        }
      }

      return _this;
    }

    _createClass(Ellipse, [{
      key: "buildCache",
      value: function buildCache(cx, cy, focus) {
        var width = this.width,
            height = this.height,
            rx = this.rx,
            ry = this.ry,
            __cacheProps = this.__cacheProps,
            isMulti = this.isMulti;
        var rebuild;

        if (isNil$e(__cacheProps.rx) || focus) {
          rebuild = true;

          if (isMulti) {
            __cacheProps.rx = rx.map(function (i) {
              return i * width * 0.5;
            });
          } else {
            __cacheProps.rx = rx * width * 0.5;
          }
        }

        if (isNil$e(__cacheProps.ry) || focus) {
          rebuild = true;

          if (isMulti) {
            __cacheProps.ry = ry.map(function (i) {
              return i * height * 0.5;
            });
          } else {
            __cacheProps.ry = ry * height * 0.5;
          }
        }

        if (rebuild) {
          var _rx = __cacheProps.rx,
              _ry = __cacheProps.ry;

          if (isMulti) {
            __cacheProps.list = _rx.map(function (rx, i) {
              return geom.ellipsePoints(cx, cy, rx, _ry[i]);
            });
          } else {
            __cacheProps.list = geom.ellipsePoints(cx, cy, _rx, _ry);
          }
        }

        return rebuild;
      }
    }, {
      key: "render",
      value: function render(renderMode, lv, ctx, cache, dx, dy) {
        var res = _get(_getPrototypeOf(Ellipse.prototype), "render", this).call(this, renderMode, lv, ctx, cache, dx, dy);

        if (res["break"]) {
          return res;
        }

        this.buildCache(res.cx, res.cy);
        ctx = res.ctx;

        this.__renderPolygon(renderMode, ctx, res);

        return res;
      }
    }, {
      key: "rx",
      get: function get() {
        return this.getProps('rx');
      }
    }, {
      key: "ry",
      get: function get() {
        return this.getProps('ry');
      }
    }, {
      key: "bbox",
      get: function get() {
        if (!this.__bbox) {
          var isMulti = this.isMulti,
              __cacheProps = this.__cacheProps,
              root = this.root,
              originX = this.__sx3,
              originY = this.__sy3,
              width = this.width,
              height = this.height,
              _this$currentStyle = this.currentStyle,
              strokeWidth = _this$currentStyle[STROKE_WIDTH$7],
              boxShadow = _this$currentStyle[BOX_SHADOW$9];
          var cx = originX + width * 0.5;
          var cy = originY + height * 0.5;
          this.buildCache(cx, cy);
          var rx = 0,
              ry = 0;

          if (isMulti) {
            var mx = 0,
                my = 0;

            __cacheProps.rx.forEach(function (rx, i) {
              mx = Math.max(rx, mx);
              my = Math.max(ry, __cacheProps.ry[i]);
            });

            rx = mx;
            ry = my;
          } else {
            rx = __cacheProps.rx;
            ry = __cacheProps.ry;
          }

          var bbox = _get(_getPrototypeOf(Ellipse.prototype), "bbox", this);

          var half = 0;
          strokeWidth.forEach(function (item) {
            if (item[1] === REM$g) {
              half = Math.max(item[0] * root.computedStyle[FONT_SIZE$h] * 0.5, half);
            } else if (item[1] === VW$g) {
              half = Math.max(item[0] * root.width * 0.01 * 0.5, half);
            } else if (item[1] === VH$g) {
              half = Math.max(item[0] * root.height * 0.01 * 0.5, half);
            } else if (item[1] === VMAX$g) {
              half = Math.max(item[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
            } else if (item[1] === VMIN$g) {
              half = Math.max(item[0] * Math.max(root.width, root.height) * 0.01 * 0.5, half);
            } else {
              half = Math.max(item[0] * 0.5, half);
            }
          });
          half += 1;

          var _this$__spreadBbox = this.__spreadBbox(boxShadow),
              _this$__spreadBbox2 = _slicedToArray(_this$__spreadBbox, 2),
              ox = _this$__spreadBbox2[0],
              oy = _this$__spreadBbox2[1];

          ox += half;
          oy += half;
          var xa = cx - rx - ox;
          var xb = cx + rx + ox;
          var ya = cy - ry - oy;
          var yb = cy + ry + oy;
          bbox[0] = Math.min(bbox[0], xa);
          bbox[1] = Math.min(bbox[1], ya);
          bbox[2] = Math.max(bbox[2], xb);
          bbox[3] = Math.max(bbox[3], yb);
          this.__bbox = bbox;
        }

        return this.__bbox;
      }
    }]);

    return Ellipse;
  }(Geom$1);

  var fullCssProperty = {
    skewX: 'kx',
    skewY: 'ky',
    transform: 'tf',
    fontSize: 'fz',
    offset: 'os',
    easing: 'e',
    filter: 'ft',
    boxShadow: 'bd',
    overflow: 'of',
    backgroundClip: 'bp',
    textOverflow: 'tof',
    flexWrap: 'fp',
    perspective: 'ppt',
    rotate3d: 'r3'
  };
  var abbrCssProperty = {
    os: 'offset',
    // 非css属性不会被下面反向遍历插入，手动
    e: 'easing'
  };
  var fullAnimate = {
    value: 'v',
    options: 'o'
  };
  var abbrAnimate = {};
  var fullAnimateOption = {
    duration: 'dt',
    delay: 'd',
    endDelay: 'ed',
    iterations: 'i',
    direction: 'dc',
    fill: 'f',
    fps: 'fp',
    playbackRate: 'p',
    spfLimit: 'sl'
  };
  var abbrAnimateOption = {};
  reset.DOM_KEY_SET.concat(reset.GEOM_KEY_SET).forEach(function (k) {
    if (fullCssProperty.hasOwnProperty(k)) {
      abbrCssProperty[fullCssProperty[k]] = k;
      return;
    }

    var v = k.charAt(0) + k.replace(/[a-z]/g, '').toLowerCase();
    fullCssProperty[k] = v;
    abbrCssProperty[v] = k;
  });
  Object.keys(fullAnimate).forEach(function (k) {
    abbrAnimate[fullAnimate[k]] = k;
  });
  Object.keys(fullAnimateOption).forEach(function (k) {
    abbrAnimateOption[fullAnimateOption[k]] = k;
  });
  var abbr$1 = {
    fullCssProperty: fullCssProperty,
    abbrCssProperty: abbrCssProperty,
    fullAnimate: fullAnimate,
    abbrAnimate: abbrAnimate,
    fullAnimateOption: fullAnimateOption,
    abbrAnimateOption: abbrAnimateOption
  };

  var TYPE_VD$4 = $$type.TYPE_VD,
      TYPE_GM$4 = $$type.TYPE_GM,
      TYPE_CP$4 = $$type.TYPE_CP;
  var isNil$f = util.isNil,
      isFunction$8 = util.isFunction,
      isPrimitive = util.isPrimitive,
      clone$4 = util.clone,
      extend$2 = util.extend;
  var abbrCssProperty$1 = abbr$1.abbrCssProperty,
      abbrAnimateOption$1 = abbr$1.abbrAnimateOption,
      abbrAnimate$1 = abbr$1.abbrAnimate;
  /**
   * 还原缩写到全称，涉及样式和动画属性
   * @param target 还原的对象
   * @param hash 缩写映射
   */

  function abbr2full(target, hash) {
    // 也许节点没写样式
    if (target) {
      Object.keys(target).forEach(function (k) {
        // var-attr格式特殊考虑，仅映射attr部分，var-还要保留
        if (k.indexOf('var-') === 0) {
          var k2 = k.slice(4);

          if (hash.hasOwnProperty(k2)) {
            var fk = hash[k2];
            target['var-' + fk] = target[k]; // delete target[k];
          }
        } // 普通样式缩写还原
        else if (hash.hasOwnProperty(k)) {
            var _fk = hash[k];
            target[_fk] = target[k]; // 删除以免二次解析

            delete target[k];
          }
      });
    }
  }

  function replaceVars(json, vars) {
    if (json && vars) {
      // 新版vars语法
      if (json.hasOwnProperty('vars')) {
        var slot = json.vars;

        if (!Array.isArray(slot)) {
          slot = [slot];
        }

        if (Array.isArray(slot)) {
          slot.forEach(function (item) {
            var id = item.id,
                member = item.member;

            if (!Array.isArray(member)) {
              member = [member];
            } // 排除特殊的library


            if (Array.isArray(member) && member.length && member[0] !== 'library' && vars.hasOwnProperty(id)) {
              var target = json;

              for (var i = 0, len = member.length; i < len; i++) {
                var k = member[i]; // 最后一个属性可以为空

                if (target.hasOwnProperty(k) || i === len - 1) {
                  // 最后一个member表达式替换
                  if (i === len - 1) {
                    var v = vars[id]; // undefined和null意义不同

                    if (v === undefined) {
                      return;
                    } // 支持函数模式和值模式


                    if (isFunction$8(v)) {
                      v = v(target(k));
                    }

                    target[k] = v;
                  } else {
                    target = target[k];
                  }
                } else {
                  inject.error('Slot miss ' + k);
                  return;
                }
              }
            }
          });
        }
      } else {
        Object.keys(json).forEach(function (k) {
          if (k.indexOf('var-') === 0) {
            var v = json[k];

            if (!v) {
              return;
            }

            var k2 = k.slice(4); // 有id且变量里面传入了替换的值，值可为null，因为某些情况下空为自动

            if (k2 && v.id && vars.hasOwnProperty(v.id)) {
              var value = vars[v.id]; // undefined和null意义不同

              if (value === undefined) {
                return;
              }

              var target = json; // 如果有.则特殊处理子属性

              if (k2.indexOf('.') > -1) {
                var list = k2.split('.');
                var len = list.length;

                for (var i = 0; i < len - 1; i++) {
                  k2 = list[i]; // 避免异常

                  if (target[k2]) {
                    target = target[k2];
                  } else {
                    inject.warn('parseJson vars is not exist: ' + v.id + ', ' + k + ', ' + list.slice(0, i).join('.'));
                    return;
                  }
                }

                k2 = list[len - 1];
              } // 支持函数模式和值模式


              if (isFunction$8(value)) {
                value = value(v);
              }

              target[k2] = value;
            }
          }
        });
      }
    }
  }

  function replaceLibraryVars(json, hash, vars) {
    if (vars) {
      // 新版同级vars语法
      if (json.hasOwnProperty('vars')) {
        var slot = json.vars;

        if (!Array.isArray(slot)) {
          slot = [slot];
        }

        if (Array.isArray(slot)) {
          slot.forEach(function (item) {
            var id = item.id,
                member = item.member;

            if (!Array.isArray(member)) {
              member = [member];
            } // library.xxx，需要>=2的长度


            if (Array.isArray(member) && member.length > 1 && vars.hasOwnProperty(id)) {
              if (member[0] === 'library') {
                var target = hash;

                for (var i = 1, len = member.length; i < len; i++) {
                  var k = member[i]; // 最后一个属性可以为空

                  if (target.hasOwnProperty(k) || i === len - 1) {
                    // 最后一个member表达式替换
                    if (i === len - 1) {
                      var v = vars[id]; // 支持函数模式和值模式

                      if (isFunction$8(v)) {
                        v = v(target(k));
                      }

                      var old = target[k]; // 直接替换library的子对象，需补充id和tagName

                      if (i === 1) {
                        target[k] = Object.assign({
                          id: old.id,
                          tagName: old.tagName
                        }, v);
                      } // 替换library中子对象的一个属性直接赋值
                      else {
                          target[k] = v;
                        }
                    } else {
                      target = target[k];
                    }
                  } else {
                    inject.error('Library slot miss ' + k);
                    return;
                  }
                }
              }
            }
          });
        }
      } // 兼容老版var-
      else {
          Object.keys(json).forEach(function (k) {
            if (k.indexOf('var-library.') === 0) {
              var v = json[k]; // 直接移除library插槽，防止下面调用replaceVars(json, vars)时报错

              delete json[k];

              if (!v) {
                return;
              }

              var k2 = k.slice(12); // 有id且变量里面传入了替换的值

              if (k2 && v.id && vars.hasOwnProperty(v.id)) {
                var value = vars[v.id];

                if (isFunction$8(value)) {
                  value = value(v);
                } // 替换图层的值必须是一个有tagName的对象


                if (!value || !value.tagName) {
                  return;
                } // library对象也要加上id，与正常的library保持一致


                hash[k2] = Object.assign({
                  id: k2
                }, value);
              }
            }
          });
        }
    }
  }
  /**
   * 遍历一遍library的一级，将一级的id存到hash上，无需递归二级，
   * 因为顺序前提要求排好且无循环依赖，所以被用到的一定在前面出现，
   * 一般是无children的元件在前，包含children的div在后
   * 即便library中的元素有children或library，在linkChild时将其link过去，parse递归会继续处理
   * @param item：library的一级孩子
   * @param hash：存放library的key/value引用
   */


  function linkLibrary(item, hash) {
    var id = item.id; // library中一定有id，因为是一级，二级+特殊需求才会出现放开

    if (isNil$f(id)) {
      throw new Error('Library item miss id: ' + JSON.stringify(item));
    } else {
      hash[id] = item;
    }
  }
  /**
   * 链接child到library文件，
   * props需要是clone的，因为防止多个child使用同一个库文件
   * children则直接引用，无需担心多个使用同一个
   * library也需要带上，在library直接子元素还包含library时会用到
   * @param child
   * @param libraryItem
   */


  function linkChild(child, libraryItem) {
    // 规定图层child只有init和动画，属性和子图层来自库
    child.tagName = libraryItem.tagName;
    child.props = clone$4(libraryItem.props);
    child.children = libraryItem.children;
    child.library = libraryItem.library; // library的var-也要继承过来，本身的var-优先级更高，目前只有children会出现优先级情况

    Object.keys(libraryItem).forEach(function (k) {
      if (k.indexOf('var-') === 0 && !child.hasOwnProperty(k)) {
        child[k] = libraryItem[k];
      }
    }); // 删除以免二次解析

    child.libraryId = null; // 规定图层实例化的属性和样式在init上，优先使用init，然后才取原型链的props

    var init = child.init;

    if (init) {
      var props = child.props = child.props || {};
      var style = props.style;
      extend$2(props, init); // style特殊处理，防止被上面覆盖丢失原始值

      if (style) {
        extend$2(style, init.style);
        props.style = style;
      } // 删除以免二次解析


      child.init = null;
    }
  }

  function parse(karas, json, animateRecords, opt) {
    var hash = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};

    if (isPrimitive(json) || json instanceof Node || json instanceof Component$1) {
      return json;
    }

    if (Array.isArray(json)) {
      return json.map(function (item) {
        return parse(karas, item, animateRecords, opt, hash);
      });
    } // 先判断是否是个链接到库的节点，是则进行链接操作


    var libraryId = json.libraryId;

    if (!isNil$f(libraryId)) {
      var libraryItem = hash[libraryId]; // 规定图层child只有init和动画，tagName和属性和子图层来自库

      if (libraryItem) {
        linkChild(json, libraryItem);
      } else {
        throw new Error('Link library miss id: ' + libraryId);
      }

      json.libraryId = null;
    } // 再判断是否有library形成一个新的作用域，会出现library下的library使得一个链接节点链接后出现library的情况


    var library = json.library;

    if (Array.isArray(library)) {
      hash = {};
      library.forEach(function (item) {
        linkLibrary(item, hash);
      }); // 替换library插槽

      replaceLibraryVars(json, hash, opt.vars);
      json.library = null;
    }

    var tagName = json.tagName,
        _json$props = json.props,
        props = _json$props === void 0 ? {} : _json$props,
        _json$children = json.children,
        children = _json$children === void 0 ? [] : _json$children,
        _json$animate = json.animate,
        animate = _json$animate === void 0 ? [] : _json$animate;

    if (!tagName) {
      throw new Error('Dom must have a tagName: ' + JSON.stringify(json));
    }

    var style = props.style;
    opt.abbr !== false && abbr2full(style, abbrCssProperty$1); // 先替换style的

    replaceVars(style, opt.vars); // 再替换静态属性，style也作为属性的一种，目前尚未被设计为被替换

    replaceVars(props, opt.vars); // 替换children里的内容，如文字，无法直接替换tagName/props/children/animate本身，因为下方用的还是原引用

    replaceVars(json, opt.vars);

    if (!Array.isArray(children)) {
      throw new Error('children must be an array');
    }

    var vd;

    if (tagName.charAt(0) === '$') {
      vd = karas.createGm(tagName, props);
    } else if (/^[A-Z]/.test(tagName)) {
      var cp = Component$1.getRegister(tagName);
      vd = karas.createCp(cp, props, children.map(function (item) {
        if (item && [TYPE_VD$4, TYPE_GM$4, TYPE_CP$4].indexOf(item.$$type) > -1) {
          return item;
        }

        return parse(karas, item, animateRecords, opt, hash);
      }));
    } else {
      vd = karas.createVd(tagName, props, children.map(function (item) {
        if (item && [TYPE_VD$4, TYPE_GM$4, TYPE_CP$4].indexOf(item.$$type) > -1) {
          return item;
        }

        return parse(karas, item, animateRecords, opt, hash);
      }));
    }

    var animationRecord;

    if (animate) {
      if (Array.isArray(animate)) {
        var has;
        animate.forEach(function (item) {
          opt.abbr !== false && abbr2full(item, abbrAnimate$1);
          var value = item.value,
              options = item.options; // 忽略空动画

          if (Array.isArray(value) && value.length) {
            has = true;
            value.forEach(function (item) {
              opt.abbr !== false && abbr2full(item, abbrCssProperty$1);
              replaceVars(item, opt.vars);
            });
          }

          if (options) {
            opt.abbr !== false && abbr2full(options, abbrAnimateOption$1);
            replaceVars(options, opt.vars);
          }
        });

        if (has) {
          animationRecord = {
            animate: animate,
            target: vd
          };
        }
      } else {
        opt.abbr !== false && abbr2full(animate, abbrAnimate$1);
        var value = animate.value,
            options = animate.options;

        if (Array.isArray(value) && value.length) {
          value.forEach(function (item) {
            opt.abbr !== false && abbr2full(item, abbrCssProperty$1);
            replaceVars(item, opt.vars);
          });
          animationRecord = {
            animate: animate,
            target: vd
          };
        }

        if (options) {
          opt.abbr !== false && abbr2full(options, abbrAnimateOption$1);
          replaceVars(options, opt.vars);
        }
      }
    } // 产生实际动画运行才存入列表供root调用执行


    if (animationRecord) {
      animateRecords.push(animationRecord);
    }

    return vd;
  }

  var o$4 = {
    parse: function parse$1(karas, json, dom) {
      var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

      if (!json) {
        return;
      } // 特殊单例声明无需clone加速解析


      if (!options.singleton && !json.singleton) {
        json = util.clone(json);
      } // 根节点的fonts字段定义字体信息


      var fonts = json.fonts;

      if (fonts) {
        if (!Array.isArray(fonts)) {
          fonts = [fonts];
        }

        fonts.forEach(function (item) {
          var fontFamily = item.fontFamily,
              data = item.data;

          if (fontFamily && data) {
            o$1.register(fontFamily, data);
          }
        });
      } // json中定义无abbr


      if (json.abbr === false) {
        options.abbr = false;
      }

      if (options.abbr !== false) {
        inject.warn('Abbr in json is deprecated');
      } // 重载，在确定dom传入选择器字符串或html节点对象时作为渲染功能，否则仅创建vd返回


      if (!inject.isDom(dom)) {
        options = dom || {};
        dom = null;
      } // 暂存所有动画声明，等root的生成后开始执行


      var animateRecords = [];

      var vd = parse(karas, json, animateRecords, options); // 有dom时parse作为根方法渲染


      if (dom) {
        var _json = json,
            tagName = _json.tagName;

        if (['canvas', 'svg', 'webgl'].indexOf(tagName) === -1) {
          throw new Error('Parse dom must be canvas/svg');
        } // parse直接（非递归）的动画记录


        var ac = options.controller instanceof Controller ? options.controller : vd.animateController; // 第一次render，收集递归json里面的animateRecords，它在xom的__layout最后生成

        karas.render(vd, dom); // 由于vd首先生成的都是json，根parse要特殊处理将target指向真正的vd引用，json的vd在builder中赋值

        animateRecords.forEach(function (item) {
          item.target = item.target.vd;
        }); // 直接的json里的animateRecords，再加上递归的parse的json的（第一次render布局时处理）动画一并播放

        if (options.autoPlay !== false) {
          ac.__records = ac.__records.concat(animateRecords);

          ac.__playAuto();
        } // 不自动播放进入记录列表，初始化并等待手动调用
        else {
            ac.__records2 = ac.__records2.concat(animateRecords);
            ac.init(ac.__records2, ac.list2);
          }
      } // 递归的parse，如果有动画，此时还没root，先暂存下来，等上面的root的render第一次布局时收集
      else {
          if (animateRecords.length) {
            vd.__animateRecords = {
              options: options,
              list: animateRecords,
              controller: options.controller instanceof Controller ? options.controller : null
            };
          }
        }

      return vd;
    },
    loadAndParse: function loadAndParse(karas, json, dom, options) {
      var fonts = json.fonts,
          components = json.components,
          imgs = json.imgs;
      var list1 = [];
      var list2 = [];
      var list3 = [];

      if (fonts) {
        if (!Array.isArray(fonts)) {
          fonts = [fonts];
        }

        fonts.forEach(function (item) {
          var url = item.url;

          if (url) {
            list1.push(url);
          }
        });
      }

      if (components) {
        if (!Array.isArray(components)) {
          components = [components];
        }

        components.forEach(function (item) {
          var tagName = item.tagName,
              url = item.url,
              reload = item.reload; // 如果没申明reload且已经被注册，则无需重复加载

          if (tagName && karas.Component.hasRegister(tagName) && !reload) {
            return;
          } // 即便没有tagName也要加载，可能组件内部执行了注册逻辑


          if (url) {
            list2.push(item);
          }
        });
      }

      if (imgs) {
        if (!Array.isArray(imgs)) {
          imgs = [imgs];
        }

        imgs.forEach(function (item) {
          var url = item.url;

          if (url) {
            list3.push(url);
          }
        });
      }

      var a = list1.length,
          b = list2.length,
          c = list3.length;

      if (a || b || c) {
        var count = 0;

        var cb = function cb() {
          if (count === a + b + c) {
            var res = o$4.parse(karas, json, dom, options);

            if (options && util.isFunction(options.callback)) {
              options.callback(res);
            }
          }
        };

        karas.inject.loadFont(list1, function () {
          count += a;
          cb();
        });
        karas.inject.loadComponent(list2.map(function (item) {
          return item.url;
        }), function () {
          count += b; // 默认约定加载的js组件会在全局变量申明同名tagName，已有不覆盖，防止组件代码内部本身有register

          list2.forEach(function (item) {
            var tagName = item.tagName;

            if (tagName && window[tagName] && !karas.Component.hasRegister(tagName)) {
              karas.Component.register(tagName, window[tagName]);
            }
          });
          cb();
        });
        karas.inject.measureImg(list3, function () {
          count += c;
          cb();
        });
      } else {
        var res = o$4.parse(karas, json, dom, options);

        if (options && util.isFunction(options.callback)) {
          options.callback(res);
        }

        return res;
      }
    },
    abbr: abbr$1
  };

  var style = {
    css: css,
    reset: reset,
    unit: o,
    font: o$1,
    abbr: abbr,
    transform: transform$1
  };

  var animate = {
    Animation: Animation,
    Controller: Controller,
    easing: easing,
    frame: frame
  };

  var refresh = {
    level: o$3,
    change: o$2,
    Page: Page,
    Cache: Cache
  };

  var version = "0.66.10";

  Geom$1.register('$line', Line);
  Geom$1.register('$polyline', Polyline);
  Geom$1.register('$polygon', Polygon);
  Geom$1.register('$sector', Sector);
  Geom$1.register('$rect', Rect);
  Geom$1.register('$circle', Circle);
  Geom$1.register('$ellipse', Ellipse);
  var karas$1 = {
    version: version,
    render: function render(root, dom) {
      if (!(root instanceof Root)) {
        throw new Error('Render dom must be canvas/svg');
      }

      if (dom) {
        root.appendTo(dom);
      }

      return root;
    },
    createElement: function createElement(tagName, props) {
      props = props || {};
      var children = [];

      for (var i = 2, len = arguments.length; i < len; i++) {
        children.push(arguments[i]);
      }

      if (util.isString(tagName)) {
        if (tagName.charAt(0) === '$') {
          return this.createGm(tagName, props);
        } else {
          return this.createVd(tagName, props, children);
        }
      } else if (tagName) {
        return this.createCp(tagName, props, children);
      }
    },
    createVd: function createVd(tagName, props) {
      var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

      if (['canvas', 'svg', 'webgl'].indexOf(tagName) > -1) {
        return new Root(tagName, props, children);
      }

      if (tag.TAG_NAME.hasOwnProperty(tagName)) {
        return {
          tagName: tagName,
          props: props,
          children: children,
          $$type: $$type.TYPE_VD
        };
      }

      throw new Error("Can not use <".concat(tagName, ">"));
    },
    createGm: function createGm(tagName, props) {
      return {
        tagName: tagName,
        props: props,
        $$type: $$type.TYPE_GM
      };
    },
    createCp: function createCp(klass, props) {
      var children = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
      props.children = children;
      return {
        klass: klass,
        props: props,
        $$type: $$type.TYPE_CP
      };
    },
    parse: function parse(json, dom, options) {
      return o$4.parse(this, json, dom, options);
    },
    loadAndParse: function loadAndParse(json, dom, options) {
      return o$4.loadAndParse(this, json, dom, options);
    },
    mode: mode,
    Component: Component$1,
    Node: Node,
    Text: Text,
    Geom: Geom$1,
    Xom: Xom$1,
    Dom: Dom$1,
    Img: Img$1,
    Root: Root,
    Event: Event,
    util: util,
    inject: inject,
    style: style,
    parser: o$4,
    animate: animate,
    math: math,
    builder: builder,
    updater: updater,
    refresh: refresh,
    enums: enums,

    set debug(v) {
      debug.flag = !!v;
    }

  };
  builder.ref({
    Xom: Xom$1,
    Dom: Dom$1,
    Img: Img$1,
    Geom: Geom$1,
    Component: Component$1
  });

  if (typeof window !== 'undefined') {
    window.karas = karas$1;
  } else if (typeof self !== 'undefined') {
    self.karas = karas$1;
  }

  return karas$1;

})));
//# sourceMappingURL=index.js.map


/***/ }),

/***/ "./src/component/Alert/index.less":
/*!****************************************!*\
  !*** ./src/component/Alert/index.less ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/component/Composition/index.less":
/*!**********************************************!*\
  !*** ./src/component/Composition/index.less ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/component/List/index.less":
/*!***************************************!*\
  !*** ./src/component/List/index.less ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/component/Loading/index.less":
/*!******************************************!*\
  !*** ./src/component/Loading/index.less ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/component/Preview/index.less":
/*!******************************************!*\
  !*** ./src/component/Preview/index.less ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./src/index.less":
/*!************************!*\
  !*** ./src/index.less ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
// extracted by mini-css-extract-plugin


/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/ObserverComponent.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/ObserverComponent.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observer": () => (/* binding */ ObserverComponent)
/* harmony export */ });
/* harmony import */ var _useObserver__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./useObserver */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useObserver.js");

function ObserverComponent(_a) {
    var children = _a.children, render = _a.render;
    var component = children || render;
    if (typeof component !== "function") {
        return null;
    }
    return (0,_useObserver__WEBPACK_IMPORTED_MODULE_0__.useObserver)(component);
}
if (true) {
    ObserverComponent.propTypes = {
        children: ObserverPropsCheck,
        render: ObserverPropsCheck
    };
}
ObserverComponent.displayName = "Observer";

function ObserverPropsCheck(props, key, componentName, location, propFullName) {
    var extraKey = key === "children" ? "render" : "children";
    var hasProp = typeof props[key] === "function";
    var hasExtraProp = typeof props[extraKey] === "function";
    if (hasProp && hasExtraProp) {
        return new Error("MobX Observer: Do not use children and render in the same time in`" + componentName);
    }
    if (hasProp || hasExtraProp) {
        return null;
    }
    return new Error("Invalid prop `" +
        propFullName +
        "` of type `" +
        typeof props[key] +
        "` supplied to" +
        " `" +
        componentName +
        "`, expected `function`.");
}
//# sourceMappingURL=ObserverComponent.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isUsingStaticRendering": () => (/* reexport safe */ _staticRendering__WEBPACK_IMPORTED_MODULE_5__.isUsingStaticRendering),
/* harmony export */   "enableStaticRendering": () => (/* reexport safe */ _staticRendering__WEBPACK_IMPORTED_MODULE_5__.enableStaticRendering),
/* harmony export */   "observer": () => (/* reexport safe */ _observer__WEBPACK_IMPORTED_MODULE_6__.observer),
/* harmony export */   "Observer": () => (/* reexport safe */ _ObserverComponent__WEBPACK_IMPORTED_MODULE_7__.Observer),
/* harmony export */   "useLocalObservable": () => (/* reexport safe */ _useLocalObservable__WEBPACK_IMPORTED_MODULE_8__.useLocalObservable),
/* harmony export */   "useLocalStore": () => (/* reexport safe */ _useLocalStore__WEBPACK_IMPORTED_MODULE_9__.useLocalStore),
/* harmony export */   "useAsObservableSource": () => (/* reexport safe */ _useAsObservableSource__WEBPACK_IMPORTED_MODULE_10__.useAsObservableSource),
/* harmony export */   "clearTimers": () => (/* reexport safe */ _utils_reactionCleanupTracking__WEBPACK_IMPORTED_MODULE_11__.resetCleanupScheduleForTests),
/* harmony export */   "useObserver": () => (/* binding */ useObserver),
/* harmony export */   "isObserverBatched": () => (/* reexport safe */ _utils_observerBatching__WEBPACK_IMPORTED_MODULE_2__.isObserverBatched),
/* harmony export */   "observerBatching": () => (/* reexport safe */ _utils_observerBatching__WEBPACK_IMPORTED_MODULE_2__.observerBatching),
/* harmony export */   "useStaticRendering": () => (/* binding */ useStaticRendering)
/* harmony export */ });
/* harmony import */ var _utils_assertEnvironment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/assertEnvironment */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/assertEnvironment.js");
/* harmony import */ var _utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/reactBatchedUpdates */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/reactBatchedUpdates.js");
/* harmony import */ var _utils_observerBatching__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/observerBatching */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/observerBatching.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/utils */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/utils.js");
/* harmony import */ var _useObserver__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./useObserver */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useObserver.js");
/* harmony import */ var _staticRendering__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./staticRendering */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/staticRendering.js");
/* harmony import */ var _observer__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./observer */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/observer.js");
/* harmony import */ var _ObserverComponent__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ObserverComponent */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/ObserverComponent.js");
/* harmony import */ var _useLocalObservable__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./useLocalObservable */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useLocalObservable.js");
/* harmony import */ var _useLocalStore__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./useLocalStore */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useLocalStore.js");
/* harmony import */ var _useAsObservableSource__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./useAsObservableSource */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useAsObservableSource.js");
/* harmony import */ var _utils_reactionCleanupTracking__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./utils/reactionCleanupTracking */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/reactionCleanupTracking.js");






(0,_utils_observerBatching__WEBPACK_IMPORTED_MODULE_2__.observerBatching)(_utils_reactBatchedUpdates__WEBPACK_IMPORTED_MODULE_1__.unstable_batchedUpdates);







function useObserver(fn, baseComponentName) {
    if (baseComponentName === void 0) { baseComponentName = "observed"; }
    if (true) {
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_3__.useDeprecated)("[mobx-react-lite] 'useObserver(fn)' is deprecated. Use `<Observer>{fn}</Observer>` instead, or wrap the entire component in `observer`.");
    }
    return (0,_useObserver__WEBPACK_IMPORTED_MODULE_4__.useObserver)(fn, baseComponentName);
}

function useStaticRendering(enable) {
    if (true) {
        console.warn("[mobx-react-lite] 'useStaticRendering' is deprecated, use 'enableStaticRendering' instead");
    }
    (0,_staticRendering__WEBPACK_IMPORTED_MODULE_5__.enableStaticRendering)(enable);
}
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/observer.js":
/*!****************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/observer.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "observer": () => (/* binding */ observer)
/* harmony export */ });
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");
/* harmony import */ var _staticRendering__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./staticRendering */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/staticRendering.js");
/* harmony import */ var _useObserver__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useObserver */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useObserver.js");
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};



// n.b. base case is not used for actual typings or exported in the typing files
function observer(baseComponent, options) {
    // The working of observer is explained step by step in this talk: https://www.youtube.com/watch?v=cPF4iBedoF0&feature=youtu.be&t=1307
    if ((0,_staticRendering__WEBPACK_IMPORTED_MODULE_1__.isUsingStaticRendering)()) {
        return baseComponent;
    }
    var realOptions = __assign({ forwardRef: false }, options);
    var baseComponentName = baseComponent.displayName || baseComponent.name;
    var wrappedComponent = function (props, ref) {
        return (0,_useObserver__WEBPACK_IMPORTED_MODULE_2__.useObserver)(function () { return baseComponent(props, ref); }, baseComponentName);
    };
    wrappedComponent.displayName = baseComponentName;
    // memo; we are not interested in deep updates
    // in props; we assume that if deep objects are changed,
    // this is in observables, which would have been tracked anyway
    var memoComponent;
    if (realOptions.forwardRef) {
        // we have to use forwardRef here because:
        // 1. it cannot go before memo, only after it
        // 2. forwardRef converts the function into an actual component, so we can't let the baseComponent do it
        //    since it wouldn't be a callable function anymore
        memoComponent = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)((0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(wrappedComponent));
    }
    else {
        memoComponent = (0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(wrappedComponent);
    }
    copyStaticProperties(baseComponent, memoComponent);
    memoComponent.displayName = baseComponentName;
    return memoComponent;
}
// based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js
var hoistBlackList = {
    $$typeof: true,
    render: true,
    compare: true,
    type: true
};
function copyStaticProperties(base, target) {
    Object.keys(base).forEach(function (key) {
        if (!hoistBlackList[key]) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
        }
    });
}
//# sourceMappingURL=observer.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/staticRendering.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/staticRendering.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "enableStaticRendering": () => (/* binding */ enableStaticRendering),
/* harmony export */   "isUsingStaticRendering": () => (/* binding */ isUsingStaticRendering)
/* harmony export */ });
var globalIsUsingStaticRendering = false;
function enableStaticRendering(enable) {
    globalIsUsingStaticRendering = enable;
}
function isUsingStaticRendering() {
    return globalIsUsingStaticRendering;
}
//# sourceMappingURL=staticRendering.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useAsObservableSource.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useAsObservableSource.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useAsObservableSource": () => (/* binding */ useAsObservableSource)
/* harmony export */ });
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/utils.js");
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};



function useAsObservableSource(current) {
    if (true)
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_0__.useDeprecated)("[mobx-react-lite] 'useAsObservableSource' is deprecated, please store the values directly in an observable, for example by using 'useLocalObservable', and sync future updates using 'useEffect' when needed. See the README for examples.");
    var _a = __read((0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(function () { return (0,mobx__WEBPACK_IMPORTED_MODULE_2__.observable)(current, {}, { deep: false }); }), 1), res = _a[0];
    (0,mobx__WEBPACK_IMPORTED_MODULE_2__.runInAction)(function () {
        Object.assign(res, current);
    });
    return res;
}
//# sourceMappingURL=useAsObservableSource.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useLocalObservable.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useLocalObservable.js ***!
  \**************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useLocalObservable": () => (/* binding */ useLocalObservable)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");


function useLocalObservable(initializer, annotations) {
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () { return (0,mobx__WEBPACK_IMPORTED_MODULE_1__.observable)(initializer(), annotations, { autoBind: true }); })[0];
}
//# sourceMappingURL=useLocalObservable.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useLocalStore.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useLocalStore.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useLocalStore": () => (/* binding */ useLocalStore)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");
/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/utils */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/utils.js");
/* harmony import */ var _useAsObservableSource__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./useAsObservableSource */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useAsObservableSource.js");




function useLocalStore(initializer, current) {
    if (true)
        (0,_utils_utils__WEBPACK_IMPORTED_MODULE_1__.useDeprecated)("[mobx-react-lite] 'useLocalStore' is deprecated, use 'useLocalObservable' instead.");
    var source = current && (0,_useAsObservableSource__WEBPACK_IMPORTED_MODULE_2__.useAsObservableSource)(current);
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(function () { return (0,mobx__WEBPACK_IMPORTED_MODULE_3__.observable)(initializer(source), undefined, { autoBind: true }); })[0];
}
//# sourceMappingURL=useLocalStore.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useObserver.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/useObserver.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useObserver": () => (/* binding */ useObserver)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");
/* harmony import */ var _utils_printDebugValue__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/printDebugValue */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/printDebugValue.js");
/* harmony import */ var _utils_reactionCleanupTracking__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/reactionCleanupTracking */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/reactionCleanupTracking.js");
/* harmony import */ var _staticRendering__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./staticRendering */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/staticRendering.js");
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};





function observerComponentNameFor(baseComponentName) {
    return "observer" + baseComponentName;
}
/**
 * We use class to make it easier to detect in heap snapshots by name
 */
var ObjectToBeRetainedByReact = /** @class */ (function () {
    function ObjectToBeRetainedByReact() {
    }
    return ObjectToBeRetainedByReact;
}());
function objectToBeRetainedByReactFactory() {
    return new ObjectToBeRetainedByReact();
}
function useObserver(fn, baseComponentName) {
    if (baseComponentName === void 0) { baseComponentName = "observed"; }
    if ((0,_staticRendering__WEBPACK_IMPORTED_MODULE_3__.isUsingStaticRendering)()) {
        return fn();
    }
    var _a = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(objectToBeRetainedByReactFactory), 1), objectRetainedByReact = _a[0];
    // Force update, see #2982
    var _b = __read(react__WEBPACK_IMPORTED_MODULE_0__.useState(), 2), setState = _b[1];
    var forceUpdate = function () { return setState([]); };
    // StrictMode/ConcurrentMode/Suspense may mean that our component is
    // rendered and abandoned multiple times, so we need to track leaked
    // Reactions.
    var reactionTrackingRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);
    if (!reactionTrackingRef.current) {
        // First render for this component (or first time since a previous
        // reaction from an abandoned render was disposed).
        var newReaction = new mobx__WEBPACK_IMPORTED_MODULE_4__.Reaction(observerComponentNameFor(baseComponentName), function () {
            // Observable has changed, meaning we want to re-render
            // BUT if we're a component that hasn't yet got to the useEffect()
            // stage, we might be a component that _started_ to render, but
            // got dropped, and we don't want to make state changes then.
            // (It triggers warnings in StrictMode, for a start.)
            if (trackingData_1.mounted) {
                // We have reached useEffect(), so we're mounted, and can trigger an update
                forceUpdate();
            }
            else {
                // We haven't yet reached useEffect(), so we'll need to trigger a re-render
                // when (and if) useEffect() arrives.
                trackingData_1.changedBeforeMount = true;
            }
        });
        var trackingData_1 = (0,_utils_reactionCleanupTracking__WEBPACK_IMPORTED_MODULE_2__.addReactionToTrack)(reactionTrackingRef, newReaction, objectRetainedByReact);
    }
    var reaction = reactionTrackingRef.current.reaction;
    react__WEBPACK_IMPORTED_MODULE_0__.useDebugValue(reaction, _utils_printDebugValue__WEBPACK_IMPORTED_MODULE_1__.printDebugValue);
    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(function () {
        // Called on first mount only
        (0,_utils_reactionCleanupTracking__WEBPACK_IMPORTED_MODULE_2__.recordReactionAsCommitted)(reactionTrackingRef);
        if (reactionTrackingRef.current) {
            // Great. We've already got our reaction from our render;
            // all we need to do is to record that it's now mounted,
            // to allow future observable changes to trigger re-renders
            reactionTrackingRef.current.mounted = true;
            // Got a change before first mount, force an update
            if (reactionTrackingRef.current.changedBeforeMount) {
                reactionTrackingRef.current.changedBeforeMount = false;
                forceUpdate();
            }
        }
        else {
            // The reaction we set up in our render has been disposed.
            // This can be due to bad timings of renderings, e.g. our
            // component was paused for a _very_ long time, and our
            // reaction got cleaned up
            // Re-create the reaction
            reactionTrackingRef.current = {
                reaction: new mobx__WEBPACK_IMPORTED_MODULE_4__.Reaction(observerComponentNameFor(baseComponentName), function () {
                    // We've definitely already been mounted at this point
                    forceUpdate();
                }),
                mounted: true,
                changedBeforeMount: false,
                cleanAt: Infinity
            };
            forceUpdate();
        }
        return function () {
            reactionTrackingRef.current.reaction.dispose();
            reactionTrackingRef.current = null;
        };
    }, []);
    // render the original component, but have the
    // reaction track the observables, so that rendering
    // can be invalidated (see above) once a dependency changes
    var rendering;
    var exception;
    reaction.track(function () {
        try {
            rendering = fn();
        }
        catch (e) {
            exception = e;
        }
    });
    if (exception) {
        throw exception; // re-throw any exceptions caught during rendering
    }
    return rendering;
}
//# sourceMappingURL=useObserver.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/FinalizationRegistryWrapper.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/FinalizationRegistryWrapper.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "FinalizationRegistry": () => (/* binding */ FinalizationRegistryLocal)
/* harmony export */ });
var FinalizationRegistryLocal = typeof FinalizationRegistry === "undefined" ? undefined : FinalizationRegistry;

//# sourceMappingURL=FinalizationRegistryWrapper.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/assertEnvironment.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/assertEnvironment.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");


if (!react__WEBPACK_IMPORTED_MODULE_0__.useState) {
    throw new Error("mobx-react-lite requires React with Hooks support");
}
if (!mobx__WEBPACK_IMPORTED_MODULE_1__.makeObservable) {
    throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");
}
//# sourceMappingURL=assertEnvironment.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js":
/*!********************************************************************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js ***!
  \********************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createReactionCleanupTrackingUsingFinalizationRegister": () => (/* binding */ createReactionCleanupTrackingUsingFinalizationRegister)
/* harmony export */ });
/* harmony import */ var _reactionCleanupTrackingCommon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reactionCleanupTrackingCommon */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js");

/**
 * FinalizationRegistry-based uncommitted reaction cleanup
 */
function createReactionCleanupTrackingUsingFinalizationRegister(FinalizationRegistry) {
    var cleanupTokenToReactionTrackingMap = new Map();
    var globalCleanupTokensCounter = 1;
    var registry = new FinalizationRegistry(function cleanupFunction(token) {
        var trackedReaction = cleanupTokenToReactionTrackingMap.get(token);
        if (trackedReaction) {
            trackedReaction.reaction.dispose();
            cleanupTokenToReactionTrackingMap.delete(token);
        }
    });
    return {
        addReactionToTrack: function (reactionTrackingRef, reaction, objectRetainedByReact) {
            var token = globalCleanupTokensCounter++;
            registry.register(objectRetainedByReact, token, reactionTrackingRef);
            reactionTrackingRef.current = (0,_reactionCleanupTrackingCommon__WEBPACK_IMPORTED_MODULE_0__.createTrackingData)(reaction);
            reactionTrackingRef.current.finalizationRegistryCleanupToken = token;
            cleanupTokenToReactionTrackingMap.set(token, reactionTrackingRef.current);
            return reactionTrackingRef.current;
        },
        recordReactionAsCommitted: function (reactionRef) {
            registry.unregister(reactionRef);
            if (reactionRef.current && reactionRef.current.finalizationRegistryCleanupToken) {
                cleanupTokenToReactionTrackingMap.delete(reactionRef.current.finalizationRegistryCleanupToken);
            }
        },
        forceCleanupTimerToRunNowForTests: function () {
            // When FinalizationRegistry in use, this this is no-op
        },
        resetCleanupScheduleForTests: function () {
            // When FinalizationRegistry in use, this this is no-op
        }
    };
}
//# sourceMappingURL=createReactionCleanupTrackingUsingFinalizationRegister.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTimerBasedReactionCleanupTracking": () => (/* binding */ createTimerBasedReactionCleanupTracking)
/* harmony export */ });
/* harmony import */ var _reactionCleanupTrackingCommon__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./reactionCleanupTrackingCommon */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js");
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

/**
 * timers, gc-style, uncommitted reaction cleanup
 */
function createTimerBasedReactionCleanupTracking() {
    /**
     * Reactions created by components that have yet to be fully mounted.
     */
    var uncommittedReactionRefs = new Set();
    /**
     * Latest 'uncommitted reactions' cleanup timer handle.
     */
    var reactionCleanupHandle;
    /* istanbul ignore next */
    /**
     * Only to be used by test functions; do not export outside of mobx-react-lite
     */
    function forceCleanupTimerToRunNowForTests() {
        // This allows us to control the execution of the cleanup timer
        // to force it to run at awkward times in unit tests.
        if (reactionCleanupHandle) {
            clearTimeout(reactionCleanupHandle);
            cleanUncommittedReactions();
        }
    }
    /* istanbul ignore next */
    function resetCleanupScheduleForTests() {
        var e_1, _a;
        if (uncommittedReactionRefs.size > 0) {
            try {
                for (var uncommittedReactionRefs_1 = __values(uncommittedReactionRefs), uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next(); !uncommittedReactionRefs_1_1.done; uncommittedReactionRefs_1_1 = uncommittedReactionRefs_1.next()) {
                    var ref = uncommittedReactionRefs_1_1.value;
                    var tracking = ref.current;
                    if (tracking) {
                        tracking.reaction.dispose();
                        ref.current = null;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (uncommittedReactionRefs_1_1 && !uncommittedReactionRefs_1_1.done && (_a = uncommittedReactionRefs_1.return)) _a.call(uncommittedReactionRefs_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            uncommittedReactionRefs.clear();
        }
        if (reactionCleanupHandle) {
            clearTimeout(reactionCleanupHandle);
            reactionCleanupHandle = undefined;
        }
    }
    function ensureCleanupTimerRunning() {
        if (reactionCleanupHandle === undefined) {
            reactionCleanupHandle = setTimeout(cleanUncommittedReactions, _reactionCleanupTrackingCommon__WEBPACK_IMPORTED_MODULE_0__.CLEANUP_TIMER_LOOP_MILLIS);
        }
    }
    function scheduleCleanupOfReactionIfLeaked(ref) {
        uncommittedReactionRefs.add(ref);
        ensureCleanupTimerRunning();
    }
    function recordReactionAsCommitted(reactionRef) {
        uncommittedReactionRefs.delete(reactionRef);
    }
    /**
     * Run by the cleanup timer to dispose any outstanding reactions
     */
    function cleanUncommittedReactions() {
        reactionCleanupHandle = undefined;
        // Loop through all the candidate leaked reactions; those older
        // than CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS get tidied.
        var now = Date.now();
        uncommittedReactionRefs.forEach(function (ref) {
            var tracking = ref.current;
            if (tracking) {
                if (now >= tracking.cleanAt) {
                    // It's time to tidy up this leaked reaction.
                    tracking.reaction.dispose();
                    ref.current = null;
                    uncommittedReactionRefs.delete(ref);
                }
            }
        });
        if (uncommittedReactionRefs.size > 0) {
            // We've just finished a round of cleanups but there are still
            // some leak candidates outstanding.
            ensureCleanupTimerRunning();
        }
    }
    return {
        addReactionToTrack: function (reactionTrackingRef, reaction, 
        /**
         * On timer based implementation we don't really need this object,
         * but we keep the same api
         */
        objectRetainedByReact) {
            reactionTrackingRef.current = (0,_reactionCleanupTrackingCommon__WEBPACK_IMPORTED_MODULE_0__.createTrackingData)(reaction);
            scheduleCleanupOfReactionIfLeaked(reactionTrackingRef);
            return reactionTrackingRef.current;
        },
        recordReactionAsCommitted: recordReactionAsCommitted,
        forceCleanupTimerToRunNowForTests: forceCleanupTimerToRunNowForTests,
        resetCleanupScheduleForTests: resetCleanupScheduleForTests
    };
}
//# sourceMappingURL=createTimerBasedReactionCleanupTracking.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/observerBatching.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/observerBatching.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "defaultNoopBatch": () => (/* binding */ defaultNoopBatch),
/* harmony export */   "observerBatching": () => (/* binding */ observerBatching),
/* harmony export */   "isObserverBatched": () => (/* binding */ isObserverBatched)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");

function defaultNoopBatch(callback) {
    callback();
}
function observerBatching(reactionScheduler) {
    if (!reactionScheduler) {
        reactionScheduler = defaultNoopBatch;
        if (true) {
            console.warn("[MobX] Failed to get unstable_batched updates from react-dom / react-native");
        }
    }
    (0,mobx__WEBPACK_IMPORTED_MODULE_0__.configure)({ reactionScheduler: reactionScheduler });
}
var isObserverBatched = function () {
    if (true) {
        console.warn("[MobX] Deprecated");
    }
    return true;
};
//# sourceMappingURL=observerBatching.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/printDebugValue.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/printDebugValue.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "printDebugValue": () => (/* binding */ printDebugValue)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");

function printDebugValue(v) {
    return (0,mobx__WEBPACK_IMPORTED_MODULE_0__.getDependencyTree)(v);
}
//# sourceMappingURL=printDebugValue.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/reactBatchedUpdates.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/reactBatchedUpdates.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "unstable_batchedUpdates": () => (/* reexport safe */ react_dom__WEBPACK_IMPORTED_MODULE_0__.unstable_batchedUpdates)
/* harmony export */ });
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react-dom */ "./node_modules/_react-dom@17.0.2@react-dom/index.js");

//# sourceMappingURL=reactBatchedUpdates.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/reactionCleanupTracking.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/reactionCleanupTracking.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "addReactionToTrack": () => (/* binding */ addReactionToTrack),
/* harmony export */   "recordReactionAsCommitted": () => (/* binding */ recordReactionAsCommitted),
/* harmony export */   "resetCleanupScheduleForTests": () => (/* binding */ resetCleanupScheduleForTests),
/* harmony export */   "forceCleanupTimerToRunNowForTests": () => (/* binding */ forceCleanupTimerToRunNowForTests)
/* harmony export */ });
/* harmony import */ var _FinalizationRegistryWrapper__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FinalizationRegistryWrapper */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/FinalizationRegistryWrapper.js");
/* harmony import */ var _createReactionCleanupTrackingUsingFinalizationRegister__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./createReactionCleanupTrackingUsingFinalizationRegister */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/createReactionCleanupTrackingUsingFinalizationRegister.js");
/* harmony import */ var _createTimerBasedReactionCleanupTracking__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./createTimerBasedReactionCleanupTracking */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/createTimerBasedReactionCleanupTracking.js");



var _a = _FinalizationRegistryWrapper__WEBPACK_IMPORTED_MODULE_0__.FinalizationRegistry
    ? (0,_createReactionCleanupTrackingUsingFinalizationRegister__WEBPACK_IMPORTED_MODULE_1__.createReactionCleanupTrackingUsingFinalizationRegister)(_FinalizationRegistryWrapper__WEBPACK_IMPORTED_MODULE_0__.FinalizationRegistry)
    : (0,_createTimerBasedReactionCleanupTracking__WEBPACK_IMPORTED_MODULE_2__.createTimerBasedReactionCleanupTracking)(), addReactionToTrack = _a.addReactionToTrack, recordReactionAsCommitted = _a.recordReactionAsCommitted, resetCleanupScheduleForTests = _a.resetCleanupScheduleForTests, forceCleanupTimerToRunNowForTests = _a.forceCleanupTimerToRunNowForTests;

//# sourceMappingURL=reactionCleanupTracking.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/reactionCleanupTrackingCommon.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createTrackingData": () => (/* binding */ createTrackingData),
/* harmony export */   "CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS": () => (/* binding */ CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS),
/* harmony export */   "CLEANUP_TIMER_LOOP_MILLIS": () => (/* binding */ CLEANUP_TIMER_LOOP_MILLIS)
/* harmony export */ });
function createTrackingData(reaction) {
    var trackingData = {
        reaction: reaction,
        mounted: false,
        changedBeforeMount: false,
        cleanAt: Date.now() + CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS
    };
    return trackingData;
}
/**
 * The minimum time before we'll clean up a Reaction created in a render
 * for a component that hasn't managed to run its effects. This needs to
 * be big enough to ensure that a component won't turn up and have its
 * effects run without being re-rendered.
 */
var CLEANUP_LEAKED_REACTIONS_AFTER_MILLIS = 10000;
/**
 * The frequency with which we'll check for leaked reactions.
 */
var CLEANUP_TIMER_LOOP_MILLIS = 10000;
//# sourceMappingURL=reactionCleanupTrackingCommon.js.map

/***/ }),

/***/ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/utils.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/utils/utils.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "useDeprecated": () => (/* binding */ useDeprecated)
/* harmony export */ });
var deprecatedMessages = [];
function useDeprecated(msg) {
    if (!deprecatedMessages.includes(msg)) {
        deprecatedMessages.push(msg);
        console.warn(msg);
    }
}
//# sourceMappingURL=utils.js.map

/***/ }),

/***/ "./node_modules/_mobx-react@7.2.0@mobx-react/dist/mobxreact.esm.js":
/*!*************************************************************************!*\
  !*** ./node_modules/_mobx-react@7.2.0@mobx-react/dist/mobxreact.esm.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Observer": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.Observer),
/* harmony export */   "enableStaticRendering": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.enableStaticRendering),
/* harmony export */   "isUsingStaticRendering": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.isUsingStaticRendering),
/* harmony export */   "observerBatching": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.observerBatching),
/* harmony export */   "useAsObservableSource": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.useAsObservableSource),
/* harmony export */   "useLocalObservable": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.useLocalObservable),
/* harmony export */   "useLocalStore": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.useLocalStore),
/* harmony export */   "useObserver": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.useObserver),
/* harmony export */   "useStaticRendering": () => (/* reexport safe */ mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.useStaticRendering),
/* harmony export */   "MobXProviderContext": () => (/* binding */ MobXProviderContext),
/* harmony export */   "PropTypes": () => (/* binding */ PropTypes),
/* harmony export */   "Provider": () => (/* binding */ Provider),
/* harmony export */   "disposeOnUnmount": () => (/* binding */ disposeOnUnmount),
/* harmony export */   "inject": () => (/* binding */ inject),
/* harmony export */   "observer": () => (/* binding */ observer)
/* harmony export */ });
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");
/* harmony import */ var mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! mobx-react-lite */ "./node_modules/_mobx-react-lite@3.2.1@mobx-react-lite/es/index.js");





var symbolId = 0;

function createSymbol(name) {
  if (typeof Symbol === "function") {
    return Symbol(name);
  }

  var symbol = "__$mobx-react " + name + " (" + symbolId + ")";
  symbolId++;
  return symbol;
}

var createdSymbols = {};
function newSymbol(name) {
  if (!createdSymbols[name]) {
    createdSymbols[name] = createSymbol(name);
  }

  return createdSymbols[name];
}
function shallowEqual(objA, objB) {
  //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (is(objA, objB)) return true;

  if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!Object.hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

function is(x, y) {
  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
} // based on https://github.com/mridgway/hoist-non-react-statics/blob/master/src/index.js


var hoistBlackList = {
  $$typeof: 1,
  render: 1,
  compare: 1,
  type: 1,
  childContextTypes: 1,
  contextType: 1,
  contextTypes: 1,
  defaultProps: 1,
  getDefaultProps: 1,
  getDerivedStateFromError: 1,
  getDerivedStateFromProps: 1,
  mixins: 1,
  displayName: 1,
  propTypes: 1
};
function copyStaticProperties(base, target) {
  var protoProps = Object.getOwnPropertyNames(Object.getPrototypeOf(base));
  Object.getOwnPropertyNames(base).forEach(function (key) {
    if (!hoistBlackList[key] && protoProps.indexOf(key) === -1) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(base, key));
    }
  });
}
/**
 * Helper to set `prop` to `this` as non-enumerable (hidden prop)
 * @param target
 * @param prop
 * @param value
 */

function setHiddenProp(target, prop, value) {
  if (!Object.hasOwnProperty.call(target, prop)) {
    Object.defineProperty(target, prop, {
      enumerable: false,
      configurable: true,
      writable: true,
      value: value
    });
  } else {
    target[prop] = value;
  }
}
/**
 * Utilities for patching componentWillUnmount, to make sure @disposeOnUnmount works correctly icm with user defined hooks
 * and the handler provided by mobx-react
 */

var mobxMixins = /*#__PURE__*/newSymbol("patchMixins");
var mobxPatchedDefinition = /*#__PURE__*/newSymbol("patchedDefinition");

function getMixins(target, methodName) {
  var mixins = target[mobxMixins] = target[mobxMixins] || {};
  var methodMixins = mixins[methodName] = mixins[methodName] || {};
  methodMixins.locks = methodMixins.locks || 0;
  methodMixins.methods = methodMixins.methods || [];
  return methodMixins;
}

function wrapper(realMethod, mixins) {
  var _this = this;

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  // locks are used to ensure that mixins are invoked only once per invocation, even on recursive calls
  mixins.locks++;

  try {
    var retVal;

    if (realMethod !== undefined && realMethod !== null) {
      retVal = realMethod.apply(this, args);
    }

    return retVal;
  } finally {
    mixins.locks--;

    if (mixins.locks === 0) {
      mixins.methods.forEach(function (mx) {
        mx.apply(_this, args);
      });
    }
  }
}

function wrapFunction(realMethod, mixins) {
  var fn = function fn() {
    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      args[_key2] = arguments[_key2];
    }

    wrapper.call.apply(wrapper, [this, realMethod, mixins].concat(args));
  };

  return fn;
}

function patch(target, methodName, mixinMethod) {
  var mixins = getMixins(target, methodName);

  if (mixins.methods.indexOf(mixinMethod) < 0) {
    mixins.methods.push(mixinMethod);
  }

  var oldDefinition = Object.getOwnPropertyDescriptor(target, methodName);

  if (oldDefinition && oldDefinition[mobxPatchedDefinition]) {
    // already patched definition, do not repatch
    return;
  }

  var originalMethod = target[methodName];
  var newDefinition = createDefinition(target, methodName, oldDefinition ? oldDefinition.enumerable : undefined, mixins, originalMethod);
  Object.defineProperty(target, methodName, newDefinition);
}

function createDefinition(target, methodName, enumerable, mixins, originalMethod) {
  var _ref;

  var wrappedFunc = wrapFunction(originalMethod, mixins);
  return _ref = {}, _ref[mobxPatchedDefinition] = true, _ref.get = function get() {
    return wrappedFunc;
  }, _ref.set = function set(value) {
    if (this === target) {
      wrappedFunc = wrapFunction(value, mixins);
    } else {
      // when it is an instance of the prototype/a child prototype patch that particular case again separately
      // since we need to store separate values depending on wether it is the actual instance, the prototype, etc
      // e.g. the method for super might not be the same as the method for the prototype which might be not the same
      // as the method for the instance
      var newDefinition = createDefinition(this, methodName, enumerable, mixins, value);
      Object.defineProperty(this, methodName, newDefinition);
    }
  }, _ref.configurable = true, _ref.enumerable = enumerable, _ref;
}

var mobxAdminProperty = mobx__WEBPACK_IMPORTED_MODULE_2__.$mobx || "$mobx";
var mobxObserverProperty = /*#__PURE__*/newSymbol("isMobXReactObserver");
var mobxIsUnmounted = /*#__PURE__*/newSymbol("isUnmounted");
var skipRenderKey = /*#__PURE__*/newSymbol("skipRender");
var isForcingUpdateKey = /*#__PURE__*/newSymbol("isForcingUpdate");
function makeClassComponentObserver(componentClass) {
  var target = componentClass.prototype;

  if (componentClass[mobxObserverProperty]) {
    var displayName = getDisplayName(target);
    console.warn("The provided component class (" + displayName + ") \n                has already been declared as an observer component.");
  } else {
    componentClass[mobxObserverProperty] = true;
  }

  if (target.componentWillReact) throw new Error("The componentWillReact life-cycle event is no longer supported");

  if (componentClass["__proto__"] !== react__WEBPACK_IMPORTED_MODULE_0__.PureComponent) {
    if (!target.shouldComponentUpdate) target.shouldComponentUpdate = observerSCU;else if (target.shouldComponentUpdate !== observerSCU) // n.b. unequal check, instead of existence check, as @observer might be on superclass as well
      throw new Error("It is not allowed to use shouldComponentUpdate in observer based components.");
  } // this.props and this.state are made observable, just to make sure @computed fields that
  // are defined inside the component, and which rely on state or props, re-compute if state or props change
  // (otherwise the computed wouldn't update and become stale on props change, since props are not observable)
  // However, this solution is not without it's own problems: https://github.com/mobxjs/mobx-react/issues?utf8=%E2%9C%93&q=is%3Aissue+label%3Aobservable-props-or-not+


  makeObservableProp(target, "props");
  makeObservableProp(target, "state");
  var baseRender = target.render;

  target.render = function () {
    return makeComponentReactive.call(this, baseRender);
  };

  patch(target, "componentWillUnmount", function () {
    var _this$render$mobxAdmi;

    if ((0,mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.isUsingStaticRendering)() === true) return;
    (_this$render$mobxAdmi = this.render[mobxAdminProperty]) == null ? void 0 : _this$render$mobxAdmi.dispose();
    this[mobxIsUnmounted] = true;

    if (!this.render[mobxAdminProperty]) {
      // Render may have been hot-swapped and/or overriden by a subclass.
      var _displayName = getDisplayName(this);

      console.warn("The reactive render of an observer class component (" + _displayName + ") \n                was overriden after MobX attached. This may result in a memory leak if the \n                overriden reactive render was not properly disposed.");
    }
  });
  return componentClass;
} // Generates a friendly name for debugging

function getDisplayName(comp) {
  return comp.displayName || comp.name || comp.constructor && (comp.constructor.displayName || comp.constructor.name) || "<component>";
}

function makeComponentReactive(render) {
  var _this = this;

  if ((0,mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.isUsingStaticRendering)() === true) return render.call(this);
  /**
   * If props are shallowly modified, react will render anyway,
   * so atom.reportChanged() should not result in yet another re-render
   */

  setHiddenProp(this, skipRenderKey, false);
  /**
   * forceUpdate will re-assign this.props. We don't want that to cause a loop,
   * so detect these changes
   */

  setHiddenProp(this, isForcingUpdateKey, false);
  var initialName = getDisplayName(this);
  var baseRender = render.bind(this);
  var isRenderingPending = false;
  var reaction = new mobx__WEBPACK_IMPORTED_MODULE_2__.Reaction(initialName + ".render()", function () {
    if (!isRenderingPending) {
      // N.B. Getting here *before mounting* means that a component constructor has side effects (see the relevant test in misc.js)
      // This unidiomatic React usage but React will correctly warn about this so we continue as usual
      // See #85 / Pull #44
      isRenderingPending = true;

      if (_this[mobxIsUnmounted] !== true) {
        var hasError = true;

        try {
          setHiddenProp(_this, isForcingUpdateKey, true);
          if (!_this[skipRenderKey]) react__WEBPACK_IMPORTED_MODULE_0__.Component.prototype.forceUpdate.call(_this);
          hasError = false;
        } finally {
          setHiddenProp(_this, isForcingUpdateKey, false);
          if (hasError) reaction.dispose();
        }
      }
    }
  });
  reaction["reactComponent"] = this;
  reactiveRender[mobxAdminProperty] = reaction;
  this.render = reactiveRender;

  function reactiveRender() {
    isRenderingPending = false;
    var exception = undefined;
    var rendering = undefined;
    reaction.track(function () {
      try {
        rendering = (0,mobx__WEBPACK_IMPORTED_MODULE_2__._allowStateChanges)(false, baseRender);
      } catch (e) {
        exception = e;
      }
    });

    if (exception) {
      throw exception;
    }

    return rendering;
  }

  return reactiveRender.call(this);
}

function observerSCU(nextProps, nextState) {
  if ((0,mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.isUsingStaticRendering)()) {
    console.warn("[mobx-react] It seems that a re-rendering of a React component is triggered while in static (server-side) mode. Please make sure components are rendered only once server-side.");
  } // update on any state changes (as is the default)


  if (this.state !== nextState) {
    return true;
  } // update if props are shallowly not equal, inspired by PureRenderMixin
  // we could return just 'false' here, and avoid the `skipRender` checks etc
  // however, it is nicer if lifecycle events are triggered like usually,
  // so we return true here if props are shallowly modified.


  return !shallowEqual(this.props, nextProps);
}

function makeObservableProp(target, propName) {
  var valueHolderKey = newSymbol("reactProp_" + propName + "_valueHolder");
  var atomHolderKey = newSymbol("reactProp_" + propName + "_atomHolder");

  function getAtom() {
    if (!this[atomHolderKey]) {
      setHiddenProp(this, atomHolderKey, (0,mobx__WEBPACK_IMPORTED_MODULE_2__.createAtom)("reactive " + propName));
    }

    return this[atomHolderKey];
  }

  Object.defineProperty(target, propName, {
    configurable: true,
    enumerable: true,
    get: function get() {
      var prevReadState = false;

      if (mobx__WEBPACK_IMPORTED_MODULE_2__._allowStateReadsStart && mobx__WEBPACK_IMPORTED_MODULE_2__._allowStateReadsEnd) {
        prevReadState = (0,mobx__WEBPACK_IMPORTED_MODULE_2__._allowStateReadsStart)(true);
      }

      getAtom.call(this).reportObserved();

      if (mobx__WEBPACK_IMPORTED_MODULE_2__._allowStateReadsStart && mobx__WEBPACK_IMPORTED_MODULE_2__._allowStateReadsEnd) {
        (0,mobx__WEBPACK_IMPORTED_MODULE_2__._allowStateReadsEnd)(prevReadState);
      }

      return this[valueHolderKey];
    },
    set: function set(v) {
      if (!this[isForcingUpdateKey] && !shallowEqual(this[valueHolderKey], v)) {
        setHiddenProp(this, valueHolderKey, v);
        setHiddenProp(this, skipRenderKey, true);
        getAtom.call(this).reportChanged();
        setHiddenProp(this, skipRenderKey, false);
      } else {
        setHiddenProp(this, valueHolderKey, v);
      }
    }
  });
}

var hasSymbol = typeof Symbol === "function" && Symbol["for"]; // Using react-is had some issues (and operates on elements, not on types), see #608 / #609

var ReactForwardRefSymbol = hasSymbol ? /*#__PURE__*/Symbol["for"]("react.forward_ref") : typeof react__WEBPACK_IMPORTED_MODULE_0__.forwardRef === "function" && /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function (props) {
  return null;
})["$$typeof"];
var ReactMemoSymbol = hasSymbol ? /*#__PURE__*/Symbol["for"]("react.memo") : typeof react__WEBPACK_IMPORTED_MODULE_0__.memo === "function" && /*#__PURE__*/(0,react__WEBPACK_IMPORTED_MODULE_0__.memo)(function (props) {
  return null;
})["$$typeof"];
/**
 * Observer function / decorator
 */

function observer(component) {
  if (component["isMobxInjector"] === true) {
    console.warn("Mobx observer: You are trying to use 'observer' on a component that already has 'inject'. Please apply 'observer' before applying 'inject'");
  }

  if (ReactMemoSymbol && component["$$typeof"] === ReactMemoSymbol) {
    throw new Error("Mobx observer: You are trying to use 'observer' on a function component wrapped in either another observer or 'React.memo'. The observer already applies 'React.memo' for you.");
  } // Unwrap forward refs into `<Observer>` component
  // we need to unwrap the render, because it is the inner render that needs to be tracked,
  // not the ForwardRef HoC


  if (ReactForwardRefSymbol && component["$$typeof"] === ReactForwardRefSymbol) {
    var baseRender = component["render"];
    if (typeof baseRender !== "function") throw new Error("render property of ForwardRef was not a function");
    return (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)(function ObserverForwardRef() {
      var args = arguments;
      return (0,react__WEBPACK_IMPORTED_MODULE_0__.createElement)(mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.Observer, null, function () {
        return baseRender.apply(undefined, args);
      });
    });
  } // Function component


  if (typeof component === "function" && (!component.prototype || !component.prototype.render) && !component["isReactClass"] && !Object.prototype.isPrototypeOf.call(react__WEBPACK_IMPORTED_MODULE_0__.Component, component)) {
    return (0,mobx_react_lite__WEBPACK_IMPORTED_MODULE_1__.observer)(component);
  }

  return makeClassComponentObserver(component);
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

var MobXProviderContext = /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createContext({});
function Provider(props) {
  var children = props.children,
      stores = _objectWithoutPropertiesLoose(props, ["children"]);

  var parentValue = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MobXProviderContext);
  var mutableProviderRef = react__WEBPACK_IMPORTED_MODULE_0__.useRef(_extends({}, parentValue, stores));
  var value = mutableProviderRef.current;

  if (true) {
    var newValue = _extends({}, value, stores); // spread in previous state for the context based stores


    if (!shallowEqual(value, newValue)) {
      throw new Error("MobX Provider: The set of provided stores has changed. See: https://github.com/mobxjs/mobx-react#the-set-of-provided-stores-has-changed-error.");
    }
  }

  return react__WEBPACK_IMPORTED_MODULE_0__.createElement(MobXProviderContext.Provider, {
    value: value
  }, children);
}
Provider.displayName = "MobXProvider";

/**
 * Store Injection
 */

function createStoreInjector(grabStoresFn, component, injectNames, makeReactive) {
  // Support forward refs
  var Injector = react__WEBPACK_IMPORTED_MODULE_0__.forwardRef(function (props, ref) {
    var newProps = _extends({}, props);

    var context = react__WEBPACK_IMPORTED_MODULE_0__.useContext(MobXProviderContext);
    Object.assign(newProps, grabStoresFn(context || {}, newProps) || {});

    if (ref) {
      newProps.ref = ref;
    }

    return react__WEBPACK_IMPORTED_MODULE_0__.createElement(component, newProps);
  });
  if (makeReactive) Injector = observer(Injector);
  Injector["isMobxInjector"] = true; // assigned late to suppress observer warning
  // Static fields from component should be visible on the generated Injector

  copyStaticProperties(component, Injector);
  Injector["wrappedComponent"] = component;
  Injector.displayName = getInjectName(component, injectNames);
  return Injector;
}

function getInjectName(component, injectNames) {
  var displayName;
  var componentName = component.displayName || component.name || component.constructor && component.constructor.name || "Component";
  if (injectNames) displayName = "inject-with-" + injectNames + "(" + componentName + ")";else displayName = "inject(" + componentName + ")";
  return displayName;
}

function grabStoresByName(storeNames) {
  return function (baseStores, nextProps) {
    storeNames.forEach(function (storeName) {
      if (storeName in nextProps // prefer props over stores
      ) return;
      if (!(storeName in baseStores)) throw new Error("MobX injector: Store '" + storeName + "' is not available! Make sure it is provided by some Provider");
      nextProps[storeName] = baseStores[storeName];
    });
    return nextProps;
  };
}
/**
 * higher order component that injects stores to a child.
 * takes either a varargs list of strings, which are stores read from the context,
 * or a function that manually maps the available stores from the context to props:
 * storesToProps(mobxStores, props, context) => newProps
 */


function inject() {
  for (var _len = arguments.length, storeNames = new Array(_len), _key = 0; _key < _len; _key++) {
    storeNames[_key] = arguments[_key];
  }

  if (typeof arguments[0] === "function") {
    var grabStoresFn = arguments[0];
    return function (componentClass) {
      return createStoreInjector(grabStoresFn, componentClass, grabStoresFn.name, true);
    };
  } else {
    return function (componentClass) {
      return createStoreInjector(grabStoresByName(storeNames), componentClass, storeNames.join("-"), false);
    };
  }
}

var protoStoreKey = /*#__PURE__*/newSymbol("disposeOnUnmountProto");
var instStoreKey = /*#__PURE__*/newSymbol("disposeOnUnmountInst");

function runDisposersOnWillUnmount() {
  var _this = this;
  [].concat(this[protoStoreKey] || [], this[instStoreKey] || []).forEach(function (propKeyOrFunction) {
    var prop = typeof propKeyOrFunction === "string" ? _this[propKeyOrFunction] : propKeyOrFunction;

    if (prop !== undefined && prop !== null) {
      if (Array.isArray(prop)) prop.map(function (f) {
        return f();
      });else prop();
    }
  });
}

function disposeOnUnmount(target, propertyKeyOrFunction) {
  if (Array.isArray(propertyKeyOrFunction)) {
    return propertyKeyOrFunction.map(function (fn) {
      return disposeOnUnmount(target, fn);
    });
  }

  var c = Object.getPrototypeOf(target).constructor;
  var c2 = Object.getPrototypeOf(target.constructor); // Special case for react-hot-loader

  var c3 = Object.getPrototypeOf(Object.getPrototypeOf(target));

  if (!(c === react__WEBPACK_IMPORTED_MODULE_0__.Component || c === react__WEBPACK_IMPORTED_MODULE_0__.PureComponent || c2 === react__WEBPACK_IMPORTED_MODULE_0__.Component || c2 === react__WEBPACK_IMPORTED_MODULE_0__.PureComponent || c3 === react__WEBPACK_IMPORTED_MODULE_0__.Component || c3 === react__WEBPACK_IMPORTED_MODULE_0__.PureComponent)) {
    throw new Error("[mobx-react] disposeOnUnmount only supports direct subclasses of React.Component or React.PureComponent.");
  }

  if (typeof propertyKeyOrFunction !== "string" && typeof propertyKeyOrFunction !== "function" && !Array.isArray(propertyKeyOrFunction)) {
    throw new Error("[mobx-react] disposeOnUnmount only works if the parameter is either a property key or a function.");
  } // decorator's target is the prototype, so it doesn't have any instance properties like props


  var isDecorator = typeof propertyKeyOrFunction === "string"; // add property key / function we want run (disposed) to the store

  var componentWasAlreadyModified = !!target[protoStoreKey] || !!target[instStoreKey];
  var store = isDecorator ? // decorators are added to the prototype store
  target[protoStoreKey] || (target[protoStoreKey] = []) : // functions are added to the instance store
  target[instStoreKey] || (target[instStoreKey] = []);
  store.push(propertyKeyOrFunction); // tweak the component class componentWillUnmount if not done already

  if (!componentWasAlreadyModified) {
    patch(target, "componentWillUnmount", runDisposersOnWillUnmount);
  } // return the disposer as is if invoked as a non decorator


  if (typeof propertyKeyOrFunction !== "string") {
    return propertyKeyOrFunction;
  }
}

function createChainableTypeChecker(validator) {
  function checkType(isRequired, props, propName, componentName, location, propFullName) {
    for (var _len = arguments.length, rest = new Array(_len > 6 ? _len - 6 : 0), _key = 6; _key < _len; _key++) {
      rest[_key - 6] = arguments[_key];
    }

    return (0,mobx__WEBPACK_IMPORTED_MODULE_2__.untracked)(function () {
      componentName = componentName || "<<anonymous>>";
      propFullName = propFullName || propName;

      if (props[propName] == null) {
        if (isRequired) {
          var actual = props[propName] === null ? "null" : "undefined";
          return new Error("The " + location + " `" + propFullName + "` is marked as required " + "in `" + componentName + "`, but its value is `" + actual + "`.");
        }

        return null;
      } else {
        // @ts-ignore rest arg is necessary for some React internals - fails tests otherwise
        return validator.apply(void 0, [props, propName, componentName, location, propFullName].concat(rest));
      }
    });
  }

  var chainedCheckType = checkType.bind(null, false); // Add isRequired to satisfy Requirable

  chainedCheckType.isRequired = checkType.bind(null, true);
  return chainedCheckType;
} // Copied from React.PropTypes


function isSymbol(propType, propValue) {
  // Native Symbol.
  if (propType === "symbol") {
    return true;
  } // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'


  if (propValue["@@toStringTag"] === "Symbol") {
    return true;
  } // Fallback for non-spec compliant Symbols which are polyfilled.


  if (typeof Symbol === "function" && propValue instanceof Symbol) {
    return true;
  }

  return false;
} // Copied from React.PropTypes


function getPropType(propValue) {
  var propType = typeof propValue;

  if (Array.isArray(propValue)) {
    return "array";
  }

  if (propValue instanceof RegExp) {
    // Old webkits (at least until Android 4.0) return 'function' rather than
    // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
    // passes PropTypes.object.
    return "object";
  }

  if (isSymbol(propType, propValue)) {
    return "symbol";
  }

  return propType;
} // This handles more types than `getPropType`. Only used for error messages.
// Copied from React.PropTypes


function getPreciseType(propValue) {
  var propType = getPropType(propValue);

  if (propType === "object") {
    if (propValue instanceof Date) {
      return "date";
    } else if (propValue instanceof RegExp) {
      return "regexp";
    }
  }

  return propType;
}

function createObservableTypeCheckerCreator(allowNativeType, mobxType) {
  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
    return (0,mobx__WEBPACK_IMPORTED_MODULE_2__.untracked)(function () {
      if (allowNativeType) {
        if (getPropType(props[propName]) === mobxType.toLowerCase()) return null;
      }

      var mobxChecker;

      switch (mobxType) {
        case "Array":
          mobxChecker = mobx__WEBPACK_IMPORTED_MODULE_2__.isObservableArray;
          break;

        case "Object":
          mobxChecker = mobx__WEBPACK_IMPORTED_MODULE_2__.isObservableObject;
          break;

        case "Map":
          mobxChecker = mobx__WEBPACK_IMPORTED_MODULE_2__.isObservableMap;
          break;

        default:
          throw new Error("Unexpected mobxType: " + mobxType);
      }

      var propValue = props[propName];

      if (!mobxChecker(propValue)) {
        var preciseType = getPreciseType(propValue);
        var nativeTypeExpectationMessage = allowNativeType ? " or javascript `" + mobxType.toLowerCase() + "`" : "";
        return new Error("Invalid prop `" + propFullName + "` of type `" + preciseType + "` supplied to" + " `" + componentName + "`, expected `mobx.Observable" + mobxType + "`" + nativeTypeExpectationMessage + ".");
      }

      return null;
    });
  });
}

function createObservableArrayOfTypeChecker(allowNativeType, typeChecker) {
  return createChainableTypeChecker(function (props, propName, componentName, location, propFullName) {
    for (var _len2 = arguments.length, rest = new Array(_len2 > 5 ? _len2 - 5 : 0), _key2 = 5; _key2 < _len2; _key2++) {
      rest[_key2 - 5] = arguments[_key2];
    }

    return (0,mobx__WEBPACK_IMPORTED_MODULE_2__.untracked)(function () {
      if (typeof typeChecker !== "function") {
        return new Error("Property `" + propFullName + "` of component `" + componentName + "` has " + "invalid PropType notation.");
      } else {
        var error = createObservableTypeCheckerCreator(allowNativeType, "Array")(props, propName, componentName, location, propFullName);
        if (error instanceof Error) return error;
        var propValue = props[propName];

        for (var i = 0; i < propValue.length; i++) {
          error = typeChecker.apply(void 0, [propValue, i, componentName, location, propFullName + "[" + i + "]"].concat(rest));
          if (error instanceof Error) return error;
        }

        return null;
      }
    });
  });
}

var observableArray = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Array");
var observableArrayOf = /*#__PURE__*/createObservableArrayOfTypeChecker.bind(null, false);
var observableMap = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Map");
var observableObject = /*#__PURE__*/createObservableTypeCheckerCreator(false, "Object");
var arrayOrObservableArray = /*#__PURE__*/createObservableTypeCheckerCreator(true, "Array");
var arrayOrObservableArrayOf = /*#__PURE__*/createObservableArrayOfTypeChecker.bind(null, true);
var objectOrObservableObject = /*#__PURE__*/createObservableTypeCheckerCreator(true, "Object");
var PropTypes = {
  observableArray: observableArray,
  observableArrayOf: observableArrayOf,
  observableMap: observableMap,
  observableObject: observableObject,
  arrayOrObservableArray: arrayOrObservableArray,
  arrayOrObservableArrayOf: arrayOrObservableArrayOf,
  objectOrObservableObject: objectOrObservableObject
};

if (!react__WEBPACK_IMPORTED_MODULE_0__.Component) throw new Error("mobx-react requires React to be available");
if (!mobx__WEBPACK_IMPORTED_MODULE_2__.observable) throw new Error("mobx-react requires mobx to be available");


//# sourceMappingURL=mobxreact.esm.js.map


/***/ }),

/***/ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js":
/*!********************************************************!*\
  !*** ./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "$mobx": () => (/* binding */ $mobx),
/* harmony export */   "FlowCancellationError": () => (/* binding */ FlowCancellationError),
/* harmony export */   "ObservableMap": () => (/* binding */ ObservableMap),
/* harmony export */   "ObservableSet": () => (/* binding */ ObservableSet),
/* harmony export */   "Reaction": () => (/* binding */ Reaction),
/* harmony export */   "_allowStateChanges": () => (/* binding */ allowStateChanges),
/* harmony export */   "_allowStateChangesInsideComputed": () => (/* binding */ runInAction),
/* harmony export */   "_allowStateReadsEnd": () => (/* binding */ allowStateReadsEnd),
/* harmony export */   "_allowStateReadsStart": () => (/* binding */ allowStateReadsStart),
/* harmony export */   "_autoAction": () => (/* binding */ autoAction),
/* harmony export */   "_endAction": () => (/* binding */ _endAction),
/* harmony export */   "_getAdministration": () => (/* binding */ getAdministration),
/* harmony export */   "_getGlobalState": () => (/* binding */ getGlobalState),
/* harmony export */   "_interceptReads": () => (/* binding */ interceptReads),
/* harmony export */   "_isComputingDerivation": () => (/* binding */ isComputingDerivation),
/* harmony export */   "_resetGlobalState": () => (/* binding */ resetGlobalState),
/* harmony export */   "_startAction": () => (/* binding */ _startAction),
/* harmony export */   "action": () => (/* binding */ action),
/* harmony export */   "autorun": () => (/* binding */ autorun),
/* harmony export */   "comparer": () => (/* binding */ comparer),
/* harmony export */   "computed": () => (/* binding */ computed),
/* harmony export */   "configure": () => (/* binding */ configure),
/* harmony export */   "createAtom": () => (/* binding */ createAtom),
/* harmony export */   "defineProperty": () => (/* binding */ apiDefineProperty),
/* harmony export */   "entries": () => (/* binding */ entries),
/* harmony export */   "extendObservable": () => (/* binding */ extendObservable),
/* harmony export */   "flow": () => (/* binding */ flow),
/* harmony export */   "flowResult": () => (/* binding */ flowResult),
/* harmony export */   "get": () => (/* binding */ get),
/* harmony export */   "getAtom": () => (/* binding */ getAtom),
/* harmony export */   "getDebugName": () => (/* binding */ getDebugName),
/* harmony export */   "getDependencyTree": () => (/* binding */ getDependencyTree),
/* harmony export */   "getObserverTree": () => (/* binding */ getObserverTree),
/* harmony export */   "has": () => (/* binding */ has),
/* harmony export */   "intercept": () => (/* binding */ intercept),
/* harmony export */   "isAction": () => (/* binding */ isAction),
/* harmony export */   "isBoxedObservable": () => (/* binding */ isObservableValue),
/* harmony export */   "isComputed": () => (/* binding */ isComputed),
/* harmony export */   "isComputedProp": () => (/* binding */ isComputedProp),
/* harmony export */   "isFlow": () => (/* binding */ isFlow),
/* harmony export */   "isFlowCancellationError": () => (/* binding */ isFlowCancellationError),
/* harmony export */   "isObservable": () => (/* binding */ isObservable),
/* harmony export */   "isObservableArray": () => (/* binding */ isObservableArray),
/* harmony export */   "isObservableMap": () => (/* binding */ isObservableMap),
/* harmony export */   "isObservableObject": () => (/* binding */ isObservableObject),
/* harmony export */   "isObservableProp": () => (/* binding */ isObservableProp),
/* harmony export */   "isObservableSet": () => (/* binding */ isObservableSet),
/* harmony export */   "keys": () => (/* binding */ keys),
/* harmony export */   "makeAutoObservable": () => (/* binding */ makeAutoObservable),
/* harmony export */   "makeObservable": () => (/* binding */ makeObservable),
/* harmony export */   "observable": () => (/* binding */ observable),
/* harmony export */   "observe": () => (/* binding */ observe),
/* harmony export */   "onBecomeObserved": () => (/* binding */ onBecomeObserved),
/* harmony export */   "onBecomeUnobserved": () => (/* binding */ onBecomeUnobserved),
/* harmony export */   "onReactionError": () => (/* binding */ onReactionError),
/* harmony export */   "override": () => (/* binding */ override),
/* harmony export */   "ownKeys": () => (/* binding */ apiOwnKeys),
/* harmony export */   "reaction": () => (/* binding */ reaction),
/* harmony export */   "remove": () => (/* binding */ remove),
/* harmony export */   "runInAction": () => (/* binding */ runInAction),
/* harmony export */   "set": () => (/* binding */ set),
/* harmony export */   "spy": () => (/* binding */ spy),
/* harmony export */   "toJS": () => (/* binding */ toJS),
/* harmony export */   "trace": () => (/* binding */ trace),
/* harmony export */   "transaction": () => (/* binding */ transaction),
/* harmony export */   "untracked": () => (/* binding */ untracked),
/* harmony export */   "values": () => (/* binding */ values),
/* harmony export */   "when": () => (/* binding */ when)
/* harmony export */ });
var niceErrors = {
  0: "Invalid value for configuration 'enforceActions', expected 'never', 'always' or 'observed'",
  1: function _(annotationType, key) {
    return "Cannot apply '" + annotationType + "' to '" + key.toString() + "': Field not found.";
  },

  /*
  2(prop) {
      return `invalid decorator for '${prop.toString()}'`
  },
  3(prop) {
      return `Cannot decorate '${prop.toString()}': action can only be used on properties with a function value.`
  },
  4(prop) {
      return `Cannot decorate '${prop.toString()}': computed can only be used on getter properties.`
  },
  */
  5: "'keys()' can only be used on observable objects, arrays, sets and maps",
  6: "'values()' can only be used on observable objects, arrays, sets and maps",
  7: "'entries()' can only be used on observable objects, arrays and maps",
  8: "'set()' can only be used on observable objects, arrays and maps",
  9: "'remove()' can only be used on observable objects, arrays and maps",
  10: "'has()' can only be used on observable objects, arrays and maps",
  11: "'get()' can only be used on observable objects, arrays and maps",
  12: "Invalid annotation",
  13: "Dynamic observable objects cannot be frozen",
  14: "Intercept handlers should return nothing or a change object",
  15: "Observable arrays cannot be frozen",
  16: "Modification exception: the internal structure of an observable array was changed.",
  17: function _(index, length) {
    return "[mobx.array] Index out of bounds, " + index + " is larger than " + length;
  },
  18: "mobx.map requires Map polyfill for the current browser. Check babel-polyfill or core-js/es6/map.js",
  19: function _(other) {
    return "Cannot initialize from classes that inherit from Map: " + other.constructor.name;
  },
  20: function _(other) {
    return "Cannot initialize map from " + other;
  },
  21: function _(dataStructure) {
    return "Cannot convert to map from '" + dataStructure + "'";
  },
  22: "mobx.set requires Set polyfill for the current browser. Check babel-polyfill or core-js/es6/set.js",
  23: "It is not possible to get index atoms from arrays",
  24: function _(thing) {
    return "Cannot obtain administration from " + thing;
  },
  25: function _(property, name) {
    return "the entry '" + property + "' does not exist in the observable map '" + name + "'";
  },
  26: "please specify a property",
  27: function _(property, name) {
    return "no observable property '" + property.toString() + "' found on the observable object '" + name + "'";
  },
  28: function _(thing) {
    return "Cannot obtain atom from " + thing;
  },
  29: "Expecting some object",
  30: "invalid action stack. did you forget to finish an action?",
  31: "missing option for computed: get",
  32: function _(name, derivation) {
    return "Cycle detected in computation " + name + ": " + derivation;
  },
  33: function _(name) {
    return "The setter of computed value '" + name + "' is trying to update itself. Did you intend to update an _observable_ value, instead of the computed property?";
  },
  34: function _(name) {
    return "[ComputedValue '" + name + "'] It is not possible to assign a new value to a computed value.";
  },
  35: "There are multiple, different versions of MobX active. Make sure MobX is loaded only once or use `configure({ isolateGlobalState: true })`",
  36: "isolateGlobalState should be called before MobX is running any reactions",
  37: function _(method) {
    return "[mobx] `observableArray." + method + "()` mutates the array in-place, which is not allowed inside a derivation. Use `array.slice()." + method + "()` instead";
  },
  38: "'ownKeys()' can only be used on observable objects",
  39: "'defineProperty()' can only be used on observable objects"
};
var errors =  true ? niceErrors : 0;
function die(error) {
  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  if (true) {
    var e = typeof error === "string" ? error : errors[error];
    if (typeof e === "function") e = e.apply(null, args);
    throw new Error("[MobX] " + e);
  }

  throw new Error(typeof error === "number" ? "[MobX] minified error nr: " + error + (args.length ? " " + args.map(String).join(",") : "") + ". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts" : "[MobX] " + error);
}

var mockGlobal = {};
function getGlobal() {
  if (typeof globalThis !== "undefined") {
    return globalThis;
  }

  if (typeof window !== "undefined") {
    return window;
  }

  if (typeof __webpack_require__.g !== "undefined") {
    return __webpack_require__.g;
  }

  if (typeof self !== "undefined") {
    return self;
  }

  return mockGlobal;
}

var assign = Object.assign;
var getDescriptor = Object.getOwnPropertyDescriptor;
var defineProperty = Object.defineProperty;
var objectPrototype = Object.prototype;
var EMPTY_ARRAY = [];
Object.freeze(EMPTY_ARRAY);
var EMPTY_OBJECT = {};
Object.freeze(EMPTY_OBJECT);
var hasProxy = typeof Proxy !== "undefined";
var plainObjectString = /*#__PURE__*/Object.toString();
function assertProxies() {
  if (!hasProxy) {
    die( true ? "`Proxy` objects are not available in the current environment. Please configure MobX to enable a fallback implementation.`" : 0);
  }
}
function warnAboutProxyRequirement(msg) {
  if ( true && globalState.verifyProxies) {
    die("MobX is currently configured to be able to run in ES5 mode, but in ES5 MobX won't be able to " + msg);
  }
}
function getNextId() {
  return ++globalState.mobxGuid;
}
/**
 * Makes sure that the provided function is invoked at most once.
 */

function once(func) {
  var invoked = false;
  return function () {
    if (invoked) return;
    invoked = true;
    return func.apply(this, arguments);
  };
}
var noop = function noop() {};
function isFunction(fn) {
  return typeof fn === "function";
}
function isStringish(value) {
  var t = typeof value;

  switch (t) {
    case "string":
    case "symbol":
    case "number":
      return true;
  }

  return false;
}
function isObject(value) {
  return value !== null && typeof value === "object";
}
function isPlainObject(value) {
  var _proto$constructor;

  if (!isObject(value)) return false;
  var proto = Object.getPrototypeOf(value);
  if (proto == null) return true;
  return ((_proto$constructor = proto.constructor) == null ? void 0 : _proto$constructor.toString()) === plainObjectString;
} // https://stackoverflow.com/a/37865170

function isGenerator(obj) {
  var constructor = obj == null ? void 0 : obj.constructor;
  if (!constructor) return false;
  if ("GeneratorFunction" === constructor.name || "GeneratorFunction" === constructor.displayName) return true;
  return false;
}
function addHiddenProp(object, propName, value) {
  defineProperty(object, propName, {
    enumerable: false,
    writable: true,
    configurable: true,
    value: value
  });
}
function addHiddenFinalProp(object, propName, value) {
  defineProperty(object, propName, {
    enumerable: false,
    writable: false,
    configurable: true,
    value: value
  });
}
function createInstanceofPredicate(name, theClass) {
  var propName = "isMobX" + name;
  theClass.prototype[propName] = true;
  return function (x) {
    return isObject(x) && x[propName] === true;
  };
}
function isES6Map(thing) {
  return thing instanceof Map;
}
function isES6Set(thing) {
  return thing instanceof Set;
}
var hasGetOwnPropertySymbols = typeof Object.getOwnPropertySymbols !== "undefined";
/**
 * Returns the following: own enumerable keys and symbols.
 */

function getPlainObjectKeys(object) {
  var keys = Object.keys(object); // Not supported in IE, so there are not going to be symbol props anyway...

  if (!hasGetOwnPropertySymbols) return keys;
  var symbols = Object.getOwnPropertySymbols(object);
  if (!symbols.length) return keys;
  return [].concat(keys, symbols.filter(function (s) {
    return objectPrototype.propertyIsEnumerable.call(object, s);
  }));
} // From Immer utils
// Returns all own keys, including non-enumerable and symbolic

var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : hasGetOwnPropertySymbols ? function (obj) {
  return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj));
} :
/* istanbul ignore next */
Object.getOwnPropertyNames;
function stringifyKey(key) {
  if (typeof key === "string") return key;
  if (typeof key === "symbol") return key.toString();
  return new String(key).toString();
}
function toPrimitive(value) {
  return value === null ? null : typeof value === "object" ? "" + value : value;
}
function hasProp(target, prop) {
  return objectPrototype.hasOwnProperty.call(target, prop);
} // From Immer utils

var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors(target) {
  // Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274
  var res = {}; // Note: without polyfill for ownKeys, symbols won't be picked up

  ownKeys(target).forEach(function (key) {
    res[key] = getDescriptor(target, key);
  });
  return res;
};

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  subClass.__proto__ = superClass;
}

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it;

  if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }

    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  it = o[Symbol.iterator]();
  return it.next.bind(it);
}

var storedAnnotationsSymbol = /*#__PURE__*/Symbol("mobx-stored-annotations");
/**
 * Creates a function that acts as
 * - decorator
 * - annotation object
 */

function createDecoratorAnnotation(annotation) {
  function decorator(target, property) {
    storeAnnotation(target, property, annotation);
  }

  return Object.assign(decorator, annotation);
}
/**
 * Stores annotation to prototype,
 * so it can be inspected later by `makeObservable` called from constructor
 */

function storeAnnotation(prototype, key, annotation) {
  if (!hasProp(prototype, storedAnnotationsSymbol)) {
    addHiddenProp(prototype, storedAnnotationsSymbol, _extends({}, prototype[storedAnnotationsSymbol]));
  } // @override must override something


  if ( true && isOverride(annotation) && !hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    die("'" + fieldName + "' is decorated with 'override', " + "but no such decorated member was found on prototype.");
  } // Cannot re-decorate


  assertNotDecorated(prototype, annotation, key); // Ignore override

  if (!isOverride(annotation)) {
    prototype[storedAnnotationsSymbol][key] = annotation;
  }
}

function assertNotDecorated(prototype, annotation, key) {
  if ( true && !isOverride(annotation) && hasProp(prototype[storedAnnotationsSymbol], key)) {
    var fieldName = prototype.constructor.name + ".prototype." + key.toString();
    var currentAnnotationType = prototype[storedAnnotationsSymbol][key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '@" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already decorated with '@" + currentAnnotationType + "'.") + "\nRe-decorating fields is not allowed." + "\nUse '@override' decorator for methods overriden by subclass.");
  }
}
/**
 * Collects annotations from prototypes and stores them on target (instance)
 */


function collectStoredAnnotations(target) {
  if (!hasProp(target, storedAnnotationsSymbol)) {
    if ( true && !target[storedAnnotationsSymbol]) {
      die("No annotations were passed to makeObservable, but no decorated members have been found either");
    } // We need a copy as we will remove annotation from the list once it's applied.


    addHiddenProp(target, storedAnnotationsSymbol, _extends({}, target[storedAnnotationsSymbol]));
  }

  return target[storedAnnotationsSymbol];
}

var $mobx = /*#__PURE__*/Symbol("mobx administration");
var Atom = /*#__PURE__*/function () {
  // for effective unobserving. BaseAtom has true, for extra optimization, so its onBecomeUnobserved never gets called, because it's not needed

  /**
   * Create a new atom. For debugging purposes it is recommended to give it a name.
   * The onBecomeObserved and onBecomeUnobserved callbacks can be used for resource management.
   */
  function Atom(name_) {
    if (name_ === void 0) {
      name_ =  true ? "Atom@" + getNextId() : 0;
    }

    this.name_ = void 0;
    this.isPendingUnobservation_ = false;
    this.isBeingObserved_ = false;
    this.observers_ = new Set();
    this.diffValue_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.NOT_TRACKING_;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    this.name_ = name_;
  } // onBecomeObservedListeners


  var _proto = Atom.prototype;

  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function (listener) {
        return listener();
      });
    }
  };

  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function (listener) {
        return listener();
      });
    }
  }
  /**
   * Invoke this method to notify mobx that your atom has been used somehow.
   * Returns true if there is currently a reactive context.
   */
  ;

  _proto.reportObserved = function reportObserved$1() {
    return reportObserved(this);
  }
  /**
   * Invoke this method _after_ this method has changed to signal mobx that all its observers should invalidate.
   */
  ;

  _proto.reportChanged = function reportChanged() {
    startBatch();
    propagateChanged(this);
    endBatch();
  };

  _proto.toString = function toString() {
    return this.name_;
  };

  return Atom;
}();
var isAtom = /*#__PURE__*/createInstanceofPredicate("Atom", Atom);
function createAtom(name, onBecomeObservedHandler, onBecomeUnobservedHandler) {
  if (onBecomeObservedHandler === void 0) {
    onBecomeObservedHandler = noop;
  }

  if (onBecomeUnobservedHandler === void 0) {
    onBecomeUnobservedHandler = noop;
  }

  var atom = new Atom(name); // default `noop` listener will not initialize the hook Set

  if (onBecomeObservedHandler !== noop) {
    onBecomeObserved(atom, onBecomeObservedHandler);
  }

  if (onBecomeUnobservedHandler !== noop) {
    onBecomeUnobserved(atom, onBecomeUnobservedHandler);
  }

  return atom;
}

function identityComparer(a, b) {
  return a === b;
}

function structuralComparer(a, b) {
  return deepEqual(a, b);
}

function shallowComparer(a, b) {
  return deepEqual(a, b, 1);
}

function defaultComparer(a, b) {
  if (Object.is) return Object.is(a, b);
  return a === b ? a !== 0 || 1 / a === 1 / b : a !== a && b !== b;
}

var comparer = {
  identity: identityComparer,
  structural: structuralComparer,
  "default": defaultComparer,
  shallow: shallowComparer
};

function deepEnhancer(v, _, name) {
  // it is an observable already, done
  if (isObservable(v)) return v; // something that can be converted and mutated?

  if (Array.isArray(v)) return observable.array(v, {
    name: name
  });
  if (isPlainObject(v)) return observable.object(v, undefined, {
    name: name
  });
  if (isES6Map(v)) return observable.map(v, {
    name: name
  });
  if (isES6Set(v)) return observable.set(v, {
    name: name
  });

  if (typeof v === "function" && !isAction(v) && !isFlow(v)) {
    if (isGenerator(v)) {
      return flow(v);
    } else {
      return autoAction(name, v);
    }
  }

  return v;
}
function shallowEnhancer(v, _, name) {
  if (v === undefined || v === null) return v;
  if (isObservableObject(v) || isObservableArray(v) || isObservableMap(v) || isObservableSet(v)) return v;
  if (Array.isArray(v)) return observable.array(v, {
    name: name,
    deep: false
  });
  if (isPlainObject(v)) return observable.object(v, undefined, {
    name: name,
    deep: false
  });
  if (isES6Map(v)) return observable.map(v, {
    name: name,
    deep: false
  });
  if (isES6Set(v)) return observable.set(v, {
    name: name,
    deep: false
  });
  if (true) die("The shallow modifier / decorator can only used in combination with arrays, objects, maps and sets");
}
function referenceEnhancer(newValue) {
  // never turn into an observable
  return newValue;
}
function refStructEnhancer(v, oldValue) {
  if ( true && isObservable(v)) die("observable.struct should not be used with observable values");
  if (deepEqual(v, oldValue)) return oldValue;
  return v;
}

var OVERRIDE = "override";
var override = /*#__PURE__*/createDecoratorAnnotation({
  annotationType_: OVERRIDE,
  make_: make_,
  extend_: extend_
});
function isOverride(annotation) {
  return annotation.annotationType_ === OVERRIDE;
}

function make_(adm, key) {
  // Must not be plain object
  if ( true && adm.isPlainObject_) {
    die("Cannot apply '" + this.annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + this.annotationType_ + "' cannot be used on plain objects."));
  } // Must override something


  if ( true && !hasProp(adm.appliedAnnotations_, key)) {
    die("'" + adm.name_ + "." + key.toString() + "' is annotated with '" + this.annotationType_ + "', " + "but no such annotated member was found on prototype.");
  }

  return 0
  /* Cancel */
  ;
}

function extend_(adm, key, descriptor, proxyTrap) {
  die("'" + this.annotationType_ + "' can only be used with 'makeObservable'");
}

function createActionAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$1,
    extend_: extend_$1
  };
}

function make_$1(adm, key, descriptor, source) {
  var _this$options_;

  // bound
  if ((_this$options_ = this.options_) == null ? void 0 : _this$options_.bound) {
    return this.extend_(adm, key, descriptor, false) === null ? 0
    /* Cancel */
    : 1
    /* Break */
    ;
  } // own


  if (source === adm.target_) {
    return this.extend_(adm, key, descriptor, false) === null ? 0
    /* Cancel */
    : 2
    /* Continue */
    ;
  } // prototype


  if (isAction(descriptor.value)) {
    // A prototype could have been annotated already by other constructor,
    // rest of the proto chain must be annotated already
    return 1
    /* Break */
    ;
  }

  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor, false);
  defineProperty(source, key, actionDescriptor);
  return 2
  /* Continue */
  ;
}

function extend_$1(adm, key, descriptor, proxyTrap) {
  var actionDescriptor = createActionDescriptor(adm, this, key, descriptor);
  return adm.defineProperty_(key, actionDescriptor, proxyTrap);
}

function assertActionDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;

  if ( true && !isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a function value."));
  }
}

function createActionDescriptor(adm, annotation, key, descriptor, // provides ability to disable safeDescriptors for prototypes
safeDescriptors) {
  var _annotation$options_, _annotation$options_$, _annotation$options_2, _annotation$options_$2, _annotation$options_3;

  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }

  assertActionDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;

  if ((_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.bound) {
    var _adm$proxy_;

    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }

  return {
    value: createAction((_annotation$options_$ = (_annotation$options_2 = annotation.options_) == null ? void 0 : _annotation$options_2.name) != null ? _annotation$options_$ : key.toString(), value, (_annotation$options_$2 = (_annotation$options_3 = annotation.options_) == null ? void 0 : _annotation$options_3.autoAction) != null ? _annotation$options_$2 : false),
    // Non-configurable for classes
    // prevents accidental field redefinition in subclass
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
    enumerable: false,
    // Non-obsevable, therefore non-writable
    // Also prevents rewriting in subclass constructor
    writable: safeDescriptors ? false : true
  };
}

function createFlowAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$2,
    extend_: extend_$2
  };
}

function make_$2(adm, key, descriptor, source) {
  var _this$options_;

  // own
  if (source === adm.target_) {
    return this.extend_(adm, key, descriptor, false) === null ? 0
    /* Cancel */
    : 2
    /* Continue */
    ;
  } // prototype
  // bound - must annotate protos to support super.flow()


  if (((_this$options_ = this.options_) == null ? void 0 : _this$options_.bound) && !isFlow(adm.target_[key])) {
    if (this.extend_(adm, key, descriptor, false) === null) return 0
    /* Cancel */
    ;
  }

  if (isFlow(descriptor.value)) {
    // A prototype could have been annotated already by other constructor,
    // rest of the proto chain must be annotated already
    return 1
    /* Break */
    ;
  }

  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, false, false);
  defineProperty(source, key, flowDescriptor);
  return 2
  /* Continue */
  ;
}

function extend_$2(adm, key, descriptor, proxyTrap) {
  var _this$options_2;

  var flowDescriptor = createFlowDescriptor(adm, this, key, descriptor, (_this$options_2 = this.options_) == null ? void 0 : _this$options_2.bound);
  return adm.defineProperty_(key, flowDescriptor, proxyTrap);
}

function assertFlowDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var value = _ref2.value;

  if ( true && !isFunction(value)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on properties with a generator function value."));
  }
}

function createFlowDescriptor(adm, annotation, key, descriptor, bound, // provides ability to disable safeDescriptors for prototypes
safeDescriptors) {
  if (safeDescriptors === void 0) {
    safeDescriptors = globalState.safeDescriptors;
  }

  assertFlowDescriptor(adm, annotation, key, descriptor);
  var value = descriptor.value;

  if (bound) {
    var _adm$proxy_;

    value = value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }

  return {
    value: flow(value),
    // Non-configurable for classes
    // prevents accidental field redefinition in subclass
    configurable: safeDescriptors ? adm.isPlainObject_ : true,
    // https://github.com/mobxjs/mobx/pull/2641#issuecomment-737292058
    enumerable: false,
    // Non-obsevable, therefore non-writable
    // Also prevents rewriting in subclass constructor
    writable: safeDescriptors ? false : true
  };
}

function createComputedAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$3,
    extend_: extend_$3
  };
}

function make_$3(adm, key, descriptor) {
  return this.extend_(adm, key, descriptor, false) === null ? 0
  /* Cancel */
  : 1
  /* Break */
  ;
}

function extend_$3(adm, key, descriptor, proxyTrap) {
  assertComputedDescriptor(adm, this, key, descriptor);
  return adm.defineComputedProperty_(key, _extends({}, this.options_, {
    get: descriptor.get,
    set: descriptor.set
  }), proxyTrap);
}

function assertComputedDescriptor(adm, _ref, key, _ref2) {
  var annotationType_ = _ref.annotationType_;
  var get = _ref2.get;

  if ( true && !get) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' can only be used on getter(+setter) properties."));
  }
}

function createObservableAnnotation(name, options) {
  return {
    annotationType_: name,
    options_: options,
    make_: make_$4,
    extend_: extend_$4
  };
}

function make_$4(adm, key, descriptor) {
  return this.extend_(adm, key, descriptor, false) === null ? 0
  /* Cancel */
  : 1
  /* Break */
  ;
}

function extend_$4(adm, key, descriptor, proxyTrap) {
  var _this$options_$enhanc, _this$options_;

  assertObservableDescriptor(adm, this, key, descriptor);
  return adm.defineObservableProperty_(key, descriptor.value, (_this$options_$enhanc = (_this$options_ = this.options_) == null ? void 0 : _this$options_.enhancer) != null ? _this$options_$enhanc : deepEnhancer, proxyTrap);
}

function assertObservableDescriptor(adm, _ref, key, descriptor) {
  var annotationType_ = _ref.annotationType_;

  if ( true && !("value" in descriptor)) {
    die("Cannot apply '" + annotationType_ + "' to '" + adm.name_ + "." + key.toString() + "':" + ("\n'" + annotationType_ + "' cannot be used on getter/setter properties"));
  }
}

var AUTO = "true";
var autoAnnotation = /*#__PURE__*/createAutoAnnotation();
function createAutoAnnotation(options) {
  return {
    annotationType_: AUTO,
    options_: options,
    make_: make_$5,
    extend_: extend_$5
  };
}

function make_$5(adm, key, descriptor, source) {
  var _this$options_3, _this$options_4;

  // getter -> computed
  if (descriptor.get) {
    return computed.make_(adm, key, descriptor, source);
  } // lone setter -> action setter


  if (descriptor.set) {
    // TODO make action applicable to setter and delegate to action.make_
    var set = createAction(key.toString(), descriptor.set); // own

    if (source === adm.target_) {
      return adm.defineProperty_(key, {
        configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
        set: set
      }) === null ? 0
      /* Cancel */
      : 2
      /* Continue */
      ;
    } // proto


    defineProperty(source, key, {
      configurable: true,
      set: set
    });
    return 2
    /* Continue */
    ;
  } // function on proto -> autoAction/flow


  if (source !== adm.target_ && typeof descriptor.value === "function") {
    var _this$options_2;

    if (isGenerator(descriptor.value)) {
      var _this$options_;

      var flowAnnotation = ((_this$options_ = this.options_) == null ? void 0 : _this$options_.autoBind) ? flow.bound : flow;
      return flowAnnotation.make_(adm, key, descriptor, source);
    }

    var actionAnnotation = ((_this$options_2 = this.options_) == null ? void 0 : _this$options_2.autoBind) ? autoAction.bound : autoAction;
    return actionAnnotation.make_(adm, key, descriptor, source);
  } // other -> observable
  // Copy props from proto as well, see test:
  // "decorate should work with Object.create"


  var observableAnnotation = ((_this$options_3 = this.options_) == null ? void 0 : _this$options_3.deep) === false ? observable.ref : observable; // if function respect autoBind option

  if (typeof descriptor.value === "function" && ((_this$options_4 = this.options_) == null ? void 0 : _this$options_4.autoBind)) {
    var _adm$proxy_;

    descriptor.value = descriptor.value.bind((_adm$proxy_ = adm.proxy_) != null ? _adm$proxy_ : adm.target_);
  }

  return observableAnnotation.make_(adm, key, descriptor, source);
}

function extend_$5(adm, key, descriptor, proxyTrap) {
  var _this$options_5, _this$options_6;

  // getter -> computed
  if (descriptor.get) {
    return computed.extend_(adm, key, descriptor, proxyTrap);
  } // lone setter -> action setter


  if (descriptor.set) {
    // TODO make action applicable to setter and delegate to action.extend_
    return adm.defineProperty_(key, {
      configurable: globalState.safeDescriptors ? adm.isPlainObject_ : true,
      set: createAction(key.toString(), descriptor.set)
    }, proxyTrap);
  } // other -> observable
  // if function respect autoBind option


  if (typeof descriptor.value === "function" && ((_this$options_5 = this.options_) == null ? void 0 : _this$options_5.autoBind)) {
    var _adm$proxy_2;

    descriptor.value = descriptor.value.bind((_adm$proxy_2 = adm.proxy_) != null ? _adm$proxy_2 : adm.target_);
  }

  var observableAnnotation = ((_this$options_6 = this.options_) == null ? void 0 : _this$options_6.deep) === false ? observable.ref : observable;
  return observableAnnotation.extend_(adm, key, descriptor, proxyTrap);
}

var OBSERVABLE = "observable";
var OBSERVABLE_REF = "observable.ref";
var OBSERVABLE_SHALLOW = "observable.shallow";
var OBSERVABLE_STRUCT = "observable.struct"; // Predefined bags of create observable options, to avoid allocating temporarily option objects
// in the majority of cases

var defaultCreateObservableOptions = {
  deep: true,
  name: undefined,
  defaultDecorator: undefined,
  proxy: true
};
Object.freeze(defaultCreateObservableOptions);
function asCreateObservableOptions(thing) {
  return thing || defaultCreateObservableOptions;
}
var observableAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE);
var observableRefAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_REF, {
  enhancer: referenceEnhancer
});
var observableShallowAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_SHALLOW, {
  enhancer: shallowEnhancer
});
var observableStructAnnotation = /*#__PURE__*/createObservableAnnotation(OBSERVABLE_STRUCT, {
  enhancer: refStructEnhancer
});
var observableDecoratorAnnotation = /*#__PURE__*/createDecoratorAnnotation(observableAnnotation);
function getEnhancerFromOptions(options) {
  return options.deep === true ? deepEnhancer : options.deep === false ? referenceEnhancer : getEnhancerFromAnnotation(options.defaultDecorator);
}
function getAnnotationFromOptions(options) {
  var _options$defaultDecor;

  return options ? (_options$defaultDecor = options.defaultDecorator) != null ? _options$defaultDecor : createAutoAnnotation(options) : undefined;
}
function getEnhancerFromAnnotation(annotation) {
  var _annotation$options_$, _annotation$options_;

  return !annotation ? deepEnhancer : (_annotation$options_$ = (_annotation$options_ = annotation.options_) == null ? void 0 : _annotation$options_.enhancer) != null ? _annotation$options_$ : deepEnhancer;
}
/**
 * Turns an object, array or function into a reactive structure.
 * @param v the value which should become observable.
 */

function createObservable(v, arg2, arg3) {
  // @observable someProp;
  if (isStringish(arg2)) {
    storeAnnotation(v, arg2, observableAnnotation);
    return;
  } // already observable - ignore


  if (isObservable(v)) return v; // plain object

  if (isPlainObject(v)) return observable.object(v, arg2, arg3); // Array

  if (Array.isArray(v)) return observable.array(v, arg2); // Map

  if (isES6Map(v)) return observable.map(v, arg2); // Set

  if (isES6Set(v)) return observable.set(v, arg2); // other object - ignore

  if (typeof v === "object" && v !== null) return v; // anything else

  return observable.box(v, arg2);
}

Object.assign(createObservable, observableDecoratorAnnotation);
var observableFactories = {
  box: function box(value, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableValue(value, getEnhancerFromOptions(o), o.name, true, o.equals);
  },
  array: function array(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return (globalState.useProxies === false || o.proxy === false ? createLegacyArray : createObservableArray)(initialValues, getEnhancerFromOptions(o), o.name);
  },
  map: function map(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableMap(initialValues, getEnhancerFromOptions(o), o.name);
  },
  set: function set(initialValues, options) {
    var o = asCreateObservableOptions(options);
    return new ObservableSet(initialValues, getEnhancerFromOptions(o), o.name);
  },
  object: function object(props, decorators, options) {
    return extendObservable(globalState.useProxies === false || (options == null ? void 0 : options.proxy) === false ? asObservableObject({}, options) : asDynamicObservableObject({}, options), props, decorators);
  },
  ref: /*#__PURE__*/createDecoratorAnnotation(observableRefAnnotation),
  shallow: /*#__PURE__*/createDecoratorAnnotation(observableShallowAnnotation),
  deep: observableDecoratorAnnotation,
  struct: /*#__PURE__*/createDecoratorAnnotation(observableStructAnnotation)
}; // eslint-disable-next-line

var observable = /*#__PURE__*/assign(createObservable, observableFactories);

var COMPUTED = "computed";
var COMPUTED_STRUCT = "computed.struct";
var computedAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED);
var computedStructAnnotation = /*#__PURE__*/createComputedAnnotation(COMPUTED_STRUCT, {
  equals: comparer.structural
});
/**
 * Decorator for class properties: @computed get value() { return expr; }.
 * For legacy purposes also invokable as ES5 observable created: `computed(() => expr)`;
 */

var computed = function computed(arg1, arg2) {
  if (isStringish(arg2)) {
    // @computed
    return storeAnnotation(arg1, arg2, computedAnnotation);
  }

  if (isPlainObject(arg1)) {
    // @computed({ options })
    return createDecoratorAnnotation(createComputedAnnotation(COMPUTED, arg1));
  } // computed(expr, options?)


  if (true) {
    if (!isFunction(arg1)) die("First argument to `computed` should be an expression.");
    if (isFunction(arg2)) die("A setter as second argument is no longer supported, use `{ set: fn }` option instead");
  }

  var opts = isPlainObject(arg2) ? arg2 : {};
  opts.get = arg1;
  opts.name || (opts.name = arg1.name || "");
  /* for generated name */

  return new ComputedValue(opts);
};
Object.assign(computed, computedAnnotation);
computed.struct = /*#__PURE__*/createDecoratorAnnotation(computedStructAnnotation);

var _getDescriptor$config, _getDescriptor;
// mobx versions

var currentActionId = 0;
var nextActionId = 1;
var isFunctionNameConfigurable = (_getDescriptor$config = (_getDescriptor = /*#__PURE__*/getDescriptor(function () {}, "name")) == null ? void 0 : _getDescriptor.configurable) != null ? _getDescriptor$config : false; // we can safely recycle this object

var tmpNameDescriptor = {
  value: "action",
  configurable: true,
  writable: false,
  enumerable: false
};
function createAction(actionName, fn, autoAction, ref) {
  if (autoAction === void 0) {
    autoAction = false;
  }

  if (true) {
    if (!isFunction(fn)) die("`action` can only be invoked on functions");
    if (typeof actionName !== "string" || !actionName) die("actions should have valid names, got: '" + actionName + "'");
  }

  function res() {
    return executeAction(actionName, autoAction, fn, ref || this, arguments);
  }

  res.isMobxAction = true;

  if (isFunctionNameConfigurable) {
    tmpNameDescriptor.value = actionName;
    Object.defineProperty(res, "name", tmpNameDescriptor);
  }

  return res;
}
function executeAction(actionName, canRunAsDerivation, fn, scope, args) {
  var runInfo = _startAction(actionName, canRunAsDerivation, scope, args);

  try {
    return fn.apply(scope, args);
  } catch (err) {
    runInfo.error_ = err;
    throw err;
  } finally {
    _endAction(runInfo);
  }
}
function _startAction(actionName, canRunAsDerivation, // true for autoAction
scope, args) {
  var notifySpy_ =  true && isSpyEnabled() && !!actionName;
  var startTime_ = 0;

  if ( true && notifySpy_) {
    startTime_ = Date.now();
    var flattenedArgs = args ? Array.from(args) : EMPTY_ARRAY;
    spyReportStart({
      type: ACTION,
      name: actionName,
      object: scope,
      arguments: flattenedArgs
    });
  }

  var prevDerivation_ = globalState.trackingDerivation;
  var runAsAction = !canRunAsDerivation || !prevDerivation_;
  startBatch();
  var prevAllowStateChanges_ = globalState.allowStateChanges; // by default preserve previous allow

  if (runAsAction) {
    untrackedStart();
    prevAllowStateChanges_ = allowStateChangesStart(true);
  }

  var prevAllowStateReads_ = allowStateReadsStart(true);
  var runInfo = {
    runAsAction_: runAsAction,
    prevDerivation_: prevDerivation_,
    prevAllowStateChanges_: prevAllowStateChanges_,
    prevAllowStateReads_: prevAllowStateReads_,
    notifySpy_: notifySpy_,
    startTime_: startTime_,
    actionId_: nextActionId++,
    parentActionId_: currentActionId
  };
  currentActionId = runInfo.actionId_;
  return runInfo;
}
function _endAction(runInfo) {
  if (currentActionId !== runInfo.actionId_) {
    die(30);
  }

  currentActionId = runInfo.parentActionId_;

  if (runInfo.error_ !== undefined) {
    globalState.suppressReactionErrors = true;
  }

  allowStateChangesEnd(runInfo.prevAllowStateChanges_);
  allowStateReadsEnd(runInfo.prevAllowStateReads_);
  endBatch();
  if (runInfo.runAsAction_) untrackedEnd(runInfo.prevDerivation_);

  if ( true && runInfo.notifySpy_) {
    spyReportEnd({
      time: Date.now() - runInfo.startTime_
    });
  }

  globalState.suppressReactionErrors = false;
}
function allowStateChanges(allowStateChanges, func) {
  var prev = allowStateChangesStart(allowStateChanges);

  try {
    return func();
  } finally {
    allowStateChangesEnd(prev);
  }
}
function allowStateChangesStart(allowStateChanges) {
  var prev = globalState.allowStateChanges;
  globalState.allowStateChanges = allowStateChanges;
  return prev;
}
function allowStateChangesEnd(prev) {
  globalState.allowStateChanges = prev;
}

var _Symbol$toPrimitive;
var CREATE = "create";
_Symbol$toPrimitive = Symbol.toPrimitive;
var ObservableValue = /*#__PURE__*/function (_Atom) {
  _inheritsLoose(ObservableValue, _Atom);

  function ObservableValue(value, enhancer, name_, notifySpy, equals) {
    var _this;

    if (name_ === void 0) {
      name_ =  true ? "ObservableValue@" + getNextId() : 0;
    }

    if (notifySpy === void 0) {
      notifySpy = true;
    }

    if (equals === void 0) {
      equals = comparer["default"];
    }

    _this = _Atom.call(this, name_) || this;
    _this.enhancer = void 0;
    _this.name_ = void 0;
    _this.equals = void 0;
    _this.hasUnreportedChange_ = false;
    _this.interceptors_ = void 0;
    _this.changeListeners_ = void 0;
    _this.value_ = void 0;
    _this.dehancer = void 0;
    _this.enhancer = enhancer;
    _this.name_ = name_;
    _this.equals = equals;
    _this.value_ = enhancer(value, undefined, name_);

    if ( true && notifySpy && isSpyEnabled()) {
      // only notify spy if this is a stand-alone observable
      spyReport({
        type: CREATE,
        object: _assertThisInitialized(_this),
        observableKind: "value",
        debugObjectName: _this.name_,
        newValue: "" + _this.value_
      });
    }

    return _this;
  }

  var _proto = ObservableValue.prototype;

  _proto.dehanceValue = function dehanceValue(value) {
    if (this.dehancer !== undefined) return this.dehancer(value);
    return value;
  };

  _proto.set = function set(newValue) {
    var oldValue = this.value_;
    newValue = this.prepareNewValue_(newValue);

    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();

      if ( true && notifySpy) {
        spyReportStart({
          type: UPDATE,
          object: this,
          observableKind: "value",
          debugObjectName: this.name_,
          newValue: newValue,
          oldValue: oldValue
        });
      }

      this.setNewValue_(newValue);
      if ( true && notifySpy) spyReportEnd();
    }
  };

  _proto.prepareNewValue_ = function prepareNewValue_(newValue) {
    checkIfStateModificationsAreAllowed(this);

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this,
        type: UPDATE,
        newValue: newValue
      });
      if (!change) return globalState.UNCHANGED;
      newValue = change.newValue;
    } // apply modifier


    newValue = this.enhancer(newValue, this.value_, this.name_);
    return this.equals(this.value_, newValue) ? globalState.UNCHANGED : newValue;
  };

  _proto.setNewValue_ = function setNewValue_(newValue) {
    var oldValue = this.value_;
    this.value_ = newValue;
    this.reportChanged();

    if (hasListeners(this)) {
      notifyListeners(this, {
        type: UPDATE,
        object: this,
        newValue: newValue,
        oldValue: oldValue
      });
    }
  };

  _proto.get = function get() {
    this.reportObserved();
    return this.dehanceValue(this.value_);
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately) listener({
      observableKind: "value",
      debugObjectName: this.name_,
      object: this,
      type: UPDATE,
      newValue: this.value_,
      oldValue: undefined
    });
    return registerListener(this, listener);
  };

  _proto.raw = function raw() {
    // used by MST ot get undehanced value
    return this.value_;
  };

  _proto.toJSON = function toJSON() {
    return this.get();
  };

  _proto.toString = function toString() {
    return this.name_ + "[" + this.value_ + "]";
  };

  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };

  _proto[_Symbol$toPrimitive] = function () {
    return this.valueOf();
  };

  return ObservableValue;
}(Atom);
var isObservableValue = /*#__PURE__*/createInstanceofPredicate("ObservableValue", ObservableValue);

var _Symbol$toPrimitive$1;
/**
 * A node in the state dependency root that observes other nodes, and can be observed itself.
 *
 * ComputedValue will remember the result of the computation for the duration of the batch, or
 * while being observed.
 *
 * During this time it will recompute only when one of its direct dependencies changed,
 * but only when it is being accessed with `ComputedValue.get()`.
 *
 * Implementation description:
 * 1. First time it's being accessed it will compute and remember result
 *    give back remembered result until 2. happens
 * 2. First time any deep dependency change, propagate POSSIBLY_STALE to all observers, wait for 3.
 * 3. When it's being accessed, recompute if any shallow dependency changed.
 *    if result changed: propagate STALE to all observers, that were POSSIBLY_STALE from the last step.
 *    go to step 2. either way
 *
 * If at any point it's outside batch and it isn't observed: reset everything and go to 1.
 */

_Symbol$toPrimitive$1 = Symbol.toPrimitive;
var ComputedValue = /*#__PURE__*/function () {
  // nodes we are looking at. Our value depends on these nodes
  // during tracking it's an array with new observed observers
  // to check for cycles
  // N.B: unminified as it is used by MST

  /**
   * Create a new computed value based on a function expression.
   *
   * The `name` property is for debug purposes only.
   *
   * The `equals` property specifies the comparer function to use to determine if a newly produced
   * value differs from the previous value. Two comparers are provided in the library; `defaultComparer`
   * compares based on identity comparison (===), and `structuralComparer` deeply compares the structure.
   * Structural comparison can be convenient if you always produce a new aggregated object and
   * don't want to notify observers if it is structurally the same.
   * This is useful for working with vectors, mouse coordinates etc.
   */
  function ComputedValue(options) {
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.observing_ = [];
    this.newObserving_ = null;
    this.isBeingObserved_ = false;
    this.isPendingUnobservation_ = false;
    this.observers_ = new Set();
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.lastAccessedBy_ = 0;
    this.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
    this.unboundDepsCount_ = 0;
    this.value_ = new CaughtException(null);
    this.name_ = void 0;
    this.triggeredBy_ = void 0;
    this.isComputing_ = false;
    this.isRunningSetter_ = false;
    this.derivation = void 0;
    this.setter_ = void 0;
    this.isTracing_ = TraceMode.NONE;
    this.scope_ = void 0;
    this.equals_ = void 0;
    this.requiresReaction_ = void 0;
    this.keepAlive_ = void 0;
    this.onBOL = void 0;
    this.onBUOL = void 0;
    if (!options.get) die(31);
    this.derivation = options.get;
    this.name_ = options.name || ( true ? "ComputedValue@" + getNextId() : 0);

    if (options.set) {
      this.setter_ = createAction( true ? this.name_ + "-setter" : 0, options.set);
    }

    this.equals_ = options.equals || (options.compareStructural || options.struct ? comparer.structural : comparer["default"]);
    this.scope_ = options.context;
    this.requiresReaction_ = !!options.requiresReaction;
    this.keepAlive_ = !!options.keepAlive;
  }

  var _proto = ComputedValue.prototype;

  _proto.onBecomeStale_ = function onBecomeStale_() {
    propagateMaybeChanged(this);
  };

  _proto.onBO = function onBO() {
    if (this.onBOL) {
      this.onBOL.forEach(function (listener) {
        return listener();
      });
    }
  };

  _proto.onBUO = function onBUO() {
    if (this.onBUOL) {
      this.onBUOL.forEach(function (listener) {
        return listener();
      });
    }
  }
  /**
   * Returns the current value of this computed value.
   * Will evaluate its computation first if needed.
   */
  ;

  _proto.get = function get() {
    if (this.isComputing_) die(32, this.name_, this.derivation);

    if (globalState.inBatch === 0 && // !globalState.trackingDerivatpion &&
    this.observers_.size === 0 && !this.keepAlive_) {
      if (shouldCompute(this)) {
        this.warnAboutUntrackedRead_();
        startBatch(); // See perf test 'computed memoization'

        this.value_ = this.computeValue_(false);
        endBatch();
      }
    } else {
      reportObserved(this);

      if (shouldCompute(this)) {
        var prevTrackingContext = globalState.trackingContext;
        if (this.keepAlive_ && !prevTrackingContext) globalState.trackingContext = this;
        if (this.trackAndCompute()) propagateChangeConfirmed(this);
        globalState.trackingContext = prevTrackingContext;
      }
    }

    var result = this.value_;
    if (isCaughtException(result)) throw result.cause;
    return result;
  };

  _proto.set = function set(value) {
    if (this.setter_) {
      if (this.isRunningSetter_) die(33, this.name_);
      this.isRunningSetter_ = true;

      try {
        this.setter_.call(this.scope_, value);
      } finally {
        this.isRunningSetter_ = false;
      }
    } else die(34, this.name_);
  };

  _proto.trackAndCompute = function trackAndCompute() {
    // N.B: unminified as it is used by MST
    var oldValue = this.value_;
    var wasSuspended =
    /* see #1208 */
    this.dependenciesState_ === IDerivationState_.NOT_TRACKING_;
    var newValue = this.computeValue_(true);

    if ( true && isSpyEnabled()) {
      spyReport({
        observableKind: "computed",
        debugObjectName: this.name_,
        object: this.scope_,
        type: "update",
        oldValue: this.value_,
        newValue: newValue
      });
    }

    var changed = wasSuspended || isCaughtException(oldValue) || isCaughtException(newValue) || !this.equals_(oldValue, newValue);

    if (changed) {
      this.value_ = newValue;
    }

    return changed;
  };

  _proto.computeValue_ = function computeValue_(track) {
    this.isComputing_ = true; // don't allow state changes during computation

    var prev = allowStateChangesStart(false);
    var res;

    if (track) {
      res = trackDerivedFunction(this, this.derivation, this.scope_);
    } else {
      if (globalState.disableErrorBoundaries === true) {
        res = this.derivation.call(this.scope_);
      } else {
        try {
          res = this.derivation.call(this.scope_);
        } catch (e) {
          res = new CaughtException(e);
        }
      }
    }

    allowStateChangesEnd(prev);
    this.isComputing_ = false;
    return res;
  };

  _proto.suspend_ = function suspend_() {
    if (!this.keepAlive_) {
      clearObserving(this);
      this.value_ = undefined; // don't hold on to computed value!

      if ( true && this.isTracing_ !== TraceMode.NONE) {
        console.log("[mobx.trace] Computed value '" + this.name_ + "' was suspended and it will recompute on the next access.");
      }
    }
  };

  _proto.observe_ = function observe_(listener, fireImmediately) {
    var _this = this;

    var firstTime = true;
    var prevValue = undefined;
    return autorun(function () {
      // TODO: why is this in a different place than the spyReport() function? in all other observables it's called in the same place
      var newValue = _this.get();

      if (!firstTime || fireImmediately) {
        var prevU = untrackedStart();
        listener({
          observableKind: "computed",
          debugObjectName: _this.name_,
          type: UPDATE,
          object: _this,
          newValue: newValue,
          oldValue: prevValue
        });
        untrackedEnd(prevU);
      }

      firstTime = false;
      prevValue = newValue;
    });
  };

  _proto.warnAboutUntrackedRead_ = function warnAboutUntrackedRead_() {
    if (false) {}

    if (this.isTracing_ !== TraceMode.NONE) {
      console.log("[mobx.trace] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
    }

    if (globalState.computedRequiresReaction || this.requiresReaction_) {
      console.warn("[mobx] Computed value '" + this.name_ + "' is being read outside a reactive context. Doing a full recompute.");
    }
  };

  _proto.toString = function toString() {
    return this.name_ + "[" + this.derivation.toString() + "]";
  };

  _proto.valueOf = function valueOf() {
    return toPrimitive(this.get());
  };

  _proto[_Symbol$toPrimitive$1] = function () {
    return this.valueOf();
  };

  return ComputedValue;
}();
var isComputedValue = /*#__PURE__*/createInstanceofPredicate("ComputedValue", ComputedValue);

var IDerivationState_;

(function (IDerivationState_) {
  // before being run or (outside batch and not being observed)
  // at this point derivation is not holding any data about dependency tree
  IDerivationState_[IDerivationState_["NOT_TRACKING_"] = -1] = "NOT_TRACKING_"; // no shallow dependency changed since last computation
  // won't recalculate derivation
  // this is what makes mobx fast

  IDerivationState_[IDerivationState_["UP_TO_DATE_"] = 0] = "UP_TO_DATE_"; // some deep dependency changed, but don't know if shallow dependency changed
  // will require to check first if UP_TO_DATE or POSSIBLY_STALE
  // currently only ComputedValue will propagate POSSIBLY_STALE
  //
  // having this state is second big optimization:
  // don't have to recompute on every dependency change, but only when it's needed

  IDerivationState_[IDerivationState_["POSSIBLY_STALE_"] = 1] = "POSSIBLY_STALE_"; // A shallow dependency has changed since last computation and the derivation
  // will need to recompute when it's needed next.

  IDerivationState_[IDerivationState_["STALE_"] = 2] = "STALE_";
})(IDerivationState_ || (IDerivationState_ = {}));

var TraceMode;

(function (TraceMode) {
  TraceMode[TraceMode["NONE"] = 0] = "NONE";
  TraceMode[TraceMode["LOG"] = 1] = "LOG";
  TraceMode[TraceMode["BREAK"] = 2] = "BREAK";
})(TraceMode || (TraceMode = {}));

var CaughtException = function CaughtException(cause) {
  this.cause = void 0;
  this.cause = cause; // Empty
};
function isCaughtException(e) {
  return e instanceof CaughtException;
}
/**
 * Finds out whether any dependency of the derivation has actually changed.
 * If dependenciesState is 1 then it will recalculate dependencies,
 * if any dependency changed it will propagate it by changing dependenciesState to 2.
 *
 * By iterating over the dependencies in the same order that they were reported and
 * stopping on the first change, all the recalculations are only called for ComputedValues
 * that will be tracked by derivation. That is because we assume that if the first x
 * dependencies of the derivation doesn't change then the derivation should run the same way
 * up until accessing x-th dependency.
 */

function shouldCompute(derivation) {
  switch (derivation.dependenciesState_) {
    case IDerivationState_.UP_TO_DATE_:
      return false;

    case IDerivationState_.NOT_TRACKING_:
    case IDerivationState_.STALE_:
      return true;

    case IDerivationState_.POSSIBLY_STALE_:
      {
        // state propagation can occur outside of action/reactive context #2195
        var prevAllowStateReads = allowStateReadsStart(true);
        var prevUntracked = untrackedStart(); // no need for those computeds to be reported, they will be picked up in trackDerivedFunction.

        var obs = derivation.observing_,
            l = obs.length;

        for (var i = 0; i < l; i++) {
          var obj = obs[i];

          if (isComputedValue(obj)) {
            if (globalState.disableErrorBoundaries) {
              obj.get();
            } else {
              try {
                obj.get();
              } catch (e) {
                // we are not interested in the value *or* exception at this moment, but if there is one, notify all
                untrackedEnd(prevUntracked);
                allowStateReadsEnd(prevAllowStateReads);
                return true;
              }
            } // if ComputedValue `obj` actually changed it will be computed and propagated to its observers.
            // and `derivation` is an observer of `obj`
            // invariantShouldCompute(derivation)


            if (derivation.dependenciesState_ === IDerivationState_.STALE_) {
              untrackedEnd(prevUntracked);
              allowStateReadsEnd(prevAllowStateReads);
              return true;
            }
          }
        }

        changeDependenciesStateTo0(derivation);
        untrackedEnd(prevUntracked);
        allowStateReadsEnd(prevAllowStateReads);
        return false;
      }
  }
}
function isComputingDerivation() {
  return globalState.trackingDerivation !== null; // filter out actions inside computations
}
function checkIfStateModificationsAreAllowed(atom) {
  if (false) {}

  var hasObservers = atom.observers_.size > 0; // Should not be possible to change observed state outside strict mode, except during initialization, see #563

  if (!globalState.allowStateChanges && (hasObservers || globalState.enforceActions === "always")) console.warn("[MobX] " + (globalState.enforceActions ? "Since strict-mode is enabled, changing (observed) observable values without using an action is not allowed. Tried to modify: " : "Side effects like changing state are not allowed at this point. Are you trying to modify state from, for example, a computed value or the render function of a React component? You can wrap side effects in 'runInAction' (or decorate functions with 'action') if needed. Tried to modify: ") + atom.name_);
}
function checkIfStateReadsAreAllowed(observable) {
  if ( true && !globalState.allowStateReads && globalState.observableRequiresReaction) {
    console.warn("[mobx] Observable '" + observable.name_ + "' being read outside a reactive context.");
  }
}
/**
 * Executes the provided function `f` and tracks which observables are being accessed.
 * The tracking information is stored on the `derivation` object and the derivation is registered
 * as observer of any of the accessed observables.
 */

function trackDerivedFunction(derivation, f, context) {
  var prevAllowStateReads = allowStateReadsStart(true); // pre allocate array allocation + room for variation in deps
  // array will be trimmed by bindDependencies

  changeDependenciesStateTo0(derivation);
  derivation.newObserving_ = new Array(derivation.observing_.length + 100);
  derivation.unboundDepsCount_ = 0;
  derivation.runId_ = ++globalState.runId;
  var prevTracking = globalState.trackingDerivation;
  globalState.trackingDerivation = derivation;
  globalState.inBatch++;
  var result;

  if (globalState.disableErrorBoundaries === true) {
    result = f.call(context);
  } else {
    try {
      result = f.call(context);
    } catch (e) {
      result = new CaughtException(e);
    }
  }

  globalState.inBatch--;
  globalState.trackingDerivation = prevTracking;
  bindDependencies(derivation);
  warnAboutDerivationWithoutDependencies(derivation);
  allowStateReadsEnd(prevAllowStateReads);
  return result;
}

function warnAboutDerivationWithoutDependencies(derivation) {
  if (false) {}
  if (derivation.observing_.length !== 0) return;

  if (globalState.reactionRequiresObservable || derivation.requiresObservable_) {
    console.warn("[mobx] Derivation '" + derivation.name_ + "' is created/updated without reading any observable value.");
  }
}
/**
 * diffs newObserving with observing.
 * update observing to be newObserving with unique observables
 * notify observers that become observed/unobserved
 */


function bindDependencies(derivation) {
  // invariant(derivation.dependenciesState !== IDerivationState.NOT_TRACKING, "INTERNAL ERROR bindDependencies expects derivation.dependenciesState !== -1");
  var prevObserving = derivation.observing_;
  var observing = derivation.observing_ = derivation.newObserving_;
  var lowestNewObservingDerivationState = IDerivationState_.UP_TO_DATE_; // Go through all new observables and check diffValue: (this list can contain duplicates):
  //   0: first occurrence, change to 1 and keep it
  //   1: extra occurrence, drop it

  var i0 = 0,
      l = derivation.unboundDepsCount_;

  for (var i = 0; i < l; i++) {
    var dep = observing[i];

    if (dep.diffValue_ === 0) {
      dep.diffValue_ = 1;
      if (i0 !== i) observing[i0] = dep;
      i0++;
    } // Upcast is 'safe' here, because if dep is IObservable, `dependenciesState` will be undefined,
    // not hitting the condition


    if (dep.dependenciesState_ > lowestNewObservingDerivationState) {
      lowestNewObservingDerivationState = dep.dependenciesState_;
    }
  }

  observing.length = i0;
  derivation.newObserving_ = null; // newObserving shouldn't be needed outside tracking (statement moved down to work around FF bug, see #614)
  // Go through all old observables and check diffValue: (it is unique after last bindDependencies)
  //   0: it's not in new observables, unobserve it
  //   1: it keeps being observed, don't want to notify it. change to 0

  l = prevObserving.length;

  while (l--) {
    var _dep = prevObserving[l];

    if (_dep.diffValue_ === 0) {
      removeObserver(_dep, derivation);
    }

    _dep.diffValue_ = 0;
  } // Go through all new observables and check diffValue: (now it should be unique)
  //   0: it was set to 0 in last loop. don't need to do anything.
  //   1: it wasn't observed, let's observe it. set back to 0


  while (i0--) {
    var _dep2 = observing[i0];

    if (_dep2.diffValue_ === 1) {
      _dep2.diffValue_ = 0;
      addObserver(_dep2, derivation);
    }
  } // Some new observed derivations may become stale during this derivation computation
  // so they have had no chance to propagate staleness (#916)


  if (lowestNewObservingDerivationState !== IDerivationState_.UP_TO_DATE_) {
    derivation.dependenciesState_ = lowestNewObservingDerivationState;
    derivation.onBecomeStale_();
  }
}

function clearObserving(derivation) {
  // invariant(globalState.inBatch > 0, "INTERNAL ERROR clearObserving should be called only inside batch");
  var obs = derivation.observing_;
  derivation.observing_ = [];
  var i = obs.length;

  while (i--) {
    removeObserver(obs[i], derivation);
  }

  derivation.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
}
function untracked(action) {
  var prev = untrackedStart();

  try {
    return action();
  } finally {
    untrackedEnd(prev);
  }
}
function untrackedStart() {
  var prev = globalState.trackingDerivation;
  globalState.trackingDerivation = null;
  return prev;
}
function untrackedEnd(prev) {
  globalState.trackingDerivation = prev;
}
function allowStateReadsStart(allowStateReads) {
  var prev = globalState.allowStateReads;
  globalState.allowStateReads = allowStateReads;
  return prev;
}
function allowStateReadsEnd(prev) {
  globalState.allowStateReads = prev;
}
/**
 * needed to keep `lowestObserverState` correct. when changing from (2 or 1) to 0
 *
 */

function changeDependenciesStateTo0(derivation) {
  if (derivation.dependenciesState_ === IDerivationState_.UP_TO_DATE_) return;
  derivation.dependenciesState_ = IDerivationState_.UP_TO_DATE_;
  var obs = derivation.observing_;
  var i = obs.length;

  while (i--) {
    obs[i].lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
  }
}

/**
 * These values will persist if global state is reset
 */

var persistentKeys = ["mobxGuid", "spyListeners", "enforceActions", "computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "allowStateReads", "disableErrorBoundaries", "runId", "UNCHANGED", "useProxies"];
var MobXGlobals = function MobXGlobals() {
  this.version = 6;
  this.UNCHANGED = {};
  this.trackingDerivation = null;
  this.trackingContext = null;
  this.runId = 0;
  this.mobxGuid = 0;
  this.inBatch = 0;
  this.pendingUnobservations = [];
  this.pendingReactions = [];
  this.isRunningReactions = false;
  this.allowStateChanges = false;
  this.allowStateReads = true;
  this.enforceActions = true;
  this.spyListeners = [];
  this.globalReactionErrorHandlers = [];
  this.computedRequiresReaction = false;
  this.reactionRequiresObservable = false;
  this.observableRequiresReaction = false;
  this.disableErrorBoundaries = false;
  this.suppressReactionErrors = false;
  this.useProxies = true;
  this.verifyProxies = false;
  this.safeDescriptors = true;
};
var canMergeGlobalState = true;
var isolateCalled = false;
var globalState = /*#__PURE__*/function () {
  var global = /*#__PURE__*/getGlobal();
  if (global.__mobxInstanceCount > 0 && !global.__mobxGlobals) canMergeGlobalState = false;
  if (global.__mobxGlobals && global.__mobxGlobals.version !== new MobXGlobals().version) canMergeGlobalState = false;

  if (!canMergeGlobalState) {
    setTimeout(function () {
      if (!isolateCalled) {
        die(35);
      }
    }, 1);
    return new MobXGlobals();
  } else if (global.__mobxGlobals) {
    global.__mobxInstanceCount += 1;
    if (!global.__mobxGlobals.UNCHANGED) global.__mobxGlobals.UNCHANGED = {}; // make merge backward compatible

    return global.__mobxGlobals;
  } else {
    global.__mobxInstanceCount = 1;
    return global.__mobxGlobals = /*#__PURE__*/new MobXGlobals();
  }
}();
function isolateGlobalState() {
  if (globalState.pendingReactions.length || globalState.inBatch || globalState.isRunningReactions) die(36);
  isolateCalled = true;

  if (canMergeGlobalState) {
    var global = getGlobal();
    if (--global.__mobxInstanceCount === 0) global.__mobxGlobals = undefined;
    globalState = new MobXGlobals();
  }
}
function getGlobalState() {
  return globalState;
}
/**
 * For testing purposes only; this will break the internal state of existing observables,
 * but can be used to get back at a stable state after throwing errors
 */

function resetGlobalState() {
  var defaultGlobals = new MobXGlobals();

  for (var key in defaultGlobals) {
    if (persistentKeys.indexOf(key) === -1) globalState[key] = defaultGlobals[key];
  }

  globalState.allowStateChanges = !globalState.enforceActions;
}

function hasObservers(observable) {
  return observable.observers_ && observable.observers_.size > 0;
}
function getObservers(observable) {
  return observable.observers_;
} // function invariantObservers(observable: IObservable) {
//     const list = observable.observers
//     const map = observable.observersIndexes
//     const l = list.length
//     for (let i = 0; i < l; i++) {
//         const id = list[i].__mapid
//         if (i) {
//             invariant(map[id] === i, "INTERNAL ERROR maps derivation.__mapid to index in list") // for performance
//         } else {
//             invariant(!(id in map), "INTERNAL ERROR observer on index 0 shouldn't be held in map.") // for performance
//         }
//     }
//     invariant(
//         list.length === 0 || Object.keys(map).length === list.length - 1,
//         "INTERNAL ERROR there is no junk in map"
//     )
// }

function addObserver(observable, node) {
  // invariant(node.dependenciesState !== -1, "INTERNAL ERROR, can add only dependenciesState !== -1");
  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR add already added node");
  // invariantObservers(observable);
  observable.observers_.add(node);
  if (observable.lowestObserverState_ > node.dependenciesState_) observable.lowestObserverState_ = node.dependenciesState_; // invariantObservers(observable);
  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR didn't add node");
}
function removeObserver(observable, node) {
  // invariant(globalState.inBatch > 0, "INTERNAL ERROR, remove should be called only inside batch");
  // invariant(observable._observers.indexOf(node) !== -1, "INTERNAL ERROR remove already removed node");
  // invariantObservers(observable);
  observable.observers_["delete"](node);

  if (observable.observers_.size === 0) {
    // deleting last observer
    queueForUnobservation(observable);
  } // invariantObservers(observable);
  // invariant(observable._observers.indexOf(node) === -1, "INTERNAL ERROR remove already removed node2");

}
function queueForUnobservation(observable) {
  if (observable.isPendingUnobservation_ === false) {
    // invariant(observable._observers.length === 0, "INTERNAL ERROR, should only queue for unobservation unobserved observables");
    observable.isPendingUnobservation_ = true;
    globalState.pendingUnobservations.push(observable);
  }
}
/**
 * Batch starts a transaction, at least for purposes of memoizing ComputedValues when nothing else does.
 * During a batch `onBecomeUnobserved` will be called at most once per observable.
 * Avoids unnecessary recalculations.
 */

function startBatch() {
  globalState.inBatch++;
}
function endBatch() {
  if (--globalState.inBatch === 0) {
    runReactions(); // the batch is actually about to finish, all unobserving should happen here.

    var list = globalState.pendingUnobservations;

    for (var i = 0; i < list.length; i++) {
      var observable = list[i];
      observable.isPendingUnobservation_ = false;

      if (observable.observers_.size === 0) {
        if (observable.isBeingObserved_) {
          // if this observable had reactive observers, trigger the hooks
          observable.isBeingObserved_ = false;
          observable.onBUO();
        }

        if (observable instanceof ComputedValue) {
          // computed values are automatically teared down when the last observer leaves
          // this process happens recursively, this computed might be the last observabe of another, etc..
          observable.suspend_();
        }
      }
    }

    globalState.pendingUnobservations = [];
  }
}
function reportObserved(observable) {
  checkIfStateReadsAreAllowed(observable);
  var derivation = globalState.trackingDerivation;

  if (derivation !== null) {
    /**
     * Simple optimization, give each derivation run an unique id (runId)
     * Check if last time this observable was accessed the same runId is used
     * if this is the case, the relation is already known
     */
    if (derivation.runId_ !== observable.lastAccessedBy_) {
      observable.lastAccessedBy_ = derivation.runId_; // Tried storing newObserving, or observing, or both as Set, but performance didn't come close...

      derivation.newObserving_[derivation.unboundDepsCount_++] = observable;

      if (!observable.isBeingObserved_ && globalState.trackingContext) {
        observable.isBeingObserved_ = true;
        observable.onBO();
      }
    }

    return true;
  } else if (observable.observers_.size === 0 && globalState.inBatch > 0) {
    queueForUnobservation(observable);
  }

  return false;
} // function invariantLOS(observable: IObservable, msg: string) {
//     // it's expensive so better not run it in produciton. but temporarily helpful for testing
//     const min = getObservers(observable).reduce((a, b) => Math.min(a, b.dependenciesState), 2)
//     if (min >= observable.lowestObserverState) return // <- the only assumption about `lowestObserverState`
//     throw new Error(
//         "lowestObserverState is wrong for " +
//             msg +
//             " because " +
//             min +
//             " < " +
//             observable.lowestObserverState
//     )
// }

/**
 * NOTE: current propagation mechanism will in case of self reruning autoruns behave unexpectedly
 * It will propagate changes to observers from previous run
 * It's hard or maybe impossible (with reasonable perf) to get it right with current approach
 * Hopefully self reruning autoruns aren't a feature people should depend on
 * Also most basic use cases should be ok
 */
// Called by Atom when its value changes

function propagateChanged(observable) {
  // invariantLOS(observable, "changed start");
  if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;
  observable.lowestObserverState_ = IDerivationState_.STALE_; // Ideally we use for..of here, but the downcompiled version is really slow...

  observable.observers_.forEach(function (d) {
    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      if ( true && d.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d, observable);
      }

      d.onBecomeStale_();
    }

    d.dependenciesState_ = IDerivationState_.STALE_;
  }); // invariantLOS(observable, "changed end");
} // Called by ComputedValue when it recalculate and its value changed

function propagateChangeConfirmed(observable) {
  // invariantLOS(observable, "confirmed start");
  if (observable.lowestObserverState_ === IDerivationState_.STALE_) return;
  observable.lowestObserverState_ = IDerivationState_.STALE_;
  observable.observers_.forEach(function (d) {
    if (d.dependenciesState_ === IDerivationState_.POSSIBLY_STALE_) {
      d.dependenciesState_ = IDerivationState_.STALE_;

      if ( true && d.isTracing_ !== TraceMode.NONE) {
        logTraceInfo(d, observable);
      }
    } else if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_ // this happens during computing of `d`, just keep lowestObserverState up to date.
    ) {
        observable.lowestObserverState_ = IDerivationState_.UP_TO_DATE_;
      }
  }); // invariantLOS(observable, "confirmed end");
} // Used by computed when its dependency changed, but we don't wan't to immediately recompute.

function propagateMaybeChanged(observable) {
  // invariantLOS(observable, "maybe start");
  if (observable.lowestObserverState_ !== IDerivationState_.UP_TO_DATE_) return;
  observable.lowestObserverState_ = IDerivationState_.POSSIBLY_STALE_;
  observable.observers_.forEach(function (d) {
    if (d.dependenciesState_ === IDerivationState_.UP_TO_DATE_) {
      d.dependenciesState_ = IDerivationState_.POSSIBLY_STALE_;
      d.onBecomeStale_();
    }
  }); // invariantLOS(observable, "maybe end");
}

function logTraceInfo(derivation, observable) {
  console.log("[mobx.trace] '" + derivation.name_ + "' is invalidated due to a change in: '" + observable.name_ + "'");

  if (derivation.isTracing_ === TraceMode.BREAK) {
    var lines = [];
    printDepTree(getDependencyTree(derivation), lines, 1); // prettier-ignore

    new Function("debugger;\n/*\nTracing '" + derivation.name_ + "'\n\nYou are entering this break point because derivation '" + derivation.name_ + "' is being traced and '" + observable.name_ + "' is now forcing it to update.\nJust follow the stacktrace you should now see in the devtools to see precisely what piece of your code is causing this update\nThe stackframe you are looking for is at least ~6-8 stack-frames up.\n\n" + (derivation instanceof ComputedValue ? derivation.derivation.toString().replace(/[*]\//g, "/") : "") + "\n\nThe dependencies for this derivation are:\n\n" + lines.join("\n") + "\n*/\n    ")();
  }
}

function printDepTree(tree, lines, depth) {
  if (lines.length >= 1000) {
    lines.push("(and many more)");
    return;
  }

  lines.push("" + new Array(depth).join("\t") + tree.name); // MWE: not the fastest, but the easiest way :)

  if (tree.dependencies) tree.dependencies.forEach(function (child) {
    return printDepTree(child, lines, depth + 1);
  });
}

var Reaction = /*#__PURE__*/function () {
  // nodes we are looking at. Our value depends on these nodes
  function Reaction(name_, onInvalidate_, errorHandler_, requiresObservable_) {
    if (name_ === void 0) {
      name_ =  true ? "Reaction@" + getNextId() : 0;
    }

    if (requiresObservable_ === void 0) {
      requiresObservable_ = false;
    }

    this.name_ = void 0;
    this.onInvalidate_ = void 0;
    this.errorHandler_ = void 0;
    this.requiresObservable_ = void 0;
    this.observing_ = [];
    this.newObserving_ = [];
    this.dependenciesState_ = IDerivationState_.NOT_TRACKING_;
    this.diffValue_ = 0;
    this.runId_ = 0;
    this.unboundDepsCount_ = 0;
    this.isDisposed_ = false;
    this.isScheduled_ = false;
    this.isTrackPending_ = false;
    this.isRunning_ = false;
    this.isTracing_ = TraceMode.NONE;
    this.name_ = name_;
    this.onInvalidate_ = onInvalidate_;
    this.errorHandler_ = errorHandler_;
    this.requiresObservable_ = requiresObservable_;
  }

  var _proto = Reaction.prototype;

  _proto.onBecomeStale_ = function onBecomeStale_() {
    this.schedule_();
  };

  _proto.schedule_ = function schedule_() {
    if (!this.isScheduled_) {
      this.isScheduled_ = true;
      globalState.pendingReactions.push(this);
      runReactions();
    }
  };

  _proto.isScheduled = function isScheduled() {
    return this.isScheduled_;
  }
  /**
   * internal, use schedule() if you intend to kick off a reaction
   */
  ;

  _proto.runReaction_ = function runReaction_() {
    if (!this.isDisposed_) {
      startBatch();
      this.isScheduled_ = false;
      var prev = globalState.trackingContext;
      globalState.trackingContext = this;

      if (shouldCompute(this)) {
        this.isTrackPending_ = true;

        try {
          this.onInvalidate_();

          if ( true && this.isTrackPending_ && isSpyEnabled()) {
            // onInvalidate didn't trigger track right away..
            spyReport({
              name: this.name_,
              type: "scheduled-reaction"
            });
          }
        } catch (e) {
          this.reportExceptionInDerivation_(e);
        }
      }

      globalState.trackingContext = prev;
      endBatch();
    }
  };

  _proto.track = function track(fn) {
    if (this.isDisposed_) {
      return; // console.warn("Reaction already disposed") // Note: Not a warning / error in mobx 4 either
    }

    startBatch();
    var notify = isSpyEnabled();
    var startTime;

    if ( true && notify) {
      startTime = Date.now();
      spyReportStart({
        name: this.name_,
        type: "reaction"
      });
    }

    this.isRunning_ = true;
    var prevReaction = globalState.trackingContext; // reactions could create reactions...

    globalState.trackingContext = this;
    var result = trackDerivedFunction(this, fn, undefined);
    globalState.trackingContext = prevReaction;
    this.isRunning_ = false;
    this.isTrackPending_ = false;

    if (this.isDisposed_) {
      // disposed during last run. Clean up everything that was bound after the dispose call.
      clearObserving(this);
    }

    if (isCaughtException(result)) this.reportExceptionInDerivation_(result.cause);

    if ( true && notify) {
      spyReportEnd({
        time: Date.now() - startTime
      });
    }

    endBatch();
  };

  _proto.reportExceptionInDerivation_ = function reportExceptionInDerivation_(error) {
    var _this = this;

    if (this.errorHandler_) {
      this.errorHandler_(error, this);
      return;
    }

    if (globalState.disableErrorBoundaries) throw error;
    var message =  true ? "[mobx] Encountered an uncaught exception that was thrown by a reaction or observer component, in: '" + this + "'" : 0;

    if (!globalState.suppressReactionErrors) {
      console.error(message, error);
      /** If debugging brought you here, please, read the above message :-). Tnx! */
    } else if (true) console.warn("[mobx] (error in reaction '" + this.name_ + "' suppressed, fix error of causing action below)"); // prettier-ignore


    if ( true && isSpyEnabled()) {
      spyReport({
        type: "error",
        name: this.name_,
        message: message,
        error: "" + error
      });
    }

    globalState.globalReactionErrorHandlers.forEach(function (f) {
      return f(error, _this);
    });
  };

  _proto.dispose = function dispose() {
    if (!this.isDisposed_) {
      this.isDisposed_ = true;

      if (!this.isRunning_) {
        // if disposed while running, clean up later. Maybe not optimal, but rare case
        startBatch();
        clearObserving(this);
        endBatch();
      }
    }
  };

  _proto.getDisposer_ = function getDisposer_() {
    var r = this.dispose.bind(this);
    r[$mobx] = this;
    return r;
  };

  _proto.toString = function toString() {
    return "Reaction[" + this.name_ + "]";
  };

  _proto.trace = function trace$1(enterBreakPoint) {
    if (enterBreakPoint === void 0) {
      enterBreakPoint = false;
    }

    trace(this, enterBreakPoint);
  };

  return Reaction;
}();
function onReactionError(handler) {
  globalState.globalReactionErrorHandlers.push(handler);
  return function () {
    var idx = globalState.globalReactionErrorHandlers.indexOf(handler);
    if (idx >= 0) globalState.globalReactionErrorHandlers.splice(idx, 1);
  };
}
/**
 * Magic number alert!
 * Defines within how many times a reaction is allowed to re-trigger itself
 * until it is assumed that this is gonna be a never ending loop...
 */

var MAX_REACTION_ITERATIONS = 100;

var reactionScheduler = function reactionScheduler(f) {
  return f();
};

function runReactions() {
  // Trampolining, if runReactions are already running, new reactions will be picked up
  if (globalState.inBatch > 0 || globalState.isRunningReactions) return;
  reactionScheduler(runReactionsHelper);
}

function runReactionsHelper() {
  globalState.isRunningReactions = true;
  var allReactions = globalState.pendingReactions;
  var iterations = 0; // While running reactions, new reactions might be triggered.
  // Hence we work with two variables and check whether
  // we converge to no remaining reactions after a while.

  while (allReactions.length > 0) {
    if (++iterations === MAX_REACTION_ITERATIONS) {
      console.error( true ? "Reaction doesn't converge to a stable state after " + MAX_REACTION_ITERATIONS + " iterations." + (" Probably there is a cycle in the reactive function: " + allReactions[0]) : 0);
      allReactions.splice(0); // clear reactions
    }

    var remainingReactions = allReactions.splice(0);

    for (var i = 0, l = remainingReactions.length; i < l; i++) {
      remainingReactions[i].runReaction_();
    }
  }

  globalState.isRunningReactions = false;
}

var isReaction = /*#__PURE__*/createInstanceofPredicate("Reaction", Reaction);
function setReactionScheduler(fn) {
  var baseScheduler = reactionScheduler;

  reactionScheduler = function reactionScheduler(f) {
    return fn(function () {
      return baseScheduler(f);
    });
  };
}

function isSpyEnabled() {
  return  true && !!globalState.spyListeners.length;
}
function spyReport(event) {
  if (false) {} // dead code elimination can do the rest

  if (!globalState.spyListeners.length) return;
  var listeners = globalState.spyListeners;

  for (var i = 0, l = listeners.length; i < l; i++) {
    listeners[i](event);
  }
}
function spyReportStart(event) {
  if (false) {}

  var change = _extends({}, event, {
    spyReportStart: true
  });

  spyReport(change);
}
var END_EVENT = {
  type: "report-end",
  spyReportEnd: true
};
function spyReportEnd(change) {
  if (false) {}
  if (change) spyReport(_extends({}, change, {
    type: "report-end",
    spyReportEnd: true
  }));else spyReport(END_EVENT);
}
function spy(listener) {
  if (false) {} else {
    globalState.spyListeners.push(listener);
    return once(function () {
      globalState.spyListeners = globalState.spyListeners.filter(function (l) {
        return l !== listener;
      });
    });
  }
}

var ACTION = "action";
var ACTION_BOUND = "action.bound";
var AUTOACTION = "autoAction";
var AUTOACTION_BOUND = "autoAction.bound";
var DEFAULT_ACTION_NAME = "<unnamed action>";
var actionAnnotation = /*#__PURE__*/createActionAnnotation(ACTION);
var actionBoundAnnotation = /*#__PURE__*/createActionAnnotation(ACTION_BOUND, {
  bound: true
});
var autoActionAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION, {
  autoAction: true
});
var autoActionBoundAnnotation = /*#__PURE__*/createActionAnnotation(AUTOACTION_BOUND, {
  autoAction: true,
  bound: true
});

function createActionFactory(autoAction) {
  var res = function action(arg1, arg2) {
    // action(fn() {})
    if (isFunction(arg1)) return createAction(arg1.name || DEFAULT_ACTION_NAME, arg1, autoAction); // action("name", fn() {})

    if (isFunction(arg2)) return createAction(arg1, arg2, autoAction); // @action

    if (isStringish(arg2)) {
      return storeAnnotation(arg1, arg2, autoAction ? autoActionAnnotation : actionAnnotation);
    } // action("name") & @action("name")


    if (isStringish(arg1)) {
      return createDecoratorAnnotation(createActionAnnotation(autoAction ? AUTOACTION : ACTION, {
        name: arg1,
        autoAction: autoAction
      }));
    }

    if (true) die("Invalid arguments for `action`");
  };

  return res;
}

var action = /*#__PURE__*/createActionFactory(false);
Object.assign(action, actionAnnotation);
var autoAction = /*#__PURE__*/createActionFactory(true);
Object.assign(autoAction, autoActionAnnotation);
action.bound = /*#__PURE__*/createDecoratorAnnotation(actionBoundAnnotation);
autoAction.bound = /*#__PURE__*/createDecoratorAnnotation(autoActionBoundAnnotation);
function runInAction(fn) {
  return executeAction(fn.name || DEFAULT_ACTION_NAME, false, fn, this, undefined);
}
function isAction(thing) {
  return isFunction(thing) && thing.isMobxAction === true;
}

/**
 * Creates a named reactive view and keeps it alive, so that the view is always
 * updated if one of the dependencies changes, even when the view is not further used by something else.
 * @param view The reactive view
 * @returns disposer function, which can be used to stop the view from being updated in the future.
 */

function autorun(view, opts) {
  var _opts$name, _opts;

  if (opts === void 0) {
    opts = EMPTY_OBJECT;
  }

  if (true) {
    if (!isFunction(view)) die("Autorun expects a function as first argument");
    if (isAction(view)) die("Autorun does not accept actions since actions are untrackable");
  }

  var name = (_opts$name = (_opts = opts) == null ? void 0 : _opts.name) != null ? _opts$name :  true ? view.name || "Autorun@" + getNextId() : 0;
  var runSync = !opts.scheduler && !opts.delay;
  var reaction;

  if (runSync) {
    // normal autorun
    reaction = new Reaction(name, function () {
      this.track(reactionRunner);
    }, opts.onError, opts.requiresObservable);
  } else {
    var scheduler = createSchedulerFromOptions(opts); // debounced autorun

    var isScheduled = false;
    reaction = new Reaction(name, function () {
      if (!isScheduled) {
        isScheduled = true;
        scheduler(function () {
          isScheduled = false;
          if (!reaction.isDisposed_) reaction.track(reactionRunner);
        });
      }
    }, opts.onError, opts.requiresObservable);
  }

  function reactionRunner() {
    view(reaction);
  }

  reaction.schedule_();
  return reaction.getDisposer_();
}

var run = function run(f) {
  return f();
};

function createSchedulerFromOptions(opts) {
  return opts.scheduler ? opts.scheduler : opts.delay ? function (f) {
    return setTimeout(f, opts.delay);
  } : run;
}

function reaction(expression, effect, opts) {
  var _opts$name2;

  if (opts === void 0) {
    opts = EMPTY_OBJECT;
  }

  if (true) {
    if (!isFunction(expression) || !isFunction(effect)) die("First and second argument to reaction should be functions");
    if (!isPlainObject(opts)) die("Third argument of reactions should be an object");
  }

  var name = (_opts$name2 = opts.name) != null ? _opts$name2 :  true ? "Reaction@" + getNextId() : 0;
  var effectAction = action(name, opts.onError ? wrapErrorHandler(opts.onError, effect) : effect);
  var runSync = !opts.scheduler && !opts.delay;
  var scheduler = createSchedulerFromOptions(opts);
  var firstTime = true;
  var isScheduled = false;
  var value;
  var oldValue = undefined; // only an issue with fireImmediately

  var equals = opts.compareStructural ? comparer.structural : opts.equals || comparer["default"];
  var r = new Reaction(name, function () {
    if (firstTime || runSync) {
      reactionRunner();
    } else if (!isScheduled) {
      isScheduled = true;
      scheduler(reactionRunner);
    }
  }, opts.onError, opts.requiresObservable);

  function reactionRunner() {
    isScheduled = false;
    if (r.isDisposed_) return;
    var changed = false;
    r.track(function () {
      var nextValue = allowStateChanges(false, function () {
        return expression(r);
      });
      changed = firstTime || !equals(value, nextValue);
      oldValue = value;
      value = nextValue;
    });
    if (firstTime && opts.fireImmediately) effectAction(value, oldValue, r);else if (!firstTime && changed) effectAction(value, oldValue, r);
    firstTime = false;
  }

  r.schedule_();
  return r.getDisposer_();
}

function wrapErrorHandler(errorHandler, baseFn) {
  return function () {
    try {
      return baseFn.apply(this, arguments);
    } catch (e) {
      errorHandler.call(this, e);
    }
  };
}

var ON_BECOME_OBSERVED = "onBO";
var ON_BECOME_UNOBSERVED = "onBUO";
function onBecomeObserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_OBSERVED, thing, arg2, arg3);
}
function onBecomeUnobserved(thing, arg2, arg3) {
  return interceptHook(ON_BECOME_UNOBSERVED, thing, arg2, arg3);
}

function interceptHook(hook, thing, arg2, arg3) {
  var atom = typeof arg3 === "function" ? getAtom(thing, arg2) : getAtom(thing);
  var cb = isFunction(arg3) ? arg3 : arg2;
  var listenersKey = hook + "L";

  if (atom[listenersKey]) {
    atom[listenersKey].add(cb);
  } else {
    atom[listenersKey] = new Set([cb]);
  }

  return function () {
    var hookListeners = atom[listenersKey];

    if (hookListeners) {
      hookListeners["delete"](cb);

      if (hookListeners.size === 0) {
        delete atom[listenersKey];
      }
    }
  };
}

var NEVER = "never";
var ALWAYS = "always";
var OBSERVED = "observed"; // const IF_AVAILABLE = "ifavailable"

function configure(options) {
  if (options.isolateGlobalState === true) {
    isolateGlobalState();
  }

  var useProxies = options.useProxies,
      enforceActions = options.enforceActions;

  if (useProxies !== undefined) {
    globalState.useProxies = useProxies === ALWAYS ? true : useProxies === NEVER ? false : typeof Proxy !== "undefined";
  }

  if (useProxies === "ifavailable") globalState.verifyProxies = true;

  if (enforceActions !== undefined) {
    var ea = enforceActions === ALWAYS ? ALWAYS : enforceActions === OBSERVED;
    globalState.enforceActions = ea;
    globalState.allowStateChanges = ea === true || ea === ALWAYS ? false : true;
  }
  ["computedRequiresReaction", "reactionRequiresObservable", "observableRequiresReaction", "disableErrorBoundaries", "safeDescriptors"].forEach(function (key) {
    if (key in options) globalState[key] = !!options[key];
  });
  globalState.allowStateReads = !globalState.observableRequiresReaction;

  if ( true && globalState.disableErrorBoundaries === true) {
    console.warn("WARNING: Debug feature only. MobX will NOT recover from errors when `disableErrorBoundaries` is enabled.");
  }

  if (options.reactionScheduler) {
    setReactionScheduler(options.reactionScheduler);
  }
}

function extendObservable(target, properties, annotations, options) {
  if (true) {
    if (arguments.length > 4) die("'extendObservable' expected 2-4 arguments");
    if (typeof target !== "object") die("'extendObservable' expects an object as first argument");
    if (isObservableMap(target)) die("'extendObservable' should not be used on maps, use map.merge instead");
    if (!isPlainObject(properties)) die("'extendObservabe' only accepts plain objects as second argument");
    if (isObservable(properties) || isObservable(annotations)) die("Extending an object with another observable (object) is not supported");
  } // Pull descriptors first, so we don't have to deal with props added by administration ($mobx)


  var descriptors = getOwnPropertyDescriptors(properties);
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();

  try {
    ownKeys(descriptors).forEach(function (key) {
      adm.extend_(key, descriptors[key], // must pass "undefined" for { key: undefined }
      !annotations ? true : key in annotations ? annotations[key] : true);
    });
  } finally {
    endBatch();
  }

  return target;
}

function getDependencyTree(thing, property) {
  return nodeToDependencyTree(getAtom(thing, property));
}

function nodeToDependencyTree(node) {
  var result = {
    name: node.name_
  };
  if (node.observing_ && node.observing_.length > 0) result.dependencies = unique(node.observing_).map(nodeToDependencyTree);
  return result;
}

function getObserverTree(thing, property) {
  return nodeToObserverTree(getAtom(thing, property));
}

function nodeToObserverTree(node) {
  var result = {
    name: node.name_
  };
  if (hasObservers(node)) result.observers = Array.from(getObservers(node)).map(nodeToObserverTree);
  return result;
}

function unique(list) {
  return Array.from(new Set(list));
}

var generatorId = 0;
function FlowCancellationError() {
  this.message = "FLOW_CANCELLED";
}
FlowCancellationError.prototype = /*#__PURE__*/Object.create(Error.prototype);
function isFlowCancellationError(error) {
  return error instanceof FlowCancellationError;
}
var flowAnnotation = /*#__PURE__*/createFlowAnnotation("flow");
var flowBoundAnnotation = /*#__PURE__*/createFlowAnnotation("flow.bound", {
  bound: true
});
var flow = /*#__PURE__*/Object.assign(function flow(arg1, arg2) {
  // @flow
  if (isStringish(arg2)) {
    return storeAnnotation(arg1, arg2, flowAnnotation);
  } // flow(fn)


  if ( true && arguments.length !== 1) die("Flow expects single argument with generator function");
  var generator = arg1;
  var name = generator.name || "<unnamed flow>"; // Implementation based on https://github.com/tj/co/blob/master/index.js

  var res = function res() {
    var ctx = this;
    var args = arguments;
    var runId = ++generatorId;
    var gen = action(name + " - runid: " + runId + " - init", generator).apply(ctx, args);
    var rejector;
    var pendingPromise = undefined;
    var promise = new Promise(function (resolve, reject) {
      var stepId = 0;
      rejector = reject;

      function onFulfilled(res) {
        pendingPromise = undefined;
        var ret;

        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen.next).call(gen, res);
        } catch (e) {
          return reject(e);
        }

        next(ret);
      }

      function onRejected(err) {
        pendingPromise = undefined;
        var ret;

        try {
          ret = action(name + " - runid: " + runId + " - yield " + stepId++, gen["throw"]).call(gen, err);
        } catch (e) {
          return reject(e);
        }

        next(ret);
      }

      function next(ret) {
        if (isFunction(ret == null ? void 0 : ret.then)) {
          // an async iterator
          ret.then(next, reject);
          return;
        }

        if (ret.done) return resolve(ret.value);
        pendingPromise = Promise.resolve(ret.value);
        return pendingPromise.then(onFulfilled, onRejected);
      }

      onFulfilled(undefined); // kick off the process
    });
    promise.cancel = action(name + " - runid: " + runId + " - cancel", function () {
      try {
        if (pendingPromise) cancelPromise(pendingPromise); // Finally block can return (or yield) stuff..

        var _res = gen["return"](undefined); // eat anything that promise would do, it's cancelled!


        var yieldedPromise = Promise.resolve(_res.value);
        yieldedPromise.then(noop, noop);
        cancelPromise(yieldedPromise); // maybe it can be cancelled :)
        // reject our original promise

        rejector(new FlowCancellationError());
      } catch (e) {
        rejector(e); // there could be a throwing finally block
      }
    });
    return promise;
  };

  res.isMobXFlow = true;
  return res;
}, flowAnnotation);
flow.bound = /*#__PURE__*/createDecoratorAnnotation(flowBoundAnnotation);

function cancelPromise(promise) {
  if (isFunction(promise.cancel)) promise.cancel();
}

function flowResult(result) {
  return result; // just tricking TypeScript :)
}
function isFlow(fn) {
  return (fn == null ? void 0 : fn.isMobXFlow) === true;
}

function interceptReads(thing, propOrHandler, handler) {
  var target;

  if (isObservableMap(thing) || isObservableArray(thing) || isObservableValue(thing)) {
    target = getAdministration(thing);
  } else if (isObservableObject(thing)) {
    if ( true && !isStringish(propOrHandler)) return die("InterceptReads can only be used with a specific property, not with an object in general");
    target = getAdministration(thing, propOrHandler);
  } else if (true) {
    return die("Expected observable map, object or array as first array");
  }

  if ( true && target.dehancer !== undefined) return die("An intercept reader was already established");
  target.dehancer = typeof propOrHandler === "function" ? propOrHandler : handler;
  return function () {
    target.dehancer = undefined;
  };
}

function intercept(thing, propOrHandler, handler) {
  if (isFunction(handler)) return interceptProperty(thing, propOrHandler, handler);else return interceptInterceptable(thing, propOrHandler);
}

function interceptInterceptable(thing, handler) {
  return getAdministration(thing).intercept_(handler);
}

function interceptProperty(thing, property, handler) {
  return getAdministration(thing, property).intercept_(handler);
}

function _isComputed(value, property) {
  if (property !== undefined) {
    if (isObservableObject(value) === false) return false;
    if (!value[$mobx].values_.has(property)) return false;
    var atom = getAtom(value, property);
    return isComputedValue(atom);
  }

  return isComputedValue(value);
}
function isComputed(value) {
  if ( true && arguments.length > 1) return die("isComputed expects only 1 argument. Use isComputedProp to inspect the observability of a property");
  return _isComputed(value);
}
function isComputedProp(value, propName) {
  if ( true && !isStringish(propName)) return die("isComputed expected a property name as second argument");
  return _isComputed(value, propName);
}

function _isObservable(value, property) {
  if (!value) return false;

  if (property !== undefined) {
    if ( true && (isObservableMap(value) || isObservableArray(value))) return die("isObservable(object, propertyName) is not supported for arrays and maps. Use map.has or array.length instead.");

    if (isObservableObject(value)) {
      return value[$mobx].values_.has(property);
    }

    return false;
  } // For first check, see #701


  return isObservableObject(value) || !!value[$mobx] || isAtom(value) || isReaction(value) || isComputedValue(value);
}

function isObservable(value) {
  if ( true && arguments.length !== 1) die("isObservable expects only 1 argument. Use isObservableProp to inspect the observability of a property");
  return _isObservable(value);
}
function isObservableProp(value, propName) {
  if ( true && !isStringish(propName)) return die("expected a property name as second argument");
  return _isObservable(value, propName);
}

function keys(obj) {
  if (isObservableObject(obj)) {
    return obj[$mobx].keys_();
  }

  if (isObservableMap(obj) || isObservableSet(obj)) {
    return Array.from(obj.keys());
  }

  if (isObservableArray(obj)) {
    return obj.map(function (_, index) {
      return index;
    });
  }

  die(5);
}
function values(obj) {
  if (isObservableObject(obj)) {
    return keys(obj).map(function (key) {
      return obj[key];
    });
  }

  if (isObservableMap(obj)) {
    return keys(obj).map(function (key) {
      return obj.get(key);
    });
  }

  if (isObservableSet(obj)) {
    return Array.from(obj.values());
  }

  if (isObservableArray(obj)) {
    return obj.slice();
  }

  die(6);
}
function entries(obj) {
  if (isObservableObject(obj)) {
    return keys(obj).map(function (key) {
      return [key, obj[key]];
    });
  }

  if (isObservableMap(obj)) {
    return keys(obj).map(function (key) {
      return [key, obj.get(key)];
    });
  }

  if (isObservableSet(obj)) {
    return Array.from(obj.entries());
  }

  if (isObservableArray(obj)) {
    return obj.map(function (key, index) {
      return [index, key];
    });
  }

  die(7);
}
function set(obj, key, value) {
  if (arguments.length === 2 && !isObservableSet(obj)) {
    startBatch();
    var _values = key;

    try {
      for (var _key in _values) {
        set(obj, _key, _values[_key]);
      }
    } finally {
      endBatch();
    }

    return;
  }

  if (isObservableObject(obj)) {
    obj[$mobx].set_(key, value);
  } else if (isObservableMap(obj)) {
    obj.set(key, value);
  } else if (isObservableSet(obj)) {
    obj.add(key);
  } else if (isObservableArray(obj)) {
    if (typeof key !== "number") key = parseInt(key, 10);
    if (key < 0) die("Invalid index: '" + key + "'");
    startBatch();
    if (key >= obj.length) obj.length = key + 1;
    obj[key] = value;
    endBatch();
  } else die(8);
}
function remove(obj, key) {
  if (isObservableObject(obj)) {
    obj[$mobx].delete_(key);
  } else if (isObservableMap(obj)) {
    obj["delete"](key);
  } else if (isObservableSet(obj)) {
    obj["delete"](key);
  } else if (isObservableArray(obj)) {
    if (typeof key !== "number") key = parseInt(key, 10);
    obj.splice(key, 1);
  } else {
    die(9);
  }
}
function has(obj, key) {
  if (isObservableObject(obj)) {
    return obj[$mobx].has_(key);
  } else if (isObservableMap(obj)) {
    return obj.has(key);
  } else if (isObservableSet(obj)) {
    return obj.has(key);
  } else if (isObservableArray(obj)) {
    return key >= 0 && key < obj.length;
  }

  die(10);
}
function get(obj, key) {
  if (!has(obj, key)) return undefined;

  if (isObservableObject(obj)) {
    return obj[$mobx].get_(key);
  } else if (isObservableMap(obj)) {
    return obj.get(key);
  } else if (isObservableArray(obj)) {
    return obj[key];
  }

  die(11);
}
function apiDefineProperty(obj, key, descriptor) {
  if (isObservableObject(obj)) {
    return obj[$mobx].defineProperty_(key, descriptor);
  }

  die(39);
}
function apiOwnKeys(obj) {
  if (isObservableObject(obj)) {
    return obj[$mobx].ownKeys_();
  }

  die(38);
}

function observe(thing, propOrCb, cbOrFire, fireImmediately) {
  if (isFunction(cbOrFire)) return observeObservableProperty(thing, propOrCb, cbOrFire, fireImmediately);else return observeObservable(thing, propOrCb, cbOrFire);
}

function observeObservable(thing, listener, fireImmediately) {
  return getAdministration(thing).observe_(listener, fireImmediately);
}

function observeObservableProperty(thing, property, listener, fireImmediately) {
  return getAdministration(thing, property).observe_(listener, fireImmediately);
}

function cache(map, key, value) {
  map.set(key, value);
  return value;
}

function toJSHelper(source, __alreadySeen) {
  if (source == null || typeof source !== "object" || source instanceof Date || !isObservable(source)) return source;
  if (isObservableValue(source) || isComputedValue(source)) return toJSHelper(source.get(), __alreadySeen);

  if (__alreadySeen.has(source)) {
    return __alreadySeen.get(source);
  }

  if (isObservableArray(source)) {
    var res = cache(__alreadySeen, source, new Array(source.length));
    source.forEach(function (value, idx) {
      res[idx] = toJSHelper(value, __alreadySeen);
    });
    return res;
  }

  if (isObservableSet(source)) {
    var _res = cache(__alreadySeen, source, new Set());

    source.forEach(function (value) {
      _res.add(toJSHelper(value, __alreadySeen));
    });
    return _res;
  }

  if (isObservableMap(source)) {
    var _res2 = cache(__alreadySeen, source, new Map());

    source.forEach(function (value, key) {
      _res2.set(key, toJSHelper(value, __alreadySeen));
    });
    return _res2;
  } else {
    // must be observable object
    var _res3 = cache(__alreadySeen, source, {});

    apiOwnKeys(source).forEach(function (key) {
      if (objectPrototype.propertyIsEnumerable.call(source, key)) {
        _res3[key] = toJSHelper(source[key], __alreadySeen);
      }
    });
    return _res3;
  }
}
/**
 * Basically, a deep clone, so that no reactive property will exist anymore.
 */


function toJS(source, options) {
  if ( true && options) die("toJS no longer supports options");
  return toJSHelper(source, new Map());
}

function trace() {
  if (false) {}
  var enterBreakPoint = false;

  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  if (typeof args[args.length - 1] === "boolean") enterBreakPoint = args.pop();
  var derivation = getAtomFromArgs(args);

  if (!derivation) {
    return die("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");
  }

  if (derivation.isTracing_ === TraceMode.NONE) {
    console.log("[mobx.trace] '" + derivation.name_ + "' tracing enabled");
  }

  derivation.isTracing_ = enterBreakPoint ? TraceMode.BREAK : TraceMode.LOG;
}

function getAtomFromArgs(args) {
  switch (args.length) {
    case 0:
      return globalState.trackingDerivation;

    case 1:
      return getAtom(args[0]);

    case 2:
      return getAtom(args[0], args[1]);
  }
}

/**
 * During a transaction no views are updated until the end of the transaction.
 * The transaction will be run synchronously nonetheless.
 *
 * @param action a function that updates some reactive state
 * @returns any value that was returned by the 'action' parameter.
 */

function transaction(action, thisArg) {
  if (thisArg === void 0) {
    thisArg = undefined;
  }

  startBatch();

  try {
    return action.apply(thisArg);
  } finally {
    endBatch();
  }
}

function when(predicate, arg1, arg2) {
  if (arguments.length === 1 || arg1 && typeof arg1 === "object") return whenPromise(predicate, arg1);
  return _when(predicate, arg1, arg2 || {});
}

function _when(predicate, effect, opts) {
  var timeoutHandle;

  if (typeof opts.timeout === "number") {
    var error = new Error("WHEN_TIMEOUT");
    timeoutHandle = setTimeout(function () {
      if (!disposer[$mobx].isDisposed_) {
        disposer();
        if (opts.onError) opts.onError(error);else throw error;
      }
    }, opts.timeout);
  }

  opts.name =  true ? opts.name || "When@" + getNextId() : 0;
  var effectAction = createAction( true ? opts.name + "-effect" : 0, effect); // eslint-disable-next-line

  var disposer = autorun(function (r) {
    // predicate should not change state
    var cond = allowStateChanges(false, predicate);

    if (cond) {
      r.dispose();
      if (timeoutHandle) clearTimeout(timeoutHandle);
      effectAction();
    }
  }, opts);
  return disposer;
}

function whenPromise(predicate, opts) {
  if ( true && opts && opts.onError) return die("the options 'onError' and 'promise' cannot be combined");
  var cancel;
  var res = new Promise(function (resolve, reject) {
    var disposer = _when(predicate, resolve, _extends({}, opts, {
      onError: reject
    }));

    cancel = function cancel() {
      disposer();
      reject("WHEN_CANCELLED");
    };
  });
  res.cancel = cancel;
  return res;
}

function getAdm(target) {
  return target[$mobx];
} // Optimization: we don't need the intermediate objects and could have a completely custom administration for DynamicObjects,
// and skip either the internal values map, or the base object with its property descriptors!


var objectProxyTraps = {
  has: function has(target, name) {
    if ( true && globalState.trackingDerivation) warnAboutProxyRequirement("detect new properties using the 'in' operator. Use 'has' from 'mobx' instead.");
    return getAdm(target).has_(name);
  },
  get: function get(target, name) {
    return getAdm(target).get_(name);
  },
  set: function set(target, name, value) {
    var _getAdm$set_;

    if (!isStringish(name)) return false;

    if ( true && !getAdm(target).values_.has(name)) {
      warnAboutProxyRequirement("add a new observable property through direct assignment. Use 'set' from 'mobx' instead.");
    } // null (intercepted) -> true (success)


    return (_getAdm$set_ = getAdm(target).set_(name, value, true)) != null ? _getAdm$set_ : true;
  },
  deleteProperty: function deleteProperty(target, name) {
    var _getAdm$delete_;

    if (true) {
      warnAboutProxyRequirement("delete properties from an observable object. Use 'remove' from 'mobx' instead.");
    }

    if (!isStringish(name)) return false; // null (intercepted) -> true (success)

    return (_getAdm$delete_ = getAdm(target).delete_(name, true)) != null ? _getAdm$delete_ : true;
  },
  defineProperty: function defineProperty(target, name, descriptor) {
    var _getAdm$definePropert;

    if (true) {
      warnAboutProxyRequirement("define property on an observable object. Use 'defineProperty' from 'mobx' instead.");
    } // null (intercepted) -> true (success)


    return (_getAdm$definePropert = getAdm(target).defineProperty_(name, descriptor)) != null ? _getAdm$definePropert : true;
  },
  ownKeys: function ownKeys(target) {
    if ( true && globalState.trackingDerivation) warnAboutProxyRequirement("iterate keys to detect added / removed properties. Use 'keys' from 'mobx' instead.");
    return getAdm(target).ownKeys_();
  },
  preventExtensions: function preventExtensions(target) {
    die(13);
  }
};
function asDynamicObservableObject(target, options) {
  var _target$$mobx, _target$$mobx$proxy_;

  assertProxies();
  target = asObservableObject(target, options);
  return (_target$$mobx$proxy_ = (_target$$mobx = target[$mobx]).proxy_) != null ? _target$$mobx$proxy_ : _target$$mobx.proxy_ = new Proxy(target, objectProxyTraps);
}

function hasInterceptors(interceptable) {
  return interceptable.interceptors_ !== undefined && interceptable.interceptors_.length > 0;
}
function registerInterceptor(interceptable, handler) {
  var interceptors = interceptable.interceptors_ || (interceptable.interceptors_ = []);
  interceptors.push(handler);
  return once(function () {
    var idx = interceptors.indexOf(handler);
    if (idx !== -1) interceptors.splice(idx, 1);
  });
}
function interceptChange(interceptable, change) {
  var prevU = untrackedStart();

  try {
    // Interceptor can modify the array, copy it to avoid concurrent modification, see #1950
    var interceptors = [].concat(interceptable.interceptors_ || []);

    for (var i = 0, l = interceptors.length; i < l; i++) {
      change = interceptors[i](change);
      if (change && !change.type) die(14);
      if (!change) break;
    }

    return change;
  } finally {
    untrackedEnd(prevU);
  }
}

function hasListeners(listenable) {
  return listenable.changeListeners_ !== undefined && listenable.changeListeners_.length > 0;
}
function registerListener(listenable, handler) {
  var listeners = listenable.changeListeners_ || (listenable.changeListeners_ = []);
  listeners.push(handler);
  return once(function () {
    var idx = listeners.indexOf(handler);
    if (idx !== -1) listeners.splice(idx, 1);
  });
}
function notifyListeners(listenable, change) {
  var prevU = untrackedStart();
  var listeners = listenable.changeListeners_;
  if (!listeners) return;
  listeners = listeners.slice();

  for (var i = 0, l = listeners.length; i < l; i++) {
    listeners[i](change);
  }

  untrackedEnd(prevU);
}

function makeObservable(target, annotations, options) {
  var adm = asObservableObject(target, options)[$mobx];
  startBatch();

  try {
    var _annotations;

    // Default to decorators
    (_annotations = annotations) != null ? _annotations : annotations = collectStoredAnnotations(target); // Annotate

    ownKeys(annotations).forEach(function (key) {
      return adm.make_(key, annotations[key]);
    });
  } finally {
    endBatch();
  }

  return target;
} // proto[keysSymbol] = new Set<PropertyKey>()

var keysSymbol = /*#__PURE__*/Symbol("mobx-keys");
function makeAutoObservable(target, overrides, options) {
  if (true) {
    if (!isPlainObject(target) && !isPlainObject(Object.getPrototypeOf(target))) die("'makeAutoObservable' can only be used for classes that don't have a superclass");
    if (isObservableObject(target)) die("makeAutoObservable can only be used on objects not already made observable");
  } // Optimization: avoid visiting protos
  // Assumes that annotation.make_/.extend_ works the same for plain objects


  if (isPlainObject(target)) {
    return extendObservable(target, target, overrides, options);
  }

  var adm = asObservableObject(target, options)[$mobx]; // Optimization: cache keys on proto
  // Assumes makeAutoObservable can be called only once per object and can't be used in subclass

  if (!target[keysSymbol]) {
    var proto = Object.getPrototypeOf(target);
    var keys = new Set([].concat(ownKeys(target), ownKeys(proto)));
    keys["delete"]("constructor");
    keys["delete"]($mobx);
    addHiddenProp(proto, keysSymbol, keys);
  }

  startBatch();

  try {
    target[keysSymbol].forEach(function (key) {
      return adm.make_(key, // must pass "undefined" for { key: undefined }
      !overrides ? true : key in overrides ? overrides[key] : true);
    });
  } finally {
    endBatch();
  }

  return target;
}

var SPLICE = "splice";
var UPDATE = "update";
var MAX_SPLICE_SIZE = 10000; // See e.g. https://github.com/mobxjs/mobx/issues/859

var arrayTraps = {
  get: function get(target, name) {
    var adm = target[$mobx];
    if (name === $mobx) return adm;
    if (name === "length") return adm.getArrayLength_();

    if (typeof name === "string" && !isNaN(name)) {
      return adm.get_(parseInt(name));
    }

    if (hasProp(arrayExtensions, name)) {
      return arrayExtensions[name];
    }

    return target[name];
  },
  set: function set(target, name, value) {
    var adm = target[$mobx];

    if (name === "length") {
      adm.setArrayLength_(value);
    }

    if (typeof name === "symbol" || isNaN(name)) {
      target[name] = value;
    } else {
      // numeric string
      adm.set_(parseInt(name), value);
    }

    return true;
  },
  preventExtensions: function preventExtensions() {
    die(15);
  }
};
var ObservableArrayAdministration = /*#__PURE__*/function () {
  // this is the prop that gets proxied, so can't replace it!
  function ObservableArrayAdministration(name, enhancer, owned_, legacyMode_) {
    if (name === void 0) {
      name =  true ? "ObservableArray@" + getNextId() : 0;
    }

    this.owned_ = void 0;
    this.legacyMode_ = void 0;
    this.atom_ = void 0;
    this.values_ = [];
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.enhancer_ = void 0;
    this.dehancer = void 0;
    this.proxy_ = void 0;
    this.lastKnownLength_ = 0;
    this.owned_ = owned_;
    this.legacyMode_ = legacyMode_;
    this.atom_ = new Atom(name);

    this.enhancer_ = function (newV, oldV) {
      return enhancer(newV, oldV,  true ? name + "[..]" : 0);
    };
  }

  var _proto = ObservableArrayAdministration.prototype;

  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== undefined) return this.dehancer(value);
    return value;
  };

  _proto.dehanceValues_ = function dehanceValues_(values) {
    if (this.dehancer !== undefined && values.length > 0) return values.map(this.dehancer);
    return values;
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _proto.observe_ = function observe_(listener, fireImmediately) {
    if (fireImmediately === void 0) {
      fireImmediately = false;
    }

    if (fireImmediately) {
      listener({
        observableKind: "array",
        object: this.proxy_,
        debugObjectName: this.atom_.name_,
        type: "splice",
        index: 0,
        added: this.values_.slice(),
        addedCount: this.values_.length,
        removed: [],
        removedCount: 0
      });
    }

    return registerListener(this, listener);
  };

  _proto.getArrayLength_ = function getArrayLength_() {
    this.atom_.reportObserved();
    return this.values_.length;
  };

  _proto.setArrayLength_ = function setArrayLength_(newLength) {
    if (typeof newLength !== "number" || newLength < 0) die("Out of range: " + newLength);
    var currentLength = this.values_.length;
    if (newLength === currentLength) return;else if (newLength > currentLength) {
      var newItems = new Array(newLength - currentLength);

      for (var i = 0; i < newLength - currentLength; i++) {
        newItems[i] = undefined;
      } // No Array.fill everywhere...


      this.spliceWithArray_(currentLength, 0, newItems);
    } else this.spliceWithArray_(newLength, currentLength - newLength);
  };

  _proto.updateArrayLength_ = function updateArrayLength_(oldLength, delta) {
    if (oldLength !== this.lastKnownLength_) die(16);
    this.lastKnownLength_ += delta;
    if (this.legacyMode_ && delta > 0) reserveArrayBuffer(oldLength + delta + 1);
  };

  _proto.spliceWithArray_ = function spliceWithArray_(index, deleteCount, newItems) {
    var _this = this;

    checkIfStateModificationsAreAllowed(this.atom_);
    var length = this.values_.length;
    if (index === undefined) index = 0;else if (index > length) index = length;else if (index < 0) index = Math.max(0, length + index);
    if (arguments.length === 1) deleteCount = length - index;else if (deleteCount === undefined || deleteCount === null) deleteCount = 0;else deleteCount = Math.max(0, Math.min(deleteCount, length - index));
    if (newItems === undefined) newItems = EMPTY_ARRAY;

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_,
        type: SPLICE,
        index: index,
        removedCount: deleteCount,
        added: newItems
      });
      if (!change) return EMPTY_ARRAY;
      deleteCount = change.removedCount;
      newItems = change.added;
    }

    newItems = newItems.length === 0 ? newItems : newItems.map(function (v) {
      return _this.enhancer_(v, undefined);
    });

    if (this.legacyMode_ || "development" !== "production") {
      var lengthDelta = newItems.length - deleteCount;
      this.updateArrayLength_(length, lengthDelta); // checks if internal array wasn't modified
    }

    var res = this.spliceItemsIntoValues_(index, deleteCount, newItems);
    if (deleteCount !== 0 || newItems.length !== 0) this.notifyArraySplice_(index, newItems, res);
    return this.dehanceValues_(res);
  };

  _proto.spliceItemsIntoValues_ = function spliceItemsIntoValues_(index, deleteCount, newItems) {
    if (newItems.length < MAX_SPLICE_SIZE) {
      var _this$values_;

      return (_this$values_ = this.values_).splice.apply(_this$values_, [index, deleteCount].concat(newItems));
    } else {
      var res = this.values_.slice(index, index + deleteCount);
      var oldItems = this.values_.slice(index + deleteCount);
      this.values_.length = index + newItems.length - deleteCount;

      for (var i = 0; i < newItems.length; i++) {
        this.values_[index + i] = newItems[i];
      }

      for (var _i = 0; _i < oldItems.length; _i++) {
        this.values_[index + newItems.length + _i] = oldItems[_i];
      }

      return res;
    }
  };

  _proto.notifyArrayChildUpdate_ = function notifyArrayChildUpdate_(index, newValue, oldValue) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      type: UPDATE,
      debugObjectName: this.atom_.name_,
      index: index,
      newValue: newValue,
      oldValue: oldValue
    } : null; // The reason why this is on right hand side here (and not above), is this way the uglifier will drop it, but it won't
    // cause any runtime overhead in development mode without NODE_ENV set, unless spying is enabled

    if ( true && notifySpy) spyReportStart(change);
    this.atom_.reportChanged();
    if (notify) notifyListeners(this, change);
    if ( true && notifySpy) spyReportEnd();
  };

  _proto.notifyArraySplice_ = function notifyArraySplice_(index, added, removed) {
    var notifySpy = !this.owned_ && isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "array",
      object: this.proxy_,
      debugObjectName: this.atom_.name_,
      type: SPLICE,
      index: index,
      removed: removed,
      added: added,
      removedCount: removed.length,
      addedCount: added.length
    } : null;
    if ( true && notifySpy) spyReportStart(change);
    this.atom_.reportChanged(); // conform: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/observe

    if (notify) notifyListeners(this, change);
    if ( true && notifySpy) spyReportEnd();
  };

  _proto.get_ = function get_(index) {
    if (index < this.values_.length) {
      this.atom_.reportObserved();
      return this.dehanceValue_(this.values_[index]);
    }

    console.warn( true ? "[mobx] Out of bounds read: " + index : 0);
  };

  _proto.set_ = function set_(index, newValue) {
    var values = this.values_;

    if (index < values.length) {
      // update at index in range
      checkIfStateModificationsAreAllowed(this.atom_);
      var oldValue = values[index];

      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          type: UPDATE,
          object: this.proxy_,
          index: index,
          newValue: newValue
        });
        if (!change) return;
        newValue = change.newValue;
      }

      newValue = this.enhancer_(newValue, oldValue);
      var changed = newValue !== oldValue;

      if (changed) {
        values[index] = newValue;
        this.notifyArrayChildUpdate_(index, newValue, oldValue);
      }
    } else if (index === values.length) {
      // add a new item
      this.spliceWithArray_(index, 0, [newValue]);
    } else {
      // out of bounds
      die(17, index, values.length);
    }
  };

  return ObservableArrayAdministration;
}();
function createObservableArray(initialValues, enhancer, name, owned) {
  if (name === void 0) {
    name =  true ? "ObservableArray@" + getNextId() : 0;
  }

  if (owned === void 0) {
    owned = false;
  }

  assertProxies();
  var adm = new ObservableArrayAdministration(name, enhancer, owned, false);
  addHiddenFinalProp(adm.values_, $mobx, adm);
  var proxy = new Proxy(adm.values_, arrayTraps);
  adm.proxy_ = proxy;

  if (initialValues && initialValues.length) {
    var prev = allowStateChangesStart(true);
    adm.spliceWithArray_(0, 0, initialValues);
    allowStateChangesEnd(prev);
  }

  return proxy;
} // eslint-disable-next-line

var arrayExtensions = {
  clear: function clear() {
    return this.splice(0);
  },
  replace: function replace(newItems) {
    var adm = this[$mobx];
    return adm.spliceWithArray_(0, adm.values_.length, newItems);
  },
  // Used by JSON.stringify
  toJSON: function toJSON() {
    return this.slice();
  },

  /*
   * functions that do alter the internal structure of the array, (based on lib.es6.d.ts)
   * since these functions alter the inner structure of the array, the have side effects.
   * Because the have side effects, they should not be used in computed function,
   * and for that reason the do not call dependencyState.notifyObserved
   */
  splice: function splice(index, deleteCount) {
    for (var _len = arguments.length, newItems = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      newItems[_key - 2] = arguments[_key];
    }

    var adm = this[$mobx];

    switch (arguments.length) {
      case 0:
        return [];

      case 1:
        return adm.spliceWithArray_(index);

      case 2:
        return adm.spliceWithArray_(index, deleteCount);
    }

    return adm.spliceWithArray_(index, deleteCount, newItems);
  },
  spliceWithArray: function spliceWithArray(index, deleteCount, newItems) {
    return this[$mobx].spliceWithArray_(index, deleteCount, newItems);
  },
  push: function push() {
    var adm = this[$mobx];

    for (var _len2 = arguments.length, items = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      items[_key2] = arguments[_key2];
    }

    adm.spliceWithArray_(adm.values_.length, 0, items);
    return adm.values_.length;
  },
  pop: function pop() {
    return this.splice(Math.max(this[$mobx].values_.length - 1, 0), 1)[0];
  },
  shift: function shift() {
    return this.splice(0, 1)[0];
  },
  unshift: function unshift() {
    var adm = this[$mobx];

    for (var _len3 = arguments.length, items = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      items[_key3] = arguments[_key3];
    }

    adm.spliceWithArray_(0, 0, items);
    return adm.values_.length;
  },
  reverse: function reverse() {
    // reverse by default mutates in place before returning the result
    // which makes it both a 'derivation' and a 'mutation'.
    if (globalState.trackingDerivation) {
      die(37, "reverse");
    }

    this.replace(this.slice().reverse());
    return this;
  },
  sort: function sort() {
    // sort by default mutates in place before returning the result
    // which goes against all good practices. Let's not change the array in place!
    if (globalState.trackingDerivation) {
      die(37, "sort");
    }

    var copy = this.slice();
    copy.sort.apply(copy, arguments);
    this.replace(copy);
    return this;
  },
  remove: function remove(value) {
    var adm = this[$mobx];
    var idx = adm.dehanceValues_(adm.values_).indexOf(value);

    if (idx > -1) {
      this.splice(idx, 1);
      return true;
    }

    return false;
  }
};
/**
 * Wrap function from prototype
 * Without this, everything works as well, but this works
 * faster as everything works on unproxied values
 */

addArrayExtension("concat", simpleFunc);
addArrayExtension("flat", simpleFunc);
addArrayExtension("includes", simpleFunc);
addArrayExtension("indexOf", simpleFunc);
addArrayExtension("join", simpleFunc);
addArrayExtension("lastIndexOf", simpleFunc);
addArrayExtension("slice", simpleFunc);
addArrayExtension("toString", simpleFunc);
addArrayExtension("toLocaleString", simpleFunc); // map

addArrayExtension("every", mapLikeFunc);
addArrayExtension("filter", mapLikeFunc);
addArrayExtension("find", mapLikeFunc);
addArrayExtension("findIndex", mapLikeFunc);
addArrayExtension("flatMap", mapLikeFunc);
addArrayExtension("forEach", mapLikeFunc);
addArrayExtension("map", mapLikeFunc);
addArrayExtension("some", mapLikeFunc); // reduce

addArrayExtension("reduce", reduceLikeFunc);
addArrayExtension("reduceRight", reduceLikeFunc);

function addArrayExtension(funcName, funcFactory) {
  if (typeof Array.prototype[funcName] === "function") {
    arrayExtensions[funcName] = funcFactory(funcName);
  }
} // Report and delegate to dehanced array


function simpleFunc(funcName) {
  return function () {
    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
} // Make sure callbacks recieve correct array arg #2326


function mapLikeFunc(funcName) {
  return function (callback, thisArg) {
    var _this2 = this;

    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_);
    return dehancedValues[funcName](function (element, index) {
      return callback.call(thisArg, element, index, _this2);
    });
  };
} // Make sure callbacks recieve correct array arg #2326


function reduceLikeFunc(funcName) {
  return function () {
    var _this3 = this;

    var adm = this[$mobx];
    adm.atom_.reportObserved();
    var dehancedValues = adm.dehanceValues_(adm.values_); // #2432 - reduce behavior depends on arguments.length

    var callback = arguments[0];

    arguments[0] = function (accumulator, currentValue, index) {
      return callback(accumulator, currentValue, index, _this3);
    };

    return dehancedValues[funcName].apply(dehancedValues, arguments);
  };
}

var isObservableArrayAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableArrayAdministration", ObservableArrayAdministration);
function isObservableArray(thing) {
  return isObject(thing) && isObservableArrayAdministration(thing[$mobx]);
}

var _Symbol$iterator, _Symbol$toStringTag;
var ObservableMapMarker = {};
var ADD = "add";
var DELETE = "delete"; // just extend Map? See also https://gist.github.com/nestharus/13b4d74f2ef4a2f4357dbd3fc23c1e54
// But: https://github.com/mobxjs/mobx/issues/1556

_Symbol$iterator = Symbol.iterator;
_Symbol$toStringTag = Symbol.toStringTag;
var ObservableMap = /*#__PURE__*/function () {
  // hasMap, not hashMap >-).
  function ObservableMap(initialData, enhancer_, name_) {
    if (enhancer_ === void 0) {
      enhancer_ = deepEnhancer;
    }

    if (name_ === void 0) {
      name_ =  true ? "ObservableMap@" + getNextId() : 0;
    }

    this.enhancer_ = void 0;
    this.name_ = void 0;
    this[$mobx] = ObservableMapMarker;
    this.data_ = void 0;
    this.hasMap_ = void 0;
    this.keysAtom_ = void 0;
    this.interceptors_ = void 0;
    this.changeListeners_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = enhancer_;
    this.name_ = name_;

    if (!isFunction(Map)) {
      die(18);
    }

    this.keysAtom_ = createAtom( true ? this.name_ + ".keys()" : 0);
    this.data_ = new Map();
    this.hasMap_ = new Map();
    this.merge(initialData);
  }

  var _proto = ObservableMap.prototype;

  _proto.has_ = function has_(key) {
    return this.data_.has(key);
  };

  _proto.has = function has(key) {
    var _this = this;

    if (!globalState.trackingDerivation) return this.has_(key);
    var entry = this.hasMap_.get(key);

    if (!entry) {
      var newEntry = entry = new ObservableValue(this.has_(key), referenceEnhancer,  true ? this.name_ + "." + stringifyKey(key) + "?" : 0, false);
      this.hasMap_.set(key, newEntry);
      onBecomeUnobserved(newEntry, function () {
        return _this.hasMap_["delete"](key);
      });
    }

    return entry.get();
  };

  _proto.set = function set(key, value) {
    var hasKey = this.has_(key);

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: hasKey ? UPDATE : ADD,
        object: this,
        newValue: value,
        name: key
      });
      if (!change) return this;
      value = change.newValue;
    }

    if (hasKey) {
      this.updateValue_(key, value);
    } else {
      this.addValue_(key, value);
    }

    return this;
  };

  _proto["delete"] = function _delete(key) {
    var _this2 = this;

    checkIfStateModificationsAreAllowed(this.keysAtom_);

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        name: key
      });
      if (!change) return false;
    }

    if (this.has_(key)) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);

      var _change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: this.data_.get(key).value_,
        name: key
      } : null;

      if ( true && notifySpy) spyReportStart(_change);
      transaction(function () {
        _this2.keysAtom_.reportChanged();

        _this2.updateHasMapEntry_(key, false);

        var observable = _this2.data_.get(key);

        observable.setNewValue_(undefined);

        _this2.data_["delete"](key);
      });
      if (notify) notifyListeners(this, _change);
      if ( true && notifySpy) spyReportEnd();
      return true;
    }

    return false;
  };

  _proto.updateHasMapEntry_ = function updateHasMapEntry_(key, value) {
    var entry = this.hasMap_.get(key);

    if (entry) {
      entry.setNewValue_(value);
    }
  };

  _proto.updateValue_ = function updateValue_(key, newValue) {
    var observable = this.data_.get(key);
    newValue = observable.prepareNewValue_(newValue);

    if (newValue !== globalState.UNCHANGED) {
      var notifySpy = isSpyEnabled();
      var notify = hasListeners(this);
      var change = notify || notifySpy ? {
        observableKind: "map",
        debugObjectName: this.name_,
        type: UPDATE,
        object: this,
        oldValue: observable.value_,
        name: key,
        newValue: newValue
      } : null;
      if ( true && notifySpy) spyReportStart(change);
      observable.setNewValue_(newValue);
      if (notify) notifyListeners(this, change);
      if ( true && notifySpy) spyReportEnd();
    }
  };

  _proto.addValue_ = function addValue_(key, newValue) {
    var _this3 = this;

    checkIfStateModificationsAreAllowed(this.keysAtom_);
    transaction(function () {
      var observable = new ObservableValue(newValue, _this3.enhancer_,  true ? _this3.name_ + "." + stringifyKey(key) : 0, false);

      _this3.data_.set(key, observable);

      newValue = observable.value_; // value might have been changed

      _this3.updateHasMapEntry_(key, true);

      _this3.keysAtom_.reportChanged();
    });
    var notifySpy = isSpyEnabled();
    var notify = hasListeners(this);
    var change = notify || notifySpy ? {
      observableKind: "map",
      debugObjectName: this.name_,
      type: ADD,
      object: this,
      name: key,
      newValue: newValue
    } : null;
    if ( true && notifySpy) spyReportStart(change);
    if (notify) notifyListeners(this, change);
    if ( true && notifySpy) spyReportEnd();
  };

  _proto.get = function get(key) {
    if (this.has(key)) return this.dehanceValue_(this.data_.get(key).get());
    return this.dehanceValue_(undefined);
  };

  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== undefined) {
      return this.dehancer(value);
    }

    return value;
  };

  _proto.keys = function keys() {
    this.keysAtom_.reportObserved();
    return this.data_.keys();
  };

  _proto.values = function values() {
    var self = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next = keys.next(),
            done = _keys$next.done,
            value = _keys$next.value;

        return {
          done: done,
          value: done ? undefined : self.get(value)
        };
      }
    });
  };

  _proto.entries = function entries() {
    var self = this;
    var keys = this.keys();
    return makeIterable({
      next: function next() {
        var _keys$next2 = keys.next(),
            done = _keys$next2.done,
            value = _keys$next2.value;

        return {
          done: done,
          value: done ? undefined : [value, self.get(value)]
        };
      }
    });
  };

  _proto[_Symbol$iterator] = function () {
    return this.entries();
  };

  _proto.forEach = function forEach(callback, thisArg) {
    for (var _iterator = _createForOfIteratorHelperLoose(this), _step; !(_step = _iterator()).done;) {
      var _step$value = _step.value,
          key = _step$value[0],
          value = _step$value[1];
      callback.call(thisArg, value, key, this);
    }
  }
  /** Merge another object into this object, returns this. */
  ;

  _proto.merge = function merge(other) {
    var _this4 = this;

    if (isObservableMap(other)) {
      other = new Map(other);
    }

    transaction(function () {
      if (isPlainObject(other)) getPlainObjectKeys(other).forEach(function (key) {
        return _this4.set(key, other[key]);
      });else if (Array.isArray(other)) other.forEach(function (_ref) {
        var key = _ref[0],
            value = _ref[1];
        return _this4.set(key, value);
      });else if (isES6Map(other)) {
        if (other.constructor !== Map) die(19, other);
        other.forEach(function (value, key) {
          return _this4.set(key, value);
        });
      } else if (other !== null && other !== undefined) die(20, other);
    });
    return this;
  };

  _proto.clear = function clear() {
    var _this5 = this;

    transaction(function () {
      untracked(function () {
        for (var _iterator2 = _createForOfIteratorHelperLoose(_this5.keys()), _step2; !(_step2 = _iterator2()).done;) {
          var key = _step2.value;

          _this5["delete"](key);
        }
      });
    });
  };

  _proto.replace = function replace(values) {
    var _this6 = this;

    // Implementation requirements:
    // - respect ordering of replacement map
    // - allow interceptors to run and potentially prevent individual operations
    // - don't recreate observables that already exist in original map (so we don't destroy existing subscriptions)
    // - don't _keysAtom.reportChanged if the keys of resulting map are indentical (order matters!)
    // - note that result map may differ from replacement map due to the interceptors
    transaction(function () {
      // Convert to map so we can do quick key lookups
      var replacementMap = convertToMap(values);
      var orderedData = new Map(); // Used for optimization

      var keysReportChangedCalled = false; // Delete keys that don't exist in replacement map
      // if the key deletion is prevented by interceptor
      // add entry at the beginning of the result map

      for (var _iterator3 = _createForOfIteratorHelperLoose(_this6.data_.keys()), _step3; !(_step3 = _iterator3()).done;) {
        var key = _step3.value;

        // Concurrently iterating/deleting keys
        // iterator should handle this correctly
        if (!replacementMap.has(key)) {
          var deleted = _this6["delete"](key); // Was the key removed?


          if (deleted) {
            // _keysAtom.reportChanged() was already called
            keysReportChangedCalled = true;
          } else {
            // Delete prevented by interceptor
            var value = _this6.data_.get(key);

            orderedData.set(key, value);
          }
        }
      } // Merge entries


      for (var _iterator4 = _createForOfIteratorHelperLoose(replacementMap.entries()), _step4; !(_step4 = _iterator4()).done;) {
        var _step4$value = _step4.value,
            _key = _step4$value[0],
            _value = _step4$value[1];

        // We will want to know whether a new key is added
        var keyExisted = _this6.data_.has(_key); // Add or update value


        _this6.set(_key, _value); // The addition could have been prevent by interceptor


        if (_this6.data_.has(_key)) {
          // The update could have been prevented by interceptor
          // and also we want to preserve existing values
          // so use value from _data map (instead of replacement map)
          var _value2 = _this6.data_.get(_key);

          orderedData.set(_key, _value2); // Was a new key added?

          if (!keyExisted) {
            // _keysAtom.reportChanged() was already called
            keysReportChangedCalled = true;
          }
        }
      } // Check for possible key order change


      if (!keysReportChangedCalled) {
        if (_this6.data_.size !== orderedData.size) {
          // If size differs, keys are definitely modified
          _this6.keysAtom_.reportChanged();
        } else {
          var iter1 = _this6.data_.keys();

          var iter2 = orderedData.keys();
          var next1 = iter1.next();
          var next2 = iter2.next();

          while (!next1.done) {
            if (next1.value !== next2.value) {
              _this6.keysAtom_.reportChanged();

              break;
            }

            next1 = iter1.next();
            next2 = iter2.next();
          }
        }
      } // Use correctly ordered map


      _this6.data_ = orderedData;
    });
    return this;
  };

  _proto.toString = function toString() {
    return "[object ObservableMap]";
  };

  _proto.toJSON = function toJSON() {
    return Array.from(this);
  };

  /**
   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
   * for callback details
   */
  _proto.observe_ = function observe_(listener, fireImmediately) {
    if ( true && fireImmediately === true) die("`observe` doesn't support fireImmediately=true in combination with maps.");
    return registerListener(this, listener);
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _createClass(ObservableMap, [{
    key: "size",
    get: function get() {
      this.keysAtom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag,
    get: function get() {
      return "Map";
    }
  }]);

  return ObservableMap;
}(); // eslint-disable-next-line

var isObservableMap = /*#__PURE__*/createInstanceofPredicate("ObservableMap", ObservableMap);

function convertToMap(dataStructure) {
  if (isES6Map(dataStructure) || isObservableMap(dataStructure)) {
    return dataStructure;
  } else if (Array.isArray(dataStructure)) {
    return new Map(dataStructure);
  } else if (isPlainObject(dataStructure)) {
    var map = new Map();

    for (var key in dataStructure) {
      map.set(key, dataStructure[key]);
    }

    return map;
  } else {
    return die(21, dataStructure);
  }
}

var _Symbol$iterator$1, _Symbol$toStringTag$1;
var ObservableSetMarker = {};
_Symbol$iterator$1 = Symbol.iterator;
_Symbol$toStringTag$1 = Symbol.toStringTag;
var ObservableSet = /*#__PURE__*/function () {
  function ObservableSet(initialData, enhancer, name_) {
    if (enhancer === void 0) {
      enhancer = deepEnhancer;
    }

    if (name_ === void 0) {
      name_ =  true ? "ObservableSet@" + getNextId() : 0;
    }

    this.name_ = void 0;
    this[$mobx] = ObservableSetMarker;
    this.data_ = new Set();
    this.atom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.dehancer = void 0;
    this.enhancer_ = void 0;
    this.name_ = name_;

    if (!isFunction(Set)) {
      die(22);
    }

    this.atom_ = createAtom(this.name_);

    this.enhancer_ = function (newV, oldV) {
      return enhancer(newV, oldV, name_);
    };

    if (initialData) {
      this.replace(initialData);
    }
  }

  var _proto = ObservableSet.prototype;

  _proto.dehanceValue_ = function dehanceValue_(value) {
    if (this.dehancer !== undefined) {
      return this.dehancer(value);
    }

    return value;
  };

  _proto.clear = function clear() {
    var _this = this;

    transaction(function () {
      untracked(function () {
        for (var _iterator = _createForOfIteratorHelperLoose(_this.data_.values()), _step; !(_step = _iterator()).done;) {
          var value = _step.value;

          _this["delete"](value);
        }
      });
    });
  };

  _proto.forEach = function forEach(callbackFn, thisArg) {
    for (var _iterator2 = _createForOfIteratorHelperLoose(this), _step2; !(_step2 = _iterator2()).done;) {
      var value = _step2.value;
      callbackFn.call(thisArg, value, value, this);
    }
  };

  _proto.add = function add(value) {
    var _this2 = this;

    checkIfStateModificationsAreAllowed(this.atom_);

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: ADD,
        object: this,
        newValue: value
      });
      if (!change) return this; // ideally, value = change.value would be done here, so that values can be
      // changed by interceptor. Same applies for other Set and Map api's.
    }

    if (!this.has(value)) {
      transaction(function () {
        _this2.data_.add(_this2.enhancer_(value, undefined));

        _this2.atom_.reportChanged();
      });
      var notifySpy =  true && isSpyEnabled();
      var notify = hasListeners(this);

      var _change = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: ADD,
        object: this,
        newValue: value
      } : null;

      if (notifySpy && "development" !== "production") spyReportStart(_change);
      if (notify) notifyListeners(this, _change);
      if (notifySpy && "development" !== "production") spyReportEnd();
    }

    return this;
  };

  _proto["delete"] = function _delete(value) {
    var _this3 = this;

    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: DELETE,
        object: this,
        oldValue: value
      });
      if (!change) return false;
    }

    if (this.has(value)) {
      var notifySpy =  true && isSpyEnabled();
      var notify = hasListeners(this);

      var _change2 = notify || notifySpy ? {
        observableKind: "set",
        debugObjectName: this.name_,
        type: DELETE,
        object: this,
        oldValue: value
      } : null;

      if (notifySpy && "development" !== "production") spyReportStart(_change2);
      transaction(function () {
        _this3.atom_.reportChanged();

        _this3.data_["delete"](value);
      });
      if (notify) notifyListeners(this, _change2);
      if (notifySpy && "development" !== "production") spyReportEnd();
      return true;
    }

    return false;
  };

  _proto.has = function has(value) {
    this.atom_.reportObserved();
    return this.data_.has(this.dehanceValue_(value));
  };

  _proto.entries = function entries() {
    var nextIndex = 0;
    var keys = Array.from(this.keys());
    var values = Array.from(this.values());
    return makeIterable({
      next: function next() {
        var index = nextIndex;
        nextIndex += 1;
        return index < values.length ? {
          value: [keys[index], values[index]],
          done: false
        } : {
          done: true
        };
      }
    });
  };

  _proto.keys = function keys() {
    return this.values();
  };

  _proto.values = function values() {
    this.atom_.reportObserved();
    var self = this;
    var nextIndex = 0;
    var observableValues = Array.from(this.data_.values());
    return makeIterable({
      next: function next() {
        return nextIndex < observableValues.length ? {
          value: self.dehanceValue_(observableValues[nextIndex++]),
          done: false
        } : {
          done: true
        };
      }
    });
  };

  _proto.replace = function replace(other) {
    var _this4 = this;

    if (isObservableSet(other)) {
      other = new Set(other);
    }

    transaction(function () {
      if (Array.isArray(other)) {
        _this4.clear();

        other.forEach(function (value) {
          return _this4.add(value);
        });
      } else if (isES6Set(other)) {
        _this4.clear();

        other.forEach(function (value) {
          return _this4.add(value);
        });
      } else if (other !== null && other !== undefined) {
        die("Cannot initialize set from " + other);
      }
    });
    return this;
  };

  _proto.observe_ = function observe_(listener, fireImmediately) {
    // ... 'fireImmediately' could also be true?
    if ( true && fireImmediately === true) die("`observe` doesn't support fireImmediately=true in combination with sets.");
    return registerListener(this, listener);
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _proto.toJSON = function toJSON() {
    return Array.from(this);
  };

  _proto.toString = function toString() {
    return "[object ObservableSet]";
  };

  _proto[_Symbol$iterator$1] = function () {
    return this.values();
  };

  _createClass(ObservableSet, [{
    key: "size",
    get: function get() {
      this.atom_.reportObserved();
      return this.data_.size;
    }
  }, {
    key: _Symbol$toStringTag$1,
    get: function get() {
      return "Set";
    }
  }]);

  return ObservableSet;
}(); // eslint-disable-next-line

var isObservableSet = /*#__PURE__*/createInstanceofPredicate("ObservableSet", ObservableSet);

var descriptorCache = /*#__PURE__*/Object.create(null);
var REMOVE = "remove";
var ObservableObjectAdministration = /*#__PURE__*/function () {
  function ObservableObjectAdministration(target_, values_, name_, // Used anytime annotation is not explicitely provided
  defaultAnnotation_) {
    if (values_ === void 0) {
      values_ = new Map();
    }

    if (defaultAnnotation_ === void 0) {
      defaultAnnotation_ = autoAnnotation;
    }

    this.target_ = void 0;
    this.values_ = void 0;
    this.name_ = void 0;
    this.defaultAnnotation_ = void 0;
    this.keysAtom_ = void 0;
    this.changeListeners_ = void 0;
    this.interceptors_ = void 0;
    this.proxy_ = void 0;
    this.isPlainObject_ = void 0;
    this.appliedAnnotations_ = void 0;
    this.pendingKeys_ = void 0;
    this.target_ = target_;
    this.values_ = values_;
    this.name_ = name_;
    this.defaultAnnotation_ = defaultAnnotation_;
    this.keysAtom_ = new Atom( true ? this.name_ + ".keys" : 0); // Optimization: we use this frequently

    this.isPlainObject_ = isPlainObject(this.target_);

    if ( true && !isAnnotation(this.defaultAnnotation_)) {
      die("defaultAnnotation must be valid annotation");
    }

    if (true) {
      // Prepare structure for tracking which fields were already annotated
      this.appliedAnnotations_ = {};
    }
  }

  var _proto = ObservableObjectAdministration.prototype;

  _proto.getObservablePropValue_ = function getObservablePropValue_(key) {
    return this.values_.get(key).get();
  };

  _proto.setObservablePropValue_ = function setObservablePropValue_(key, newValue) {
    var observable = this.values_.get(key);

    if (observable instanceof ComputedValue) {
      observable.set(newValue);
      return true;
    } // intercept


    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        type: UPDATE,
        object: this.proxy_ || this.target_,
        name: key,
        newValue: newValue
      });
      if (!change) return null;
      newValue = change.newValue;
    }

    newValue = observable.prepareNewValue_(newValue); // notify spy & observers

    if (newValue !== globalState.UNCHANGED) {
      var notify = hasListeners(this);
      var notifySpy =  true && isSpyEnabled();

      var _change = notify || notifySpy ? {
        type: UPDATE,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        oldValue: observable.value_,
        name: key,
        newValue: newValue
      } : null;

      if ( true && notifySpy) spyReportStart(_change);
      observable.setNewValue_(newValue);
      if (notify) notifyListeners(this, _change);
      if ( true && notifySpy) spyReportEnd();
    }

    return true;
  };

  _proto.get_ = function get_(key) {
    if (globalState.trackingDerivation && !hasProp(this.target_, key)) {
      // Key doesn't exist yet, subscribe for it in case it's added later
      this.has_(key);
    }

    return this.target_[key];
  }
  /**
   * @param {PropertyKey} key
   * @param {any} value
   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */
  ;

  _proto.set_ = function set_(key, value, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    // Don't use .has(key) - we care about own
    if (hasProp(this.target_, key)) {
      // Existing prop
      if (this.values_.has(key)) {
        // Observable (can be intercepted)
        return this.setObservablePropValue_(key, value);
      } else if (proxyTrap) {
        // Non-observable - proxy
        return Reflect.set(this.target_, key, value);
      } else {
        // Non-observable
        this.target_[key] = value;
        return true;
      }
    } else {
      // New prop
      return this.extend_(key, {
        value: value,
        enumerable: true,
        writable: true,
        configurable: true
      }, this.defaultAnnotation_, proxyTrap);
    }
  } // Trap for "in"
  ;

  _proto.has_ = function has_(key) {
    if (!globalState.trackingDerivation) {
      // Skip key subscription outside derivation
      return key in this.target_;
    }

    this.pendingKeys_ || (this.pendingKeys_ = new Map());
    var entry = this.pendingKeys_.get(key);

    if (!entry) {
      entry = new ObservableValue(key in this.target_, referenceEnhancer,  true ? this.name_ + "." + stringifyKey(key) + "?" : 0, false);
      this.pendingKeys_.set(key, entry);
    }

    return entry.get();
  }
  /**
   * @param {PropertyKey} key
   * @param {Annotation|boolean} annotation true - use default annotation, false - ignore prop
   */
  ;

  _proto.make_ = function make_(key, annotation) {
    if (annotation === true) {
      annotation = this.defaultAnnotation_;
    }

    if (annotation === false) {
      return;
    }

    assertAnnotable(this, annotation, key);

    if (!(key in this.target_)) {
      var _this$target_$storedA;

      // Throw on missing key, except for decorators:
      // Decorator annotations are collected from whole prototype chain.
      // When called from super() some props may not exist yet.
      // However we don't have to worry about missing prop,
      // because the decorator must have been applied to something.
      if ((_this$target_$storedA = this.target_[storedAnnotationsSymbol]) == null ? void 0 : _this$target_$storedA[key]) {
        return; // will be annotated by subclass constructor
      } else {
        die(1, annotation.annotationType_, this.name_ + "." + key.toString());
      }
    }

    var source = this.target_;

    while (source && source !== objectPrototype) {
      var descriptor = getDescriptor(source, key);

      if (descriptor) {
        var outcome = annotation.make_(this, key, descriptor, source);
        if (outcome === 0
        /* Cancel */
        ) return;
        if (outcome === 1
        /* Break */
        ) break;
      }

      source = Object.getPrototypeOf(source);
    }

    recordAnnotationApplied(this, annotation, key);
  }
  /**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {Annotation|boolean} annotation true - use default annotation, false - copy as is
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */
  ;

  _proto.extend_ = function extend_(key, descriptor, annotation, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    if (annotation === true) {
      annotation = this.defaultAnnotation_;
    }

    if (annotation === false) {
      return this.defineProperty_(key, descriptor, proxyTrap);
    }

    assertAnnotable(this, annotation, key);
    var outcome = annotation.extend_(this, key, descriptor, proxyTrap);

    if (outcome) {
      recordAnnotationApplied(this, annotation, key);
    }

    return outcome;
  }
  /**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */
  ;

  _proto.defineProperty_ = function defineProperty_(key, descriptor, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    try {
      startBatch(); // Delete

      var deleteOutcome = this.delete_(key);

      if (!deleteOutcome) {
        // Failure or intercepted
        return deleteOutcome;
      } // ADD interceptor


      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: descriptor.value
        });
        if (!change) return null;
        var newValue = change.newValue;

        if (descriptor.value !== newValue) {
          descriptor = _extends({}, descriptor, {
            value: newValue
          });
        }
      } // Define


      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      } // Notify


      this.notifyPropertyAddition_(key, descriptor.value);
    } finally {
      endBatch();
    }

    return true;
  } // If original descriptor becomes relevant, move this to annotation directly
  ;

  _proto.defineObservableProperty_ = function defineObservableProperty_(key, value, enhancer, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    try {
      startBatch(); // Delete

      var deleteOutcome = this.delete_(key);

      if (!deleteOutcome) {
        // Failure or intercepted
        return deleteOutcome;
      } // ADD interceptor


      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: value
        });
        if (!change) return null;
        value = change.newValue;
      }

      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: true,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      }; // Define

      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }

      var observable = new ObservableValue(value, enhancer,  true ? this.name_ + "." + key.toString() : 0, false);
      this.values_.set(key, observable); // Notify (value possibly changed by ObservableValue)

      this.notifyPropertyAddition_(key, observable.value_);
    } finally {
      endBatch();
    }

    return true;
  } // If original descriptor becomes relevant, move this to annotation directly
  ;

  _proto.defineComputedProperty_ = function defineComputedProperty_(key, options, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    try {
      startBatch(); // Delete

      var deleteOutcome = this.delete_(key);

      if (!deleteOutcome) {
        // Failure or intercepted
        return deleteOutcome;
      } // ADD interceptor


      if (hasInterceptors(this)) {
        var change = interceptChange(this, {
          object: this.proxy_ || this.target_,
          name: key,
          type: ADD,
          newValue: undefined
        });
        if (!change) return null;
      }

      options.name || (options.name =  true ? this.name_ + "." + key.toString() : 0);
      options.context = this.proxy_ || this.target_;
      var cachedDescriptor = getCachedObservablePropDescriptor(key);
      var descriptor = {
        configurable: globalState.safeDescriptors ? this.isPlainObject_ : true,
        enumerable: false,
        get: cachedDescriptor.get,
        set: cachedDescriptor.set
      }; // Define

      if (proxyTrap) {
        if (!Reflect.defineProperty(this.target_, key, descriptor)) {
          return false;
        }
      } else {
        defineProperty(this.target_, key, descriptor);
      }

      this.values_.set(key, new ComputedValue(options)); // Notify

      this.notifyPropertyAddition_(key, undefined);
    } finally {
      endBatch();
    }

    return true;
  }
  /**
   * @param {PropertyKey} key
   * @param {PropertyDescriptor} descriptor
   * @param {boolean} proxyTrap whether it's called from proxy trap
   * @returns {boolean|null} true on success, false on failure (proxyTrap + non-configurable), null when cancelled by interceptor
   */
  ;

  _proto.delete_ = function delete_(key, proxyTrap) {
    if (proxyTrap === void 0) {
      proxyTrap = false;
    }

    // No such prop
    if (!hasProp(this.target_, key)) {
      return true;
    } // Intercept


    if (hasInterceptors(this)) {
      var change = interceptChange(this, {
        object: this.proxy_ || this.target_,
        name: key,
        type: REMOVE
      }); // Cancelled

      if (!change) return null;
    } // Delete


    try {
      var _this$pendingKeys_, _this$pendingKeys_$ge;

      startBatch();
      var notify = hasListeners(this);
      var notifySpy =  true && isSpyEnabled();
      var observable = this.values_.get(key); // Value needed for spies/listeners

      var value = undefined; // Optimization: don't pull the value unless we will need it

      if (!observable && (notify || notifySpy)) {
        var _getDescriptor;

        value = (_getDescriptor = getDescriptor(this.target_, key)) == null ? void 0 : _getDescriptor.value;
      } // delete prop (do first, may fail)


      if (proxyTrap) {
        if (!Reflect.deleteProperty(this.target_, key)) {
          return false;
        }
      } else {
        delete this.target_[key];
      } // Allow re-annotating this field


      if (true) {
        delete this.appliedAnnotations_[key];
      } // Clear observable


      if (observable) {
        this.values_["delete"](key); // for computed, value is undefined

        if (observable instanceof ObservableValue) {
          value = observable.value_;
        } // Notify: autorun(() => obj[key]), see #1796


        propagateChanged(observable);
      } // Notify "keys/entries/values" observers


      this.keysAtom_.reportChanged(); // Notify "has" observers
      // "in" as it may still exist in proto

      (_this$pendingKeys_ = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_$ge = _this$pendingKeys_.get(key)) == null ? void 0 : _this$pendingKeys_$ge.set(key in this.target_); // Notify spies/listeners

      if (notify || notifySpy) {
        var _change2 = {
          type: REMOVE,
          observableKind: "object",
          object: this.proxy_ || this.target_,
          debugObjectName: this.name_,
          oldValue: value,
          name: key
        };
        if ( true && notifySpy) spyReportStart(_change2);
        if (notify) notifyListeners(this, _change2);
        if ( true && notifySpy) spyReportEnd();
      }
    } finally {
      endBatch();
    }

    return true;
  }
  /**
   * Observes this object. Triggers for the events 'add', 'update' and 'delete'.
   * See: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/observe
   * for callback details
   */
  ;

  _proto.observe_ = function observe_(callback, fireImmediately) {
    if ( true && fireImmediately === true) die("`observe` doesn't support the fire immediately property for observable objects.");
    return registerListener(this, callback);
  };

  _proto.intercept_ = function intercept_(handler) {
    return registerInterceptor(this, handler);
  };

  _proto.notifyPropertyAddition_ = function notifyPropertyAddition_(key, value) {
    var _this$pendingKeys_2, _this$pendingKeys_2$g;

    var notify = hasListeners(this);
    var notifySpy =  true && isSpyEnabled();

    if (notify || notifySpy) {
      var change = notify || notifySpy ? {
        type: ADD,
        observableKind: "object",
        debugObjectName: this.name_,
        object: this.proxy_ || this.target_,
        name: key,
        newValue: value
      } : null;
      if ( true && notifySpy) spyReportStart(change);
      if (notify) notifyListeners(this, change);
      if ( true && notifySpy) spyReportEnd();
    }

    (_this$pendingKeys_2 = this.pendingKeys_) == null ? void 0 : (_this$pendingKeys_2$g = _this$pendingKeys_2.get(key)) == null ? void 0 : _this$pendingKeys_2$g.set(true); // Notify "keys/entries/values" observers

    this.keysAtom_.reportChanged();
  };

  _proto.ownKeys_ = function ownKeys_() {
    this.keysAtom_.reportObserved();
    return ownKeys(this.target_);
  };

  _proto.keys_ = function keys_() {
    // Returns enumerable && own, but unfortunately keysAtom will report on ANY key change.
    // There is no way to distinguish between Object.keys(object) and Reflect.ownKeys(object) - both are handled by ownKeys trap.
    // We can either over-report in Object.keys(object) or under-report in Reflect.ownKeys(object)
    // We choose to over-report in Object.keys(object), because:
    // - typically it's used with simple data objects
    // - when symbolic/non-enumerable keys are relevant Reflect.ownKeys works as expected
    this.keysAtom_.reportObserved();
    return Object.keys(this.target_);
  };

  return ObservableObjectAdministration;
}();
function asObservableObject(target, options) {
  var _options$name;

  if ( true && options && isObservableObject(target)) {
    die("Options can't be provided for already observable objects.");
  }

  if (hasProp(target, $mobx)) {
    if ( true && !(getAdministration(target) instanceof ObservableObjectAdministration)) {
      die("Cannot convert '" + getDebugName(target) + "' into observable object:" + "\nThe target is already observable of different type." + "\nExtending builtins is not supported.");
    }

    return target;
  }

  if ( true && !Object.isExtensible(target)) die("Cannot make the designated object observable; it is not extensible");
  var name = (_options$name = options == null ? void 0 : options.name) != null ? _options$name :  true ? (isPlainObject(target) ? "ObservableObject" : target.constructor.name) + "@" + getNextId() : 0;
  var adm = new ObservableObjectAdministration(target, new Map(), String(name), getAnnotationFromOptions(options));
  addHiddenProp(target, $mobx, adm);
  return target;
}
var isObservableObjectAdministration = /*#__PURE__*/createInstanceofPredicate("ObservableObjectAdministration", ObservableObjectAdministration);

function getCachedObservablePropDescriptor(key) {
  return descriptorCache[key] || (descriptorCache[key] = {
    get: function get() {
      return this[$mobx].getObservablePropValue_(key);
    },
    set: function set(value) {
      return this[$mobx].setObservablePropValue_(key, value);
    }
  });
}

function isObservableObject(thing) {
  if (isObject(thing)) {
    return isObservableObjectAdministration(thing[$mobx]);
  }

  return false;
}
function recordAnnotationApplied(adm, annotation, key) {
  var _adm$target_$storedAn;

  if (true) {
    adm.appliedAnnotations_[key] = annotation;
  } // Remove applied decorator annotation so we don't try to apply it again in subclass constructor


  (_adm$target_$storedAn = adm.target_[storedAnnotationsSymbol]) == null ? true : delete _adm$target_$storedAn[key];
}

function assertAnnotable(adm, annotation, key) {
  // Valid annotation
  if ( true && !isAnnotation(annotation)) {
    die("Cannot annotate '" + adm.name_ + "." + key.toString() + "': Invalid annotation.");
  }
  /*
  // Configurable, not sealed, not frozen
  // Possibly not needed, just a little better error then the one thrown by engine.
  // Cases where this would be useful the most (subclass field initializer) are not interceptable by this.
  if (__DEV__) {
      const configurable = getDescriptor(adm.target_, key)?.configurable
      const frozen = Object.isFrozen(adm.target_)
      const sealed = Object.isSealed(adm.target_)
      if (!configurable || frozen || sealed) {
          const fieldName = `${adm.name_}.${key.toString()}`
          const requestedAnnotationType = annotation.annotationType_
          let error = `Cannot apply '${requestedAnnotationType}' to '${fieldName}':`
          if (frozen) {
              error += `\nObject is frozen.`
          }
          if (sealed) {
              error += `\nObject is sealed.`
          }
          if (!configurable) {
              error += `\nproperty is not configurable.`
              // Mention only if caused by us to avoid confusion
              if (hasProp(adm.appliedAnnotations!, key)) {
                  error += `\nTo prevent accidental re-definition of a field by a subclass, `
                  error += `all annotated fields of non-plain objects (classes) are not configurable.`
              }
          }
          die(error)
      }
  }
  */
  // Not annotated


  if ( true && !isOverride(annotation) && hasProp(adm.appliedAnnotations_, key)) {
    var fieldName = adm.name_ + "." + key.toString();
    var currentAnnotationType = adm.appliedAnnotations_[key].annotationType_;
    var requestedAnnotationType = annotation.annotationType_;
    die("Cannot apply '" + requestedAnnotationType + "' to '" + fieldName + "':" + ("\nThe field is already annotated with '" + currentAnnotationType + "'.") + "\nRe-annotating fields is not allowed." + "\nUse 'override' annotation for methods overriden by subclass.");
  }
}

/**
 * This array buffer contains two lists of properties, so that all arrays
 * can recycle their property definitions, which significantly improves performance of creating
 * properties on the fly.
 */

var OBSERVABLE_ARRAY_BUFFER_SIZE = 0; // Typescript workaround to make sure ObservableArray extends Array

var StubArray = function StubArray() {};

function inherit(ctor, proto) {
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(ctor.prototype, proto);
  } else if (ctor.prototype.__proto__ !== undefined) {
    ctor.prototype.__proto__ = proto;
  } else {
    ctor.prototype = proto;
  }
}

inherit(StubArray, Array.prototype); // Weex proto freeze protection was here,
// but it is unclear why the hack is need as MobX never changed the prototype
// anyway, so removed it in V6

var LegacyObservableArray = /*#__PURE__*/function (_StubArray) {
  _inheritsLoose(LegacyObservableArray, _StubArray);

  function LegacyObservableArray(initialValues, enhancer, name, owned) {
    var _this;

    if (name === void 0) {
      name =  true ? "ObservableArray@" + getNextId() : 0;
    }

    if (owned === void 0) {
      owned = false;
    }

    _this = _StubArray.call(this) || this;
    var adm = new ObservableArrayAdministration(name, enhancer, owned, true);
    adm.proxy_ = _assertThisInitialized(_this);
    addHiddenFinalProp(_assertThisInitialized(_this), $mobx, adm);

    if (initialValues && initialValues.length) {
      var prev = allowStateChangesStart(true); // @ts-ignore

      _this.spliceWithArray(0, 0, initialValues);

      allowStateChangesEnd(prev);
    }

    return _this;
  }

  var _proto = LegacyObservableArray.prototype;

  _proto.concat = function concat() {
    this[$mobx].atom_.reportObserved();

    for (var _len = arguments.length, arrays = new Array(_len), _key = 0; _key < _len; _key++) {
      arrays[_key] = arguments[_key];
    }

    return Array.prototype.concat.apply(this.slice(), //@ts-ignore
    arrays.map(function (a) {
      return isObservableArray(a) ? a.slice() : a;
    }));
  };

  _proto[Symbol.iterator] = function () {
    var self = this;
    var nextIndex = 0;
    return makeIterable({
      next: function next() {
        // @ts-ignore
        return nextIndex < self.length ? {
          value: self[nextIndex++],
          done: false
        } : {
          done: true,
          value: undefined
        };
      }
    });
  };

  _createClass(LegacyObservableArray, [{
    key: "length",
    get: function get() {
      return this[$mobx].getArrayLength_();
    },
    set: function set(newLength) {
      this[$mobx].setArrayLength_(newLength);
    }
  }, {
    key: Symbol.toStringTag,
    get: function get() {
      return "Array";
    }
  }]);

  return LegacyObservableArray;
}(StubArray);

Object.entries(arrayExtensions).forEach(function (_ref) {
  var prop = _ref[0],
      fn = _ref[1];
  if (prop !== "concat") addHiddenProp(LegacyObservableArray.prototype, prop, fn);
});

function createArrayEntryDescriptor(index) {
  return {
    enumerable: false,
    configurable: true,
    get: function get() {
      return this[$mobx].get_(index);
    },
    set: function set(value) {
      this[$mobx].set_(index, value);
    }
  };
}

function createArrayBufferItem(index) {
  defineProperty(LegacyObservableArray.prototype, "" + index, createArrayEntryDescriptor(index));
}

function reserveArrayBuffer(max) {
  if (max > OBSERVABLE_ARRAY_BUFFER_SIZE) {
    for (var index = OBSERVABLE_ARRAY_BUFFER_SIZE; index < max + 100; index++) {
      createArrayBufferItem(index);
    }

    OBSERVABLE_ARRAY_BUFFER_SIZE = max;
  }
}
reserveArrayBuffer(1000);
function createLegacyArray(initialValues, enhancer, name) {
  return new LegacyObservableArray(initialValues, enhancer, name);
}

function getAtom(thing, property) {
  if (typeof thing === "object" && thing !== null) {
    if (isObservableArray(thing)) {
      if (property !== undefined) die(23);
      return thing[$mobx].atom_;
    }

    if (isObservableSet(thing)) {
      return thing[$mobx];
    }

    if (isObservableMap(thing)) {
      if (property === undefined) return thing.keysAtom_;
      var observable = thing.data_.get(property) || thing.hasMap_.get(property);
      if (!observable) die(25, property, getDebugName(thing));
      return observable;
    }

    if (isObservableObject(thing)) {
      if (!property) return die(26);

      var _observable = thing[$mobx].values_.get(property);

      if (!_observable) die(27, property, getDebugName(thing));
      return _observable;
    }

    if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) {
      return thing;
    }
  } else if (isFunction(thing)) {
    if (isReaction(thing[$mobx])) {
      // disposer function
      return thing[$mobx];
    }
  }

  die(28);
}
function getAdministration(thing, property) {
  if (!thing) die(29);
  if (property !== undefined) return getAdministration(getAtom(thing, property));
  if (isAtom(thing) || isComputedValue(thing) || isReaction(thing)) return thing;
  if (isObservableMap(thing) || isObservableSet(thing)) return thing;
  if (thing[$mobx]) return thing[$mobx];
  die(24, thing);
}
function getDebugName(thing, property) {
  var named;

  if (property !== undefined) {
    named = getAtom(thing, property);
  } else if (isAction(thing)) {
    return thing.name;
  } else if (isObservableObject(thing) || isObservableMap(thing) || isObservableSet(thing)) {
    named = getAdministration(thing);
  } else {
    // valid for arrays as well
    named = getAtom(thing);
  }

  return named.name_;
}

var toString = objectPrototype.toString;
function deepEqual(a, b, depth) {
  if (depth === void 0) {
    depth = -1;
  }

  return eq(a, b, depth);
} // Copied from https://github.com/jashkenas/underscore/blob/5c237a7c682fb68fd5378203f0bf22dce1624854/underscore.js#L1186-L1289
// Internal recursive comparison function for `isEqual`.

function eq(a, b, depth, aStack, bStack) {
  // Identical objects are equal. `0 === -0`, but they aren't identical.
  // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
  if (a === b) return a !== 0 || 1 / a === 1 / b; // `null` or `undefined` only equal to itself (strict comparison).

  if (a == null || b == null) return false; // `NaN`s are equivalent, but non-reflexive.

  if (a !== a) return b !== b; // Exhaust primitive checks

  var type = typeof a;
  if (!isFunction(type) && type !== "object" && typeof b != "object") return false; // Compare `[[Class]]` names.

  var className = toString.call(a);
  if (className !== toString.call(b)) return false;

  switch (className) {
    // Strings, numbers, regular expressions, dates, and booleans are compared by value.
    case "[object RegExp]": // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')

    case "[object String]":
      // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
      // equivalent to `new String("5")`.
      return "" + a === "" + b;

    case "[object Number]":
      // `NaN`s are equivalent, but non-reflexive.
      // Object(NaN) is equivalent to NaN.
      if (+a !== +a) return +b !== +b; // An `egal` comparison is performed for other numeric values.

      return +a === 0 ? 1 / +a === 1 / b : +a === +b;

    case "[object Date]":
    case "[object Boolean]":
      // Coerce dates and booleans to numeric primitive values. Dates are compared by their
      // millisecond representations. Note that invalid dates with millisecond representations
      // of `NaN` are not equivalent.
      return +a === +b;

    case "[object Symbol]":
      return typeof Symbol !== "undefined" && Symbol.valueOf.call(a) === Symbol.valueOf.call(b);

    case "[object Map]":
    case "[object Set]":
      // Maps and Sets are unwrapped to arrays of entry-pairs, adding an incidental level.
      // Hide this extra level by increasing the depth.
      if (depth >= 0) {
        depth++;
      }

      break;
  } // Unwrap any wrapped objects.


  a = unwrap(a);
  b = unwrap(b);
  var areArrays = className === "[object Array]";

  if (!areArrays) {
    if (typeof a != "object" || typeof b != "object") return false; // Objects with different constructors are not equivalent, but `Object`s or `Array`s
    // from different frames are.

    var aCtor = a.constructor,
        bCtor = b.constructor;

    if (aCtor !== bCtor && !(isFunction(aCtor) && aCtor instanceof aCtor && isFunction(bCtor) && bCtor instanceof bCtor) && "constructor" in a && "constructor" in b) {
      return false;
    }
  }

  if (depth === 0) {
    return false;
  } else if (depth < 0) {
    depth = -1;
  } // Assume equality for cyclic structures. The algorithm for detecting cyclic
  // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
  // Initializing stack of traversed objects.
  // It's done here since we only need them for objects and arrays comparison.


  aStack = aStack || [];
  bStack = bStack || [];
  var length = aStack.length;

  while (length--) {
    // Linear search. Performance is inversely proportional to the number of
    // unique nested structures.
    if (aStack[length] === a) return bStack[length] === b;
  } // Add the first object to the stack of traversed objects.


  aStack.push(a);
  bStack.push(b); // Recursively compare objects and arrays.

  if (areArrays) {
    // Compare array lengths to determine if a deep comparison is necessary.
    length = a.length;
    if (length !== b.length) return false; // Deep compare the contents, ignoring non-numeric properties.

    while (length--) {
      if (!eq(a[length], b[length], depth - 1, aStack, bStack)) return false;
    }
  } else {
    // Deep compare objects.
    var keys = Object.keys(a);
    var key;
    length = keys.length; // Ensure that both objects contain the same number of properties before comparing deep equality.

    if (Object.keys(b).length !== length) return false;

    while (length--) {
      // Deep compare each member
      key = keys[length];
      if (!(hasProp(b, key) && eq(a[key], b[key], depth - 1, aStack, bStack))) return false;
    }
  } // Remove the first object from the stack of traversed objects.


  aStack.pop();
  bStack.pop();
  return true;
}

function unwrap(a) {
  if (isObservableArray(a)) return a.slice();
  if (isES6Map(a) || isObservableMap(a)) return Array.from(a.entries());
  if (isES6Set(a) || isObservableSet(a)) return Array.from(a.entries());
  return a;
}

function makeIterable(iterator) {
  iterator[Symbol.iterator] = getSelf;
  return iterator;
}

function getSelf() {
  return this;
}

function isAnnotation(thing) {
  return (// Can be function
    thing instanceof Object && typeof thing.annotationType_ === "string" && isFunction(thing.make_) && isFunction(thing.extend_)
  );
}

/**
 * (c) Michel Weststrate 2015 - 2020
 * MIT Licensed
 *
 * Welcome to the mobx sources! To get an global overview of how MobX internally works,
 * this is a good place to start:
 * https://medium.com/@mweststrate/becoming-fully-reactive-an-in-depth-explanation-of-mobservable-55995262a254#.xvbh6qd74
 *
 * Source folders:
 * ===============
 *
 * - api/     Most of the public static methods exposed by the module can be found here.
 * - core/    Implementation of the MobX algorithm; atoms, derivations, reactions, dependency trees, optimizations. Cool stuff can be found here.
 * - types/   All the magic that is need to have observable objects, arrays and values is in this folder. Including the modifiers like `asFlat`.
 * - utils/   Utility stuff.
 *
 */
["Symbol", "Map", "Set"].forEach(function (m) {
  var g = getGlobal();

  if (typeof g[m] === "undefined") {
    die("MobX requires global '" + m + "' to be available or polyfilled");
  }
});

if (typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__ === "object") {
  // See: https://github.com/andykog/mobx-devtools/
  __MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({
    spy: spy,
    extras: {
      getDebugName: getDebugName
    },
    $mobx: $mobx
  });
}


//# sourceMappingURL=mobx.esm.js.map


/***/ }),

/***/ "./node_modules/_object-assign@4.1.1@object-assign/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/_object-assign@4.1.1@object-assign/index.js ***!
  \******************************************************************/
/***/ ((module) => {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "./node_modules/_react-dom@17.0.2@react-dom/cjs/react-dom.development.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/_react-dom@17.0.2@react-dom/cjs/react-dom.development.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v17.0.2
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var React = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");
var _assign = __webpack_require__(/*! object-assign */ "./node_modules/_object-assign@4.1.1@object-assign/index.js");
var Scheduler = __webpack_require__(/*! scheduler */ "./node_modules/_scheduler@0.20.2@scheduler/index.js");
var tracing = __webpack_require__(/*! scheduler/tracing */ "./node_modules/_scheduler@0.20.2@scheduler/tracing.js");

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

if (!React) {
  {
    throw Error( "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM." );
  }
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var FundamentalComponent = 20;
var ScopeComponent = 21;
var Block = 22;
var OffscreenComponent = 23;
var LegacyHiddenComponent = 24;

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

var enableProfilerTimer = true; // Record durations for commit and passive effects phases.

var enableFundamentalAPI = false; // Experimental Scope support.
var enableNewReconciler = false; // Errors that are thrown while unmounting (or after in the case of passive effects)
var warnAboutStringRefs = false;

var allNativeEvents = new Set();
/**
 * Mapping from registration name to event name
 */


var registrationNameDependencies = {};
/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */

var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

function registerTwoPhaseEvent(registrationName, dependencies) {
  registerDirectEvent(registrationName, dependencies);
  registerDirectEvent(registrationName + 'Capture', dependencies);
}
function registerDirectEvent(registrationName, dependencies) {
  {
    if (registrationNameDependencies[registrationName]) {
      error('EventRegistry: More than one plugin attempted to publish the same ' + 'registration name, `%s`.', registrationName);
    }
  }

  registrationNameDependencies[registrationName] = dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }

  for (var i = 0; i < dependencies.length; i++) {
    allNativeEvents.add(dependencies[i]);
  }
}

var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0; // A simple string attribute.
// Attributes that aren't in the filter are presumed to have this type.

var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.

var BOOLEANISH_STRING = 2; // A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.

var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.

var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.

var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.

var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */

var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty = Object.prototype.hasOwnProperty;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }

  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }

  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }

  illegalAttributeNameCache[attributeName] = true;

  {
    error('Invalid attribute name: `%s`', attributeName);
  }

  return false;
}
function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }

  return false;
}
function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }

  switch (typeof value) {
    case 'function': // $FlowIssue symbol is perfectly valid here

    case 'symbol':
      // eslint-disable-line
      return true;

    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }

        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }

    default:
      return false;
  }
}
function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }

  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (propertyInfo !== null) {

    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;

      case OVERLOADED_BOOLEAN:
        return value === false;

      case NUMERIC:
        return isNaN(value);

      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }

  return false;
}
function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL, removeEmptyString) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
  this.sanitizeURL = sanitizeURL;
  this.removeEmptyString = removeEmptyString;
} // When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.


var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];
reservedProps.forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.

[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).

['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.

['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML boolean attributes.

['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'disableRemotePlayback', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.

['checked', // Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.

['capture', 'download' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that must be positive numbers.

['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These are HTML attributes that must be numbers.

['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
});
var CAMELIZE = /[\-\:]([a-z])/g;

var capitalize = function (token) {
  return token[1].toUpperCase();
}; // This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML attribute filter.
// Some of these attributes can be hard to find. This list was created by
// scraping the MDN documentation.


['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // String SVG attributes with the xlink namespace.

['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink', false, // sanitizeURL
  false);
}); // String SVG attributes with the xml namespace.

['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace', false, // sanitizeURL
  false);
}); // These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.

['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  false, // sanitizeURL
  false);
}); // These attributes accept URLs. These must not allow javascript: URLS.
// These will also need to accept Trusted Types object in the future.

var xlinkHref = 'xlinkHref';
properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
'xlink:href', 'http://www.w3.org/1999/xlink', true, // sanitizeURL
false);
['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  true, // sanitizeURL
  true);
});

// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space

/* eslint-disable max-len */

var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
var didWarn = false;

function sanitizeURL(url) {
  {
    if (!didWarn && isJavaScriptProtocol.test(url)) {
      didWarn = true;

      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
    }
  }
}

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
      return node[propertyName];
    } else {
      if ( propertyInfo.sanitizeURL) {
        // If we haven't fully disabled javascript: URLs, and if
        // the hydration is successful of a javascript: URL, we
        // still want to warn on the client.
        sanitizeURL('' + expected);
      }

      var attributeName = propertyInfo.attributeName;
      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);

          if (value === '') {
            return true;
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          }

          if (value === '' + expected) {
            return expected;
          }

          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }

        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        } // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.


        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue;
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}
/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    } // If the object is an opaque reference ID, it's expected that
    // the next prop is different than the server value, so just return
    // expected


    if (isOpaqueHydratingObject(expected)) {
      return expected;
    }

    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }

    var value = node.getAttribute(name);

    if (value === '' + expected) {
      return expected;
    }

    return value;
  }
}
/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);

  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }

  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  } // If the prop isn't in the special list, treat it as a simple attribute.


  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;

      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        node.setAttribute(_attributeName,  '' + value);
      }
    }

    return;
  }

  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;
      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }

    return;
  } // The rest are treated as attributes with special cases.


  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;
    var attributeValue;

    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      // If attribute type is boolean, we know for sure it won't be an execution sink
      // and we won't require Trusted Type here.
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      {
        attributeValue = '' + value;
      }

      if (propertyInfo.sanitizeURL) {
        sanitizeURL(attributeValue.toString());
      }
    }

    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 0xeac7;
var REACT_PORTAL_TYPE = 0xeaca;
var REACT_FRAGMENT_TYPE = 0xeacb;
var REACT_STRICT_MODE_TYPE = 0xeacc;
var REACT_PROFILER_TYPE = 0xead2;
var REACT_PROVIDER_TYPE = 0xeacd;
var REACT_CONTEXT_TYPE = 0xeace;
var REACT_FORWARD_REF_TYPE = 0xead0;
var REACT_SUSPENSE_TYPE = 0xead1;
var REACT_SUSPENSE_LIST_TYPE = 0xead8;
var REACT_MEMO_TYPE = 0xead3;
var REACT_LAZY_TYPE = 0xead4;
var REACT_BLOCK_TYPE = 0xead9;
var REACT_SERVER_BLOCK_TYPE = 0xeada;
var REACT_FUNDAMENTAL_TYPE = 0xead5;
var REACT_SCOPE_TYPE = 0xead7;
var REACT_OPAQUE_ID_TYPE = 0xeae0;
var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
var REACT_OFFSCREEN_TYPE = 0xeae2;
var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  REACT_ELEMENT_TYPE = symbolFor('react.element');
  REACT_PORTAL_TYPE = symbolFor('react.portal');
  REACT_FRAGMENT_TYPE = symbolFor('react.fragment');
  REACT_STRICT_MODE_TYPE = symbolFor('react.strict_mode');
  REACT_PROFILER_TYPE = symbolFor('react.profiler');
  REACT_PROVIDER_TYPE = symbolFor('react.provider');
  REACT_CONTEXT_TYPE = symbolFor('react.context');
  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
  REACT_SUSPENSE_TYPE = symbolFor('react.suspense');
  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
  REACT_MEMO_TYPE = symbolFor('react.memo');
  REACT_LAZY_TYPE = symbolFor('react.lazy');
  REACT_BLOCK_TYPE = symbolFor('react.block');
  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
  REACT_SCOPE_TYPE = symbolFor('react.scope');
  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
}

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: _assign({}, props, {
          value: prevLog
        }),
        info: _assign({}, props, {
          value: prevInfo
        }),
        warn: _assign({}, props, {
          value: prevWarn
        }),
        error: _assign({}, props, {
          value: prevError
        }),
        group: _assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: _assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: _assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if (!fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}

function describeClassComponentFrame(ctor, source, ownerFn) {
  {
    return describeNativeComponentFrame(ctor, true);
  }
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case REACT_SUSPENSE_TYPE:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_BLOCK_TYPE:
        return describeFunctionComponentFrame(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

function describeFiber(fiber) {
  var owner =  fiber._debugOwner ? fiber._debugOwner.type : null ;
  var source =  fiber._debugSource ;

  switch (fiber.tag) {
    case HostComponent:
      return describeBuiltInComponentFrame(fiber.type);

    case LazyComponent:
      return describeBuiltInComponentFrame('Lazy');

    case SuspenseComponent:
      return describeBuiltInComponentFrame('Suspense');

    case SuspenseListComponent:
      return describeBuiltInComponentFrame('SuspenseList');

    case FunctionComponent:
    case IndeterminateComponent:
    case SimpleMemoComponent:
      return describeFunctionComponentFrame(fiber.type);

    case ForwardRef:
      return describeFunctionComponentFrame(fiber.type.render);

    case Block:
      return describeFunctionComponentFrame(fiber.type._render);

    case ClassComponent:
      return describeClassComponentFrame(fiber.type);

    default:
      return '';
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  try {
    var info = '';
    var node = workInProgress;

    do {
      info += describeFiber(node);
      node = node.return;
    } while (node);

    return info;
  } catch (x) {
    return '\nError generating stack: ' + x.message + '\n' + x.stack;
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getContextName(type) {
  return type.displayName || 'Context';
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return 'Profiler';

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentName(init(payload));
          } catch (x) {
            return null;
          }
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
var current = null;
var isRendering = false;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }

  return null;
}

function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }
}

function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame.getCurrentStack = null;
    current = null;
    isRendering = false;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    isRendering = false;
  }
}
function setIsRendering(rendering) {
  {
    isRendering = rendering;
  }
}
function getIsRendering() {
  {
    return isRendering;
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  return '' + value;
}
function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return value;

    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

var hasReadOnlyValue = {
  button: true,
  checkbox: true,
  image: true,
  hidden: true,
  radio: true,
  reset: true,
  submit: true
};
function checkControlledValueProps(tagName, props) {
  {
    if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
      error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }

    if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
      error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  }
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';

  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)

  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  var get = descriptor.get,
      set = descriptor.set;
  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      set.call(this, value);
    }
  }); // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });
  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  } // TODO: Once it's just Fiber we can move this to node._wrapperState


  node._valueTracker = trackValueOnNode(node);
}
function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
  // that trying again will succeed

  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);

  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }

  return false;
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}
/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */


function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;

  var hostProps = _assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}
function initWrapperState(element, props) {
  {
    checkControlledValueProps('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnCheckedDefaultChecked = true;
    }

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}
function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;

  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}
function updateWrapper(element, props) {
  var node = element;

  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      error('A component is changing an uncontrolled input to be controlled. ' + 'This is likely caused by the value changing from undefined to ' + 'a defined value, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

      didWarnUncontrolledToControlled = true;
    }

    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      error('A component is changing a controlled input to be uncontrolled. ' + 'This is likely caused by the value changing from a defined to ' + 'undefined, which should not happen. ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components');

      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);
  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}
function postMountWrapper(element, props, isHydrating) {
  var node = element; // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.

  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872

    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.

    if (!isHydrating) {
      {
        // When syncing the value attribute, the value property should use
        // the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (initialValue !== node.value) {
          node.value = initialValue;
        }
      }
    }

    {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = initialValue;
    }
  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.


  var name = node.name;

  if (name !== '') {
    node.name = '';
  }

  {
    // When syncing the checked attribute, both the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}
function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;

  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    } // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.


    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];

      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      } // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.


      var otherProps = getFiberCurrentPropsFromNode(otherNode);

      if (!otherProps) {
        {
          throw Error( "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported." );
        }
      } // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set


      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.

      updateWrapper(otherNode, otherProps);
    }
  }
} // In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253


function setDefaultValue(node, type, value) {
  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || getActiveElement(node.ownerDocument) !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;

function flattenChildren(children) {
  var content = ''; // Flatten children. We'll warn if they are invalid
  // during validateProps() which runs for hydration too.
  // Note that this would throw on non-element objects.
  // Elements are stringified (which is normally irrelevant
  // but matters for <fbt>).

  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }

    content += child; // Note: we don't warn about invalid children here.
    // Instead, this is done separately below so that
    // it happens during the hydration code path too.
  });
  return content;
}
/**
 * Implements an <option> host component that warns when `selected` is set.
 */


function validateProps(element, props) {
  {
    // This mirrors the code path above, but runs for hydration too.
    // Warn about invalid children here so that client and hydration are consistent.
    // TODO: this seems like it could cause a DEV-only throw for hydration
    // if children contains a non-element object. We should try to avoid that.
    if (typeof props.children === 'object' && props.children !== null) {
      React.Children.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }

        if (typeof child === 'string' || typeof child === 'number') {
          return;
        }

        if (typeof child.type !== 'string') {
          return;
        }

        if (!didWarnInvalidChild) {
          didWarnInvalidChild = true;

          error('Only strings and numbers are supported as <option> children.');
        }
      });
    } // TODO: Remove support for `selected` in <option>.


    if (props.selected != null && !didWarnSelectedSetOnOption) {
      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

      didWarnSelectedSetOnOption = true;
    }
  }
}
function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}
function getHostProps$1(element, props) {
  var hostProps = _assign({
    children: undefined
  }, props);

  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

var didWarnValueDefaultValue$1;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }

  return '';
}

var valuePropNames = ['value', 'defaultValue'];
/**
 * Validation function for `value` and `defaultValue`.
 */

function checkSelectPropTypes(props) {
  {
    checkControlledValueProps('select', props);

    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];

      if (props[propName] == null) {
        continue;
      }

      var isArray = Array.isArray(props[propName]);

      if (props.multiple && !isArray) {
        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
      } else if (!props.multiple && isArray) {
        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
      }
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};

    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }

    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }

      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));

    var defaultSelected = null;

    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;

        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }

        return;
      }

      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }

    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}
/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */


function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}
function initWrapperState$1(element, props) {
  var node = element;

  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components');

      didWarnValueDefaultValue$1 = true;
    }
  }
}
function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}
function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}
function restoreControlledState$1(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
function getHostProps$3(element, props) {
  var node = element;

  if (!(props.dangerouslySetInnerHTML == null)) {
    {
      throw Error( "`dangerouslySetInnerHTML` does not make sense on <textarea>." );
    }
  } // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.


  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}
function initWrapperState$2(element, props) {
  var node = element;

  {
    checkControlledValueProps('textarea', props);

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://reactjs.org/link/controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value; // Only bother fetching default value if we're going to use it

  if (initialValue == null) {
    var children = props.children,
        defaultValue = props.defaultValue;

    if (children != null) {
      {
        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }

      {
        if (!(defaultValue == null)) {
          {
            throw Error( "If you supply `defaultValue` on a <textarea>, do not pass children." );
          }
        }

        if (Array.isArray(children)) {
          if (!(children.length <= 1)) {
            {
              throw Error( "<textarea> can only have at most one child." );
            }
          }

          children = children[0];
        }

        defaultValue = children;
      }
    }

    if (defaultValue == null) {
      defaultValue = '';
    }

    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}
function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);

  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

    if (newValue !== node.value) {
      node.value = newValue;
    }

    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }

  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}
function postMountWrapper$3(element, props) {
  var node = element; // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.

  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

  if (textContent === node._wrapperState.initialValue) {
    if (textContent !== '' && textContent !== null) {
      node.value = textContent;
    }
  }
}
function restoreControlledState$2(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
var Namespaces = {
  html: HTML_NAMESPACE,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
}; // Assumes there is no parent namespace.

function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;

    case 'math':
      return MATH_NAMESPACE;

    default:
      return HTML_NAMESPACE;
  }
}
function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }

  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE;
  } // By default, pass namespace below.


  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

var reusableSVGContainer;
/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */

var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  if (node.namespaceURI === Namespaces.svg) {

    if (!('innerHTML' in node)) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;

      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }

      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }

      return;
    }
  }

  node.innerHTML = html;
});

/**
 * HTML nodeType values that represent the type of the node
 */
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */

var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }

  node.textContent = text;
};

// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand = {
  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
  columns: ['columnCount', 'columnWidth'],
  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
  flexFlow: ['flexDirection', 'flexWrap'],
  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
  gap: ['columnGap', 'rowGap'],
  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
  gridColumnGap: ['columnGap'],
  gridGap: ['columnGap', 'rowGap'],
  gridRow: ['gridRowEnd', 'gridRowStart'],
  gridRowGap: ['rowGap'],
  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marker: ['markerEnd', 'markerMid', 'markerStart'],
  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
  maskPosition: ['maskPositionX', 'maskPositionY'],
  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
  overflow: ['overflowX', 'overflowY'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  placeContent: ['alignContent', 'justifyContent'],
  placeItems: ['alignItems', 'justifyItems'],
  placeSelf: ['alignSelf', 'justifySelf'],
  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
  wordWrap: ['overflowWrap']
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}
/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */


var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.

Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901
  var isEmpty = value == null || typeof value === 'boolean' || value === '';

  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */

function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

  var badStyleValueWithSemicolonPattern = /;\s*$/;
  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;

    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;

    error('`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;

    error('`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';

    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }

      var styleValue = styles[styleName];

      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
        delimiter = ';';
      }
    }

    return serialized || null;
  }
}
/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

function setValueForStyles(node, styles) {
  var style = node.style;

  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }

    var isCustomProperty = styleName.indexOf('--') === 0;

    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }

    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

    if (styleName === 'float') {
      styleName = 'cssFloat';
    }

    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

function isValueEmpty(value) {
  return value == null || typeof value === 'boolean' || value === '';
}
/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */


function expandShorthandMap(styles) {
  var expanded = {};

  for (var key in styles) {
    var longhands = shorthandToLonghand[key] || [key];

    for (var i = 0; i < longhands.length; i++) {
      expanded[longhands[i]] = key;
    }
  }

  return expanded;
}
/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */


function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
  {
    if (!nextStyles) {
      return;
    }

    var expandedUpdates = expandShorthandMap(styleUpdates);
    var expandedStyles = expandShorthandMap(nextStyles);
    var warnedAbout = {};

    for (var key in expandedUpdates) {
      var originalKey = expandedUpdates[key];
      var correctOriginalKey = expandedStyles[key];

      if (correctOriginalKey && originalKey !== correctOriginalKey) {
        var warningKey = originalKey + ',' + correctOriginalKey;

        if (warnedAbout[warningKey]) {
          continue;
        }

        warnedAbout[warningKey] = true;

        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
      }
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a list for
// those special-case tags.
var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

};

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

var HTML = '__html';

function assertValidProps(tag, props) {
  if (!props) {
    return;
  } // Note the use of `==` which checks for null or undefined.


  if (voidElementTags[tag]) {
    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
      {
        throw Error( tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." );
      }
    }
  }

  if (props.dangerouslySetInnerHTML != null) {
    if (!(props.children == null)) {
      {
        throw Error( "Can only set one of `children` or `props.dangerouslySetInnerHTML`." );
      }
    }

    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
      {
        throw Error( "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information." );
      }
    }
  }

  {
    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
    }
  }

  if (!(props.style == null || typeof props.style === 'object')) {
    {
      throw Error( "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." );
    }
  }
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }

  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this list too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;

    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG allowed attribute list, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  disablepictureinpicture: 'disablePictureInPicture',
  disableremoteplayback: 'disableRemotePlayback',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  enterkeyhint: 'enterKeyHint',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',
  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0,
  // state
  'aria-details': 0,
  'aria-disabled': 0,
  // state
  'aria-hidden': 0,
  // state
  'aria-invalid': 0,
  // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function validateProperty(tagName, name) {
  {
    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
      return true;
    }

    if (rARIACamel.test(name)) {
      var ariaName = 'aria-' + name.slice(4).toLowerCase();
      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (correctName == null) {
        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

        warnedProperties[name] = true;
        return true;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== correctName) {
        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

        warnedProperties[name] = true;
        return true;
      }
    }

    if (rARIA.test(name)) {
      var lowerCasedName = name.toLowerCase();
      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (standardName == null) {
        warnedProperties[name] = true;
        return false;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== standardName) {
        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties[name] = true;
        return true;
      }
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  {
    var invalidProps = [];

    for (var key in props) {
      var isValid = validateProperty(type, key);

      if (!isValid) {
        invalidProps.push(key);
      }
    }

    var unknownPropString = invalidProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (invalidProps.length === 1) {
      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
    } else if (invalidProps.length > 1) {
      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://reactjs.org/link/invalid-aria-props', unknownPropString, type);
    }
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;
function validateProperties$1(type, props) {
  {
    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
      return;
    }

    if (props != null && props.value === null && !didWarnValueNull) {
      didWarnValueNull = true;

      if (type === 'select' && props.multiple) {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
      } else {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
      }
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, eventRegistry) {
    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();

    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

      warnedProperties$1[name] = true;
      return true;
    } // We can't rely on the event system being injected on the server.


    if (eventRegistry != null) {
      var registrationNameDependencies = eventRegistry.registrationNameDependencies,
          possibleRegistrationNames = eventRegistry.possibleRegistrationNames;

      if (registrationNameDependencies.hasOwnProperty(name)) {
        return true;
      }

      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

      if (registrationName != null) {
        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

        warnedProperties$1[name] = true;
        return true;
      }

      if (EVENT_NAME_REGEX.test(name)) {
        error('Unknown event handler property `%s`. It will be ignored.', name);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Let the ARIA attribute hook validate ARIA attributes


    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];

      if (standardName !== name) {
        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Now that we've validated casing, do not validate
    // data types for reserved props


    if (isReserved) {
      return true;
    } // Warn when a known attribute is a bad type


    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    } // Warn when passing the strings 'false' or 'true' into a boolean prop


    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, eventRegistry) {
  {
    var unknownProps = [];

    for (var key in props) {
      var isValid = validateProperty$1(type, key, props[key], eventRegistry);

      if (!isValid) {
        unknownProps.push(key);
      }
    }

    var unknownPropString = unknownProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (unknownProps.length === 1) {
      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
    } else if (unknownProps.length > 1) {
      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://reactjs.org/link/attribute-behavior ', unknownPropString, type);
    }
  }
};

function validateProperties$2(type, props, eventRegistry) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnUnknownProperties(type, props, eventRegistry);
}

var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
var IS_NON_DELEGATED = 1 << 1;
var IS_CAPTURE_PHASE = 1 << 2;
var IS_REPLAYED = 1 << 4;
// set to LEGACY_FB_SUPPORT. LEGACY_FB_SUPPORT only gets set when
// we call willDeferLaterForLegacyFBSupport, thus not bailing out
// will result in endless cycles like an infinite loop.
// We also don't want to defer during event replaying.

var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html


  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);

  if (!internalInstance) {
    // Unmounted
    return;
  }

  if (!(typeof restoreImpl === 'function')) {
    {
      throw Error( "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

  if (stateNode) {
    var _props = getFiberCurrentPropsFromNode(stateNode);

    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
  }
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}
function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}
function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}
function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }

  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;
  restoreStateOfTarget(target);

  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults

var batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var discreteUpdatesImpl = function (fn, a, b, c, d) {
  return fn(a, b, c, d);
};

var flushDiscreteUpdatesImpl = function () {};

var batchedEventUpdatesImpl = batchedUpdatesImpl;
var isInsideEventHandler = false;
var isBatchingEventUpdates = false;

function finishEventHandler() {
  // Here we wait until all updates have propagated, which is important
  // when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  // Then we restore state of any controlled component.
  var controlledComponentsHavePendingUpdates = needsStateRestore();

  if (controlledComponentsHavePendingUpdates) {
    // If a controlled event was fired, we may need to restore the state of
    // the DOM node back to the controlled value. This is necessary when React
    // bails out of the update without touching the DOM.
    flushDiscreteUpdatesImpl();
    restoreStateIfNeeded();
  }
}

function batchedUpdates(fn, bookkeeping) {
  if (isInsideEventHandler) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(bookkeeping);
  }

  isInsideEventHandler = true;

  try {
    return batchedUpdatesImpl(fn, bookkeeping);
  } finally {
    isInsideEventHandler = false;
    finishEventHandler();
  }
}
function batchedEventUpdates(fn, a, b) {
  if (isBatchingEventUpdates) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(a, b);
  }

  isBatchingEventUpdates = true;

  try {
    return batchedEventUpdatesImpl(fn, a, b);
  } finally {
    isBatchingEventUpdates = false;
    finishEventHandler();
  }
}
function discreteUpdates(fn, a, b, c, d) {
  var prevIsInsideEventHandler = isInsideEventHandler;
  isInsideEventHandler = true;

  try {
    return discreteUpdatesImpl(fn, a, b, c, d);
  } finally {
    isInsideEventHandler = prevIsInsideEventHandler;

    if (!isInsideEventHandler) {
      finishEventHandler();
    }
  }
}
function flushDiscreteUpdatesIfNeeded(timeStamp) {
  {
    if (!isInsideEventHandler) {
      flushDiscreteUpdatesImpl();
    }
  }
}
function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
  batchedUpdatesImpl = _batchedUpdatesImpl;
  discreteUpdatesImpl = _discreteUpdatesImpl;
  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
    case 'onMouseEnter':
      return !!(props.disabled && isInteractive(type));

    default:
      return false;
  }
}
/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */


function getListener(inst, registrationName) {
  var stateNode = inst.stateNode;

  if (stateNode === null) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }

  var props = getFiberCurrentPropsFromNode(stateNode);

  if (props === null) {
    // Work in progress.
    return null;
  }

  var listener = props[registrationName];

  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }

  if (!(!listener || typeof listener === 'function')) {
    {
      throw Error( "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type." );
    }
  }

  return listener;
}

var passiveBrowserEventsSupported = false; // Check if browser support events with passive listeners
// https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support

if (canUseDOM) {
  try {
    var options = {}; // $FlowFixMe: Ignore Flow complaining about needing a value

    Object.defineProperty(options, 'passive', {
      get: function () {
        passiveBrowserEventsSupported = true;
      }
    });
    window.addEventListener('test', options, options);
    window.removeEventListener('test', options, options);
  } catch (e) {
    passiveBrowserEventsSupported = false;
  }
}

function invokeGuardedCallbackProd(name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
}

var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (!(typeof document !== 'undefined')) {
        {
          throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
        }
      }

      var evt = document.createEvent('Event');
      var didCall = false; // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event');

      function restoreAfterDispatch() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }
      } // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.


      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        didCall = true;
        restoreAfterDispatch();
        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didCall && didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://reactjs.org/link/crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);

      if (!didCall) {
        // Something went really wrong, and our event was not dispatched.
        // https://github.com/facebook/react/issues/16734
        // https://github.com/facebook/react/issues/16585
        // Fall back to the production implementation.
        restoreAfterDispatch();
        return invokeGuardedCallbackProd.apply(this, arguments);
      }
    };
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.

var hasRethrowError = false;
var rethrowError = null;
var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);

  if (hasError) {
    var error = clearCaughtError();

    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}
/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}
function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    {
      {
        throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */
function get(key) {
  return key._reactInternals;
}
function has(key) {
  return key._reactInternals !== undefined;
}
function set(key, value) {
  key._reactInternals = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoFlags =
/*                      */
0;
var PerformedWork =
/*                */
1; // You can change the rest (and add more).

var Placement =
/*                    */
2;
var Update =
/*                       */
4;
var PlacementAndUpdate =
/*           */
6;
var Deletion =
/*                     */
8;
var ContentReset =
/*                 */
16;
var Callback =
/*                     */
32;
var DidCapture =
/*                   */
64;
var Ref =
/*                          */
128;
var Snapshot =
/*                     */
256;
var Passive =
/*                      */
512; // TODO (effects) Remove this bit once the new reconciler is synced to the old.

var PassiveUnmountPendingDev =
/*     */
8192;
var Hydrating =
/*                    */
1024;
var HydratingAndUpdate =
/*           */
1028; // Passive & Update & Callback & Ref & Snapshot

var LifecycleEffectMask =
/*          */
932; // Union of all host effects

var HostEffectMask =
/*               */
2047; // These are not really side effects, but we still reuse this field.

var Incomplete =
/*                   */
2048;
var ShouldCapture =
/*                */
4096;
var ForceUpdateForLegacySuspense =
/* */
16384; // Static tags describe aspects of a fiber that are not specific to a render,

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (fiber.tag === SuspenseComponent) {
    var suspenseState = fiber.memoizedState;

    if (suspenseState === null) {
      var current = fiber.alternate;

      if (current !== null) {
        suspenseState = current.memoizedState;
      }
    }

    if (suspenseState !== null) {
      return suspenseState.dehydrated;
    }
  }

  return null;
}
function getContainerFromFiber(fiber) {
  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
}
function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;

      if (!instance._warnedAboutRefsInRender) {
        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
      }

      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (!(getNearestMountedFiber(fiber) === fiber)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (!(nearestMounted !== null)) {
      {
        throw Error( "Unable to find node on an unmounted component." );
      }
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      {
        {
          throw Error( "Unable to find node on an unmounted component." );
        }
      }
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          {
            throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
          }
        }
      }
    }

    if (!(a.alternate === b)) {
      {
        throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (!(a.tag === HostRoot)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}
function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}
function doesFiberContain(parentFiber, childFiber) {
  var node = childFiber;
  var parentFiberAlternate = parentFiber.alternate;

  while (node !== null) {
    if (node === parentFiber || node === parentFiberAlternate) {
      return true;
    }

    node = node.return;
  }

  return false;
}

var attemptUserBlockingHydration;
function setAttemptUserBlockingHydration(fn) {
  attemptUserBlockingHydration = fn;
}
var attemptContinuousHydration;
function setAttemptContinuousHydration(fn) {
  attemptContinuousHydration = fn;
}
var attemptHydrationAtCurrentPriority;
function setAttemptHydrationAtCurrentPriority(fn) {
  attemptHydrationAtCurrentPriority = fn;
}
var attemptHydrationAtPriority;
function setAttemptHydrationAtPriority(fn) {
  attemptHydrationAtPriority = fn;
} // TODO: Upgrade this definition once we're on a newer version of Flow that
var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
// if the last target was dehydrated.

var queuedFocus = null;
var queuedDrag = null;
var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

var queuedPointers = new Map();
var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

var queuedExplicitHydrationTargets = [];
function hasQueuedDiscreteEvents() {
  return queuedDiscreteEvents.length > 0;
}
var discreteReplayableEvents = ['mousedown', 'mouseup', 'touchcancel', 'touchend', 'touchstart', 'auxclick', 'dblclick', 'pointercancel', 'pointerdown', 'pointerup', 'dragend', 'dragstart', 'drop', 'compositionend', 'compositionstart', 'keydown', 'keypress', 'keyup', 'input', 'textInput', // Intentionally camelCase
'copy', 'cut', 'paste', 'click', 'change', 'contextmenu', 'reset', 'submit'];
function isReplayableDiscreteEvent(eventType) {
  return discreteReplayableEvents.indexOf(eventType) > -1;
}

function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  return {
    blockedOn: blockedOn,
    domEventName: domEventName,
    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
    nativeEvent: nativeEvent,
    targetContainers: [targetContainer]
  };
}

function queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
  queuedDiscreteEvents.push(queuedEvent);
} // Resets the replaying for this type of continuous event to no event.

function clearIfContinuousEvent(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'focusin':
    case 'focusout':
      queuedFocus = null;
      break;

    case 'dragenter':
    case 'dragleave':
      queuedDrag = null;
      break;

    case 'mouseover':
    case 'mouseout':
      queuedMouse = null;
      break;

    case 'pointerover':
    case 'pointerout':
      {
        var pointerId = nativeEvent.pointerId;
        queuedPointers.delete(pointerId);
        break;
      }

    case 'gotpointercapture':
    case 'lostpointercapture':
      {
        var _pointerId = nativeEvent.pointerId;
        queuedPointerCaptures.delete(_pointerId);
        break;
      }
  }
}

function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);

    if (blockedOn !== null) {
      var _fiber2 = getInstanceFromNode(blockedOn);

      if (_fiber2 !== null) {
        // Attempt to increase the priority of this target.
        attemptContinuousHydration(_fiber2);
      }
    }

    return queuedEvent;
  } // If we have already queued this exact event, then it's because
  // the different event systems have different DOM event listeners.
  // We can accumulate the flags, and the targetContainers, and
  // store a single event to be replayed.


  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  var targetContainers = existingQueuedEvent.targetContainers;

  if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
    targetContainers.push(targetContainer);
  }

  return existingQueuedEvent;
}

function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  // These set relatedTarget to null because the replayed event will be treated as if we
  // moved from outside the window (no target) onto the target once it hydrates.
  // Instead of mutating we could clone the event.
  switch (domEventName) {
    case 'focusin':
      {
        var focusEvent = nativeEvent;
        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
        return true;
      }

    case 'dragenter':
      {
        var dragEvent = nativeEvent;
        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
        return true;
      }

    case 'mouseover':
      {
        var mouseEvent = nativeEvent;
        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
        return true;
      }

    case 'pointerover':
      {
        var pointerEvent = nativeEvent;
        var pointerId = pointerEvent.pointerId;
        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
        return true;
      }

    case 'gotpointercapture':
      {
        var _pointerEvent = nativeEvent;
        var _pointerId2 = _pointerEvent.pointerId;
        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
        return true;
      }
  }

  return false;
} // Check if this target is unblocked. Returns true if it's unblocked.

function attemptExplicitHydrationTarget(queuedTarget) {
  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
  // Try to unify them. It's a bit tricky since it would require two return
  // values.
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted !== null) {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // We're blocked on hydrating this boundary.
          // Increase its priority.
          queuedTarget.blockedOn = instance;
          attemptHydrationAtPriority(queuedTarget.lanePriority, function () {
            Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
              attemptHydrationAtCurrentPriority(nearestMounted);
            });
          });
          return;
        }
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
          // a root other than sync.

          return;
        }
      }
    }
  }

  queuedTarget.blockedOn = null;
}

function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (queuedEvent.blockedOn !== null) {
    return false;
  }

  var targetContainers = queuedEvent.targetContainers;

  while (targetContainers.length > 0) {
    var targetContainer = targetContainers[0];
    var nextBlockedOn = attemptToDispatchEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);

    if (nextBlockedOn !== null) {
      // We're still blocked. Try again later.
      var _fiber3 = getInstanceFromNode(nextBlockedOn);

      if (_fiber3 !== null) {
        attemptContinuousHydration(_fiber3);
      }

      queuedEvent.blockedOn = nextBlockedOn;
      return false;
    } // This target container was successfully dispatched. Try the next.


    targetContainers.shift();
  }

  return true;
}

function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
    map.delete(key);
  }
}

function replayUnblockedEvents() {
  hasScheduledReplayAttempt = false; // First replay discrete events.

  while (queuedDiscreteEvents.length > 0) {
    var nextDiscreteEvent = queuedDiscreteEvents[0];

    if (nextDiscreteEvent.blockedOn !== null) {
      // We're still blocked.
      // Increase the priority of this boundary to unblock
      // the next discrete event.
      var _fiber4 = getInstanceFromNode(nextDiscreteEvent.blockedOn);

      if (_fiber4 !== null) {
        attemptUserBlockingHydration(_fiber4);
      }

      break;
    }

    var targetContainers = nextDiscreteEvent.targetContainers;

    while (targetContainers.length > 0) {
      var targetContainer = targetContainers[0];
      var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.domEventName, nextDiscreteEvent.eventSystemFlags, targetContainer, nextDiscreteEvent.nativeEvent);

      if (nextBlockedOn !== null) {
        // We're still blocked. Try again later.
        nextDiscreteEvent.blockedOn = nextBlockedOn;
        break;
      } // This target container was successfully dispatched. Try the next.


      targetContainers.shift();
    }

    if (nextDiscreteEvent.blockedOn === null) {
      // We've successfully replayed the first event. Let's try the next one.
      queuedDiscreteEvents.shift();
    }
  } // Next replay any continuous events.


  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
    queuedFocus = null;
  }

  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
    queuedDrag = null;
  }

  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
    queuedMouse = null;
  }

  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}

function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  if (queuedEvent.blockedOn === unblocked) {
    queuedEvent.blockedOn = null;

    if (!hasScheduledReplayAttempt) {
      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
      // now unblocked. This first might not actually be unblocked yet.
      // We could check it early to avoid scheduling an unnecessary callback.

      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
    }
  }
}

function retryIfBlockedOn(unblocked) {
  // Mark anything that was blocked on this as no longer blocked
  // and eligible for a replay.
  if (queuedDiscreteEvents.length > 0) {
    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
    // worth it because we expect very few discrete events to queue up and once
    // we are actually fully unblocked it will be fast to replay them.

    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
      var queuedEvent = queuedDiscreteEvents[i];

      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
      }
    }
  }

  if (queuedFocus !== null) {
    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  }

  if (queuedDrag !== null) {
    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  }

  if (queuedMouse !== null) {
    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  }

  var unblock = function (queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  };

  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);

  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
    var queuedTarget = queuedExplicitHydrationTargets[_i];

    if (queuedTarget.blockedOn === unblocked) {
      queuedTarget.blockedOn = null;
    }
  }

  while (queuedExplicitHydrationTargets.length > 0) {
    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

    if (nextExplicitTarget.blockedOn !== null) {
      // We're still blocked.
      break;
    } else {
      attemptExplicitHydrationTarget(nextExplicitTarget);

      if (nextExplicitTarget.blockedOn === null) {
        // We're unblocked.
        queuedExplicitHydrationTargets.shift();
      }
    }
  }
}

var DiscreteEvent = 0;
var UserBlockingEvent = 1;
var ContinuousEvent = 2;

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  return prefixes;
}
/**
 * A list of event names to a configurable list of vendor prefixes.
 */


var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};
/**
 * Event names that have already been detected and prefixed (if applicable).
 */

var prefixedEventNames = {};
/**
 * Element to check for prefixes on.
 */

var style = {};
/**
 * Bootstrap if a DOM exists.
 */

if (canUseDOM) {
  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.

  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  } // Same as above


  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}
/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */


function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

var ANIMATION_END = getVendorPrefixedEventName('animationend');
var ANIMATION_ITERATION = getVendorPrefixedEventName('animationiteration');
var ANIMATION_START = getVendorPrefixedEventName('animationstart');
var TRANSITION_END = getVendorPrefixedEventName('transitionend');

var topLevelEventsToReactNames = new Map();
var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
// the code required to apply the same logic for event prioritization and that of the
// SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
// duplication (for which there would be quite a bit). For the events that are not needed
// for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
// array of top level events.
// Lastly, we ignore prettier so we can keep the formatting sane.
// prettier-ignore

var discreteEventPairsForSimpleEventPlugin = ['cancel', 'cancel', 'click', 'click', 'close', 'close', 'contextmenu', 'contextMenu', 'copy', 'copy', 'cut', 'cut', 'auxclick', 'auxClick', 'dblclick', 'doubleClick', // Careful!
'dragend', 'dragEnd', 'dragstart', 'dragStart', 'drop', 'drop', 'focusin', 'focus', // Careful!
'focusout', 'blur', // Careful!
'input', 'input', 'invalid', 'invalid', 'keydown', 'keyDown', 'keypress', 'keyPress', 'keyup', 'keyUp', 'mousedown', 'mouseDown', 'mouseup', 'mouseUp', 'paste', 'paste', 'pause', 'pause', 'play', 'play', 'pointercancel', 'pointerCancel', 'pointerdown', 'pointerDown', 'pointerup', 'pointerUp', 'ratechange', 'rateChange', 'reset', 'reset', 'seeked', 'seeked', 'submit', 'submit', 'touchcancel', 'touchCancel', 'touchend', 'touchEnd', 'touchstart', 'touchStart', 'volumechange', 'volumeChange'];
var otherDiscreteEvents = ['change', 'selectionchange', 'textInput', 'compositionstart', 'compositionend', 'compositionupdate'];


var userBlockingPairsForSimpleEventPlugin = ['drag', 'drag', 'dragenter', 'dragEnter', 'dragexit', 'dragExit', 'dragleave', 'dragLeave', 'dragover', 'dragOver', 'mousemove', 'mouseMove', 'mouseout', 'mouseOut', 'mouseover', 'mouseOver', 'pointermove', 'pointerMove', 'pointerout', 'pointerOut', 'pointerover', 'pointerOver', 'scroll', 'scroll', 'toggle', 'toggle', 'touchmove', 'touchMove', 'wheel', 'wheel']; // prettier-ignore

var continuousPairsForSimpleEventPlugin = ['abort', 'abort', ANIMATION_END, 'animationEnd', ANIMATION_ITERATION, 'animationIteration', ANIMATION_START, 'animationStart', 'canplay', 'canPlay', 'canplaythrough', 'canPlayThrough', 'durationchange', 'durationChange', 'emptied', 'emptied', 'encrypted', 'encrypted', 'ended', 'ended', 'error', 'error', 'gotpointercapture', 'gotPointerCapture', 'load', 'load', 'loadeddata', 'loadedData', 'loadedmetadata', 'loadedMetadata', 'loadstart', 'loadStart', 'lostpointercapture', 'lostPointerCapture', 'playing', 'playing', 'progress', 'progress', 'seeking', 'seeking', 'stalled', 'stalled', 'suspend', 'suspend', 'timeupdate', 'timeUpdate', TRANSITION_END, 'transitionEnd', 'waiting', 'waiting'];
/**
 * Turns
 * ['abort', ...]
 *
 * into
 *
 * topLevelEventsToReactNames = new Map([
 *   ['abort', 'onAbort'],
 * ]);
 *
 * and registers them.
 */

function registerSimplePluginEventsAndSetTheirPriorities(eventTypes, priority) {
  // As the event types are in pairs of two, we need to iterate
  // through in twos. The events are in pairs of two to save code
  // and improve init perf of processing this array, as it will
  // result in far fewer object allocations and property accesses
  // if we only use three arrays to process all the categories of
  // instead of tuples.
  for (var i = 0; i < eventTypes.length; i += 2) {
    var topEvent = eventTypes[i];
    var event = eventTypes[i + 1];
    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
    var reactName = 'on' + capitalizedEvent;
    eventPriorities.set(topEvent, priority);
    topLevelEventsToReactNames.set(topEvent, reactName);
    registerTwoPhaseEvent(reactName, [topEvent]);
  }
}

function setEventPriorities(eventTypes, priority) {
  for (var i = 0; i < eventTypes.length; i++) {
    eventPriorities.set(eventTypes[i], priority);
  }
}

function getEventPriorityForPluginSystem(domEventName) {
  var priority = eventPriorities.get(domEventName); // Default to a ContinuousEvent. Note: we might
  // want to warn if we can't detect the priority
  // for the event.

  return priority === undefined ? ContinuousEvent : priority;
}
function registerSimpleEvents() {
  registerSimplePluginEventsAndSetTheirPriorities(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
  registerSimplePluginEventsAndSetTheirPriorities(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
  registerSimplePluginEventsAndSetTheirPriorities(continuousPairsForSimpleEventPlugin, ContinuousEvent);
  setEventPriorities(otherDiscreteEvents, DiscreteEvent);
}

var Scheduler_now = Scheduler.unstable_now;

{
  // Provide explicit error message when production+profiling bundle of e.g.
  // react-dom is used with production (non-profiling) bundle of
  // scheduler/tracing
  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
    {
      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling" );
    }
  }
}
// ascending numbers so we can compare them like numbers. They start at 90 to
// avoid clashing with Scheduler's priorities.

var ImmediatePriority = 99;
var UserBlockingPriority = 98;
var NormalPriority = 97;
var LowPriority = 96;
var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

var NoPriority = 90;
var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.

var SyncLanePriority = 15;
var SyncBatchedLanePriority = 14;
var InputDiscreteHydrationLanePriority = 13;
var InputDiscreteLanePriority = 12;
var InputContinuousHydrationLanePriority = 11;
var InputContinuousLanePriority = 10;
var DefaultHydrationLanePriority = 9;
var DefaultLanePriority = 8;
var TransitionHydrationPriority = 7;
var TransitionPriority = 6;
var RetryLanePriority = 5;
var SelectiveHydrationLanePriority = 4;
var IdleHydrationLanePriority = 3;
var IdleLanePriority = 2;
var OffscreenLanePriority = 1;
var NoLanePriority = 0;
var TotalLanes = 31;
var NoLanes =
/*                        */
0;
var NoLane =
/*                          */
0;
var SyncLane =
/*                        */
1;
var SyncBatchedLane =
/*                 */
2;
var InputDiscreteHydrationLane =
/*      */
4;
var InputDiscreteLanes =
/*                    */
24;
var InputContinuousHydrationLane =
/*           */
32;
var InputContinuousLanes =
/*                  */
192;
var DefaultHydrationLane =
/*            */
256;
var DefaultLanes =
/*                   */
3584;
var TransitionHydrationLane =
/*                */
4096;
var TransitionLanes =
/*                       */
4186112;
var RetryLanes =
/*                            */
62914560;
var SomeRetryLane =
/*                  */
33554432;
var SelectiveHydrationLane =
/*          */
67108864;
var NonIdleLanes =
/*                                 */
134217727;
var IdleHydrationLane =
/*               */
134217728;
var IdleLanes =
/*                             */
805306368;
var OffscreenLane =
/*                   */
1073741824;
var NoTimestamp = -1;
function setCurrentUpdateLanePriority(newLanePriority) {
} // "Registers" used to "return" multiple values
// Used by getHighestPriorityLanes and getNextLanes:

var return_highestLanePriority = DefaultLanePriority;

function getHighestPriorityLanes(lanes) {
  if ((SyncLane & lanes) !== NoLanes) {
    return_highestLanePriority = SyncLanePriority;
    return SyncLane;
  }

  if ((SyncBatchedLane & lanes) !== NoLanes) {
    return_highestLanePriority = SyncBatchedLanePriority;
    return SyncBatchedLane;
  }

  if ((InputDiscreteHydrationLane & lanes) !== NoLanes) {
    return_highestLanePriority = InputDiscreteHydrationLanePriority;
    return InputDiscreteHydrationLane;
  }

  var inputDiscreteLanes = InputDiscreteLanes & lanes;

  if (inputDiscreteLanes !== NoLanes) {
    return_highestLanePriority = InputDiscreteLanePriority;
    return inputDiscreteLanes;
  }

  if ((lanes & InputContinuousHydrationLane) !== NoLanes) {
    return_highestLanePriority = InputContinuousHydrationLanePriority;
    return InputContinuousHydrationLane;
  }

  var inputContinuousLanes = InputContinuousLanes & lanes;

  if (inputContinuousLanes !== NoLanes) {
    return_highestLanePriority = InputContinuousLanePriority;
    return inputContinuousLanes;
  }

  if ((lanes & DefaultHydrationLane) !== NoLanes) {
    return_highestLanePriority = DefaultHydrationLanePriority;
    return DefaultHydrationLane;
  }

  var defaultLanes = DefaultLanes & lanes;

  if (defaultLanes !== NoLanes) {
    return_highestLanePriority = DefaultLanePriority;
    return defaultLanes;
  }

  if ((lanes & TransitionHydrationLane) !== NoLanes) {
    return_highestLanePriority = TransitionHydrationPriority;
    return TransitionHydrationLane;
  }

  var transitionLanes = TransitionLanes & lanes;

  if (transitionLanes !== NoLanes) {
    return_highestLanePriority = TransitionPriority;
    return transitionLanes;
  }

  var retryLanes = RetryLanes & lanes;

  if (retryLanes !== NoLanes) {
    return_highestLanePriority = RetryLanePriority;
    return retryLanes;
  }

  if (lanes & SelectiveHydrationLane) {
    return_highestLanePriority = SelectiveHydrationLanePriority;
    return SelectiveHydrationLane;
  }

  if ((lanes & IdleHydrationLane) !== NoLanes) {
    return_highestLanePriority = IdleHydrationLanePriority;
    return IdleHydrationLane;
  }

  var idleLanes = IdleLanes & lanes;

  if (idleLanes !== NoLanes) {
    return_highestLanePriority = IdleLanePriority;
    return idleLanes;
  }

  if ((OffscreenLane & lanes) !== NoLanes) {
    return_highestLanePriority = OffscreenLanePriority;
    return OffscreenLane;
  }

  {
    error('Should have found matching lanes. This is a bug in React.');
  } // This shouldn't be reachable, but as a fallback, return the entire bitmask.


  return_highestLanePriority = DefaultLanePriority;
  return lanes;
}

function schedulerPriorityToLanePriority(schedulerPriorityLevel) {
  switch (schedulerPriorityLevel) {
    case ImmediatePriority:
      return SyncLanePriority;

    case UserBlockingPriority:
      return InputContinuousLanePriority;

    case NormalPriority:
    case LowPriority:
      // TODO: Handle LowSchedulerPriority, somehow. Maybe the same lane as hydration.
      return DefaultLanePriority;

    case IdlePriority:
      return IdleLanePriority;

    default:
      return NoLanePriority;
  }
}
function lanePriorityToSchedulerPriority(lanePriority) {
  switch (lanePriority) {
    case SyncLanePriority:
    case SyncBatchedLanePriority:
      return ImmediatePriority;

    case InputDiscreteHydrationLanePriority:
    case InputDiscreteLanePriority:
    case InputContinuousHydrationLanePriority:
    case InputContinuousLanePriority:
      return UserBlockingPriority;

    case DefaultHydrationLanePriority:
    case DefaultLanePriority:
    case TransitionHydrationPriority:
    case TransitionPriority:
    case SelectiveHydrationLanePriority:
    case RetryLanePriority:
      return NormalPriority;

    case IdleHydrationLanePriority:
    case IdleLanePriority:
    case OffscreenLanePriority:
      return IdlePriority;

    case NoLanePriority:
      return NoPriority;

    default:
      {
        {
          throw Error( "Invalid update priority: " + lanePriority + ". This is a bug in React." );
        }
      }

  }
}
function getNextLanes(root, wipLanes) {
  // Early bailout if there's no pending work left.
  var pendingLanes = root.pendingLanes;

  if (pendingLanes === NoLanes) {
    return_highestLanePriority = NoLanePriority;
    return NoLanes;
  }

  var nextLanes = NoLanes;
  var nextLanePriority = NoLanePriority;
  var expiredLanes = root.expiredLanes;
  var suspendedLanes = root.suspendedLanes;
  var pingedLanes = root.pingedLanes; // Check if any work has expired.

  if (expiredLanes !== NoLanes) {
    nextLanes = expiredLanes;
    nextLanePriority = return_highestLanePriority = SyncLanePriority;
  } else {
    // Do not work on any idle work until all the non-idle work has finished,
    // even if the work is suspended.
    var nonIdlePendingLanes = pendingLanes & NonIdleLanes;

    if (nonIdlePendingLanes !== NoLanes) {
      var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;

      if (nonIdleUnblockedLanes !== NoLanes) {
        nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
        nextLanePriority = return_highestLanePriority;
      } else {
        var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;

        if (nonIdlePingedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
          nextLanePriority = return_highestLanePriority;
        }
      }
    } else {
      // The only remaining work is Idle.
      var unblockedLanes = pendingLanes & ~suspendedLanes;

      if (unblockedLanes !== NoLanes) {
        nextLanes = getHighestPriorityLanes(unblockedLanes);
        nextLanePriority = return_highestLanePriority;
      } else {
        if (pingedLanes !== NoLanes) {
          nextLanes = getHighestPriorityLanes(pingedLanes);
          nextLanePriority = return_highestLanePriority;
        }
      }
    }
  }

  if (nextLanes === NoLanes) {
    // This should only be reachable if we're suspended
    // TODO: Consider warning in this path if a fallback timer is not scheduled.
    return NoLanes;
  } // If there are higher priority lanes, we'll include them even if they
  // are suspended.


  nextLanes = pendingLanes & getEqualOrHigherPriorityLanes(nextLanes); // If we're already in the middle of a render, switching lanes will interrupt
  // it and we'll lose our progress. We should only do this if the new lanes are
  // higher priority.

  if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
  // bother waiting until the root is complete.
  (wipLanes & suspendedLanes) === NoLanes) {
    getHighestPriorityLanes(wipLanes);
    var wipLanePriority = return_highestLanePriority;

    if (nextLanePriority <= wipLanePriority) {
      return wipLanes;
    } else {
      return_highestLanePriority = nextLanePriority;
    }
  } // Check for entangled lanes and add them to the batch.
  //
  // A lane is said to be entangled with another when it's not allowed to render
  // in a batch that does not also include the other lane. Typically we do this
  // when multiple updates have the same source, and we only want to respond to
  // the most recent event from that source.
  //
  // Note that we apply entanglements *after* checking for partial work above.
  // This means that if a lane is entangled during an interleaved event while
  // it's already rendering, we won't interrupt it. This is intentional, since
  // entanglement is usually "best effort": we'll try our best to render the
  // lanes in the same batch, but it's not worth throwing out partially
  // completed work in order to do it.
  //
  // For those exceptions where entanglement is semantically important, like
  // useMutableSource, we should ensure that there is no partial work at the
  // time we apply the entanglement.


  var entangledLanes = root.entangledLanes;

  if (entangledLanes !== NoLanes) {
    var entanglements = root.entanglements;
    var lanes = nextLanes & entangledLanes;

    while (lanes > 0) {
      var index = pickArbitraryLaneIndex(lanes);
      var lane = 1 << index;
      nextLanes |= entanglements[index];
      lanes &= ~lane;
    }
  }

  return nextLanes;
}
function getMostRecentEventTime(root, lanes) {
  var eventTimes = root.eventTimes;
  var mostRecentEventTime = NoTimestamp;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    var eventTime = eventTimes[index];

    if (eventTime > mostRecentEventTime) {
      mostRecentEventTime = eventTime;
    }

    lanes &= ~lane;
  }

  return mostRecentEventTime;
}

function computeExpirationTime(lane, currentTime) {
  // TODO: Expiration heuristic is constant per lane, so could use a map.
  getHighestPriorityLanes(lane);
  var priority = return_highestLanePriority;

  if (priority >= InputContinuousLanePriority) {
    // User interactions should expire slightly more quickly.
    //
    // NOTE: This is set to the corresponding constant as in Scheduler.js. When
    // we made it larger, a product metric in www regressed, suggesting there's
    // a user interaction that's being starved by a series of synchronous
    // updates. If that theory is correct, the proper solution is to fix the
    // starvation. However, this scenario supports the idea that expiration
    // times are an important safeguard when starvation does happen.
    //
    // Also note that, in the case of user input specifically, this will soon no
    // longer be an issue because we plan to make user input synchronous by
    // default (until you enter `startTransition`, of course.)
    //
    // If weren't planning to make these updates synchronous soon anyway, I
    // would probably make this number a configurable parameter.
    return currentTime + 250;
  } else if (priority >= TransitionPriority) {
    return currentTime + 5000;
  } else {
    // Anything idle priority or lower should never expire.
    return NoTimestamp;
  }
}

function markStarvedLanesAsExpired(root, currentTime) {
  // TODO: This gets called every time we yield. We can optimize by storing
  // the earliest expiration time on the root. Then use that to quickly bail out
  // of this function.
  var pendingLanes = root.pendingLanes;
  var suspendedLanes = root.suspendedLanes;
  var pingedLanes = root.pingedLanes;
  var expirationTimes = root.expirationTimes; // Iterate through the pending lanes and check if we've reached their
  // expiration time. If so, we'll assume the update is being starved and mark
  // it as expired to force it to finish.

  var lanes = pendingLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    var expirationTime = expirationTimes[index];

    if (expirationTime === NoTimestamp) {
      // Found a pending lane with no expiration time. If it's not suspended, or
      // if it's pinged, assume it's CPU-bound. Compute a new expiration time
      // using the current time.
      if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
        // Assumes timestamps are monotonically increasing.
        expirationTimes[index] = computeExpirationTime(lane, currentTime);
      }
    } else if (expirationTime <= currentTime) {
      // This lane expired
      root.expiredLanes |= lane;
    }

    lanes &= ~lane;
  }
} // This returns the highest priority pending lanes regardless of whether they
function getLanesToRetrySynchronouslyOnError(root) {
  var everythingButOffscreen = root.pendingLanes & ~OffscreenLane;

  if (everythingButOffscreen !== NoLanes) {
    return everythingButOffscreen;
  }

  if (everythingButOffscreen & OffscreenLane) {
    return OffscreenLane;
  }

  return NoLanes;
}
function returnNextLanesPriority() {
  return return_highestLanePriority;
}
function includesNonIdleWork(lanes) {
  return (lanes & NonIdleLanes) !== NoLanes;
}
function includesOnlyRetries(lanes) {
  return (lanes & RetryLanes) === lanes;
}
function includesOnlyTransitions(lanes) {
  return (lanes & TransitionLanes) === lanes;
} // To ensure consistency across multiple updates in the same event, this should
// be a pure function, so that it always returns the same lane for given inputs.

function findUpdateLane(lanePriority, wipLanes) {
  switch (lanePriority) {
    case NoLanePriority:
      break;

    case SyncLanePriority:
      return SyncLane;

    case SyncBatchedLanePriority:
      return SyncBatchedLane;

    case InputDiscreteLanePriority:
      {
        var _lane = pickArbitraryLane(InputDiscreteLanes & ~wipLanes);

        if (_lane === NoLane) {
          // Shift to the next priority level
          return findUpdateLane(InputContinuousLanePriority, wipLanes);
        }

        return _lane;
      }

    case InputContinuousLanePriority:
      {
        var _lane2 = pickArbitraryLane(InputContinuousLanes & ~wipLanes);

        if (_lane2 === NoLane) {
          // Shift to the next priority level
          return findUpdateLane(DefaultLanePriority, wipLanes);
        }

        return _lane2;
      }

    case DefaultLanePriority:
      {
        var _lane3 = pickArbitraryLane(DefaultLanes & ~wipLanes);

        if (_lane3 === NoLane) {
          // If all the default lanes are already being worked on, look for a
          // lane in the transition range.
          _lane3 = pickArbitraryLane(TransitionLanes & ~wipLanes);

          if (_lane3 === NoLane) {
            // All the transition lanes are taken, too. This should be very
            // rare, but as a last resort, pick a default lane. This will have
            // the effect of interrupting the current work-in-progress render.
            _lane3 = pickArbitraryLane(DefaultLanes);
          }
        }

        return _lane3;
      }

    case TransitionPriority: // Should be handled by findTransitionLane instead

    case RetryLanePriority:
      // Should be handled by findRetryLane instead
      break;

    case IdleLanePriority:
      var lane = pickArbitraryLane(IdleLanes & ~wipLanes);

      if (lane === NoLane) {
        lane = pickArbitraryLane(IdleLanes);
      }

      return lane;
  }

  {
    {
      throw Error( "Invalid update priority: " + lanePriority + ". This is a bug in React." );
    }
  }
} // To ensure consistency across multiple updates in the same event, this should
// be pure function, so that it always returns the same lane for given inputs.

function findTransitionLane(wipLanes, pendingLanes) {
  // First look for lanes that are completely unclaimed, i.e. have no
  // pending work.
  var lane = pickArbitraryLane(TransitionLanes & ~pendingLanes);

  if (lane === NoLane) {
    // If all lanes have pending work, look for a lane that isn't currently
    // being worked on.
    lane = pickArbitraryLane(TransitionLanes & ~wipLanes);

    if (lane === NoLane) {
      // If everything is being worked on, pick any lane. This has the
      // effect of interrupting the current work-in-progress.
      lane = pickArbitraryLane(TransitionLanes);
    }
  }

  return lane;
} // To ensure consistency across multiple updates in the same event, this should
// be pure function, so that it always returns the same lane for given inputs.

function findRetryLane(wipLanes) {
  // This is a fork of `findUpdateLane` designed specifically for Suspense
  // "retries" — a special update that attempts to flip a Suspense boundary
  // from its placeholder state to its primary/resolved state.
  var lane = pickArbitraryLane(RetryLanes & ~wipLanes);

  if (lane === NoLane) {
    lane = pickArbitraryLane(RetryLanes);
  }

  return lane;
}

function getHighestPriorityLane(lanes) {
  return lanes & -lanes;
}

function getLowestPriorityLane(lanes) {
  // This finds the most significant non-zero bit.
  var index = 31 - clz32(lanes);
  return index < 0 ? NoLanes : 1 << index;
}

function getEqualOrHigherPriorityLanes(lanes) {
  return (getLowestPriorityLane(lanes) << 1) - 1;
}

function pickArbitraryLane(lanes) {
  // This wrapper function gets inlined. Only exists so to communicate that it
  // doesn't matter which bit is selected; you can pick any bit without
  // affecting the algorithms where its used. Here I'm using
  // getHighestPriorityLane because it requires the fewest operations.
  return getHighestPriorityLane(lanes);
}

function pickArbitraryLaneIndex(lanes) {
  return 31 - clz32(lanes);
}

function laneToIndex(lane) {
  return pickArbitraryLaneIndex(lane);
}

function includesSomeLane(a, b) {
  return (a & b) !== NoLanes;
}
function isSubsetOfLanes(set, subset) {
  return (set & subset) === subset;
}
function mergeLanes(a, b) {
  return a | b;
}
function removeLanes(set, subset) {
  return set & ~subset;
} // Seems redundant, but it changes the type from a single lane (used for
// updates) to a group of lanes (used for flushing work).

function laneToLanes(lane) {
  return lane;
}
function higherPriorityLane(a, b) {
  // This works because the bit ranges decrease in priority as you go left.
  return a !== NoLane && a < b ? a : b;
}
function createLaneMap(initial) {
  // Intentionally pushing one by one.
  // https://v8.dev/blog/elements-kinds#avoid-creating-holes
  var laneMap = [];

  for (var i = 0; i < TotalLanes; i++) {
    laneMap.push(initial);
  }

  return laneMap;
}
function markRootUpdated(root, updateLane, eventTime) {
  root.pendingLanes |= updateLane; // TODO: Theoretically, any update to any lane can unblock any other lane. But
  // it's not practical to try every single possible combination. We need a
  // heuristic to decide which lanes to attempt to render, and in which batches.
  // For now, we use the same heuristic as in the old ExpirationTimes model:
  // retry any lane at equal or lower priority, but don't try updates at higher
  // priority without also including the lower priority updates. This works well
  // when considering updates across different priority levels, but isn't
  // sufficient for updates within the same priority, since we want to treat
  // those updates as parallel.
  // Unsuspend any update at equal or lower priority.

  var higherPriorityLanes = updateLane - 1; // Turns 0b1000 into 0b0111

  root.suspendedLanes &= higherPriorityLanes;
  root.pingedLanes &= higherPriorityLanes;
  var eventTimes = root.eventTimes;
  var index = laneToIndex(updateLane); // We can always overwrite an existing timestamp because we prefer the most
  // recent event, and we assume time is monotonically increasing.

  eventTimes[index] = eventTime;
}
function markRootSuspended(root, suspendedLanes) {
  root.suspendedLanes |= suspendedLanes;
  root.pingedLanes &= ~suspendedLanes; // The suspended lanes are no longer CPU-bound. Clear their expiration times.

  var expirationTimes = root.expirationTimes;
  var lanes = suspendedLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    expirationTimes[index] = NoTimestamp;
    lanes &= ~lane;
  }
}
function markRootPinged(root, pingedLanes, eventTime) {
  root.pingedLanes |= root.suspendedLanes & pingedLanes;
}
function markDiscreteUpdatesExpired(root) {
  root.expiredLanes |= InputDiscreteLanes & root.pendingLanes;
}
function hasDiscreteLanes(lanes) {
  return (lanes & InputDiscreteLanes) !== NoLanes;
}
function markRootMutableRead(root, updateLane) {
  root.mutableReadLanes |= updateLane & root.pendingLanes;
}
function markRootFinished(root, remainingLanes) {
  var noLongerPendingLanes = root.pendingLanes & ~remainingLanes;
  root.pendingLanes = remainingLanes; // Let's try everything again

  root.suspendedLanes = 0;
  root.pingedLanes = 0;
  root.expiredLanes &= remainingLanes;
  root.mutableReadLanes &= remainingLanes;
  root.entangledLanes &= remainingLanes;
  var entanglements = root.entanglements;
  var eventTimes = root.eventTimes;
  var expirationTimes = root.expirationTimes; // Clear the lanes that no longer have pending work

  var lanes = noLongerPendingLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    entanglements[index] = NoLanes;
    eventTimes[index] = NoTimestamp;
    expirationTimes[index] = NoTimestamp;
    lanes &= ~lane;
  }
}
function markRootEntangled(root, entangledLanes) {
  root.entangledLanes |= entangledLanes;
  var entanglements = root.entanglements;
  var lanes = entangledLanes;

  while (lanes > 0) {
    var index = pickArbitraryLaneIndex(lanes);
    var lane = 1 << index;
    entanglements[index] |= entangledLanes;
    lanes &= ~lane;
  }
}
var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback; // Count leading zeros. Only used on lanes, so assume input is an integer.
// Based on:
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32

var log = Math.log;
var LN2 = Math.LN2;

function clz32Fallback(lanes) {
  if (lanes === 0) {
    return 32;
  }

  return 31 - (log(lanes) / LN2 | 0) | 0;
}

// Intentionally not named imports because Rollup would use dynamic dispatch for
var UserBlockingPriority$1 = Scheduler.unstable_UserBlockingPriority,
    runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

var _enabled = true; // This is exported in FB builds for use by legacy FB layer infra.
// We'd like to remove this but it's not clear if this is safe.

function setEnabled(enabled) {
  _enabled = !!enabled;
}
function isEnabled() {
  return _enabled;
}
function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
  var eventPriority = getEventPriorityForPluginSystem(domEventName);
  var listenerWrapper;

  switch (eventPriority) {
    case DiscreteEvent:
      listenerWrapper = dispatchDiscreteEvent;
      break;

    case UserBlockingEvent:
      listenerWrapper = dispatchUserBlockingUpdate;
      break;

    case ContinuousEvent:
    default:
      listenerWrapper = dispatchEvent;
      break;
  }

  return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
}

function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
  {
    flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
  }

  discreteUpdates(dispatchEvent, domEventName, eventSystemFlags, container, nativeEvent);
}

function dispatchUserBlockingUpdate(domEventName, eventSystemFlags, container, nativeEvent) {
  {
    runWithPriority(UserBlockingPriority$1, dispatchEvent.bind(null, domEventName, eventSystemFlags, container, nativeEvent));
  }
}

function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  if (!_enabled) {
    return;
  }

  var allowReplay = true;

  {
    // TODO: replaying capture phase events is currently broken
    // because we used to do it during top-level native bubble handlers
    // but now we use different bubble and capture handlers.
    // In eager mode, we attach capture listeners early, so we need
    // to filter them out until we fix the logic to handle them correctly.
    // This could've been outside the flag but I put it inside to reduce risk.
    allowReplay = (eventSystemFlags & IS_CAPTURE_PHASE) === 0;
  }

  if (allowReplay && hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(domEventName)) {
    // If we already have a queue of discrete events, and this is another discrete
    // event, then we can't dispatch it regardless of its target, since they
    // need to dispatch in order.
    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
    domEventName, eventSystemFlags, targetContainer, nativeEvent);
    return;
  }

  var blockedOn = attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);

  if (blockedOn === null) {
    // We successfully dispatched this event.
    if (allowReplay) {
      clearIfContinuousEvent(domEventName, nativeEvent);
    }

    return;
  }

  if (allowReplay) {
    if (isReplayableDiscreteEvent(domEventName)) {
      // This this to be replayed later once the target is available.
      queueDiscreteEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
      return;
    }

    if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
      return;
    } // We need to clear only if we didn't queue because
    // queueing is accummulative.


    clearIfContinuousEvent(domEventName, nativeEvent);
  } // This is not replayable so we'll invoke it but without a target,
  // in case the event system needs to trace it.


  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

function attemptToDispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
  // TODO: Warn if _enabled is false.
  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted === null) {
      // This tree has been unmounted already. Dispatch without a target.
      targetInst = null;
    } else {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // Queue the event to be replayed later. Abort dispatching since we
          // don't want this event dispatched twice through the event system.
          // TODO: If this is the first discrete event in the queue. Schedule an increased
          // priority for this boundary.
          return instance;
        } // This shouldn't happen, something went wrong but to avoid blocking
        // the whole system, dispatch the event without a target.
        // TODO: Warn.


        targetInst = null;
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          // If this happens during a replay something went wrong and it might block
          // the whole system.
          return getContainerFromFiber(nearestMounted);
        }

        targetInst = null;
      } else if (nearestMounted !== targetInst) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }
    }
  }

  dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer); // We're not blocked on anything.

  return null;
}

function addEventBubbleListener(target, eventType, listener) {
  target.addEventListener(eventType, listener, false);
  return listener;
}
function addEventCaptureListener(target, eventType, listener) {
  target.addEventListener(eventType, listener, true);
  return listener;
}
function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
  target.addEventListener(eventType, listener, {
    capture: true,
    passive: passive
  });
  return listener;
}
function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
  target.addEventListener(eventType, listener, {
    passive: passive
  });
  return listener;
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var root = null;
var startText = null;
var fallbackText = null;
function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}
function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}
function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start;
  var startValue = startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;

  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}
function getText() {
  if ('value' in root) {
    return root.value;
  }

  return root.textContent;
}

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.


  if (charCode === 10) {
    charCode = 13;
  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.


  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
} // This is intentionally a factory so that we have different returned constructors.
// If we had a single constructor, it would be megamorphic and engines would deopt.


function createSyntheticEvent(Interface) {
  /**
   * Synthetic events are dispatched by event plugins, typically in response to a
   * top-level event delegation handler.
   *
   * These systems should generally use pooling to reduce the frequency of garbage
   * collection. The system should check `isPersistent` to determine whether the
   * event should be released into the pool after being dispatched. Users that
   * need a persisted event should invoke `persist`.
   *
   * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
   * normalizing browser quirks. Subclasses do not necessarily have to implement a
   * DOM interface; custom application-specific events can also subclass this.
   */
  function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
    this._reactName = reactName;
    this._targetInst = targetInst;
    this.type = reactEventType;
    this.nativeEvent = nativeEvent;
    this.target = nativeEventTarget;
    this.currentTarget = null;

    for (var _propName in Interface) {
      if (!Interface.hasOwnProperty(_propName)) {
        continue;
      }

      var normalize = Interface[_propName];

      if (normalize) {
        this[_propName] = normalize(nativeEvent);
      } else {
        this[_propName] = nativeEvent[_propName];
      }
    }

    var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

    if (defaultPrevented) {
      this.isDefaultPrevented = functionThatReturnsTrue;
    } else {
      this.isDefaultPrevented = functionThatReturnsFalse;
    }

    this.isPropagationStopped = functionThatReturnsFalse;
    return this;
  }

  _assign(SyntheticBaseEvent.prototype, {
    preventDefault: function () {
      this.defaultPrevented = true;
      var event = this.nativeEvent;

      if (!event) {
        return;
      }

      if (event.preventDefault) {
        event.preventDefault(); // $FlowFixMe - flow is not aware of `unknown` in IE
      } else if (typeof event.returnValue !== 'unknown') {
        event.returnValue = false;
      }

      this.isDefaultPrevented = functionThatReturnsTrue;
    },
    stopPropagation: function () {
      var event = this.nativeEvent;

      if (!event) {
        return;
      }

      if (event.stopPropagation) {
        event.stopPropagation(); // $FlowFixMe - flow is not aware of `unknown` in IE
      } else if (typeof event.cancelBubble !== 'unknown') {
        // The ChangeEventPlugin registers a "propertychange" event for
        // IE. This event does not support bubbling or cancelling, and
        // any references to cancelBubble throw "Member not found".  A
        // typeof check of "unknown" circumvents this issue (and is also
        // IE specific).
        event.cancelBubble = true;
      }

      this.isPropagationStopped = functionThatReturnsTrue;
    },

    /**
     * We release all dispatched `SyntheticEvent`s after each event loop, adding
     * them back into the pool. This allows a way to hold onto a reference that
     * won't be added back into the pool.
     */
    persist: function () {// Modern event system doesn't use pooling.
    },

    /**
     * Checks if this event should be released back into the pool.
     *
     * @return {boolean} True if this should not be released, false otherwise.
     */
    isPersistent: functionThatReturnsTrue
  });

  return SyntheticBaseEvent;
}
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var EventInterface = {
  eventPhase: 0,
  bubbles: 0,
  cancelable: 0,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: 0,
  isTrusted: 0
};
var SyntheticEvent = createSyntheticEvent(EventInterface);

var UIEventInterface = _assign({}, EventInterface, {
  view: 0,
  detail: 0
});

var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
var lastMovementX;
var lastMovementY;
var lastMouseEvent;

function updateMouseMovementPolyfillState(event) {
  if (event !== lastMouseEvent) {
    if (lastMouseEvent && event.type === 'mousemove') {
      lastMovementX = event.screenX - lastMouseEvent.screenX;
      lastMovementY = event.screenY - lastMouseEvent.screenY;
    } else {
      lastMovementX = 0;
      lastMovementY = 0;
    }

    lastMouseEvent = event;
  }
}
/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var MouseEventInterface = _assign({}, UIEventInterface, {
  screenX: 0,
  screenY: 0,
  clientX: 0,
  clientY: 0,
  pageX: 0,
  pageY: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  getModifierState: getEventModifierState,
  button: 0,
  buttons: 0,
  relatedTarget: function (event) {
    if (event.relatedTarget === undefined) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
    return event.relatedTarget;
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    updateMouseMovementPolyfillState(event);
    return lastMovementX;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    } // Don't need to call updateMouseMovementPolyfillState() here
    // because it's guaranteed to have already run when movementX
    // was copied.


    return lastMovementY;
  }
});

var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var DragEventInterface = _assign({}, MouseEventInterface, {
  dataTransfer: 0
});

var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var FocusEventInterface = _assign({}, UIEventInterface, {
  relatedTarget: 0
});

var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */

var AnimationEventInterface = _assign({}, EventInterface, {
  animationName: 0,
  elapsedTime: 0,
  pseudoElement: 0
});

var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */

var ClipboardEventInterface = _assign({}, EventInterface, {
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */

var CompositionEventInterface = _assign({}, EventInterface, {
  data: 0
});

var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */
// Happens to share the same list for now.

var SyntheticInputEvent = SyntheticCompositionEvent;
/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};
/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};
/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.
    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

    if (key !== 'Unidentified') {
      return key;
    }
  } // Browser does not implement `key`, polyfill as much of it as we can.


  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.

    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }

  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }

  return '';
}
/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */


var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.

function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;

  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }

  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}
/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */


var KeyboardEventInterface = _assign({}, UIEventInterface, {
  key: getEventKey,
  code: 0,
  location: 0,
  ctrlKey: 0,
  shiftKey: 0,
  altKey: 0,
  metaKey: 0,
  repeat: 0,
  locale: 0,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.
    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.
    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  }
});

var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */

var PointerEventInterface = _assign({}, MouseEventInterface, {
  pointerId: 0,
  width: 0,
  height: 0,
  pressure: 0,
  tangentialPressure: 0,
  tiltX: 0,
  tiltY: 0,
  twist: 0,
  pointerType: 0,
  isPrimary: 0
});

var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */

var TouchEventInterface = _assign({}, UIEventInterface, {
  touches: 0,
  targetTouches: 0,
  changedTouches: 0,
  altKey: 0,
  metaKey: 0,
  ctrlKey: 0,
  shiftKey: 0,
  getModifierState: getEventModifierState
});

var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */

var TransitionEventInterface = _assign({}, EventInterface, {
  propertyName: 0,
  elapsedTime: 0,
  pseudoElement: 0
});

var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var WheelEventInterface = _assign({}, MouseEventInterface, {
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: 0,
  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: 0
});

var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

var START_KEYCODE = 229;
var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
var documentMode = null;

if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
} // Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.


var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.

var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);

function registerEvents() {
  registerTwoPhaseEvent('onBeforeInput', ['compositionend', 'keypress', 'textInput', 'paste']);
  registerTwoPhaseEvent('onCompositionEnd', ['compositionend', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
  registerTwoPhaseEvent('onCompositionStart', ['compositionstart', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
  registerTwoPhaseEvent('onCompositionUpdate', ['compositionupdate', 'focusout', 'keydown', 'keypress', 'keyup', 'mousedown']);
} // Track whether we've ever handled a keypress on the space key.


var hasSpaceKeypress = false;
/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}
/**
 * Translate native top level events into event types.
 */


function getCompositionEventType(domEventName) {
  switch (domEventName) {
    case 'compositionstart':
      return 'onCompositionStart';

    case 'compositionend':
      return 'onCompositionEnd';

    case 'compositionupdate':
      return 'onCompositionUpdate';
  }
}
/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 */


function isFallbackCompositionStart(domEventName, nativeEvent) {
  return domEventName === 'keydown' && nativeEvent.keyCode === START_KEYCODE;
}
/**
 * Does our fallback mode think that this event is the end of composition?
 */


function isFallbackCompositionEnd(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'keyup':
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

    case 'keydown':
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;

    case 'keypress':
    case 'mousedown':
    case 'focusout':
      // Events are not possible without cancelling IME.
      return true;

    default:
      return false;
  }
}
/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */


function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;

  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }

  return null;
}
/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
} // Track the current IME composition status, if any.


var isComposing = false;
/**
 * @return {?object} A SyntheticCompositionEvent.
 */

function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(domEventName);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(domEventName, nativeEvent)) {
      eventType = 'onCompositionStart';
    }
  } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
    eventType = 'onCompositionEnd';
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === 'onCompositionStart') {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === 'onCompositionEnd') {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var listeners = accumulateTwoPhaseListeners(targetInst, eventType);

  if (listeners.length > 0) {
    var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });

    if (fallbackData) {
      // Inject data generated from fallback path into the synthetic event.
      // This matches the property of native CompositionEventInterface.
      event.data = fallbackData;
    } else {
      var customData = getDataFromCustomEvent(nativeEvent);

      if (customData !== null) {
        event.data = customData;
      }
    }
  }
}

function getNativeBeforeInputChars(domEventName, nativeEvent) {
  switch (domEventName) {
    case 'compositionend':
      return getDataFromCustomEvent(nativeEvent);

    case 'keypress':
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;

      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case 'textInput':
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.

      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}
/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 */


function getFallbackBeforeInputChars(domEventName, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (domEventName === 'compositionend' || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }

    return null;
  }

  switch (domEventName) {
    case 'paste':
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;

    case 'keypress':
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }

      return null;

    case 'compositionend':
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

    default:
      return null;
  }
}
/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */


function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(domEventName, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
  } // If no characters are being inserted, no BeforeInput event should
  // be fired.


  if (!chars) {
    return null;
  }

  var listeners = accumulateTwoPhaseListeners(targetInst, 'onBeforeInput');

  if (listeners.length > 0) {
    var event = new SyntheticInputEvent('onBeforeInput', 'beforeinput', null, nativeEvent, nativeEventTarget);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
    event.data = chars;
  }
}
/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */


function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
  extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
}

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = (eventName in document);

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

function registerEvents$1() {
  registerTwoPhaseEvent('onChange', ['change', 'click', 'focusin', 'focusout', 'input', 'keydown', 'keyup', 'selectionchange']);
}

function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
  // Flag this event loop as needing state restore.
  enqueueStateRestore(target);
  var listeners = accumulateTwoPhaseListeners(inst, 'onChange');

  if (listeners.length > 0) {
    var event = new SyntheticEvent('onChange', 'change', null, nativeEvent, target);
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
  }
}
/**
 * For IE shims
 */


var activeElement = null;
var activeElementInst = null;
/**
 * SECTION: handle `change` event
 */

function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var dispatchQueue = [];
  createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.

  batchedUpdates(runEventInBatch, dispatchQueue);
}

function runEventInBatch(dispatchQueue) {
  processDispatchQueue(dispatchQueue, 0);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance(targetInst);

  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(domEventName, targetInst) {
  if (domEventName === 'change') {
    return targetInst;
  }
}
/**
 * SECTION: handle `input` event
 */


var isInputEventSupported = false;

if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}
/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */


function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}
/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */


function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}
/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */


function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }

  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
  if (domEventName === 'focusin') {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (domEventName === 'focusout') {
    stopWatchingForValueChange();
  }
} // For IE8 and IE9.


function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
  if (domEventName === 'selectionchange' || domEventName === 'keyup' || domEventName === 'keydown') {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}
/**
 * SECTION: handle `click` event
 */


function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(domEventName, targetInst) {
  if (domEventName === 'click') {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
  if (domEventName === 'input' || domEventName === 'change') {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}
/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */


function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
  var getTargetInstFunc, handleEventFunc;

  if (shouldUseChangeEvent(targetNode)) {
    getTargetInstFunc = getTargetInstForChangeEvent;
  } else if (isTextInputElement(targetNode)) {
    if (isInputEventSupported) {
      getTargetInstFunc = getTargetInstForInputOrChangeEvent;
    } else {
      getTargetInstFunc = getTargetInstForInputEventPolyfill;
      handleEventFunc = handleEventsForInputEventPolyfill;
    }
  } else if (shouldUseClickEvent(targetNode)) {
    getTargetInstFunc = getTargetInstForClickEvent;
  }

  if (getTargetInstFunc) {
    var inst = getTargetInstFunc(domEventName, targetInst);

    if (inst) {
      createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
      return;
    }
  }

  if (handleEventFunc) {
    handleEventFunc(domEventName, targetNode, targetInst);
  } // When blurring, set the value attribute for number inputs


  if (domEventName === 'focusout') {
    handleControlledInputBlur(targetNode);
  }
}

function registerEvents$2() {
  registerDirectEvent('onMouseEnter', ['mouseout', 'mouseover']);
  registerDirectEvent('onMouseLeave', ['mouseout', 'mouseover']);
  registerDirectEvent('onPointerEnter', ['pointerout', 'pointerover']);
  registerDirectEvent('onPointerLeave', ['pointerout', 'pointerover']);
}
/**
 * For almost every interaction we care about, there will be both a top-level
 * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
 * we do not extract duplicate events. However, moving the mouse into the
 * browser from outside will not fire a `mouseout` event. In this case, we use
 * the `mouseover` top-level event.
 */


function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var isOverEvent = domEventName === 'mouseover' || domEventName === 'pointerover';
  var isOutEvent = domEventName === 'mouseout' || domEventName === 'pointerout';

  if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0) {
    // If this is an over event with a target, we might have already dispatched
    // the event in the out event of the other target. If this is replayed,
    // then it's because we couldn't dispatch against this target previously
    // so we have to do it now instead.
    var related = nativeEvent.relatedTarget || nativeEvent.fromElement;

    if (related) {
      // If the related node is managed by React, we can assume that we have
      // already dispatched the corresponding events during its mouseout.
      if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
        return;
      }
    }
  }

  if (!isOutEvent && !isOverEvent) {
    // Must not be a mouse or pointer in or out - ignoring.
    return;
  }

  var win; // TODO: why is this nullable in the types but we read from it?

  if (nativeEventTarget.window === nativeEventTarget) {
    // `nativeEventTarget` is probably a window object.
    win = nativeEventTarget;
  } else {
    // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
    var doc = nativeEventTarget.ownerDocument;

    if (doc) {
      win = doc.defaultView || doc.parentWindow;
    } else {
      win = window;
    }
  }

  var from;
  var to;

  if (isOutEvent) {
    var _related = nativeEvent.relatedTarget || nativeEvent.toElement;

    from = targetInst;
    to = _related ? getClosestInstanceFromNode(_related) : null;

    if (to !== null) {
      var nearestMounted = getNearestMountedFiber(to);

      if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
        to = null;
      }
    }
  } else {
    // Moving to a node from outside the window.
    from = null;
    to = targetInst;
  }

  if (from === to) {
    // Nothing pertains to our managed components.
    return;
  }

  var SyntheticEventCtor = SyntheticMouseEvent;
  var leaveEventType = 'onMouseLeave';
  var enterEventType = 'onMouseEnter';
  var eventTypePrefix = 'mouse';

  if (domEventName === 'pointerout' || domEventName === 'pointerover') {
    SyntheticEventCtor = SyntheticPointerEvent;
    leaveEventType = 'onPointerLeave';
    enterEventType = 'onPointerEnter';
    eventTypePrefix = 'pointer';
  }

  var fromNode = from == null ? win : getNodeFromInstance(from);
  var toNode = to == null ? win : getNodeFromInstance(to);
  var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + 'leave', from, nativeEvent, nativeEventTarget);
  leave.target = fromNode;
  leave.relatedTarget = toNode;
  var enter = null; // We should only process this nativeEvent if we are processing
  // the first ancestor. Next time, we will ignore the event.

  var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (nativeTargetInst === targetInst) {
    var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + 'enter', to, nativeEvent, nativeEventTarget);
    enterEvent.target = toNode;
    enterEvent.relatedTarget = fromNode;
    enter = enterEvent;
  }

  accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to);
}

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var objectIs = typeof Object.is === 'function' ? Object.is : is;

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (objectIs(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }

  return node;
}
/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */


function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }

    node = node.parentNode;
  }
}
/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */


function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;
  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}
/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }

      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      } // Moving from `node` to its first child `next`.


      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }

      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }

      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }

      if ((next = node.nextSibling) !== null) {
        break;
      }

      node = parentNode;
      parentNode = node.parentNode;
    } // Moving from `node` to its next sibling `next`.


    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}
/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
  // fails when pasting 100+ items)

  if (!win.getSelection) {
    return;
  }

  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.

  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }

    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function isSameOriginFrame(iframe) {
  try {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute.
    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
    // iframe.contentDocument.defaultView;
    // A safety way is to access one of the cross origin properties: Window or Location
    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
    return typeof iframe.contentWindow.location.href === 'string';
  } catch (err) {
    return false;
  }
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();

  while (element instanceof win.HTMLIFrameElement) {
    if (isSameOriginFrame(element)) {
      win = element.contentWindow;
    } else {
      return element;
    }

    element = getActiveElement(win.document);
  }

  return element;
}
/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */


function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}
function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
  };
}
/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;

  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    } // Focusing a node can change the scroll position, which is undesirable


    var ancestors = [];
    var ancestor = priorFocusedElem;

    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}
/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

function getSelection(input) {
  var selection;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || {
    start: 0,
    end: 0
  };
}
/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

function setSelection(input, offsets) {
  var start = offsets.start;
  var end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;

function registerEvents$3() {
  registerTwoPhaseEvent('onSelect', ['focusout', 'contextmenu', 'dragend', 'focusin', 'keydown', 'keyup', 'mousedown', 'mouseup', 'selectionchange']);
}

var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;
/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 */

function getSelection$1(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}
/**
 * Get document associated with the event target.
 */


function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}
/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */


function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return;
  } // Only fire when selection has actually changed.


  var currentSelection = getSelection$1(activeElement$1);

  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;
    var listeners = accumulateTwoPhaseListeners(activeElementInst$1, 'onSelect');

    if (listeners.length > 0) {
      var event = new SyntheticEvent('onSelect', 'select', null, nativeEvent, nativeEventTarget);
      dispatchQueue.push({
        event: event,
        listeners: listeners
      });
      event.target = activeElement$1;
    }
  }
}
/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */


function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {

  var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;

  switch (domEventName) {
    // Track the input node that has focus.
    case 'focusin':
      if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
        activeElement$1 = targetNode;
        activeElementInst$1 = targetInst;
        lastSelection = null;
      }

      break;

    case 'focusout':
      activeElement$1 = null;
      activeElementInst$1 = null;
      lastSelection = null;
      break;
    // Don't fire the event while the user is dragging. This matches the
    // semantics of the native select event.

    case 'mousedown':
      mouseDown = true;
      break;

    case 'contextmenu':
    case 'mouseup':
    case 'dragend':
      mouseDown = false;
      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
      break;
    // Chrome and IE fire non-standard event when selection is changed (and
    // sometimes when it hasn't). IE's event fires out of order with respect
    // to key and input events on deletion, so we discard it.
    //
    // Firefox doesn't support selectionchange, so check selection status
    // after each key entry. The selection changes after keydown and before
    // keyup, but we check on keydown as well in the case of holding down a
    // key, when multiple keydown events are fired but only one keyup is.
    // This is also our approach for IE handling, for the reason above.

    case 'selectionchange':
      if (skipSelectionChangeEvent) {
        break;
      }

    // falls through

    case 'keydown':
    case 'keyup':
      constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
  }
}

function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  var reactName = topLevelEventsToReactNames.get(domEventName);

  if (reactName === undefined) {
    return;
  }

  var SyntheticEventCtor = SyntheticEvent;
  var reactEventType = domEventName;

  switch (domEventName) {
    case 'keypress':
      // Firefox creates a keypress event for function keys too. This removes
      // the unwanted keypress events. Enter is however both printable and
      // non-printable. One would expect Tab to be as well (but it isn't).
      if (getEventCharCode(nativeEvent) === 0) {
        return;
      }

    /* falls through */

    case 'keydown':
    case 'keyup':
      SyntheticEventCtor = SyntheticKeyboardEvent;
      break;

    case 'focusin':
      reactEventType = 'focus';
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'focusout':
      reactEventType = 'blur';
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'beforeblur':
    case 'afterblur':
      SyntheticEventCtor = SyntheticFocusEvent;
      break;

    case 'click':
      // Firefox creates a click event on right mouse clicks. This removes the
      // unwanted click events.
      if (nativeEvent.button === 2) {
        return;
      }

    /* falls through */

    case 'auxclick':
    case 'dblclick':
    case 'mousedown':
    case 'mousemove':
    case 'mouseup': // TODO: Disabled elements should not respond to mouse events

    /* falls through */

    case 'mouseout':
    case 'mouseover':
    case 'contextmenu':
      SyntheticEventCtor = SyntheticMouseEvent;
      break;

    case 'drag':
    case 'dragend':
    case 'dragenter':
    case 'dragexit':
    case 'dragleave':
    case 'dragover':
    case 'dragstart':
    case 'drop':
      SyntheticEventCtor = SyntheticDragEvent;
      break;

    case 'touchcancel':
    case 'touchend':
    case 'touchmove':
    case 'touchstart':
      SyntheticEventCtor = SyntheticTouchEvent;
      break;

    case ANIMATION_END:
    case ANIMATION_ITERATION:
    case ANIMATION_START:
      SyntheticEventCtor = SyntheticAnimationEvent;
      break;

    case TRANSITION_END:
      SyntheticEventCtor = SyntheticTransitionEvent;
      break;

    case 'scroll':
      SyntheticEventCtor = SyntheticUIEvent;
      break;

    case 'wheel':
      SyntheticEventCtor = SyntheticWheelEvent;
      break;

    case 'copy':
    case 'cut':
    case 'paste':
      SyntheticEventCtor = SyntheticClipboardEvent;
      break;

    case 'gotpointercapture':
    case 'lostpointercapture':
    case 'pointercancel':
    case 'pointerdown':
    case 'pointermove':
    case 'pointerout':
    case 'pointerover':
    case 'pointerup':
      SyntheticEventCtor = SyntheticPointerEvent;
      break;
  }

  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

  {
    // Some events don't bubble in the browser.
    // In the past, React has always bubbled them, but this can be surprising.
    // We're going to try aligning closer to the browser behavior by not bubbling
    // them in React either. We'll start by not bubbling onScroll, and then expand.
    var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
    // nonDelegatedEvents list in DOMPluginEventSystem.
    // Then we can remove this special list.
    // This is a breaking change that can wait until React 18.
    domEventName === 'scroll';

    var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);

    if (_listeners.length > 0) {
      // Intentionally create event lazily.
      var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);

      dispatchQueue.push({
        event: _event,
        listeners: _listeners
      });
    }
  }
}

// TODO: remove top-level side effect.
registerSimpleEvents();
registerEvents$2();
registerEvents$1();
registerEvents$3();
registerEvents();

function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
  // TODO: we should remove the concept of a "SimpleEventPlugin".
  // This is the basic functionality of the event system. All
  // the other plugins are essentially polyfills. So the plugin
  // should probably be inlined somewhere and have its logic
  // be core the to event system. This would potentially allow
  // us to ship builds of React without the polyfilled plugins below.
  extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0; // We don't process these events unless we are in the
  // event's native "bubble" phase, which means that we're
  // not in the capture phase. That's because we emulate
  // the capture phase here still. This is a trade-off,
  // because in an ideal world we would not emulate and use
  // the phases properly, like we do with the SimpleEvent
  // plugin. However, the plugins below either expect
  // emulation (EnterLeave) or use state localized to that
  // plugin (BeforeInput, Change, Select). The state in
  // these modules complicates things, as you'll essentially
  // get the case where the capture phase event might change
  // state, only for the following bubble event to come in
  // later and not trigger anything as the state now
  // invalidates the heuristics of the event plugin. We
  // could alter all these plugins to work in such ways, but
  // that might cause other unknown side-effects that we
  // can't forsee right now.

  if (shouldProcessPolyfillPlugins) {
    extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
    extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
    extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
  }
} // List of events that need to be individually attached to media elements.


var mediaEventTypes = ['abort', 'canplay', 'canplaythrough', 'durationchange', 'emptied', 'encrypted', 'ended', 'error', 'loadeddata', 'loadedmetadata', 'loadstart', 'pause', 'play', 'playing', 'progress', 'ratechange', 'seeked', 'seeking', 'stalled', 'suspend', 'timeupdate', 'volumechange', 'waiting']; // We should not delegate these events to the container, but rather
// set them on the actual target element itself. This is primarily
// because these events do not consistently bubble in the DOM.

var nonDelegatedEvents = new Set(['cancel', 'close', 'invalid', 'load', 'scroll', 'toggle'].concat(mediaEventTypes));

function executeDispatch(event, listener, currentTarget) {
  var type = event.type || 'unknown-event';
  event.currentTarget = currentTarget;
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}

function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
  var previousInstance;

  if (inCapturePhase) {
    for (var i = dispatchListeners.length - 1; i >= 0; i--) {
      var _dispatchListeners$i = dispatchListeners[i],
          instance = _dispatchListeners$i.instance,
          currentTarget = _dispatchListeners$i.currentTarget,
          listener = _dispatchListeners$i.listener;

      if (instance !== previousInstance && event.isPropagationStopped()) {
        return;
      }

      executeDispatch(event, listener, currentTarget);
      previousInstance = instance;
    }
  } else {
    for (var _i = 0; _i < dispatchListeners.length; _i++) {
      var _dispatchListeners$_i = dispatchListeners[_i],
          _instance = _dispatchListeners$_i.instance,
          _currentTarget = _dispatchListeners$_i.currentTarget,
          _listener = _dispatchListeners$_i.listener;

      if (_instance !== previousInstance && event.isPropagationStopped()) {
        return;
      }

      executeDispatch(event, _listener, _currentTarget);
      previousInstance = _instance;
    }
  }
}

function processDispatchQueue(dispatchQueue, eventSystemFlags) {
  var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;

  for (var i = 0; i < dispatchQueue.length; i++) {
    var _dispatchQueue$i = dispatchQueue[i],
        event = _dispatchQueue$i.event,
        listeners = _dispatchQueue$i.listeners;
    processDispatchQueueItemsInOrder(event, listeners, inCapturePhase); //  event system doesn't use pooling.
  } // This would be a good time to rethrow if any of the event handlers threw.


  rethrowCaughtError();
}

function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
  var nativeEventTarget = getEventTarget(nativeEvent);
  var dispatchQueue = [];
  extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  processDispatchQueue(dispatchQueue, eventSystemFlags);
}

function listenToNonDelegatedEvent(domEventName, targetElement) {
  var isCapturePhaseListener = false;
  var listenerSet = getEventListenerSet(targetElement);
  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);

  if (!listenerSet.has(listenerSetKey)) {
    addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
    listenerSet.add(listenerSetKey);
  }
}
var listeningMarker = '_reactListening' + Math.random().toString(36).slice(2);
function listenToAllSupportedEvents(rootContainerElement) {
  {
    if (rootContainerElement[listeningMarker]) {
      // Performance optimization: don't iterate through events
      // for the same portal container or root node more than once.
      // TODO: once we remove the flag, we may be able to also
      // remove some of the bookkeeping maps used for laziness.
      return;
    }

    rootContainerElement[listeningMarker] = true;
    allNativeEvents.forEach(function (domEventName) {
      if (!nonDelegatedEvents.has(domEventName)) {
        listenToNativeEvent(domEventName, false, rootContainerElement, null);
      }

      listenToNativeEvent(domEventName, true, rootContainerElement, null);
    });
  }
}
function listenToNativeEvent(domEventName, isCapturePhaseListener, rootContainerElement, targetElement) {
  var eventSystemFlags = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
  var target = rootContainerElement; // selectionchange needs to be attached to the document
  // otherwise it won't capture incoming events that are only
  // triggered on the document directly.

  if (domEventName === 'selectionchange' && rootContainerElement.nodeType !== DOCUMENT_NODE) {
    target = rootContainerElement.ownerDocument;
  } // If the event can be delegated (or is capture phase), we can
  // register it to the root container. Otherwise, we should
  // register the event to the target element and mark it as
  // a non-delegated event.


  if (targetElement !== null && !isCapturePhaseListener && nonDelegatedEvents.has(domEventName)) {
    // For all non-delegated events, apart from scroll, we attach
    // their event listeners to the respective elements that their
    // events fire on. That means we can skip this step, as event
    // listener has already been added previously. However, we
    // special case the scroll event because the reality is that any
    // element can scroll.
    // TODO: ideally, we'd eventually apply the same logic to all
    // events from the nonDelegatedEvents list. Then we can remove
    // this special case and use the same logic for all events.
    if (domEventName !== 'scroll') {
      return;
    }

    eventSystemFlags |= IS_NON_DELEGATED;
    target = targetElement;
  }

  var listenerSet = getEventListenerSet(target);
  var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener); // If the listener entry is empty or we should upgrade, then
  // we need to trap an event listener onto the target.

  if (!listenerSet.has(listenerSetKey)) {
    if (isCapturePhaseListener) {
      eventSystemFlags |= IS_CAPTURE_PHASE;
    }

    addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
    listenerSet.add(listenerSetKey);
  }
}

function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
  var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags); // If passive option is not supported, then the event will be
  // active and not passive.

  var isPassiveListener = undefined;

  if (passiveBrowserEventsSupported) {
    // Browsers introduced an intervention, making these events
    // passive by default on document. React doesn't bind them
    // to document anymore, but changing this now would undo
    // the performance wins from the change. So we emulate
    // the existing behavior manually on the roots now.
    // https://github.com/facebook/react/issues/19651
    if (domEventName === 'touchstart' || domEventName === 'touchmove' || domEventName === 'wheel') {
      isPassiveListener = true;
    }
  }

  targetContainer =  targetContainer;
  var unsubscribeListener; // When legacyFBSupport is enabled, it's for when we


  if (isCapturePhaseListener) {
    if (isPassiveListener !== undefined) {
      unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
    } else {
      unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
    }
  } else {
    if (isPassiveListener !== undefined) {
      unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
    } else {
      unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
    }
  }
}

function isMatchingRootContainer(grandContainer, targetContainer) {
  return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
}

function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
  var ancestorInst = targetInst;

  if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
    var targetContainerNode = targetContainer; // If we are using the legacy FB support flag, we

    if (targetInst !== null) {
      // The below logic attempts to work out if we need to change
      // the target fiber to a different ancestor. We had similar logic
      // in the legacy event system, except the big difference between
      // systems is that the modern event system now has an event listener
      // attached to each React Root and React Portal Root. Together,
      // the DOM nodes representing these roots are the "rootContainer".
      // To figure out which ancestor instance we should use, we traverse
      // up the fiber tree from the target instance and attempt to find
      // root boundaries that match that of our current "rootContainer".
      // If we find that "rootContainer", we find the parent fiber
      // sub-tree for that root and make that our ancestor instance.
      var node = targetInst;

      mainLoop: while (true) {
        if (node === null) {
          return;
        }

        var nodeTag = node.tag;

        if (nodeTag === HostRoot || nodeTag === HostPortal) {
          var container = node.stateNode.containerInfo;

          if (isMatchingRootContainer(container, targetContainerNode)) {
            break;
          }

          if (nodeTag === HostPortal) {
            // The target is a portal, but it's not the rootContainer we're looking for.
            // Normally portals handle their own events all the way down to the root.
            // So we should be able to stop now. However, we don't know if this portal
            // was part of *our* root.
            var grandNode = node.return;

            while (grandNode !== null) {
              var grandTag = grandNode.tag;

              if (grandTag === HostRoot || grandTag === HostPortal) {
                var grandContainer = grandNode.stateNode.containerInfo;

                if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                  // This is the rootContainer we're looking for and we found it as
                  // a parent of the Portal. That means we can ignore it because the
                  // Portal will bubble through to us.
                  return;
                }
              }

              grandNode = grandNode.return;
            }
          } // Now we need to find it's corresponding host fiber in the other
          // tree. To do this we can use getClosestInstanceFromNode, but we
          // need to validate that the fiber is a host instance, otherwise
          // we need to traverse up through the DOM till we find the correct
          // node that is from the other tree.


          while (container !== null) {
            var parentNode = getClosestInstanceFromNode(container);

            if (parentNode === null) {
              return;
            }

            var parentTag = parentNode.tag;

            if (parentTag === HostComponent || parentTag === HostText) {
              node = ancestorInst = parentNode;
              continue mainLoop;
            }

            container = container.parentNode;
          }
        }

        node = node.return;
      }
    }
  }

  batchedEventUpdates(function () {
    return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
  });
}

function createDispatchListener(instance, listener, currentTarget) {
  return {
    instance: instance,
    listener: listener,
    currentTarget: currentTarget
  };
}

function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly) {
  var captureName = reactName !== null ? reactName + 'Capture' : null;
  var reactEventName = inCapturePhase ? captureName : reactName;
  var listeners = [];
  var instance = targetFiber;
  var lastHostComponent = null; // Accumulate all instances and listeners via the target -> root path.

  while (instance !== null) {
    var _instance2 = instance,
        stateNode = _instance2.stateNode,
        tag = _instance2.tag; // Handle listeners that are on HostComponents (i.e. <div>)

    if (tag === HostComponent && stateNode !== null) {
      lastHostComponent = stateNode; // createEventHandle listeners


      if (reactEventName !== null) {
        var listener = getListener(instance, reactEventName);

        if (listener != null) {
          listeners.push(createDispatchListener(instance, listener, lastHostComponent));
        }
      }
    } // If we are only accumulating events for the target, then we don't
    // continue to propagate through the React fiber tree to find other
    // listeners.


    if (accumulateTargetOnly) {
      break;
    }

    instance = instance.return;
  }

  return listeners;
} // We should only use this function for:
// - BeforeInputEventPlugin
// - ChangeEventPlugin
// - SelectEventPlugin
// This is because we only process these plugins
// in the bubble phase, so we need to accumulate two
// phase event listeners (via emulation).

function accumulateTwoPhaseListeners(targetFiber, reactName) {
  var captureName = reactName + 'Capture';
  var listeners = [];
  var instance = targetFiber; // Accumulate all instances and listeners via the target -> root path.

  while (instance !== null) {
    var _instance3 = instance,
        stateNode = _instance3.stateNode,
        tag = _instance3.tag; // Handle listeners that are on HostComponents (i.e. <div>)

    if (tag === HostComponent && stateNode !== null) {
      var currentTarget = stateNode;
      var captureListener = getListener(instance, captureName);

      if (captureListener != null) {
        listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
      }

      var bubbleListener = getListener(instance, reactName);

      if (bubbleListener != null) {
        listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
      }
    }

    instance = instance.return;
  }

  return listeners;
}

function getParent(inst) {
  if (inst === null) {
    return null;
  }

  do {
    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);

  if (inst) {
    return inst;
  }

  return null;
}
/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */


function getLowestCommonAncestor(instA, instB) {
  var nodeA = instA;
  var nodeB = instB;
  var depthA = 0;

  for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }

  var depthB = 0;

  for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
    depthB++;
  } // If A is deeper, crawl up.


  while (depthA - depthB > 0) {
    nodeA = getParent(nodeA);
    depthA--;
  } // If B is deeper, crawl up.


  while (depthB - depthA > 0) {
    nodeB = getParent(nodeB);
    depthB--;
  } // Walk in lockstep until we find a match.


  var depth = depthA;

  while (depth--) {
    if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
      return nodeA;
    }

    nodeA = getParent(nodeA);
    nodeB = getParent(nodeB);
  }

  return null;
}

function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
  var registrationName = event._reactName;
  var listeners = [];
  var instance = target;

  while (instance !== null) {
    if (instance === common) {
      break;
    }

    var _instance4 = instance,
        alternate = _instance4.alternate,
        stateNode = _instance4.stateNode,
        tag = _instance4.tag;

    if (alternate !== null && alternate === common) {
      break;
    }

    if (tag === HostComponent && stateNode !== null) {
      var currentTarget = stateNode;

      if (inCapturePhase) {
        var captureListener = getListener(instance, registrationName);

        if (captureListener != null) {
          listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
        }
      } else if (!inCapturePhase) {
        var bubbleListener = getListener(instance, registrationName);

        if (bubbleListener != null) {
          listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
        }
      }
    }

    instance = instance.return;
  }

  if (listeners.length !== 0) {
    dispatchQueue.push({
      event: event,
      listeners: listeners
    });
  }
} // We should only use this function for:
// - EnterLeaveEventPlugin
// This is because we only process this plugin
// in the bubble phase, so we need to accumulate two
// phase event listeners.


function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;

  if (from !== null) {
    accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
  }

  if (to !== null && enterEvent !== null) {
    accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to, common, true);
  }
}
function getListenerSetKey(domEventName, capture) {
  return domEventName + "__" + (capture ? 'capture' : 'bubble');
}

var didWarnInvalidHydration = false;
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML$1 = '__html';
var HTML_NAMESPACE$1 = Namespaces.html;
var warnedUnknownTags;
var suppressHydrationWarning;
var validatePropertiesInDevelopment;
var warnForTextDifference;
var warnForPropDifference;
var warnForExtraAttributes;
var warnForInvalidEventListener;
var canDiffStyleForHydrationWarning;
var normalizeMarkupForTextOrAttribute;
var normalizeHTML;

{
  warnedUnknownTags = {
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props, {
      registrationNameDependencies: registrationNameDependencies,
      possibleRegistrationNames: possibleRegistrationNames
    });
  }; // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807


  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.

  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

    if (normalizedServerText === normalizedClientText) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

    if (normalizedServerValue === normalizedClientValue) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });

    error('Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  }; // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.


  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // https://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = nextProps[propKey];

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];

    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.

  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;

  if (namespaceURI === HTML_NAMESPACE$1) {
    namespaceURI = getIntrinsicNamespace(type);
  }

  if (namespaceURI === HTML_NAMESPACE$1) {
    {
      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.

      if (!isCustomComponentTag && type !== type.toLowerCase()) {
        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
      }
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');

      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.

      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, {
        is: props.is
      });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
      // attributes on `select`s needs to be added before `option`s are inserted.
      // This prevents:
      // - a bug where the `select` does not scroll to the correct option because singular
      //  `select` elements automatically pick the first item #13222
      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
      // See https://github.com/facebook/react/issues/13222
      // and https://github.com/facebook/react/issues/14239

      if (type === 'select') {
        var node = domElement;

        if (props.multiple) {
          node.multiple = true;
        } else if (props.size) {
          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
          // it is possible that no option is selected.
          //
          // This is only necessary when a select in "single selection mode".
          node.size = props.size;
        }
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE$1) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;

        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}
function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}
function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);

  {
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  var props;

  switch (tag) {
    case 'dialog':
      listenToNonDelegatedEvent('cancel', domElement);
      listenToNonDelegatedEvent('close', domElement);
      props = rawProps;
      break;

    case 'iframe':
    case 'object':
    case 'embed':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the load event.
      listenToNonDelegatedEvent('load', domElement);
      props = rawProps;
      break;

    case 'video':
    case 'audio':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for all the media events.
      for (var i = 0; i < mediaEventTypes.length; i++) {
        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
      }

      props = rawProps;
      break;

    case 'source':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the error event.
      listenToNonDelegatedEvent('error', domElement);
      props = rawProps;
      break;

    case 'img':
    case 'image':
    case 'link':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for error and load events.
      listenToNonDelegatedEvent('error', domElement);
      listenToNonDelegatedEvent('load', domElement);
      props = rawProps;
      break;

    case 'details':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the toggle event.
      listenToNonDelegatedEvent('toggle', domElement);
      props = rawProps;
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);

      break;

    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);

      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);

      break;

    default:
      props = rawProps;
  }

  assertValidProps(tag, props);
  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;

    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;

    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }
} // Calculate the diff between the two objects.

function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;
  var lastProps;
  var nextProps;

  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;

    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;

      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  assertValidProps(tag, nextProps);
  var propKey;
  var styleName;
  var styleUpdates = null;

  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }

    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];

      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }

          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the allowed property list in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }

  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }

      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = '';
          }
        } // Update styles that changed since `lastProp`.


        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }

          updatePayload.push(propKey, styleUpdates);
        }

        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, nextHtml);
        }
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string' || typeof nextProp === 'number') {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }

      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else if (typeof nextProp === 'object' && nextProp !== null && nextProp.$$typeof === REACT_OPAQUE_ID_TYPE) {
      // If we encounter useOpaqueReference's opaque object, this means we are hydrating.
      // In this case, call the opaque object's toString function which generates a new client
      // ID so client and server IDs match and throws to rerender.
      nextProp.toString();
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the allowed property list during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }

  if (styleUpdates) {
    {
      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
    }

    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }

  return updatePayload;
} // Apply the diff.

function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.

  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;

    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;

    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();

    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }

    return possibleStandardNames[lowerCasedName] || null;
  }
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  var isCustomComponentTag;
  var extraAttributeNames;

  {
    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  switch (tag) {
    case 'dialog':
      listenToNonDelegatedEvent('cancel', domElement);
      listenToNonDelegatedEvent('close', domElement);
      break;

    case 'iframe':
    case 'object':
    case 'embed':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the load event.
      listenToNonDelegatedEvent('load', domElement);
      break;

    case 'video':
    case 'audio':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for all the media events.
      for (var i = 0; i < mediaEventTypes.length; i++) {
        listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
      }

      break;

    case 'source':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the error event.
      listenToNonDelegatedEvent('error', domElement);
      break;

    case 'img':
    case 'image':
    case 'link':
      // We listen to these events in case to ensure emulated bubble
      // listeners still fire for error and load events.
      listenToNonDelegatedEvent('error', domElement);
      listenToNonDelegatedEvent('load', domElement);
      break;

    case 'details':
      // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the toggle event.
      listenToNonDelegatedEvent('toggle', domElement);
      break;

    case 'input':
      initWrapperState(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);

      break;

    case 'option':
      validateProps(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);

      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps); // We listen to this event in case to ensure emulated bubble
      // listeners still fire for the invalid event.

      listenToNonDelegatedEvent('invalid', domElement);

      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;

    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();

      switch (name) {
        // Built-in SSR attribute is allowed
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.

        case 'value':
          break;

        case 'checked':
          break;

        case 'selected':
          break;

        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;

  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = rawProps[propKey];

    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if ( !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if ( !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        if (propKey === 'onScroll') {
          listenToNonDelegatedEvent('scroll', domElement);
        }
      }
    } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = getPropertyInfo(propKey);

      if (suppressHydrationWarning) ; else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

        if (nextHtml != null) {
          var expectedHTML = normalizeHTML(domElement, nextHtml);

          if (expectedHTML !== serverHTML) {
            warnForPropDifference(propKey, serverHTML, expectedHTML);
          }
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');

          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;

        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;

          if (ownNamespace === HTML_NAMESPACE$1) {
            ownNamespace = getIntrinsicNamespace(tag);
          }

          if (ownNamespace === HTML_NAMESPACE$1) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);

            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

              extraAttributeNames.delete(standardName);
            } // $FlowFixMe - Should be inferred as not undefined.


            extraAttributeNames.delete(propKey);
          }

          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;

    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  return updatePayload;
}
function diffHydratedText(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}
function warnForUnmatchedText(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}
function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}
function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }

    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}
function restoreControlledState$3(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;

    case 'textarea':
      restoreControlledState$2(domElement, props);
      return;

    case 'select':
      restoreControlledState$1(domElement, props);
      return;
  }
}

var validateDOMNesting = function () {};

var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.
  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  var emptyAncestorInfo = {
    current: null,
    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,
    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

    var info = {
      tag: tag
    };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }

    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    } // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }

    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }

    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }

    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }

    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }

    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }

    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };
  /**
   * Returns whether
   */


  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';

      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but

      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

      case 'html':
        return tag === 'head' || tag === 'body' || tag === 'frameset';

      case 'frameset':
        return tag === 'frame';

      case '#document':
        return tag === 'html';
    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frameset':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };
  /**
   * Returns whether
   */


  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn$1 = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      if (childTag != null) {
        error('validateDOMNesting: when childText is passed, childTag should be null');
      }

      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;

    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag;

    if (didWarn$1[warnKey]) {
      return;
    }

    didWarn$1[warnKey] = true;
    var tagDisplayName = childTag;
    var whitespaceInfo = '';

    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';

      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
      }

      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
    } else {
      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
    }
  };
}

var SUPPRESS_HYDRATION_WARNING$1;

{
  SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
}

var SUSPENSE_START_DATA = '$';
var SUSPENSE_END_DATA = '/$';
var SUSPENSE_PENDING_START_DATA = '$?';
var SUSPENSE_FALLBACK_START_DATA = '$!';
var STYLE$1 = 'style';
var eventsEnabled = null;
var selectionInformation = null;

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }

  return false;
}
function getRootHostContext(rootContainerInstance) {
  var type;
  var namespace;
  var nodeType = rootContainerInstance.nodeType;

  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }

    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }

  {
    var validatedTag = type.toLowerCase();
    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getPublicInstance(instance) {
  return instance;
}
function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  var activeInstance = null;

  setEnabled(false);
  return activeInstance;
}
function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  setEnabled(eventsEnabled);
  eventsEnabled = null;
  selectionInformation = null;
}
function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace;

  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }

    parentNamespace = hostContextDev.namespace;
  }

  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}
function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);
  return shouldAutoFocusHostComponent(type, props);
}
function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;

    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }

  return diffProperties(domElement, type, oldProps, newProps);
}
function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }

  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.

var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
var noTimeout = -1; // -------------------
function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  if (shouldAutoFocusHostComponent(type, newProps)) {
    domElement.focus();
  }
}
function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Update the props handle so that we know which props are the ones with
  // with current event handlers.
  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

  updateProperties(domElement, updatePayload, type, oldProps, newProps);
}
function resetTextContent(domElement) {
  setTextContent(domElement, '');
}
function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}
function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function appendChildToContainer(container, child) {
  var parentNode;

  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  } // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that non React root containers have inline onclick
  // defined.
  // https://github.com/facebook/react/issues/11918


  var reactRootContainer = container._reactRootContainer;

  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}
function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}
function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}

function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}
function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}
function hideInstance(instance) {
  // TODO: Does this work for all element types? What about MathML? Should we
  // pass host context to this method?
  instance = instance;
  var style = instance.style;

  if (typeof style.setProperty === 'function') {
    style.setProperty('display', 'none', 'important');
  } else {
    style.display = 'none';
  }
}
function hideTextInstance(textInstance) {
  textInstance.nodeValue = '';
}
function unhideInstance(instance, props) {
  instance = instance;
  var styleProp = props[STYLE$1];
  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
  instance.style.display = dangerousStyleValue('display', display);
}
function unhideTextInstance(textInstance, text) {
  textInstance.nodeValue = text;
}
function clearContainer(container) {
  if (container.nodeType === ELEMENT_NODE) {
    container.textContent = '';
  } else if (container.nodeType === DOCUMENT_NODE) {
    var body = container.body;

    if (body != null) {
      body.textContent = '';
    }
  }
} // -------------------
function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  } // This has now been refined to an element node.


  return instance;
}
function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a text node.


  return instance;
}
function isSuspenseInstancePending(instance) {
  return instance.data === SUSPENSE_PENDING_START_DATA;
}
function isSuspenseInstanceFallback(instance) {
  return instance.data === SUSPENSE_FALLBACK_START_DATA;
}

function getNextHydratable(node) {
  // Skip non-hydratable nodes.
  for (; node != null; node = node.nextSibling) {
    var nodeType = node.nodeType;

    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
      break;
    }
  }

  return node;
}

function getNextHydratableSibling(instance) {
  return getNextHydratable(instance.nextSibling);
}
function getFirstHydratableChild(parentInstance) {
  return getNextHydratable(parentInstance.firstChild);
}
function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
  // get attached.

  updateFiberProps(instance, props);
  var parentNamespace;

  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  }

  return diffHydratedProperties(instance, type, props, parentNamespace);
}
function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, textInstance);
  return diffHydratedText(textInstance, text);
}
function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          return getNextHydratableSibling(node);
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        depth++;
      }
    }

    node = node.nextSibling;
  } // TODO: Warn, we didn't find the end comment boundary.


  return null;
} // Returns the SuspenseInstance if this node is a direct child of a
// SuspenseInstance. I.e. if its previous sibling is a Comment with
// SUSPENSE_x_START_DATA. Otherwise, null.

function getParentSuspenseInstance(targetInstance) {
  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        if (depth === 0) {
          return node;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_END_DATA) {
        depth++;
      }
    }

    node = node.previousSibling;
  }

  return null;
}
function commitHydratedContainer(container) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(container);
}
function commitHydratedSuspenseInstance(suspenseInstance) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(suspenseInstance);
}
function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
  {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotHydrateContainerInstance(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}
function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentInstance, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentInstance, instance);
    }
  }
}
function didNotFindHydratableContainerInstance(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type);
  }
}
function didNotFindHydratableContainerTextInstance(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}
function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForInsertedHydratedElement(parentInstance, type);
  }
}
function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForInsertedHydratedText(parentInstance, text);
  }
}
function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
}
var clientId = 0;
function makeClientIdInDEV(warnOnAccessInDEV) {
  var id = 'r:' + (clientId++).toString(36);
  return {
    toString: function () {
      warnOnAccessInDEV();
      return id;
    },
    valueOf: function () {
      warnOnAccessInDEV();
      return id;
    }
  };
}
function isOpaqueHydratingObject(value) {
  return value !== null && typeof value === 'object' && value.$$typeof === REACT_OPAQUE_ID_TYPE;
}
function makeOpaqueHydratingObject(attemptToReadValue) {
  return {
    $$typeof: REACT_OPAQUE_ID_TYPE,
    toString: attemptToReadValue,
    valueOf: attemptToReadValue
  };
}
function preparePortalMount(portalInstance) {
  {
    listenToAllSupportedEvents(portalInstance);
  }
}

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactFiber$' + randomKey;
var internalPropsKey = '__reactProps$' + randomKey;
var internalContainerInstanceKey = '__reactContainer$' + randomKey;
var internalEventHandlersKey = '__reactEvents$' + randomKey;
function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}
function markContainerAsRoot(hostRoot, node) {
  node[internalContainerInstanceKey] = hostRoot;
}
function unmarkContainerAsRoot(node) {
  node[internalContainerInstanceKey] = null;
}
function isContainerMarkedAsRoot(node) {
  return !!node[internalContainerInstanceKey];
} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
// If the target node is part of a hydrated or not yet rendered subtree, then
// this may also return a SuspenseComponent or HostRoot to indicate that.
// Conceptually the HostRoot fiber is a child of the Container node. So if you
// pass the Container node as the targetNode, you will not actually get the
// HostRoot back. To get to the HostRoot, you need to pass a child of it.
// The same thing applies to Suspense boundaries.

function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];

  if (targetInst) {
    // Don't return HostRoot or SuspenseComponent here.
    return targetInst;
  } // If the direct event target isn't a React owned DOM node, we need to look
  // to see if one of its parents is a React owned DOM node.


  var parentNode = targetNode.parentNode;

  while (parentNode) {
    // We'll check if this is a container root that could include
    // React nodes in the future. We need to check this first because
    // if we're a child of a dehydrated container, we need to first
    // find that inner container before moving on to finding the parent
    // instance. Note that we don't check this field on  the targetNode
    // itself because the fibers are conceptually between the container
    // node and the first child. It isn't surrounding the container node.
    // If it's not a container, we check if it's an instance.
    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

    if (targetInst) {
      // Since this wasn't the direct target of the event, we might have
      // stepped past dehydrated DOM nodes to get here. However they could
      // also have been non-React nodes. We need to answer which one.
      // If we the instance doesn't have any children, then there can't be
      // a nested suspense boundary within it. So we can use this as a fast
      // bailout. Most of the time, when people add non-React children to
      // the tree, it is using a ref to a child-less DOM node.
      // Normally we'd only need to check one of the fibers because if it
      // has ever gone from having children to deleting them or vice versa
      // it would have deleted the dehydrated boundary nested inside already.
      // However, since the HostRoot starts out with an alternate it might
      // have one on the alternate so we need to check in case this was a
      // root.
      var alternate = targetInst.alternate;

      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
        // Next we need to figure out if the node that skipped past is
        // nested within a dehydrated boundary and if so, which one.
        var suspenseInstance = getParentSuspenseInstance(targetNode);

        while (suspenseInstance !== null) {
          // We found a suspense instance. That means that we haven't
          // hydrated it yet. Even though we leave the comments in the
          // DOM after hydrating, and there are boundaries in the DOM
          // that could already be hydrated, we wouldn't have found them
          // through this pass since if the target is hydrated it would
          // have had an internalInstanceKey on it.
          // Let's get the fiber associated with the SuspenseComponent
          // as the deepest instance.
          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

          if (targetSuspenseInst) {
            return targetSuspenseInst;
          } // If we don't find a Fiber on the comment, it might be because
          // we haven't gotten to hydrate it yet. There might still be a
          // parent boundary that hasn't above this one so we need to find
          // the outer most that is known.


          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
          // host component also hasn't hydrated yet. We can return it
          // below since it will bail out on the isMounted check later.
        }
      }

      return targetInst;
    }

    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }

  return null;
}
/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

function getInstanceFromNode(node) {
  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
      return inst;
    } else {
      return null;
    }
  }

  return null;
}
/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

function getNodeFromInstance(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  } // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.


  {
    {
      throw Error( "getNodeFromInstance: Invalid argument." );
    }
  }
}
function getFiberCurrentPropsFromNode(node) {
  return node[internalPropsKey] || null;
}
function updateFiberProps(node, props) {
  node[internalPropsKey] = props;
}
function getEventListenerSet(node) {
  var elementListenerSet = node[internalEventHandlersKey];

  if (elementListenerSet === undefined) {
    elementListenerSet = node[internalEventHandlersKey] = new Set();
  }

  return elementListenerSet;
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      error('Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      error('Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  {
    if (!(contextStackCursor.current === emptyContextObject)) {
      {
        throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentName(type) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;

          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext = instance.getChildContext();

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        {
          throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
        }
      }
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name);
    }

    return _assign({}, parentContext, childContext);
  }
}

function pushContextProvider(workInProgress) {
  {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  {
    var instance = workInProgress.stateNode;

    if (!instance) {
      {
        throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
      {
        throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    {
      {
        throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

var LegacyRoot = 0;
var BlockingRoot = 1;
var ConcurrentRoot = 2;

var rendererID = null;
var injectedHook = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://reactjs.org/link/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    injectedHook = hook;
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      error('React instrumentation encountered an error: %s.', err);
    }
  } // DevTools exists


  return true;
}
function onScheduleRoot(root, children) {
  {
    if (injectedHook && typeof injectedHook.onScheduleFiberRoot === 'function') {
      try {
        injectedHook.onScheduleFiberRoot(rendererID, root, children);
      } catch (err) {
        if ( !hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onCommitRoot(root, priorityLevel) {
  if (injectedHook && typeof injectedHook.onCommitFiberRoot === 'function') {
    try {
      var didError = (root.current.flags & DidCapture) === DidCapture;

      if (enableProfilerTimer) {
        injectedHook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
      } else {
        injectedHook.onCommitFiberRoot(rendererID, root, undefined, didError);
      }
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}
function onCommitUnmount(fiber) {
  if (injectedHook && typeof injectedHook.onCommitFiberUnmount === 'function') {
    try {
      injectedHook.onCommitFiberUnmount(rendererID, fiber);
    } catch (err) {
      {
        if (!hasLoggedError) {
          hasLoggedError = true;

          error('React instrumentation encountered an error: %s', err);
        }
      }
    }
  }
}

var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
    Scheduler_now$1 = Scheduler.unstable_now,
    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

{
  // Provide explicit error message when production+profiling bundle of e.g.
  // react-dom is used with production (non-profiling) bundle of
  // scheduler/tracing
  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
    {
      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at https://reactjs.org/link/profiling" );
    }
  }
}

var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
// ascending numbers so we can compare them like numbers. They start at 90 to
// avoid clashing with Scheduler's priorities.

var ImmediatePriority$1 = 99;
var UserBlockingPriority$2 = 98;
var NormalPriority$1 = 97;
var LowPriority$1 = 96;
var IdlePriority$1 = 95; // NoPriority is the absence of priority. Also React-only.

var NoPriority$1 = 90;
var shouldYield = Scheduler_shouldYield;
var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
var syncQueue = null;
var immediateQueueCallbackNode = null;
var isFlushingSyncQueue = false;
var initialTimeMs$1 = Scheduler_now$1(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
// This will be the case for modern browsers that support `performance.now`. In
// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
// timestamp. In that case, subtract the module initialization time to simulate
// the behavior of performance.now and keep our times small enough to fit
// within 32 bits.
// TODO: Consider lifting this into Scheduler.

var now = initialTimeMs$1 < 10000 ? Scheduler_now$1 : function () {
  return Scheduler_now$1() - initialTimeMs$1;
};
function getCurrentPriorityLevel() {
  switch (Scheduler_getCurrentPriorityLevel()) {
    case Scheduler_ImmediatePriority:
      return ImmediatePriority$1;

    case Scheduler_UserBlockingPriority:
      return UserBlockingPriority$2;

    case Scheduler_NormalPriority:
      return NormalPriority$1;

    case Scheduler_LowPriority:
      return LowPriority$1;

    case Scheduler_IdlePriority:
      return IdlePriority$1;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function reactPriorityToSchedulerPriority(reactPriorityLevel) {
  switch (reactPriorityLevel) {
    case ImmediatePriority$1:
      return Scheduler_ImmediatePriority;

    case UserBlockingPriority$2:
      return Scheduler_UserBlockingPriority;

    case NormalPriority$1:
      return Scheduler_NormalPriority;

    case LowPriority$1:
      return Scheduler_LowPriority;

    case IdlePriority$1:
      return Scheduler_IdlePriority;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function runWithPriority$1(reactPriorityLevel, fn) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_runWithPriority(priorityLevel, fn);
}
function scheduleCallback(reactPriorityLevel, callback, options) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_scheduleCallback(priorityLevel, callback, options);
}
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }

  return fakeCallbackNode;
}
function cancelCallback(callbackNode) {
  if (callbackNode !== fakeCallbackNode) {
    Scheduler_cancelCallback(callbackNode);
  }
}
function flushSyncCallbackQueue() {
  if (immediateQueueCallbackNode !== null) {
    var node = immediateQueueCallbackNode;
    immediateQueueCallbackNode = null;
    Scheduler_cancelCallback(node);
  }

  flushSyncCallbackQueueImpl();
}

function flushSyncCallbackQueueImpl() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrancy.
    isFlushingSyncQueue = true;
    var i = 0;

    {
      try {
        var _isSync2 = true;
        var _queue = syncQueue;
        runWithPriority$1(ImmediatePriority$1, function () {
          for (; i < _queue.length; i++) {
            var callback = _queue[i];

            do {
              callback = callback(_isSync2);
            } while (callback !== null);
          }
        });
        syncQueue = null;
      } catch (error) {
        // If something throws, leave the remaining callbacks on the queue.
        if (syncQueue !== null) {
          syncQueue = syncQueue.slice(i + 1);
        } // Resume flushing in the next tick


        Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
        throw error;
      } finally {
        isFlushingSyncQueue = false;
      }
    }
  }
}

// TODO: this is special because it gets imported during build.
var ReactVersion = '17.0.2';

var NoMode = 0;
var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
// tag instead

var BlockingMode = 2;
var ConcurrentMode = 4;
var ProfileMode = 8;
var DebugTracingMode = 16;

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
var NoTransition = 0;
function requestCurrentTransition() {
  return ReactCurrentBatchConfig.transition;
}

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      if (fiberArray.length === 0) {
        return;
      }

      var firstFiber = fiberArray[0];
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);

      try {
        setCurrentFiber(firstFiber);

        error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context', sortedNames);
      } finally {
        resetCurrentFiber();
      }
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);

    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var MAX_SIGNED_31_BIT_INT = 1073741823;

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
      }

      context._currentRenderer = rendererSigil;
    }
  }
}
function popProvider(providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);
  var context = providerFiber.type._context;

  {
    context._currentValue = currentValue;
  }
}
function calculateChangedBits(context, newValue, oldValue) {
  if (objectIs(oldValue, newValue)) {
    // No change
    return 0;
  } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

    {
      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
      }
    }

    return changedBits | 0;
  }
}
function scheduleWorkOnParentPath(parent, renderLanes) {
  // Update the child lanes of all the ancestors, including the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (!isSubsetOfLanes(node.childLanes, renderLanes)) {
      node.childLanes = mergeLanes(node.childLanes, renderLanes);

      if (alternate !== null) {
        alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
      }
    } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes)) {
      alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
    } else {
      // Neither alternate was updated, which means the rest of the
      // ancestor path already has sufficient priority.
      break;
    }

    node = node.return;
  }
}
function propagateContextChange(workInProgress, context, changedBits, renderLanes) {
  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(NoTimestamp, pickArbitraryLane(renderLanes));
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.

            enqueueUpdate(fiber, update);
          }

          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
          var alternate = fiber.alternate;

          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
          }

          scheduleWorkOnParentPath(fiber.return, renderLanes); // Mark the updated lanes on the list, too.

          list.lanes = mergeLanes(list.lanes, renderLanes); // Since we already found a match, we can stop traversing the
          // dependency list.

          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderLanes) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    var firstContext = dependencies.firstContext;

    if (firstContext !== null) {
      if (includesSomeLane(dependencies.lanes, renderLanes)) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      dependencies.firstContext = null;
    }
  }
}
function readContext(context, observedBits) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    if (isDisallowedContextReadInDEV) {
      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
    }
  }

  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      if (!(currentlyRenderingFiber !== null)) {
        {
          throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
        }
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        lanes: NoLanes,
        firstContext: contextItem,
        responders: null
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return  context._currentValue ;
}

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;

{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
}

function initializeUpdateQueue(fiber) {
  var queue = {
    baseState: fiber.memoizedState,
    firstBaseUpdate: null,
    lastBaseUpdate: null,
    shared: {
      pending: null
    },
    effects: null
  };
  fiber.updateQueue = queue;
}
function cloneUpdateQueue(current, workInProgress) {
  // Clone the update queue from current. Unless it's already a clone.
  var queue = workInProgress.updateQueue;
  var currentQueue = current.updateQueue;

  if (queue === currentQueue) {
    var clone = {
      baseState: currentQueue.baseState,
      firstBaseUpdate: currentQueue.firstBaseUpdate,
      lastBaseUpdate: currentQueue.lastBaseUpdate,
      shared: currentQueue.shared,
      effects: currentQueue.effects
    };
    workInProgress.updateQueue = clone;
  }
}
function createUpdate(eventTime, lane) {
  var update = {
    eventTime: eventTime,
    lane: lane,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null
  };
  return update;
}
function enqueueUpdate(fiber, update) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return;
  }

  var sharedQueue = updateQueue.shared;
  var pending = sharedQueue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  sharedQueue.pending = update;

  {
    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

      didWarnUpdateInsideUpdate = true;
    }
  }
}
function enqueueCapturedUpdate(workInProgress, capturedUpdate) {
  // Captured updates are updates that are thrown by a child during the render
  // phase. They should be discarded if the render is aborted. Therefore,
  // we should only put them on the work-in-progress queue, not the current one.
  var queue = workInProgress.updateQueue; // Check if the work-in-progress queue is a clone.

  var current = workInProgress.alternate;

  if (current !== null) {
    var currentQueue = current.updateQueue;

    if (queue === currentQueue) {
      // The work-in-progress queue is the same as current. This happens when
      // we bail out on a parent fiber that then captures an error thrown by
      // a child. Since we want to append the update only to the work-in
      // -progress queue, we need to clone the updates. We usually clone during
      // processUpdateQueue, but that didn't happen in this case because we
      // skipped over the parent when we bailed out.
      var newFirst = null;
      var newLast = null;
      var firstBaseUpdate = queue.firstBaseUpdate;

      if (firstBaseUpdate !== null) {
        // Loop through the updates and clone them.
        var update = firstBaseUpdate;

        do {
          var clone = {
            eventTime: update.eventTime,
            lane: update.lane,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };

          if (newLast === null) {
            newFirst = newLast = clone;
          } else {
            newLast.next = clone;
            newLast = clone;
          }

          update = update.next;
        } while (update !== null); // Append the captured update the end of the cloned list.


        if (newLast === null) {
          newFirst = newLast = capturedUpdate;
        } else {
          newLast.next = capturedUpdate;
          newLast = capturedUpdate;
        }
      } else {
        // There are no base updates.
        newFirst = newLast = capturedUpdate;
      }

      queue = {
        baseState: currentQueue.baseState,
        firstBaseUpdate: newFirst,
        lastBaseUpdate: newLast,
        shared: currentQueue.shared,
        effects: currentQueue.effects
      };
      workInProgress.updateQueue = queue;
      return;
    }
  } // Append the update to the end of the list.


  var lastBaseUpdate = queue.lastBaseUpdate;

  if (lastBaseUpdate === null) {
    queue.firstBaseUpdate = capturedUpdate;
  } else {
    lastBaseUpdate.next = capturedUpdate;
  }

  queue.lastBaseUpdate = capturedUpdate;
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            if ( workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                payload.call(instance, prevState, nextProps);
              } finally {
                reenableLogs();
              }
            }

            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.flags = workInProgress.flags & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            if ( workInProgress.mode & StrictMode) {
              disableLogs();

              try {
                _payload.call(instance, prevState, nextProps);
              } finally {
                reenableLogs();
              }
            }

            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return _assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, props, instance, renderLanes) {
  // This is always non-null on a ClassComponent or HostRoot
  var queue = workInProgress.updateQueue;
  hasForceUpdate = false;

  {
    currentlyProcessingQueue = queue.shared;
  }

  var firstBaseUpdate = queue.firstBaseUpdate;
  var lastBaseUpdate = queue.lastBaseUpdate; // Check if there are pending updates. If so, transfer them to the base queue.

  var pendingQueue = queue.shared.pending;

  if (pendingQueue !== null) {
    queue.shared.pending = null; // The pending queue is circular. Disconnect the pointer between first
    // and last so that it's non-circular.

    var lastPendingUpdate = pendingQueue;
    var firstPendingUpdate = lastPendingUpdate.next;
    lastPendingUpdate.next = null; // Append pending updates to base queue

    if (lastBaseUpdate === null) {
      firstBaseUpdate = firstPendingUpdate;
    } else {
      lastBaseUpdate.next = firstPendingUpdate;
    }

    lastBaseUpdate = lastPendingUpdate; // If there's a current queue, and it's different from the base queue, then
    // we need to transfer the updates to that queue, too. Because the base
    // queue is a singly-linked list with no cycles, we can append to both
    // lists and take advantage of structural sharing.
    // TODO: Pass `current` as argument

    var current = workInProgress.alternate;

    if (current !== null) {
      // This is always non-null on a ClassComponent or HostRoot
      var currentQueue = current.updateQueue;
      var currentLastBaseUpdate = currentQueue.lastBaseUpdate;

      if (currentLastBaseUpdate !== lastBaseUpdate) {
        if (currentLastBaseUpdate === null) {
          currentQueue.firstBaseUpdate = firstPendingUpdate;
        } else {
          currentLastBaseUpdate.next = firstPendingUpdate;
        }

        currentQueue.lastBaseUpdate = lastPendingUpdate;
      }
    }
  } // These values may change as we process the queue.


  if (firstBaseUpdate !== null) {
    // Iterate through the list of updates to compute the result.
    var newState = queue.baseState; // TODO: Don't need to accumulate this. Instead, we can remove renderLanes
    // from the original lanes.

    var newLanes = NoLanes;
    var newBaseState = null;
    var newFirstBaseUpdate = null;
    var newLastBaseUpdate = null;
    var update = firstBaseUpdate;

    do {
      var updateLane = update.lane;
      var updateEventTime = update.eventTime;

      if (!isSubsetOfLanes(renderLanes, updateLane)) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          eventTime: updateEventTime,
          lane: updateLane,
          tag: update.tag,
          payload: update.payload,
          callback: update.callback,
          next: null
        };

        if (newLastBaseUpdate === null) {
          newFirstBaseUpdate = newLastBaseUpdate = clone;
          newBaseState = newState;
        } else {
          newLastBaseUpdate = newLastBaseUpdate.next = clone;
        } // Update the remaining priority in the queue.


        newLanes = mergeLanes(newLanes, updateLane);
      } else {
        // This update does have sufficient priority.
        if (newLastBaseUpdate !== null) {
          var _clone = {
            eventTime: updateEventTime,
            // This update is going to be committed so we never want uncommit
            // it. Using NoLane works because 0 is a subset of all bitmasks, so
            // this will never be skipped by the check above.
            lane: NoLane,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };
          newLastBaseUpdate = newLastBaseUpdate.next = _clone;
        } // Process this update.


        newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
        var callback = update.callback;

        if (callback !== null) {
          workInProgress.flags |= Callback;
          var effects = queue.effects;

          if (effects === null) {
            queue.effects = [update];
          } else {
            effects.push(update);
          }
        }
      }

      update = update.next;

      if (update === null) {
        pendingQueue = queue.shared.pending;

        if (pendingQueue === null) {
          break;
        } else {
          // An update was scheduled from inside a reducer. Add the new
          // pending updates to the end of the list and keep processing.
          var _lastPendingUpdate = pendingQueue; // Intentionally unsound. Pending updates form a circular list, but we
          // unravel them when transferring them to the base queue.

          var _firstPendingUpdate = _lastPendingUpdate.next;
          _lastPendingUpdate.next = null;
          update = _firstPendingUpdate;
          queue.lastBaseUpdate = _lastPendingUpdate;
          queue.shared.pending = null;
        }
      }
    } while (true);

    if (newLastBaseUpdate === null) {
      newBaseState = newState;
    }

    queue.baseState = newBaseState;
    queue.firstBaseUpdate = newFirstBaseUpdate;
    queue.lastBaseUpdate = newLastBaseUpdate; // Set the remaining expiration time to be whatever is remaining in the queue.
    // This should be fine because the only two other things that contribute to
    // expiration time are props and context. We're already in the middle of the
    // begin phase by the time we start processing the queue, so we've already
    // dealt with the props. Context in components that specify
    // shouldComponentUpdate is tricky; but we'll have to account for
    // that regardless.

    markSkippedUpdateLanes(newLanes);
    workInProgress.lanes = newLanes;
    workInProgress.memoizedState = newState;
  }

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (!(typeof callback === 'function')) {
    {
      throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
    }
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance) {
  // Commit the effects
  var effects = finishedQueue.effects;
  finishedQueue.effects = null;

  if (effects !== null) {
    for (var i = 0; i < effects.length; i++) {
      var effect = effects[i];
      var callback = effect.callback;

      if (callback !== null) {
        effect.callback = null;
        callCallback(callback, instance);
      }
    }
  }
}

var fakeInternalInstance = {};
var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.

var emptyRefsObject = new React.Component().refs;
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + '_' + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);

      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);

        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      {
        {
          throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
        }
      }
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if ( workInProgress.mode & StrictMode) {
      disableLogs();

      try {
        // Invoke the function an extra time to help detect side-effects.
        getDerivedStateFromProps(nextProps, prevState);
      } finally {
        reenableLogs();
      }
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  if (workInProgress.lanes === NoLanes) {
    // Queue is always non-null for classes
    var updateQueue = workInProgress.updateQueue;
    updateQueue.baseState = memoizedState;
  }
}
var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'setState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleUpdateOnFiber(fiber, lane, eventTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleUpdateOnFiber(fiber, lane, eventTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var eventTime = requestEventTime();
    var lane = requestUpdateLane(fiber);
    var update = createUpdate(eventTime, lane);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleUpdateOnFiber(fiber, lane, eventTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    {
      if ( workInProgress.mode & StrictMode) {
        disableLogs();

        try {
          // Invoke the function an extra time to help detect side-effects.
          instance.shouldComponentUpdate(newProps, newState, nextContext);
        } finally {
          reenableLogs();
        }
      }
    }

    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);

    {
      if (shouldUpdate === undefined) {
        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
      }
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
    }

    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
    }

    if (instance.propTypes) {
      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
    }

    if (instance.contextType) {
      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
    }

    {
      if (instance.contextTypes) {
        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      }

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);

        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    if (typeof instance.componentShouldUpdate === 'function') {
      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
    }

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }

    if (typeof instance.componentDidUnmount === 'function') {
      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
    }

    if (typeof instance.componentDidReceiveProps === 'function') {
      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
    }

    if (typeof instance.componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
    }

    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
    }

    var hasMutatedProps = instance.props !== newProps;

    if (instance.props !== undefined && hasMutatedProps) {
      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
    }

    if (instance.defaultProps) {
      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    if (typeof instance.getDerivedStateFromProps === 'function') {
      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof instance.getDerivedStateFromError === 'function') {
      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
    }

    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      error('%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  } // Instantiate twice to help detect side-effects.


  {
    if ( workInProgress.mode & StrictMode) {
      disableLogs();

      try {
        new ctor(props, context); // eslint-disable-line no-new
      } finally {
        reenableLogs();
      }
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);

        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://reactjs.org/link/unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  if (oldState !== instance.state) {
    {
      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);

        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderLanes) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  initializeUpdateQueue(workInProgress);
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
  instance.state = workInProgress.memoizedState;
  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    processUpdateQueue(workInProgress, newProps, instance, renderLanes);
    instance.state = workInProgress.memoizedState;
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.flags |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderLanes) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.flags |= Update;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }
    }

    if (typeof instance.componentDidMount === 'function') {
      workInProgress.flags |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.flags |= Update;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderLanes) {
  var instance = workInProgress.stateNode;
  cloneUpdateQueue(current, workInProgress);
  var unresolvedOldProps = workInProgress.memoizedProps;
  var oldProps = workInProgress.type === workInProgress.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress.type, unresolvedOldProps);
  instance.props = oldProps;
  var unresolvedNewProps = workInProgress.pendingProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderLanes);
  newState = workInProgress.memoizedState;

  if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.flags |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.flags |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (unresolvedOldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.flags |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child, returnFiber) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child, returnFiber) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (!(typeof child._store === 'object')) {
      {
        throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    child._store.validated = true;
    var componentName = getComponentName(returnFiber.type) || 'Component';

    if (ownerHasKeyUseWarning[componentName]) {
      return;
    }

    ownerHasKeyUseWarning[componentName] = true;

    error('Each child in a list should have a unique ' + '"key" prop. See https://reactjs.org/link/warning-keys for ' + 'more information.');
  };
}

var isArray$1 = Array.isArray;

function coerceRef(returnFiber, current, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
      // because these cannot be automatically converted to an arrow function
      // using a codemod. Therefore, we don't have to warn about string refs again.
      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
        var componentName = getComponentName(returnFiber.type) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          {
            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', mixedRef);
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (!(ownerFiber.tag === ClassComponent)) {
          {
            throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref" );
          }
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        {
          throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
        }
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
        return current.ref;
      }

      var ref = function (value) {
        var refs = inst.refs;

        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (!(typeof mixedRef === 'string')) {
        {
          throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
        }
      }

      if (!element._owner) {
        {
          throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information." );
        }
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    {
      {
        throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + "). If you meant to render a collection of children, use an array instead." );
      }
    }
  }
}

function warnOnFunctionType(returnFiber) {
  {
    var componentName = getComponentName(returnFiber.type) || 'Component';

    if (ownerHasFunctionTypeWarning[componentName]) {
      return;
    }

    ownerHasFunctionTypeWarning[componentName] = true;

    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
  }
} // We avoid inlining this to avoid potential deopts from using try/catch.
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    } // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }

    childToDelete.nextEffect = null;
    childToDelete.flags = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }

    var current = newFiber.alternate;

    if (current !== null) {
      var oldIndex = current.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.flags = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.flags = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.flags = Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, lanes) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, lanes) {
    if (current !== null) {
      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
       isCompatibleFamilyForHotReloading(current, element) )) {
        // Move based on index
        var existing = useFiber(current, element.props);
        existing.ref = coerceRef(returnFiber, current, element);
        existing.return = returnFiber;

        {
          existing._debugSource = element._source;
          existing._debugOwner = element._owner;
        }

        return existing;
      }
    } // Insert


    var created = createFiberFromElement(element, returnFiber.mode, lanes);
    created.ref = coerceRef(returnFiber, current, element);
    created.return = returnFiber;
    return created;
  }

  function updatePortal(returnFiber, current, portal, lanes) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || []);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, lanes, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, lanes) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, lanes);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);

            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, lanes) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, lanes);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, lanes, key);
              }

              return updateElement(returnFiber, oldFiber, newChild, lanes);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, lanes);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, lanes, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, lanes);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, lanes, newChild.key);
            }

            return updateElement(returnFiber, _matchedFiber, newChild, lanes);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
          }

      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, lanes, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys, returnFiber) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child, returnFiber);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (!(typeof iteratorFn === 'function')) {
      {
        throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        if (!didWarnAboutGenerators) {
          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
        }

        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        if (!didWarnAboutMaps) {
          error('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
        }

        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (!(newChildren != null)) {
      {
        throw Error( "An iterable object provided no iterator." );
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, lanes);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, lanes);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        switch (child.tag) {
          case Fragment:
            {
              if (element.type === REACT_FRAGMENT_TYPE) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.props.children);
                existing.return = returnFiber;

                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }

                return existing;
              }

              break;
            }

          case Block:

          // We intentionally fallthrough here if enableBlocksAPI is not on.
          // eslint-disable-next-lined no-fallthrough

          default:
            {
              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
               isCompatibleFamilyForHotReloading(child, element) )) {
                deleteRemainingChildren(returnFiber, child.sibling);

                var _existing3 = useFiber(child, element.props);

                _existing3.ref = coerceRef(returnFiber, child, element);
                _existing3.return = returnFiber;

                {
                  _existing3._debugSource = element._source;
                  _existing3._debugOwner = element._owner;
                }

                return _existing3;
              }

              break;
            }
        } // Didn't match.


        deleteRemainingChildren(returnFiber, child);
        break;
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || []);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, lanes) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));

      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, lanes));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType(returnFiber);
      }
    }

    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;

              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough

        case Block:
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            {
              {
                throw Error( (getComponentName(returnFiber.type) || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
              }
            }
          }
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current, workInProgress) {
  if (!(current === null || workInProgress.child === current.child)) {
    {
      throw Error( "Resuming work not yet implemented." );
    }
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, lanes) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, lanes);
    child = child.sibling;
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (!(c !== NO_CONTEXT)) {
    {
      throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

  if (props.fallback === undefined) {
    return false;
  } // Regular boundaries always capture.


  if (props.unstable_avoidThisFallback !== true) {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
  // parent boundary if it is currently invisible.


  if (hasInvisibleParent) {
    return false;
  } // If the parent is not able to handle it, we must handle it.


  return true;
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.flags & DidCapture) !== NoFlags;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

var NoFlags$1 =
/*  */
0; // Represents whether effect should fire.

var HasEffect =
/* */
1; // Represents the phase in which the effect (not the clean-up) fires.

var Layout =
/*    */
2;
var Passive$1 =
/*   */
4;

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function enterHydrationState(fiber) {

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;

      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.flags = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.

  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.flags = fiber.flags & ~Hydrating | Placement;

  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
              break;

            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;

            case SuspenseComponent:
              didNotFindHydratableSuspenseInstance(parentType, parentProps);
              break;
          }

          break;
        }

      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type);

        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {

        return false;
      }

    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }

  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;

      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }

  return shouldUpdate;
}

function skipPastDehydratedSuspenseInstance(fiber) {

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.

  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;

    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function resetHydrationState() {

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

function getIsHydrating() {
  return isHydrating;
}

// and should be reset before starting a new render.
// This tracks which mutable sources need to be reset after a render.

var workInProgressSources = [];
var rendererSigil$1;

{
  // Used to detect multiple renderers using the same mutable source.
  rendererSigil$1 = {};
}

function markSourceAsDirty(mutableSource) {
  workInProgressSources.push(mutableSource);
}
function resetWorkInProgressVersions() {
  for (var i = 0; i < workInProgressSources.length; i++) {
    var mutableSource = workInProgressSources[i];

    {
      mutableSource._workInProgressVersionPrimary = null;
    }
  }

  workInProgressSources.length = 0;
}
function getWorkInProgressVersion(mutableSource) {
  {
    return mutableSource._workInProgressVersionPrimary;
  }
}
function setWorkInProgressVersion(mutableSource, version) {
  {
    mutableSource._workInProgressVersionPrimary = version;
  }

  workInProgressSources.push(mutableSource);
}
function warnAboutMultipleRenderersDEV(mutableSource) {
  {
    {
      if (mutableSource._currentPrimaryRenderer == null) {
        mutableSource._currentPrimaryRenderer = rendererSigil$1;
      } else if (mutableSource._currentPrimaryRenderer !== rendererSigil$1) {
        error('Detected multiple renderers concurrently rendering the ' + 'same mutable source. This is currently unsupported.');
      }
    }
  }
} // Eager reads the version of a mutable source and stores it on the root.

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;
var didWarnAboutUseOpaqueIdentifier;

{
  didWarnAboutUseOpaqueIdentifier = {};
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderLanes = NoLanes; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
// does not get reset if we do another render pass; only when we're completely
// finished evaluating this component. This is an optimization so we know
// whether we need to clear render phase updates after a throw.

var didScheduleRenderPhaseUpdate = false; // Where an update was scheduled only during the current render pass. This
// gets reset after each attempt.
// TODO: Maybe there's some way to consolidate this with
// `didScheduleRenderPhaseUpdate`. Or with `numberOfReRenders`.

var didScheduleRenderPhaseUpdateDuringThisPass = false;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentName(currentlyRenderingFiber$1.type);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (objectIs(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderLanes) {
  renderLanes = nextRenderLanes;
  currentlyRenderingFiber$1 = workInProgress;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  }

  workInProgress.memoizedState = null;
  workInProgress.updateQueue = null;
  workInProgress.lanes = NoLanes; // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // didScheduleRenderPhaseUpdate = false;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because memoizedState === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so memoizedState would be null during updates and mounts.

  {
    if (current !== null && current.memoizedState !== null) {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, secondArg); // Check if there was a render phase update

  if (didScheduleRenderPhaseUpdateDuringThisPass) {
    // Keep rendering in a loop for as long as render phase updates continue to
    // be scheduled. Use a counter to prevent infinite loops.
    var numberOfReRenders = 0;

    do {
      didScheduleRenderPhaseUpdateDuringThisPass = false;

      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
        {
          throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
        }
      }

      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      currentHook = null;
      workInProgressHook = null;
      workInProgress.updateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher$1.current =  HooksDispatcherOnRerenderInDEV ;
      children = Component(props, secondArg);
    } while (didScheduleRenderPhaseUpdateDuringThisPass);
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.


  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  {
    workInProgress._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderLanes = NoLanes;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
  }

  didScheduleRenderPhaseUpdate = false;

  if (!!didRenderTooFewHooks) {
    {
      throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
    }
  }

  return children;
}
function bailoutHooks(current, workInProgress, lanes) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.flags &= ~(Passive | Update);
  current.lanes = removeLanes(current.lanes, lanes);
}
function resetHooksAfterThrow() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  if (didScheduleRenderPhaseUpdate) {
    // There were render phase updates. These are only valid for this render
    // phase, which we are now aborting. Remove the updates from the queues so
    // they do not persist to the next render. Do not remove updates from hooks
    // that weren't processed.
    //
    // Only reset the updates from the queue if it has a clone. If it does
    // not have a clone, that means it wasn't processed, and the updates were
    // scheduled before we entered the render phase.
    var hook = currentlyRenderingFiber$1.memoizedState;

    while (hook !== null) {
      var queue = hook.queue;

      if (queue !== null) {
        queue.pending = null;
      }

      hook = hook.next;
    }

    didScheduleRenderPhaseUpdate = false;
  }

  renderLanes = NoLanes;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
    isUpdatingOpaqueValueInRenderPhase = false;
  }

  didScheduleRenderPhaseUpdateDuringThisPass = false;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  var nextCurrentHook;

  if (currentHook === null) {
    var current = currentlyRenderingFiber$1.alternate;

    if (current !== null) {
      nextCurrentHook = current.memoizedState;
    } else {
      nextCurrentHook = null;
    }
  } else {
    nextCurrentHook = currentHook.next;
  }

  var nextWorkInProgressHook;

  if (workInProgressHook === null) {
    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
  } else {
    nextWorkInProgressHook = workInProgressHook.next;
  }

  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
  } else {
    // Clone from the current hook.
    if (!(nextCurrentHook !== null)) {
      {
        throw Error( "Rendered more hooks than during the previous render." );
      }
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      baseQueue: currentHook.baseQueue,
      queue: currentHook.queue,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null
  };
}

function basicStateReducer(state, action) {
  // $FlowFixMe: Flow doesn't like mixed types
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer;
  var current = currentHook; // The last rebase update that is NOT part of the base state.

  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    {
      if (current.baseQueue !== baseQueue) {
        // Internal invariant that should never happen, but feasibly could in
        // the future if we implement resuming, or some form of that.
        error('Internal error: Expected work-in-progress queue to be a clone. ' + 'This is a bug in React.');
      }
    }

    current.baseQueue = baseQueue = pendingQueue;
    queue.pending = null;
  }

  if (baseQueue !== null) {
    // We have a queue to process.
    var first = baseQueue.next;
    var newState = current.baseState;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;
    var update = first;

    do {
      var updateLane = update.lane;

      if (!isSubsetOfLanes(renderLanes, updateLane)) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          lane: updateLane,
          action: update.action,
          eagerReducer: update.eagerReducer,
          eagerState: update.eagerState,
          next: null
        };

        if (newBaseQueueLast === null) {
          newBaseQueueFirst = newBaseQueueLast = clone;
          newBaseState = newState;
        } else {
          newBaseQueueLast = newBaseQueueLast.next = clone;
        } // Update the remaining priority in the queue.
        // TODO: Don't need to accumulate this. Instead, we can remove
        // renderLanes from the original lanes.


        currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
        markSkippedUpdateLanes(updateLane);
      } else {
        // This update does have sufficient priority.
        if (newBaseQueueLast !== null) {
          var _clone = {
            // This update is going to be committed so we never want uncommit
            // it. Using NoLane works because 0 is a subset of all bitmasks, so
            // this will never be skipped by the check above.
            lane: NoLane,
            action: update.action,
            eagerReducer: update.eagerReducer,
            eagerState: update.eagerState,
            next: null
          };
          newBaseQueueLast = newBaseQueueLast.next = _clone;
        } // Process this update.


        if (update.eagerReducer === reducer) {
          // If this update was processed eagerly, and its reducer matches the
          // current reducer, we can use the eagerly computed state.
          newState = update.eagerState;
        } else {
          var action = update.action;
          newState = reducer(newState, action);
        }
      }

      update = update.next;
    } while (update !== null && update !== first);

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState;
    hook.baseState = newBaseState;
    hook.baseQueue = newBaseQueueLast;
    queue.lastRenderedState = newState;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function rerenderReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
  // work-in-progress hook.

  var dispatch = queue.dispatch;
  var lastRenderPhaseUpdate = queue.pending;
  var newState = hook.memoizedState;

  if (lastRenderPhaseUpdate !== null) {
    // The queue doesn't persist past this render pass.
    queue.pending = null;
    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
    var update = firstRenderPhaseUpdate;

    do {
      // Process this render phase update. We don't have to check the
      // priority because it will always be the same as the current
      // render's.
      var action = update.action;
      newState = reducer(newState, action);
      update = update.next;
    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
    // the base state unless the queue is empty.
    // TODO: Not sure if this is the desired semantics, but it's what we
    // do for gDSFP. I can't remember why.

    if (hook.baseQueue === null) {
      hook.baseState = newState;
    }

    queue.lastRenderedState = newState;
  }

  return [newState, dispatch];
}

function readFromUnsubcribedMutableSource(root, source, getSnapshot) {
  {
    warnAboutMultipleRenderersDEV(source);
  }

  var getVersion = source._getVersion;
  var version = getVersion(source._source); // Is it safe for this component to read from this source during the current render?

  var isSafeToReadFromSource = false; // Check the version first.
  // If this render has already been started with a specific version,
  // we can use it alone to determine if we can safely read from the source.

  var currentRenderVersion = getWorkInProgressVersion(source);

  if (currentRenderVersion !== null) {
    // It's safe to read if the store hasn't been mutated since the last time
    // we read something.
    isSafeToReadFromSource = currentRenderVersion === version;
  } else {
    // If there's no version, then this is the first time we've read from the
    // source during the current render pass, so we need to do a bit more work.
    // What we need to determine is if there are any hooks that already
    // subscribed to the source, and if so, whether there are any pending
    // mutations that haven't been synchronized yet.
    //
    // If there are no pending mutations, then `root.mutableReadLanes` will be
    // empty, and we know we can safely read.
    //
    // If there *are* pending mutations, we may still be able to safely read
    // if the currently rendering lanes are inclusive of the pending mutation
    // lanes, since that guarantees that the value we're about to read from
    // the source is consistent with the values that we read during the most
    // recent mutation.
    isSafeToReadFromSource = isSubsetOfLanes(renderLanes, root.mutableReadLanes);

    if (isSafeToReadFromSource) {
      // If it's safe to read from this source during the current render,
      // store the version in case other components read from it.
      // A changed version number will let those components know to throw and restart the render.
      setWorkInProgressVersion(source, version);
    }
  }

  if (isSafeToReadFromSource) {
    var snapshot = getSnapshot(source._source);

    {
      if (typeof snapshot === 'function') {
        error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
      }
    }

    return snapshot;
  } else {
    // This handles the special case of a mutable source being shared between renderers.
    // In that case, if the source is mutated between the first and second renderer,
    // The second renderer don't know that it needs to reset the WIP version during unwind,
    // (because the hook only marks sources as dirty if it's written to their WIP version).
    // That would cause this tear check to throw again and eventually be visible to the user.
    // We can avoid this infinite loop by explicitly marking the source as dirty.
    //
    // This can lead to tearing in the first renderer when it resumes,
    // but there's nothing we can do about that (short of throwing here and refusing to continue the render).
    markSourceAsDirty(source);

    {
      {
        throw Error( "Cannot read from mutable source during the current render without tearing. This is a bug in React. Please file an issue." );
      }
    }
  }
}

function useMutableSource(hook, source, getSnapshot, subscribe) {
  var root = getWorkInProgressRoot();

  if (!(root !== null)) {
    {
      throw Error( "Expected a work-in-progress root. This is a bug in React. Please file an issue." );
    }
  }

  var getVersion = source._getVersion;
  var version = getVersion(source._source);
  var dispatcher = ReactCurrentDispatcher$1.current; // eslint-disable-next-line prefer-const

  var _dispatcher$useState = dispatcher.useState(function () {
    return readFromUnsubcribedMutableSource(root, source, getSnapshot);
  }),
      currentSnapshot = _dispatcher$useState[0],
      setSnapshot = _dispatcher$useState[1];

  var snapshot = currentSnapshot; // Grab a handle to the state hook as well.
  // We use it to clear the pending update queue if we have a new source.

  var stateHook = workInProgressHook;
  var memoizedState = hook.memoizedState;
  var refs = memoizedState.refs;
  var prevGetSnapshot = refs.getSnapshot;
  var prevSource = memoizedState.source;
  var prevSubscribe = memoizedState.subscribe;
  var fiber = currentlyRenderingFiber$1;
  hook.memoizedState = {
    refs: refs,
    source: source,
    subscribe: subscribe
  }; // Sync the values needed by our subscription handler after each commit.

  dispatcher.useEffect(function () {
    refs.getSnapshot = getSnapshot; // Normally the dispatch function for a state hook never changes,
    // but this hook recreates the queue in certain cases  to avoid updates from stale sources.
    // handleChange() below needs to reference the dispatch function without re-subscribing,
    // so we use a ref to ensure that it always has the latest version.

    refs.setSnapshot = setSnapshot; // Check for a possible change between when we last rendered now.

    var maybeNewVersion = getVersion(source._source);

    if (!objectIs(version, maybeNewVersion)) {
      var maybeNewSnapshot = getSnapshot(source._source);

      {
        if (typeof maybeNewSnapshot === 'function') {
          error('Mutable source should not return a function as the snapshot value. ' + 'Functions may close over mutable values and cause tearing.');
        }
      }

      if (!objectIs(snapshot, maybeNewSnapshot)) {
        setSnapshot(maybeNewSnapshot);
        var lane = requestUpdateLane(fiber);
        markRootMutableRead(root, lane);
      } // If the source mutated between render and now,
      // there may be state updates already scheduled from the old source.
      // Entangle the updates so that they render in the same batch.


      markRootEntangled(root, root.mutableReadLanes);
    }
  }, [getSnapshot, source, subscribe]); // If we got a new source or subscribe function, re-subscribe in a passive effect.

  dispatcher.useEffect(function () {
    var handleChange = function () {
      var latestGetSnapshot = refs.getSnapshot;
      var latestSetSnapshot = refs.setSnapshot;

      try {
        latestSetSnapshot(latestGetSnapshot(source._source)); // Record a pending mutable source update with the same expiration time.

        var lane = requestUpdateLane(fiber);
        markRootMutableRead(root, lane);
      } catch (error) {
        // A selector might throw after a source mutation.
        // e.g. it might try to read from a part of the store that no longer exists.
        // In this case we should still schedule an update with React.
        // Worst case the selector will throw again and then an error boundary will handle it.
        latestSetSnapshot(function () {
          throw error;
        });
      }
    };

    var unsubscribe = subscribe(source._source, handleChange);

    {
      if (typeof unsubscribe !== 'function') {
        error('Mutable source subscribe function must return an unsubscribe function.');
      }
    }

    return unsubscribe;
  }, [source, subscribe]); // If any of the inputs to useMutableSource change, reading is potentially unsafe.
  //
  // If either the source or the subscription have changed we can't can't trust the update queue.
  // Maybe the source changed in a way that the old subscription ignored but the new one depends on.
  //
  // If the getSnapshot function changed, we also shouldn't rely on the update queue.
  // It's possible that the underlying source was mutated between the when the last "change" event fired,
  // and when the current render (with the new getSnapshot function) is processed.
  //
  // In both cases, we need to throw away pending updates (since they are no longer relevant)
  // and treat reading from the source as we do in the mount case.

  if (!objectIs(prevGetSnapshot, getSnapshot) || !objectIs(prevSource, source) || !objectIs(prevSubscribe, subscribe)) {
    // Create a new queue and setState method,
    // So if there are interleaved updates, they get pushed to the older queue.
    // When this becomes current, the previous queue and dispatch method will be discarded,
    // including any interleaving updates that occur.
    var newQueue = {
      pending: null,
      dispatch: null,
      lastRenderedReducer: basicStateReducer,
      lastRenderedState: snapshot
    };
    newQueue.dispatch = setSnapshot = dispatchAction.bind(null, currentlyRenderingFiber$1, newQueue);
    stateHook.queue = newQueue;
    stateHook.baseQueue = null;
    snapshot = readFromUnsubcribedMutableSource(root, source, getSnapshot);
    stateHook.memoizedState = stateHook.baseState = snapshot;
  }

  return snapshot;
}

function mountMutableSource(source, getSnapshot, subscribe) {
  var hook = mountWorkInProgressHook();
  hook.memoizedState = {
    refs: {
      getSnapshot: getSnapshot,
      setSnapshot: null
    },
    source: source,
    subscribe: subscribe
  };
  return useMutableSource(hook, source, getSnapshot, subscribe);
}

function updateMutableSource(source, getSnapshot, subscribe) {
  var hook = updateWorkInProgressHook();
  return useMutableSource(hook, source, getSnapshot, subscribe);
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    // $FlowFixMe: Flow doesn't like mixed types
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer);
}

function rerenderState(initialState) {
  return rerenderReducer(basicStateReducer);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();
  var ref = {
    current: initialValue
  };

  {
    Object.seal(ref);
  }

  hook.memoizedState = ref;
  return ref;
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  currentlyRenderingFiber$1.flags |= fiberFlags;
  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, undefined, nextDeps);
}

function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        pushEffect(hookFlags, create, destroy, nextDeps);
        return;
      }
    }
  }

  currentlyRenderingFiber$1.flags |= fiberFlags;
  hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
}

function updateEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
}

function mountLayoutEffect(create, deps) {
  return mountEffectImpl(Update, Layout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, Layout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      if (!refObject.hasOwnProperty('current')) {
        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
      }
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value) {
  var _mountState = mountState(value),
      prevValue = _mountState[0],
      setValue = _mountState[1];

  mountEffect(function () {
    var prevTransition = ReactCurrentBatchConfig$1.transition;
    ReactCurrentBatchConfig$1.transition = 1;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.transition = prevTransition;
    }
  }, [value]);
  return prevValue;
}

function updateDeferredValue(value) {
  var _updateState = updateState(),
      prevValue = _updateState[0],
      setValue = _updateState[1];

  updateEffect(function () {
    var prevTransition = ReactCurrentBatchConfig$1.transition;
    ReactCurrentBatchConfig$1.transition = 1;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.transition = prevTransition;
    }
  }, [value]);
  return prevValue;
}

function rerenderDeferredValue(value) {
  var _rerenderState = rerenderState(),
      prevValue = _rerenderState[0],
      setValue = _rerenderState[1];

  updateEffect(function () {
    var prevTransition = ReactCurrentBatchConfig$1.transition;
    ReactCurrentBatchConfig$1.transition = 1;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.transition = prevTransition;
    }
  }, [value]);
  return prevValue;
}

function startTransition(setPending, callback) {
  var priorityLevel = getCurrentPriorityLevel();

  {
    runWithPriority$1(priorityLevel < UserBlockingPriority$2 ? UserBlockingPriority$2 : priorityLevel, function () {
      setPending(true);
    });
    runWithPriority$1(priorityLevel > NormalPriority$1 ? NormalPriority$1 : priorityLevel, function () {
      var prevTransition = ReactCurrentBatchConfig$1.transition;
      ReactCurrentBatchConfig$1.transition = 1;

      try {
        setPending(false);
        callback();
      } finally {
        ReactCurrentBatchConfig$1.transition = prevTransition;
      }
    });
  }
}

function mountTransition() {
  var _mountState2 = mountState(false),
      isPending = _mountState2[0],
      setPending = _mountState2[1]; // The `start` method can be stored on a ref, since `setPending`
  // never changes.


  var start = startTransition.bind(null, setPending);
  mountRef(start);
  return [start, isPending];
}

function updateTransition() {
  var _updateState2 = updateState(),
      isPending = _updateState2[0];

  var startRef = updateRef();
  var start = startRef.current;
  return [start, isPending];
}

function rerenderTransition() {
  var _rerenderState2 = rerenderState(),
      isPending = _rerenderState2[0];

  var startRef = updateRef();
  var start = startRef.current;
  return [start, isPending];
}

var isUpdatingOpaqueValueInRenderPhase = false;
function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
  {
    return isUpdatingOpaqueValueInRenderPhase;
  }
}

function warnOnOpaqueIdentifierAccessInDEV(fiber) {
  {
    // TODO: Should warn in effects and callbacks, too
    var name = getComponentName(fiber.type) || 'Unknown';

    if (getIsRendering() && !didWarnAboutUseOpaqueIdentifier[name]) {
      error('The object passed back from useOpaqueIdentifier is meant to be ' + 'passed through to attributes only. Do not read the ' + 'value directly.');

      didWarnAboutUseOpaqueIdentifier[name] = true;
    }
  }
}

function mountOpaqueIdentifier() {
  var makeId =  makeClientIdInDEV.bind(null, warnOnOpaqueIdentifierAccessInDEV.bind(null, currentlyRenderingFiber$1)) ;

  if (getIsHydrating()) {
    var didUpgrade = false;
    var fiber = currentlyRenderingFiber$1;

    var readValue = function () {
      if (!didUpgrade) {
        // Only upgrade once. This works even inside the render phase because
        // the update is added to a shared queue, which outlasts the
        // in-progress render.
        didUpgrade = true;

        {
          isUpdatingOpaqueValueInRenderPhase = true;
          setId(makeId());
          isUpdatingOpaqueValueInRenderPhase = false;
          warnOnOpaqueIdentifierAccessInDEV(fiber);
        }
      }

      {
        {
          throw Error( "The object passed back from useOpaqueIdentifier is meant to be passed through to attributes only. Do not read the value directly." );
        }
      }
    };

    var id = makeOpaqueHydratingObject(readValue);
    var setId = mountState(id)[1];

    if ((currentlyRenderingFiber$1.mode & BlockingMode) === NoMode) {
      currentlyRenderingFiber$1.flags |= Update | Passive;
      pushEffect(HasEffect | Passive$1, function () {
        setId(makeId());
      }, undefined, null);
    }

    return id;
  } else {
    var _id = makeId();

    mountState(_id);
    return _id;
  }
}

function updateOpaqueIdentifier() {
  var id = updateState()[0];
  return id;
}

function rerenderOpaqueIdentifier() {
  var id = rerenderState()[0];
  return id;
}

function dispatchAction(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var eventTime = requestEventTime();
  var lane = requestUpdateLane(fiber);
  var update = {
    lane: lane,
    action: action,
    eagerReducer: null,
    eagerState: null,
    next: null
  }; // Append the update to the end of the list.

  var pending = queue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  queue.pending = update;
  var alternate = fiber.alternate;

  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -> linked list of updates. After this render pass, we'll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
  } else {
    if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher$1.current;
          ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          update.eagerReducer = lastRenderedReducer;
          update.eagerState = eagerState;

          if (objectIs(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher$1.current = prevDispatcher;
          }
        }
      }
    }

    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfNotScopedWithMatchingAct(fiber);
        warnIfNotCurrentlyActingUpdatesInDev(fiber);
      }
    }

    scheduleUpdateOnFiber(fiber, lane, eventTime);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError,
  useMutableSource: throwInvalidHookError,
  useOpaqueIdentifier: throwInvalidHookError,
  unstable_isNewReconciler: enableNewReconciler
};
var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var HooksDispatcherOnRerenderInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

{
  var warnInvalidContextAccess = function () {
    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://reactjs.org/link/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      mountHookTypesDev();
      return mountMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      mountHookTypesDev();
      return mountOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return mountMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      updateHookTypesDev();
      return mountOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return updateMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      updateHookTypesDev();
      return updateOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
  HooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return rerenderDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return rerenderTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      updateHookTypesDev();
      return updateMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      updateHookTypesDev();
      return rerenderOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
  InvalidNestedHooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher$1.current;
      ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher$1.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useDeferredValue: function (value) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderDeferredValue(value);
    },
    useTransition: function () {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderTransition();
    },
    useMutableSource: function (source, getSnapshot, subscribe) {
      currentHookNameInDev = 'useMutableSource';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateMutableSource(source, getSnapshot, subscribe);
    },
    useOpaqueIdentifier: function () {
      currentHookNameInDev = 'useOpaqueIdentifier';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderOpaqueIdentifier();
    },
    unstable_isNewReconciler: enableNewReconciler
  };
}

var now$1 = Scheduler.unstable_now;
var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {

  commitTime = now$1();
}

function startProfilerTimer(fiber) {

  profilerStartTime = now$1();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$1();
  }
}

function stopProfilerTimerIfRunning(fiber) {

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

  if (profilerStartTime >= 0) {
    var elapsedTime = now$1() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

function transferActualDuration(fiber) {
  // Transfer time spent rendering these children so we don't lose it
  // after we rerender. This is used as a helper in special cases
  // where we should count the work of multiple passes.
  var child = fiber.child;

  while (child) {
    fiber.actualDuration += child.actualDuration;
    child = child.sibling;
  }
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
}

function reconcileChildren(current, workInProgress, nextChildren, renderLanes) {
  if (current === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderLanes);
  }
}

function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderLanes); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their
  // identities match.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
}

function updateForwardRef(current, workInProgress, Component, nextProps, renderLanes) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component));
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  prepareToReadContext(workInProgress, renderLanes);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);

    if ( workInProgress.mode & StrictMode) {
      disableLogs();

      try {
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderLanes);
      } finally {
        reenableLogs();
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderLanes);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
  if (current === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateLanes, renderLanes);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(type));
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress, workInProgress.mode, renderLanes);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentName(_type));
    }
  }

  var currentChild = current.child; // This is always exactly one child

  if (!includesSomeLane(updateLanes, renderLanes)) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    }
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateLanes, renderLanes) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        var lazyComponent = outerMemoType;
        var payload = lazyComponent._payload;
        var init = lazyComponent._init;

        try {
          outerMemoType = init(payload);
        } catch (x) {
          outerMemoType = null;
        } // Inner propTypes will be validated in the function component path.


        var outerPropTypes = outerMemoType && outerMemoType.propTypes;

        if (outerPropTypes) {
          checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
          'prop', getComponentName(outerMemoType));
        }
      }
    }
  }

  if (current !== null) {
    var prevProps = current.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
     workInProgress.type === current.type )) {
      didReceiveUpdate = false;

      if (!includesSomeLane(renderLanes, updateLanes)) {
        // The pending lanes were cleared at the beginning of beginWork. We're
        // about to bail out, but there might be other lanes that weren't
        // included in the current render. Usually, the priority level of the
        // remaining updates is accumlated during the evaluation of the
        // component (i.e. when processing the update queue). But since since
        // we're bailing out early *without* evaluating the component, we need
        // to account for it here, too. Reset to the value of the current fiber.
        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
        // because a MemoComponent fiber does not have hooks or an update queue;
        // rather, it wraps around an inner component, which may or may not
        // contains hooks.
        // TODO: Move the reset at in beginWork out of the common path so that
        // this is no longer necessary.
        workInProgress.lanes = current.lanes;
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      } else if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
        // This is a special case that only exists for legacy mode.
        // See https://github.com/facebook/react/pull/19216.
        didReceiveUpdate = true;
      }
    }
  }

  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes);
}

function updateOffscreenComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  var prevState = current !== null ? current.memoizedState : null;

  if (nextProps.mode === 'hidden' || nextProps.mode === 'unstable-defer-without-hiding') {
    if ((workInProgress.mode & ConcurrentMode) === NoMode) {
      // In legacy sync mode, don't defer the subtree. Render it now.
      // TODO: Figure out what we should do in Blocking mode.
      var nextState = {
        baseLanes: NoLanes
      };
      workInProgress.memoizedState = nextState;
      pushRenderLanes(workInProgress, renderLanes);
    } else if (!includesSomeLane(renderLanes, OffscreenLane)) {
      var nextBaseLanes;

      if (prevState !== null) {
        var prevBaseLanes = prevState.baseLanes;
        nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes);
      } else {
        nextBaseLanes = renderLanes;
      } // Schedule this fiber to re-render at offscreen priority. Then bailout.


      {
        markSpawnedWork(OffscreenLane);
      }

      workInProgress.lanes = workInProgress.childLanes = laneToLanes(OffscreenLane);
      var _nextState = {
        baseLanes: nextBaseLanes
      };
      workInProgress.memoizedState = _nextState; // We're about to bail out, but we need to push this to the stack anyway
      // to avoid a push/pop misalignment.

      pushRenderLanes(workInProgress, nextBaseLanes);
      return null;
    } else {
      // Rendering at offscreen, so we can clear the base lanes.
      var _nextState2 = {
        baseLanes: NoLanes
      };
      workInProgress.memoizedState = _nextState2; // Push the lanes that were skipped when we bailed out.

      var subtreeRenderLanes = prevState !== null ? prevState.baseLanes : renderLanes;
      pushRenderLanes(workInProgress, subtreeRenderLanes);
    }
  } else {
    var _subtreeRenderLanes;

    if (prevState !== null) {
      _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes); // Since we're not hidden anymore, reset the state

      workInProgress.memoizedState = null;
    } else {
      // We weren't previously hidden, and we still aren't, so there's nothing
      // special to do. Need to push to the stack regardless, though, to avoid
      // a push/pop misalignment.
      _subtreeRenderLanes = renderLanes;
    }

    pushRenderLanes(workInProgress, _subtreeRenderLanes);
  }

  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
} // Note: These happen to have identical begin phases, for now. We shouldn't hold
// ourselves to this constraint, though. If the behavior diverges, we should
// fork the function.


var updateLegacyHiddenComponent = updateOffscreenComponent;

function updateFragment(current, workInProgress, renderLanes) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateMode(current, workInProgress, renderLanes) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateProfiler(current, workInProgress, renderLanes) {
  {
    workInProgress.flags |= Update; // Reset effect durations for the next eventual effect phase.
    // These are reset during render to allow the DevTools commit hook a chance to read them,

    var stateNode = workInProgress.stateNode;
    stateNode.effectDuration = 0;
    stateNode.passiveEffectDuration = 0;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function markRef(current, workInProgress) {
  var ref = workInProgress.ref;

  if (current === null && ref !== null || current !== null && current.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.flags |= Ref;
  }
}

function updateFunctionComponent(current, workInProgress, Component, nextProps, renderLanes) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component));
      }
    }
  }

  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  prepareToReadContext(workInProgress, renderLanes);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);

    if ( workInProgress.mode & StrictMode) {
      disableLogs();

      try {
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderLanes);
      } finally {
        reenableLogs();
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderLanes);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateClassComponent(current, workInProgress, Component, nextProps, renderLanes) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component));
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderLanes);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    if (current !== null) {
      // A class component without an instance only mounts if it suspended
      // inside a non-concurrent tree, in an inconsistent state. We want to
      // treat it like a new mount, even though an empty version of it already
      // committed. Disconnect the alternate pointers.
      current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.flags |= Placement;
    } // In the initial pass we might need to construct the instance.


    constructClassInstance(workInProgress, Component, nextProps);
    mountClassInstance(workInProgress, Component, nextProps, renderLanes);
    shouldUpdate = true;
  } else if (current === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderLanes);
  } else {
    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderLanes);
  }

  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes);

  {
    var inst = workInProgress.stateNode;

    if (shouldUpdate && inst.props !== nextProps) {
      if (!didWarnAboutReassigningProps) {
        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
      }

      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderLanes) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current, workInProgress);
  var didCaptureError = (workInProgress.flags & DidCapture) !== NoFlags;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$1.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFromError is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    {
      stopProfilerTimerIfRunning();
    }
  } else {
    {
      setIsRendering(true);
      nextChildren = instance.render();

      if ( workInProgress.mode & StrictMode) {
        disableLogs();

        try {
          instance.render();
        } finally {
          reenableLogs();
        }
      }

      setIsRendering(false);
    }
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;

  if (current !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderLanes);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current, workInProgress, renderLanes) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;

  if (!(current !== null && updateQueue !== null)) {
    {
      throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  cloneUpdateQueue(current, workInProgress);
  processUpdateQueue(workInProgress, nextProps, null, renderLanes);
  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
  // being called "element".

  var nextChildren = nextState.element;

  if (nextChildren === prevChildren) {
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
  }

  var root = workInProgress.stateNode;

  if (root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.
    {
      var mutableSourceEagerHydrationData = root.mutableSourceEagerHydrationData;

      if (mutableSourceEagerHydrationData != null) {
        for (var i = 0; i < mutableSourceEagerHydrationData.length; i += 2) {
          var mutableSource = mutableSourceEagerHydrationData[i];
          var version = mutableSourceEagerHydrationData[i + 1];
          setWorkInProgressVersion(mutableSource, version);
        }
      }
    }

    var child = mountChildFibers(workInProgress, null, nextChildren, renderLanes);
    workInProgress.child = child;
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.flags = node.flags & ~Placement | Hydrating;
      node = node.sibling;
    }
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
    resetHydrationState();
  }

  return workInProgress.child;
}

function updateHostComponent(current, workInProgress, renderLanes) {
  pushHostContext(workInProgress);

  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current !== null ? current.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also has access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.flags |= ContentReset;
  }

  markRef(current, workInProgress);
  reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  return workInProgress.child;
}

function updateHostText(current, workInProgress) {
  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, updateLanes, renderLanes) {
  if (_current !== null) {
    // A lazy component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.flags |= Placement;
  }

  var props = workInProgress.pendingProps;
  var lazyComponent = elementType;
  var payload = lazyComponent._payload;
  var init = lazyComponent._init;
  var Component = init(payload); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderLanes);
        return child;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentName(Component));
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        updateLanes, renderLanes);
        return child;
      }
  }

  var hint = '';

  {
    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
      hint = ' Did you wrap a component in React.lazy() more than once?';
    }
  } // This message intentionally doesn't mention ForwardRef or MemoComponent
  // because the fact that it's a separate type of work is an
  // implementation detail.


  {
    {
      throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
    }
  }
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderLanes) {
  if (_current !== null) {
    // An incomplete component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.flags |= Placement;
  } // Promote the fiber to a class and try rendering again.


  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderLanes);
  constructClassInstance(workInProgress, Component, nextProps);
  mountClassInstance(workInProgress, Component, nextProps, renderLanes);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderLanes) {
  if (_current !== null) {
    // An indeterminate component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.flags |= Placement;
  }

  var props = workInProgress.pendingProps;
  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderLanes);
  var value;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    setIsRendering(true);
    ReactCurrentOwner$1.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;

  {
    // Support for module components is deprecated and is removed behind a flag.
    // Whether or not it would crash later, we want to show a good message in DEV first.
    if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
      var _componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    }
  }

  if ( // Run these checks in production only if the flag is off.
  // Eventually we'll delete this branch altogether.
   typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName2 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName2]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName2, _componentName2, _componentName2);

        didWarnAboutModulePatternComponent[_componentName2] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    initializeUpdateQueue(workInProgress);
    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderLanes);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderLanes);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {

      if ( workInProgress.mode & StrictMode) {
        disableLogs();

        try {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderLanes);
        } finally {
          reenableLogs();
        }
      }
    }

    reconcileChildren(null, workInProgress, value, renderLanes);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  {
    if (Component) {
      if (Component.childContextTypes) {
        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
      }
    }

    if (workInProgress.ref !== null) {
      var info = '';
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }

      var warningKey = ownerName || workInProgress._debugID || '';
      var debugSource = workInProgress._debugSource;

      if (debugSource) {
        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
      }

      if (!didWarnAboutFunctionRefs[warningKey]) {
        didWarnAboutFunctionRefs[warningKey] = true;

        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
      }
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      var _componentName3 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
        error('%s: Function components do not support getDerivedStateFromProps.', _componentName3);

        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
      }
    }

    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
      var _componentName4 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
        error('%s: Function components do not support contextType.', _componentName4);

        didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
      }
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  retryLane: NoLane
};

function mountSuspenseOffscreenState(renderLanes) {
  return {
    baseLanes: renderLanes
  };
}

function updateSuspenseOffscreenState(prevOffscreenState, renderLanes) {
  return {
    baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes)
  };
} // TODO: Probably should inline this back


function shouldRemainOnFallback(suspenseContext, current, workInProgress, renderLanes) {
  // If we're already showing a fallback, there are cases where we need to
  // remain on that fallback regardless of whether the content has resolved.
  // For example, SuspenseList coordinates when nested content appears.
  if (current !== null) {
    var suspenseState = current.memoizedState;

    if (suspenseState === null) {
      // Currently showing content. Don't hide it, even if ForceSuspenseFallack
      // is true. More precise name might be "ForceRemainSuspenseFallback".
      // Note: This is a factoring smell. Can't remain on a fallback if there's
      // no fallback to remain on.
      return false;
    }
  } // Not currently showing content. Consult the Suspense context.


  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
}

function getRemainingWorkInPrimaryTree(current, renderLanes) {
  // TODO: Should not remove render lanes that were pinged during this render
  return removeLanes(current.childLanes, renderLanes);
}

function updateSuspenseComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.flags |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var showFallback = false;
  var didSuspend = (workInProgress.flags & DidCapture) !== NoFlags;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    showFallback = true;
    workInProgress.flags &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current === null || current.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Boundaries without fallbacks or should be avoided are not considered since
      // they cannot handle preferred fallback states.
      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext); // OK, the next part is confusing. We're about to reconcile the Suspense
  // boundary's children. This involves some custom reconcilation logic. Two
  // main reasons this is so complicated.
  //
  // First, Legacy Mode has different semantics for backwards compatibility. The
  // primary tree will commit in an inconsistent state, so when we do the
  // second pass to render the fallback, we do some exceedingly, uh, clever
  // hacks to make that not totally break. Like transferring effects and
  // deletions from hidden tree. In Concurrent Mode, it's much simpler,
  // because we bailout on the primary tree completely and leave it in its old
  // state, no effects. Same as what we do for Offscreen (except that
  // Offscreen doesn't have the first render pass).
  //
  // Second is hydration. During hydration, the Suspense fiber has a slightly
  // different layout, where the child points to a dehydrated fragment, which
  // contains the DOM rendered by the server.
  //
  // Third, even if you set all that aside, Suspense is like error boundaries in
  // that we first we try to render one tree, and if that fails, we render again
  // and switch to a different tree. Like a try/catch block. So we have to track
  // which branch we're currently rendering. Ideally we would model this using
  // a stack.

  if (current === null) {
    // Initial mount
    // If we're currently hydrating, try to hydrate this boundary.
    // But only if this has a fallback.
    if (nextProps.fallback !== undefined) {
      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
    }

    var nextPrimaryChildren = nextProps.children;
    var nextFallbackChildren = nextProps.fallback;

    if (showFallback) {
      var fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);
      var primaryChildFragment = workInProgress.child;
      primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER;
      return fallbackFragment;
    } else if (typeof nextProps.unstable_expectedLoadTime === 'number') {
      // This is a CPU-bound tree. Skip this tree and show a placeholder to
      // unblock the surrounding content. Then immediately retry after the
      // initial commit.
      var _fallbackFragment = mountSuspenseFallbackChildren(workInProgress, nextPrimaryChildren, nextFallbackChildren, renderLanes);

      var _primaryChildFragment = workInProgress.child;
      _primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes);
      workInProgress.memoizedState = SUSPENDED_MARKER; // Since nothing actually suspended, there will nothing to ping this to
      // get it started back up to attempt the next item. While in terms of
      // priority this work has the same priority as this current render, it's
      // not part of the same transition once the transition has committed. If
      // it's sync, we still want to yield so that it can be painted.
      // Conceptually, this is really the same as pinging. We can use any
      // RetryLane even if it's the one currently rendering since we're leaving
      // it behind on this node.

      workInProgress.lanes = SomeRetryLane;

      {
        markSpawnedWork(SomeRetryLane);
      }

      return _fallbackFragment;
    } else {
      return mountSuspensePrimaryChildren(workInProgress, nextPrimaryChildren, renderLanes);
    }
  } else {
    // This is an update.
    // If the current fiber has a SuspenseState, that means it's already showing
    // a fallback.
    var prevState = current.memoizedState;

    if (prevState !== null) {

      if (showFallback) {
        var _nextFallbackChildren2 = nextProps.fallback;
        var _nextPrimaryChildren2 = nextProps.children;

        var _fallbackChildFragment = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren2, _nextFallbackChildren2, renderLanes);

        var _primaryChildFragment3 = workInProgress.child;
        var prevOffscreenState = current.child.memoizedState;
        _primaryChildFragment3.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes);
        _primaryChildFragment3.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes);
        workInProgress.memoizedState = SUSPENDED_MARKER;
        return _fallbackChildFragment;
      } else {
        var _nextPrimaryChildren3 = nextProps.children;

        var _primaryChildFragment4 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren3, renderLanes);

        workInProgress.memoizedState = null;
        return _primaryChildFragment4;
      }
    } else {
      // The current tree is not already showing a fallback.
      if (showFallback) {
        // Timed out.
        var _nextFallbackChildren3 = nextProps.fallback;
        var _nextPrimaryChildren4 = nextProps.children;

        var _fallbackChildFragment2 = updateSuspenseFallbackChildren(current, workInProgress, _nextPrimaryChildren4, _nextFallbackChildren3, renderLanes);

        var _primaryChildFragment5 = workInProgress.child;
        var _prevOffscreenState = current.child.memoizedState;
        _primaryChildFragment5.memoizedState = _prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes) : updateSuspenseOffscreenState(_prevOffscreenState, renderLanes);
        _primaryChildFragment5.childLanes = getRemainingWorkInPrimaryTree(current, renderLanes); // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        return _fallbackChildFragment2;
      } else {
        // Still haven't timed out. Continue rendering the children, like we
        // normally do.
        var _nextPrimaryChildren5 = nextProps.children;

        var _primaryChildFragment6 = updateSuspensePrimaryChildren(current, workInProgress, _nextPrimaryChildren5, renderLanes);

        workInProgress.memoizedState = null;
        return _primaryChildFragment6;
      }
    }
  }
}

function mountSuspensePrimaryChildren(workInProgress, primaryChildren, renderLanes) {
  var mode = workInProgress.mode;
  var primaryChildProps = {
    mode: 'visible',
    children: primaryChildren
  };
  var primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, renderLanes, null);
  primaryChildFragment.return = workInProgress;
  workInProgress.child = primaryChildFragment;
  return primaryChildFragment;
}

function mountSuspenseFallbackChildren(workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var mode = workInProgress.mode;
  var progressedPrimaryFragment = workInProgress.child;
  var primaryChildProps = {
    mode: 'hidden',
    children: primaryChildren
  };
  var primaryChildFragment;
  var fallbackChildFragment;

  if ((mode & BlockingMode) === NoMode && progressedPrimaryFragment !== null) {
    // In legacy mode, we commit the primary tree as if it successfully
    // completed, even though it's in an inconsistent state.
    primaryChildFragment = progressedPrimaryFragment;
    primaryChildFragment.childLanes = NoLanes;
    primaryChildFragment.pendingProps = primaryChildProps;

    if ( workInProgress.mode & ProfileMode) {
      // Reset the durations from the first pass so they aren't included in the
      // final amounts. This seems counterintuitive, since we're intentionally
      // not measuring part of the render phase, but this makes it match what we
      // do in Concurrent Mode.
      primaryChildFragment.actualDuration = 0;
      primaryChildFragment.actualStartTime = -1;
      primaryChildFragment.selfBaseDuration = 0;
      primaryChildFragment.treeBaseDuration = 0;
    }

    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
  } else {
    primaryChildFragment = createFiberFromOffscreen(primaryChildProps, mode, NoLanes, null);
    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null);
  }

  primaryChildFragment.return = workInProgress;
  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;
  return fallbackChildFragment;
}

function createWorkInProgressOffscreenFiber(current, offscreenProps) {
  // The props argument to `createWorkInProgress` is `any` typed, so we use this
  // wrapper function to constrain it.
  return createWorkInProgress(current, offscreenProps);
}

function updateSuspensePrimaryChildren(current, workInProgress, primaryChildren, renderLanes) {
  var currentPrimaryChildFragment = current.child;
  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
  var primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
    mode: 'visible',
    children: primaryChildren
  });

  if ((workInProgress.mode & BlockingMode) === NoMode) {
    primaryChildFragment.lanes = renderLanes;
  }

  primaryChildFragment.return = workInProgress;
  primaryChildFragment.sibling = null;

  if (currentFallbackChildFragment !== null) {
    // Delete the fallback child fragment
    currentFallbackChildFragment.nextEffect = null;
    currentFallbackChildFragment.flags = Deletion;
    workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChildFragment;
  }

  workInProgress.child = primaryChildFragment;
  return primaryChildFragment;
}

function updateSuspenseFallbackChildren(current, workInProgress, primaryChildren, fallbackChildren, renderLanes) {
  var mode = workInProgress.mode;
  var currentPrimaryChildFragment = current.child;
  var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
  var primaryChildProps = {
    mode: 'hidden',
    children: primaryChildren
  };
  var primaryChildFragment;

  if ( // In legacy mode, we commit the primary tree as if it successfully
  // completed, even though it's in an inconsistent state.
  (mode & BlockingMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
  // already cloned. In legacy mode, the only case where this isn't true is
  // when DevTools forces us to display a fallback; we skip the first render
  // pass entirely and go straight to rendering the fallback. (In Concurrent
  // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
  // only codepath.)
  workInProgress.child !== currentPrimaryChildFragment) {
    var progressedPrimaryFragment = workInProgress.child;
    primaryChildFragment = progressedPrimaryFragment;
    primaryChildFragment.childLanes = NoLanes;
    primaryChildFragment.pendingProps = primaryChildProps;

    if ( workInProgress.mode & ProfileMode) {
      // Reset the durations from the first pass so they aren't included in the
      // final amounts. This seems counterintuitive, since we're intentionally
      // not measuring part of the render phase, but this makes it match what we
      // do in Concurrent Mode.
      primaryChildFragment.actualDuration = 0;
      primaryChildFragment.actualStartTime = -1;
      primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
      primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
    } // The fallback fiber was added as a deletion effect during the first pass.
    // However, since we're going to remain on the fallback, we no longer want
    // to delete it. So we need to remove it from the list. Deletions are stored
    // on the same list as effects. We want to keep the effects from the primary
    // tree. So we copy the primary child fragment's effect list, which does not
    // include the fallback deletion effect.


    var progressedLastEffect = primaryChildFragment.lastEffect;

    if (progressedLastEffect !== null) {
      workInProgress.firstEffect = primaryChildFragment.firstEffect;
      workInProgress.lastEffect = progressedLastEffect;
      progressedLastEffect.nextEffect = null;
    } else {
      // TODO: Reset this somewhere else? Lol legacy mode is so weird.
      workInProgress.firstEffect = workInProgress.lastEffect = null;
    }
  } else {
    primaryChildFragment = createWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
  }

  var fallbackChildFragment;

  if (currentFallbackChildFragment !== null) {
    fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
  } else {
    fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes, null); // Needs a placement effect because the parent (the Suspense boundary) already
    // mounted but this is a new fiber.

    fallbackChildFragment.flags |= Placement;
  }

  fallbackChildFragment.return = workInProgress;
  primaryChildFragment.return = workInProgress;
  primaryChildFragment.sibling = fallbackChildFragment;
  workInProgress.child = primaryChildFragment;
  return fallbackChildFragment;
}

function scheduleWorkOnFiber(fiber, renderLanes) {
  fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
  var alternate = fiber.alternate;

  if (alternate !== null) {
    alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
  }

  scheduleWorkOnParentPath(fiber.return, renderLanes);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderLanes) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleWorkOnFiber(node, renderLanes);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleWorkOnFiber(node, renderLanes);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          case 'forward':
          case 'backward':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          default:
            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

            break;
        }
      } else {
        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;

        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;

        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isArray = Array.isArray(childSlot);
    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

    if (isArray || isIterable) {
      var type = isArray ? 'array' : 'iterable';

      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailMode: tailMode,
      lastEffect: lastEffectBeforeRendering
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.renderingStartTime = 0;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailMode = tailMode;
    renderState.lastEffect = lastEffectBeforeRendering;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current, workInProgress, renderLanes) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.flags |= DidCapture;
  } else {
    var didSuspendBefore = current !== null && (current.flags & DidCapture) !== NoFlags;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderLanes);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & BlockingMode) === NoMode) {
    // In legacy mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode, workInProgress.lastEffect);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode, workInProgress.lastEffect);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined, workInProgress.lastEffect);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current, workInProgress, renderLanes) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderLanes);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderLanes);
  }

  return workInProgress.child;
}

var hasWarnedAboutUsingNoValuePropOnContextProvider = false;

function updateContextProvider(current, workInProgress, renderLanes) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    if (!('value' in newProps)) {
      if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
        hasWarnedAboutUsingNoValuePropOnContextProvider = true;

        error('The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?');
      }
    }

    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider');
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);

    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderLanes);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current, workInProgress, renderLanes) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;

          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    if (typeof render !== 'function') {
      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
    }
  }

  prepareToReadContext(workInProgress, renderLanes);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren;

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    newChildren = render(newValue);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.flags |= PerformedWork;
  reconcileChildren(current, workInProgress, newChildren, renderLanes);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes) {
  if (current !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current.dependencies;
  }

  {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning();
  }

  markSkippedUpdateLanes(workInProgress.lanes); // Check if the children have any pending work.

  if (!includesSomeLane(renderLanes, workInProgress.childLanes)) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current, workInProgress);
    return workInProgress.child;
  }
}

function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = current;
      returnFiber.lastEffect = current;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = current;
    }

    current.nextEffect = null;
    current.flags = Deletion;
    newWorkInProgress.flags |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function beginWork(current, workInProgress, renderLanes) {
  var updateLanes = workInProgress.lanes;

  {
    if (workInProgress._debugNeedsRemount && current !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.lanes));
    }
  }

  if (current !== null) {
    var oldProps = current.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
     workInProgress.type !== current.type )) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else if (!includesSomeLane(renderLanes, updateLanes)) {
      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
      // the begin phase. There's still some bookkeeping we that needs to be done
      // in this optimized path, mostly pushing stuff onto the stack.

      switch (workInProgress.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress);
          resetHydrationState();
          break;

        case HostComponent:
          pushHostContext(workInProgress);
          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress);
            }

            break;
          }

        case HostPortal:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case ContextProvider:
          {
            var newValue = workInProgress.memoizedProps.value;
            pushProvider(workInProgress, newValue);
            break;
          }

        case Profiler:
          {
            // Profiler should only call onRender when one of its descendants actually rendered.
            var hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

            if (hasChildWork) {
              workInProgress.flags |= Update;
            } // Reset effect durations for the next eventual effect phase.
            // These are reset during render to allow the DevTools commit hook a chance to read them,


            var stateNode = workInProgress.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }

          break;

        case SuspenseComponent:
          {
            var state = workInProgress.memoizedState;

            if (state !== null) {
              // whether to retry the primary children, or to skip over it and
              // go straight to the fallback. Check the priority of the primary
              // child fragment.


              var primaryChildFragment = workInProgress.child;
              var primaryChildLanes = primaryChildFragment.childLanes;

              if (includesSomeLane(renderLanes, primaryChildLanes)) {
                // The primary children have pending work. Use the normal path
                // to attempt to render the primary children again.
                return updateSuspenseComponent(current, workInProgress, renderLanes);
              } else {
                // The primary child fragment does not have pending work marked
                // on it
                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                // priority. Bailout.

                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);

                if (child !== null) {
                  // The fallback children have pending work. Skip over the
                  // primary children and work on the fallback.
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }

            break;
          }

        case SuspenseListComponent:
          {
            var didSuspendBefore = (current.flags & DidCapture) !== NoFlags;

            var _hasChildWork = includesSomeLane(renderLanes, workInProgress.childLanes);

            if (didSuspendBefore) {
              if (_hasChildWork) {
                // If something was in fallback state last time, and we have all the
                // same children then we're still in progressive loading state.
                // Something might get unblocked by state updates or retries in the
                // tree which will affect the tail. So we need to use the normal
                // path to compute the correct tail.
                return updateSuspenseListComponent(current, workInProgress, renderLanes);
              } // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.


              workInProgress.flags |= DidCapture;
            } // If nothing suspended before and we're rendering the same children,
            // then the tail doesn't matter. Anything new that suspends will work
            // in the "together" mode, so we can continue from the state we had.


            var renderState = workInProgress.memoizedState;

            if (renderState !== null) {
              // Reset to the "together" mode in case we've started a different
              // update in the past but didn't complete it.
              renderState.rendering = null;
              renderState.tail = null;
              renderState.lastEffect = null;
            }

            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

            if (_hasChildWork) {
              break;
            } else {
              // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.
              return null;
            }
          }

        case OffscreenComponent:
        case LegacyHiddenComponent:
          {
            // Need to check if the tree still needs to be deferred. This is
            // almost identical to the logic used in the normal update path,
            // so we'll just enter that. The only difference is we'll bail out
            // at the next level instead of this one, because the child props
            // have not changed. Which is fine.
            // TODO: Probably should refactor `beginWork` to split the bailout
            // path from the normal path. I'm tempted to do a labeled break here
            // but I won't :)
            workInProgress.lanes = NoLanes;
            return updateOffscreenComponent(current, workInProgress, renderLanes);
          }
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderLanes);
    } else {
      if ((current.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
        // This is a special case that only exists for legacy mode.
        // See https://github.com/facebook/react/pull/19216.
        didReceiveUpdate = true;
      } else {
        // An update was scheduled on this fiber, but there are no new props
        // nor legacy context. Set this to false. If an update queue or context
        // consumer produces a changed value, it will set this to true. Otherwise,
        // the component will assume the children have not changed and bail out.
        didReceiveUpdate = false;
      }
    }
  } else {
    didReceiveUpdate = false;
  } // Before entering the begin phase, clear pending update priority.
  // TODO: This assumes that we're about to evaluate the component and process
  // the update queue. However, there's an exception: SimpleMemoComponent
  // sometimes bails out later in the begin phase. This indicates that we should
  // move this assignment out of the common path and into each branch.


  workInProgress.lanes = NoLanes;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderLanes);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current, workInProgress, elementType, updateLanes, renderLanes);
      }

    case FunctionComponent:
      {
        var _Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderLanes);
      }

    case ClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderLanes);
      }

    case HostRoot:
      return updateHostRoot(current, workInProgress, renderLanes);

    case HostComponent:
      return updateHostComponent(current, workInProgress, renderLanes);

    case HostText:
      return updateHostText(current, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current, workInProgress, renderLanes);

    case HostPortal:
      return updatePortalComponent(current, workInProgress, renderLanes);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderLanes);
      }

    case Fragment:
      return updateFragment(current, workInProgress, renderLanes);

    case Mode:
      return updateMode(current, workInProgress, renderLanes);

    case Profiler:
      return updateProfiler(current, workInProgress, renderLanes);

    case ContextProvider:
      return updateContextProvider(current, workInProgress, renderLanes);

    case ContextConsumer:
      return updateContextConsumer(current, workInProgress, renderLanes);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentName(_type2));
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateLanes, renderLanes);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateLanes, renderLanes);
      }

    case IncompleteClassComponent:
      {
        var _Component3 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderLanes);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current, workInProgress, renderLanes);
      }

    case FundamentalComponent:
      {

        break;
      }

    case ScopeComponent:
      {

        break;
      }

    case Block:
      {

        break;
      }

    case OffscreenComponent:
      {
        return updateOffscreenComponent(current, workInProgress, renderLanes);
      }

    case LegacyHiddenComponent:
      {
        return updateLegacyHiddenComponent(current, workInProgress, renderLanes);
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.flags |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.flags |= Ref;
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

{
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  if (getIsHydrating()) {
    // If we're hydrating, we should consume as many items as we can
    // so we don't leave any behind.
    return;
  }

  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function completeWork(current, workInProgress, renderLanes) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
    case LazyComponent:
    case SimpleMemoComponent:
    case FunctionComponent:
    case ForwardRef:
    case Fragment:
    case Mode:
    case Profiler:
    case ContextConsumer:
    case MemoComponent:
      return null;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        resetWorkInProgressVersions();
        var fiberRoot = workInProgress.stateNode;

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          } else if (!fiberRoot.hydrate) {
            // Schedule an effect to clear this container at the start of the next commit.
            // This handles the case of React rendering into a container with previous children.
            // It's also safe to do for updates too, because current.child would only be null
            // if the previous render was null (so the the container would already be empty).
            workInProgress.flags |= Snapshot;
          }
        }

        updateHostContainer(workInProgress);
        return null;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.


            return null;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on whether we want to add them top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node need to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false);
            workInProgress.stateNode = instance; // Certain renderers require commit-time effects for initial mount.
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.

            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        return null;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState;

        if ((workInProgress.flags & DidCapture) !== NoFlags) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.lanes = renderLanes; // Do not reset the effect list.

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          }

          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = false;

        if (current === null) {
          if (workInProgress.memoizedProps.fallback !== undefined) {
            popHydrationState(workInProgress);
          }
        } else {
          var prevState = current.memoizedState;
          prevDidTimeout = prevState !== null;
        }

        if (nextDidTimeout && !prevDidTimeout) {
          // If this subtreee is running in blocking mode we can suspend,
          // otherwise we won't suspend.
          // TODO: This will still suspend a synchronous tree if anything
          // in the concurrent tree already suspended during this render.
          // This is a known bug.
          if ((workInProgress.mode & BlockingMode) !== NoMode) {
            // TODO: Move this back to throwException because this is too late
            // if this is a large tree which is common for initial loads. We
            // don't know if we should restart a render or not until we get
            // this marker, and this is too late.
            // If this render already had a ping or lower pri updates,
            // and this is the first time we know we're going to suspend we
            // should be able to immediately restart from within throwException.
            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
              // If this was in an invisible tree or a new render, then showing
              // this boundary is ok.
              renderDidSuspend();
            } else {
              // Otherwise, we're going to have to hide content so we should
              // suspend for longer if possible.
              renderDidSuspendDelayIfPossible();
            }
          }
        }

        {
          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
          if (nextDidTimeout || prevDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the promise. This flag is also used to hide the
            // primary children. In mutation mode, we also need the flag to
            // *unhide* children that were previously hidden, so check if this
            // is currently timed out, too.
            workInProgress.flags |= Update;
          }
        }

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);

      if (current === null) {
        preparePortalMount(workInProgress.stateNode.containerInfo);
      }

      return null;

    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      return null;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode.
          // We don't do anything in this mode.
          return null;
        }

        var didSuspendAlready = (workInProgress.flags & DidCapture) !== NoFlags;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.flags & DidCapture) === NoFlags);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.flags |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thennables. Instead, we'll transfer its thennables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThennables = suspended.updateQueue;

                  if (newThennables !== null) {
                    workInProgress.updateQueue = newThennables;
                    workInProgress.flags |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect list before doing the second pass since that's now invalid.


                  if (renderState.lastEffect === null) {
                    workInProgress.firstEffect = null;
                  }

                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                  resetChildFibers(workInProgress, renderLanes); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }

            if (renderState.tail !== null && now() > getRenderTargetTime()) {
              // We have already passed our CPU deadline but we still have rows
              // left in the tail. We'll just give up further attempts to render
              // the main content and only render fallbacks.
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. While in terms
              // of priority this work has the same priority as this current render,
              // it's not part of the same transition once the transition has
              // committed. If it's sync, we still want to yield so that it can be
              // painted. Conceptually, this is really the same as pinging.
              // We can use any RetryLane even if it's the one currently rendering
              // since we're leaving it behind on this node.

              workInProgress.lanes = SomeRetryLane;

              {
                markSpawnedWork(SomeRetryLane);
              }
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThennables = _suspended.updateQueue;

              if (_newThennables !== null) {
                workInProgress.updateQueue = _newThennables;
                workInProgress.flags |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate && !getIsHydrating() // We don't cut it if we're hydrating.
              ) {
                  // We need to delete the row we just rendered.
                  // Reset the effect list to what it was before we rendered this
                  // child. The nested children have already appended themselves.
                  var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                  if (lastEffect !== null) {
                    lastEffect.nextEffect = null;
                  } // We're done.


                  return null;
                }
            } else if ( // The time it took to render last row is greater than the remaining
            // time we have to render. So rendering one more row would likely
            // exceed it.
            now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes !== OffscreenLane) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.flags |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. While in terms
              // of priority this work has the same priority as this current render,
              // it's not part of the same transition once the transition has
              // committed. If it's sync, we still want to yield so that it can be
              // painted. Conceptually, this is really the same as pinging.
              // We can use any RetryLane even if it's the one currently rendering
              // since we're leaving it behind on this node.

              workInProgress.lanes = SomeRetryLane;

              {
                markSpawnedWork(SomeRetryLane);
              }
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          // Pop a row.
          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.lastEffect = workInProgress.lastEffect;
          renderState.renderingStartTime = now();
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

          return next;
        }

        return null;
      }

    case FundamentalComponent:
      {

        break;
      }

    case ScopeComponent:
      {

        break;
      }

    case Block:

      break;

    case OffscreenComponent:
    case LegacyHiddenComponent:
      {
        popRenderLanes(workInProgress);

        if (current !== null) {
          var _nextState = workInProgress.memoizedState;
          var _prevState = current.memoizedState;
          var prevIsHidden = _prevState !== null;
          var nextIsHidden = _nextState !== null;

          if (prevIsHidden !== nextIsHidden && newProps.mode !== 'unstable-defer-without-hiding') {
            workInProgress.flags |= Update;
          }
        }

        return null;
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function unwindWork(workInProgress, renderLanes) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var flags = workInProgress.flags;

        if (flags & ShouldCapture) {
          workInProgress.flags = flags & ~ShouldCapture | DidCapture;

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          }

          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        resetWorkInProgressVersions();
        var _flags = workInProgress.flags;

        if (!((_flags & DidCapture) === NoFlags)) {
          {
            throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
          }
        }

        workInProgress.flags = _flags & ~ShouldCapture | DidCapture;
        return workInProgress;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);

        var _flags2 = workInProgress.flags;

        if (_flags2 & ShouldCapture) {
          workInProgress.flags = _flags2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          if ( (workInProgress.mode & ProfileMode) !== NoMode) {
            transferActualDuration(workInProgress);
          }

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      popProvider(workInProgress);
      return null;

    case OffscreenComponent:
    case LegacyHiddenComponent:
      popRenderLanes(workInProgress);
      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        resetWorkInProgressVersions();
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      popProvider(interruptedWork);
      break;

    case OffscreenComponent:
    case LegacyHiddenComponent:
      popRenderLanes(interruptedWork);
      break;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

// This module is forked in different environments.
// By default, return `true` to log errors to the console.
// Forks can return `false` if this isn't desirable.
function showErrorDialog(boundary, errorInfo) {
  return true;
}

function logCapturedError(boundary, errorInfo) {
  try {
    var logError = showErrorDialog(boundary, errorInfo); // Allow injected showErrorDialog() to prevent default console.error logging.
    // This enables renderers like ReactNative to better manage redbox behavior.

    if (logError === false) {
      return;
    }

    var error = errorInfo.value;

    if (true) {
      var source = errorInfo.source;
      var stack = errorInfo.stack;
      var componentStack = stack !== null ? stack : ''; // Browsers support silencing uncaught errors by calling
      // `preventDefault()` in window `error` handler.
      // We record this information as an expando on the error.

      if (error != null && error._suppressLogging) {
        if (boundary.tag === ClassComponent) {
          // The error is recoverable and was silenced.
          // Ignore it and don't print the stack addendum.
          // This is handy for testing error boundaries without noise.
          return;
        } // The error is fatal. Since the silencing might have
        // been accidental, we'll surface it anyway.
        // However, the browser would have silenced the original error
        // so we'll print it first, and then print the stack addendum.


        console['error'](error); // Don't transform to our wrapper
        // For a more detailed description of this block, see:
        // https://github.com/facebook/react/pull/13384
      }

      var componentName = source ? getComponentName(source.type) : null;
      var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
      var errorBoundaryMessage;
      var errorBoundaryName = getComponentName(boundary.type);

      if (errorBoundaryName) {
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      } else {
        errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://reactjs.org/link/error-boundaries to learn more about error boundaries.';
      }

      var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
      // We don't include the original error message and JS stack because the browser
      // has already printed it. Even if the application swallows the error, it is still
      // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

      console['error'](combinedMessage); // Don't transform to our wrapper
    } else {}
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, lane) {
  var update = createUpdate(NoTimestamp, lane); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logCapturedError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, lane) {
  var update = createUpdate(NoTimestamp, lane);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error$1 = errorInfo.value;

    update.payload = function () {
      logCapturedError(fiber, errorInfo);
      return getDerivedStateFromError(error$1);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

        logCapturedError(fiber, errorInfo);
      }

      var error$1 = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error$1, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          if (!includesSomeLane(fiber.lanes, SyncLane)) {
            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
          }
        }
      }
    };
  } else {
    update.callback = function () {
      markFailedErrorBoundaryForHotReloading(fiber);
    };
  }

  return update;
}

function attachPingListener(root, wakeable, lanes) {
  // Attach a listener to the promise to "ping" the root and retry. But only if
  // one does not already exist for the lanes we're currently rendering (which
  // acts like a "thread ID" here).
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap$1();
    threadIDs = new Set();
    pingCache.set(wakeable, threadIDs);
  } else {
    threadIDs = pingCache.get(wakeable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(wakeable, threadIDs);
    }
  }

  if (!threadIDs.has(lanes)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(lanes);
    var ping = pingSuspendedRoot.bind(null, root, wakeable, lanes);
    wakeable.then(ping, ping);
  }
}

function throwException(root, returnFiber, sourceFiber, value, rootRenderLanes) {
  // The source fiber did not complete.
  sourceFiber.flags |= Incomplete; // Its effect list is no longer valid.

  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a wakeable.
    var wakeable = value;

    if ((sourceFiber.mode & BlockingMode) === NoMode) {
      // Reset the memoizedState to what it was before we attempted
      // to render it.
      var currentSource = sourceFiber.alternate;

      if (currentSource) {
        sourceFiber.updateQueue = currentSource.updateQueue;
        sourceFiber.memoizedState = currentSource.memoizedState;
        sourceFiber.lanes = currentSource.lanes;
      } else {
        sourceFiber.updateQueue = null;
        sourceFiber.memoizedState = null;
      }
    }

    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

    var _workInProgress = returnFiber;

    do {
      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
        // Found the nearest boundary.
        // Stash the promise on the boundary fiber. If the boundary times out, we'll
        // attach another listener to flip the boundary back to its normal state.
        var wakeables = _workInProgress.updateQueue;

        if (wakeables === null) {
          var updateQueue = new Set();
          updateQueue.add(wakeable);
          _workInProgress.updateQueue = updateQueue;
        } else {
          wakeables.add(wakeable);
        } // If the boundary is outside of blocking mode, we should *not*
        // suspend the commit. Pretend as if the suspended component rendered
        // null and keep rendering. In the commit phase, we'll schedule a
        // subsequent synchronous update to re-render the Suspense.
        //
        // Note: It doesn't matter whether the component that suspended was
        // inside a blocking mode tree. If the Suspense is outside of it, we
        // should *not* suspend the commit.


        if ((_workInProgress.mode & BlockingMode) === NoMode) {
          _workInProgress.flags |= DidCapture;
          sourceFiber.flags |= ForceUpdateForLegacySuspense; // We're going to commit this fiber even though it didn't complete.
          // But we shouldn't call any lifecycle methods or callbacks. Remove
          // all lifecycle effect tags.

          sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);

          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;

            if (currentSourceFiber === null) {
              // This is a new mount. Change the tag so it's not mistaken for a
              // completed class component. For example, we should not call
              // componentWillUnmount if it is deleted.
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              // When we try rendering again, we should not reuse the current fiber,
              // since it's known to be in an inconsistent state. Use a force update to
              // prevent a bail out.
              var update = createUpdate(NoTimestamp, SyncLane);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update);
            }
          } // The source fiber did not complete. Mark it with Sync priority to
          // indicate that it still has pending work.


          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane); // Exit without suspending.

          return;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. Transitions apply
        // to this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.


        attachPingListener(root, wakeable, rootRenderLanes);
        _workInProgress.flags |= ShouldCapture;
        _workInProgress.lanes = rootRenderLanes;
        return;
      } // This boundary already captured during this render. Continue to the next
      // boundary.


      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
    // TODO: Use invariant so the message is stripped in prod?


    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.');
  } // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.


  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.flags |= ShouldCapture;
          var lane = pickArbitraryLane(rootRenderLanes);
          workInProgress.lanes = mergeLanes(workInProgress.lanes, lane);

          var _update = createRootErrorUpdate(workInProgress, _errorInfo, lane);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.flags |= ShouldCapture;

          var _lane = pickArbitraryLane(rootRenderLanes);

          workInProgress.lanes = mergeLanes(workInProgress.lanes, _lane); // Schedule the error boundary to re-render using updated state

          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, _lane);

          enqueueCapturedUpdate(workInProgress, _update2);
          return;
        }

        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;

var callComponentWillUnmountWithTimer = function (current, instance) {
  instance.props = current.memoizedProps;
  instance.state = current.memoizedState;

  {
    instance.componentWillUnmount();
  }
}; // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current, unmountError);
    }
  }
}

function safelyDetachRef(current) {
  var ref = current.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);

        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current, destroy) {
  {
    invokeGuardedCallback(null, destroy, null);

    if (hasCaughtError()) {
      var error = clearCaughtError();
      captureCommitPhaseError(current, error);
    }
  }
}

function commitBeforeMutationLifeCycles(current, finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        return;
      }

    case ClassComponent:
      {
        if (finishedWork.flags & Snapshot) {
          if (current !== null) {
            var prevProps = current.memoizedProps;
            var prevState = current.memoizedState;
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);

                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
          }
        }

        return;
      }

    case HostRoot:
      {
        {
          if (finishedWork.flags & Snapshot) {
            var root = finishedWork.stateNode;
            clearContainer(root.containerInfo);
          }
        }

        return;
      }

    case HostComponent:
    case HostText:
    case HostPortal:
    case IncompleteClassComponent:
      // Nothing to do for these component types
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitHookEffectListUnmount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          destroy();
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitHookEffectListMount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Mount
        var create = effect.create;
        effect.destroy = create();

        {
          var destroy = effect.destroy;

          if (destroy !== undefined && typeof destroy !== 'function') {
            var addendum = void 0;

            if (destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + destroy;
            }

            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s', addendum);
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function schedulePassiveEffects(finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      var _effect = effect,
          next = _effect.next,
          tag = _effect.tag;

      if ((tag & Passive$1) !== NoFlags$1 && (tag & HasEffect) !== NoFlags$1) {
        enqueuePendingPassiveHookEffectUnmount(finishedWork, effect);
        enqueuePendingPassiveHookEffectMount(finishedWork, effect);
      }

      effect = next;
    } while (effect !== firstEffect);
  }
}

function commitLifeCycles(finishedRoot, current, finishedWork, committedLanes) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        // At this point layout effects have already been destroyed (during mutation phase).
        // This is done to prevent sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        {
          commitHookEffectListMount(Layout | HasEffect, finishedWork);
        }

        schedulePassiveEffects(finishedWork);
        return;
      }

    case ClassComponent:
      {
        var instance = finishedWork.stateNode;

        if (finishedWork.flags & Update) {
          if (current === null) {
            // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.
            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            {
              instance.componentDidMount();
            }
          } else {
            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
            var prevState = current.memoizedState; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            {
              instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            }
          }
        } // TODO: I think this is now always non-null by the time it reaches the
        // commit phase. Consider removing the type check.


        var updateQueue = finishedWork.updateQueue;

        if (updateQueue !== null) {
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              if (instance.props !== finishedWork.memoizedProps) {
                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }

              if (instance.state !== finishedWork.memoizedState) {
                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.state`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }
            }
          } // We could update instance props and state here,
          // but instead we rely on them being set during last render.
          // TODO: revisit this when we implement resuming.


          commitUpdateQueue(finishedWork, updateQueue, instance);
        }

        return;
      }

    case HostRoot:
      {
        // TODO: I think this is now always non-null by the time it reaches the
        // commit phase. Consider removing the type check.
        var _updateQueue = finishedWork.updateQueue;

        if (_updateQueue !== null) {
          var _instance = null;

          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;

              case ClassComponent:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }

          commitUpdateQueue(finishedWork, _updateQueue, _instance);
        }

        return;
      }

    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.

        if (current === null && finishedWork.flags & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props);
        }

        return;
      }

    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }

    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }

    case Profiler:
      {
        {
          var _finishedWork$memoize2 = finishedWork.memoizedProps,
              onCommit = _finishedWork$memoize2.onCommit,
              onRender = _finishedWork$memoize2.onRender;
          var effectDuration = finishedWork.stateNode.effectDuration;
          var commitTime = getCommitTime();

          if (typeof onRender === 'function') {
            {
              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime, finishedRoot.memoizedInteractions);
            }
          }
        }

        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        return;
      }

    case SuspenseListComponent:
    case IncompleteClassComponent:
    case FundamentalComponent:
    case ScopeComponent:
    case OffscreenComponent:
    case LegacyHiddenComponent:
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (isHidden) {
          hideInstance(instance);
        } else {
          unhideInstance(node.stateNode, node.memoizedProps);
        }
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (isHidden) {
          hideTextInstance(_instance3);
        } else {
          unhideTextInstance(_instance3, node.memoizedProps);
        }
      } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag

    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().', getComponentName(finishedWork.type));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current) {
  var currentRef = current.ref;

  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
} // User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay


function commitUnmount(finishedRoot, current, renderPriorityLevel) {
  onCommitUnmount(current);

  switch (current.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        var updateQueue = current.updateQueue;

        if (updateQueue !== null) {
          var lastEffect = updateQueue.lastEffect;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;

            do {
              var _effect2 = effect,
                  destroy = _effect2.destroy,
                  tag = _effect2.tag;

              if (destroy !== undefined) {
                if ((tag & Passive$1) !== NoFlags$1) {
                  enqueuePendingPassiveHookEffectUnmount(current, effect);
                } else {
                  {
                    safelyCallDestroy(current, destroy);
                  }
                }
              }

              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }

        return;
      }

    case ClassComponent:
      {
        safelyDetachRef(current);
        var instance = current.stateNode;

        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current, instance);
        }

        return;
      }

    case HostComponent:
      {
        safelyDetachRef(current);
        return;
      }

    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        {
          unmountHostComponents(finishedRoot, current);
        }

        return;
      }

    case FundamentalComponent:
      {

        return;
      }

    case DehydratedFragment:
      {

        return;
      }

    case ScopeComponent:
      {

        return;
      }
  }
}

function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  // we do an inner loop while we're still inside the host node.
  var node = root;

  while (true) {
    commitUnmount(finishedRoot, node); // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.

    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
     node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === root) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiberMutation(fiber) {
  // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.
  // Note: we cannot null out sibling here, otherwise it can cause issues
  // with findDOMNode and how it requires the sibling field to carry out
  // traversal in a later effect. See PR #16820. We now clear the sibling
  // field after effects, see: detachFiberAfterEffects.
  //
  // Don't disconnect stateNode now; it will be detached in detachFiberAfterEffects.
  // It may be required if the current component is an error boundary,
  // and one of its descendants throws while unmounting a passive effect.
  fiber.alternate = null;
  fiber.child = null;
  fiber.dependencies = null;
  fiber.firstEffect = null;
  fiber.lastEffect = null;
  fiber.memoizedProps = null;
  fiber.memoizedState = null;
  fiber.pendingProps = null;
  fiber.return = null;
  fiber.updateQueue = null;

  {
    fiber._debugOwner = null;
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  {
    {
      throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.flags & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.flags & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  var parent;
  var isContainer;
  var parentStateNode = parentFiber.stateNode;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentStateNode;
      isContainer = false;
      break;

    case HostRoot:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case HostPortal:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case FundamentalComponent:

    // eslint-disable-next-line-no-fallthrough

    default:
      {
        {
          throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
        }
      }

  }

  if (parentFiber.flags & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent); // Clear ContentReset from the effect tag

    parentFiber.flags &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
  // children to find all the terminal nodes.

  if (isContainer) {
    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
  } else {
    insertOrAppendPlacementNode(finishedWork, before, parent);
  }
}

function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertInContainerBefore(parent, stateNode, before);
    } else {
      appendChildToContainer(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function insertOrAppendPlacementNode(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertBefore(parent, stateNode, before);
    } else {
      appendChild(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNode(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNode(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
  // We only have the top Fiber that was deleted but we need to recurse down its
  // children to find all the terminal nodes.
  var node = current; // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.

  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

  var currentParent;
  var currentParentIsContainer;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;

      findParent: while (true) {
        if (!(parent !== null)) {
          {
            throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var parentStateNode = parent.stateNode;

        switch (parent.tag) {
          case HostComponent:
            currentParent = parentStateNode;
            currentParentIsContainer = false;
            break findParent;

          case HostRoot:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case HostPortal:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

        }

        parent = parent.return;
      }

      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(finishedRoot, node); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      } // Don't visit children because we already visited them.

    } else if (node.tag === HostPortal) {
      if (node.child !== null) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        currentParentIsContainer = true; // Visit children because portals might contain host components.

        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(finishedRoot, node); // Visit children because we may find more host components below.

      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }

    if (node === current) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === current) {
        return;
      }

      node = node.return;

      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(finishedRoot, current, renderPriorityLevel) {
  {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(finishedRoot, current);
  }

  var alternate = current.alternate;
  detachFiberMutation(current);

  if (alternate !== null) {
    detachFiberMutation(alternate);
  }
}

function commitWork(current, finishedWork) {

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        // Layout effects are destroyed during the mutation phase so that all
        // destroy functions for all fibers are called before any create functions.
        // This prevents sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        {
          commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
        }

        return;
      }

    case ClassComponent:
      {
        return;
      }

    case HostComponent:
      {
        var instance = finishedWork.stateNode;

        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.

          var oldProps = current !== null ? current.memoizedProps : newProps;
          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;

          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps);
          }
        }

        return;
      }

    case HostText:
      {
        if (!(finishedWork.stateNode !== null)) {
          {
            throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.

        var oldText = current !== null ? current.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }

    case HostRoot:
      {
        {
          var _root = finishedWork.stateNode;

          if (_root.hydrate) {
            // We've just hydrated. No need to hydrate again.
            _root.hydrate = false;
            commitHydratedContainer(_root.containerInfo);
          }
        }

        return;
      }

    case Profiler:
      {
        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseComponent(finishedWork);
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case SuspenseListComponent:
      {
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case IncompleteClassComponent:
      {
        return;
      }

    case FundamentalComponent:
      {

        break;
      }

    case ScopeComponent:
      {

        break;
      }

    case OffscreenComponent:
    case LegacyHiddenComponent:
      {
        var newState = finishedWork.memoizedState;
        var isHidden = newState !== null;
        hideOrUnhideAllChildren(finishedWork, isHidden);
        return;
      }
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitSuspenseComponent(finishedWork) {
  var newState = finishedWork.memoizedState;

  if (newState !== null) {
    markCommitTimeOfFallback();

    {
      // Hide the Offscreen component that contains the primary children. TODO:
      // Ideally, this effect would have been scheduled on the Offscreen fiber
      // itself. That's how unhiding works: the Offscreen component schedules an
      // effect on itself. However, in this case, the component didn't complete,
      // so the fiber was never added to the effect list in the normal path. We
      // could have appended it to the effect list in the Suspense component's
      // second pass, but doing it this way is less complicated. This would be
      // simpler if we got rid of the effect list and traversed the tree, like
      // we're planning to do.
      var primaryChildParent = finishedWork.child;
      hideOrUnhideAllChildren(primaryChildParent, true);
    }
  }
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current = finishedWork.alternate;

    if (current !== null) {
      var prevState = current.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of wakeables.
  // For each wakeable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var wakeables = finishedWork.updateQueue;

  if (wakeables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    wakeables.forEach(function (wakeable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);

      if (!retryCache.has(wakeable)) {
        {
          if (wakeable.__reactDoNotTraceInteractions !== true) {
            retry = tracing.unstable_wrap(retry);
          }
        }

        retryCache.add(wakeable);
        wakeable.then(retry, retry);
      }
    });
  }
} // This function detects when a Suspense boundary goes from visible to hidden.
// It returns false if the boundary is already hidden.
// TODO: Use an effect tag.


function isSuspenseBoundaryBeingHidden(current, finishedWork) {
  if (current !== null) {
    var oldState = current.memoizedState;

    if (oldState === null || oldState.dehydrated !== null) {
      var newState = finishedWork.memoizedState;
      return newState !== null && newState.dehydrated === null;
    }
  }

  return false;
}

function commitResetTextContent(current) {

  resetTextContent(current.stateNode);
}

var COMPONENT_TYPE = 0;
var HAS_PSEUDO_CLASS_TYPE = 1;
var ROLE_TYPE = 2;
var TEST_NAME_TYPE = 3;
var TEXT_TYPE = 4;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor$1 = Symbol.for;
  COMPONENT_TYPE = symbolFor$1('selector.component');
  HAS_PSEUDO_CLASS_TYPE = symbolFor$1('selector.has_pseudo_class');
  ROLE_TYPE = symbolFor$1('selector.role');
  TEST_NAME_TYPE = symbolFor$1('selector.test_id');
  TEXT_TYPE = symbolFor$1('selector.text');
}
var commitHooks = [];
function onCommitRoot$1() {
  {
    commitHooks.forEach(function (commitHook) {
      return commitHook();
    });
  }
}

var ceil = Math.ceil;
var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
var NoContext =
/*             */
0;
var BatchedContext =
/*               */
1;
var EventContext =
/*                 */
2;
var DiscreteEventContext =
/*         */
4;
var LegacyUnbatchedContext =
/*       */
8;
var RenderContext =
/*                */
16;
var CommitContext =
/*                */
32;
var RetryAfterError =
/*       */
64;
var RootIncomplete = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5; // Describes where we are in the React execution stack

var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The lanes we're rendering

var workInProgressRootRenderLanes = NoLanes; // Stack that allows components to change the render lanes for its subtree
// This is a superset of the lanes we started working on at the root. The only
// case where it's different from `workInProgressRootRenderLanes` is when we
// enter a subtree that is hidden and needs to be unhidden: Suspense and
// Offscreen component.
//
// Most things in the work loop should deal with workInProgressRootRenderLanes.
// Most things in begin/complete phases should deal with subtreeRenderLanes.

var subtreeRenderLanes = NoLanes;
var subtreeRenderLanesCursor = createCursor(NoLanes); // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // "Included" lanes refer to lanes that were worked on during this render. It's
// slightly different than `renderLanes` because `renderLanes` can change as you
// enter and exit an Offscreen tree. This value is the combination of all render
// lanes for the entire render phase.

var workInProgressRootIncludedLanes = NoLanes; // The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootSkippedLanes = NoLanes; // Lanes that were updated (in an interleaved event) during this render.

var workInProgressRootUpdatedLanes = NoLanes; // Lanes that were pinged (in an interleaved event) during this render.

var workInProgressRootPingedLanes = NoLanes;
var mostRecentlyUpdatedRoot = null; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500; // The absolute time for when we should start giving up on rendering
// more and prefer CPU suspense heuristics instead.

var workInProgressRootRenderTargetTime = Infinity; // How long a render is supposed to take before we start following CPU
// suspense heuristics and opt out of rendering more content.

var RENDER_TIMEOUT_MS = 500;

function resetRenderTimer() {
  workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
}

function getRenderTargetTime() {
  return workInProgressRootRenderTargetTime;
}
var nextEffect = null;
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsRenderPriority = NoPriority$1;
var pendingPassiveEffectsLanes = NoLanes;
var pendingPassiveHookEffectsMount = [];
var pendingPassiveHookEffectsUnmount = [];
var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0; // Marks the need to reschedule pending interactions at these lanes
// during the commit phase. This enables them to be traced across components
// that spawn new work during render. E.g. hidden boundaries, suspended SSR
// hydration or SuspenseList.
// TODO: Can use a bitmask instead of an array

var spawnedWorkDuringRender = null; // If two updates are scheduled within the same event, we should treat their
// event times as simultaneous, even if the actual clock time has advanced
// between the first and second call.

var currentEventTime = NoTimestamp;
var currentEventWipLanes = NoLanes;
var currentEventPendingLanes = NoLanes; // Dev only flag that tracks if passive effects are currently being flushed.
// We warn about state updates for unmounted components differently in this case.

var isFlushingPassiveEffects = false;
var focusedInstanceHandle = null;
var shouldFireAfterActiveInstanceBlur = false;
function getWorkInProgressRoot() {
  return workInProgressRoot;
}
function requestEventTime() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return now();
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoTimestamp) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = now();
  return currentEventTime;
}
function requestUpdateLane(fiber) {
  // Special cases
  var mode = fiber.mode;

  if ((mode & BlockingMode) === NoMode) {
    return SyncLane;
  } else if ((mode & ConcurrentMode) === NoMode) {
    return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
  } // The algorithm for assigning an update to a lane should be stable for all
  // updates at the same priority within the same event. To do this, the inputs
  // to the algorithm must be the same. For example, we use the `renderLanes`
  // to avoid choosing a lane that is already in the middle of rendering.
  //
  // However, the "included" lanes could be mutated in between updates in the
  // same event, like if you perform an update inside `flushSync`. Or any other
  // code path that might call `prepareFreshStack`.
  //
  // The trick we use is to cache the first of each of these inputs within an
  // event. Then reset the cached values once we can be sure the event is over.
  // Our heuristic for that is whenever we enter a concurrent work loop.
  //
  // We'll do the same for `currentEventPendingLanes` below.


  if (currentEventWipLanes === NoLanes) {
    currentEventWipLanes = workInProgressRootIncludedLanes;
  }

  var isTransition = requestCurrentTransition() !== NoTransition;

  if (isTransition) {
    if (currentEventPendingLanes !== NoLanes) {
      currentEventPendingLanes = mostRecentlyUpdatedRoot !== null ? mostRecentlyUpdatedRoot.pendingLanes : NoLanes;
    }

    return findTransitionLane(currentEventWipLanes, currentEventPendingLanes);
  } // TODO: Remove this dependency on the Scheduler priority.
  // To do that, we're replacing it with an update lane priority.


  var schedulerPriority = getCurrentPriorityLevel(); // The old behavior was using the priority level of the Scheduler.
  // This couples React to the Scheduler internals, so we're replacing it
  // with the currentUpdateLanePriority above. As an example of how this
  // could be problematic, if we're not inside `Scheduler.runWithPriority`,
  // then we'll get the priority of the current running Scheduler task,
  // which is probably not what we want.

  var lane;

  if ( // TODO: Temporary. We're removing the concept of discrete updates.
  (executionContext & DiscreteEventContext) !== NoContext && schedulerPriority === UserBlockingPriority$2) {
    lane = findUpdateLane(InputDiscreteLanePriority, currentEventWipLanes);
  } else {
    var schedulerLanePriority = schedulerPriorityToLanePriority(schedulerPriority);

    lane = findUpdateLane(schedulerLanePriority, currentEventWipLanes);
  }

  return lane;
}

function requestRetryLane(fiber) {
  // This is a fork of `requestUpdateLane` designed specifically for Suspense
  // "retries" — a special update that attempts to flip a Suspense boundary
  // from its placeholder state to its primary/resolved state.
  // Special cases
  var mode = fiber.mode;

  if ((mode & BlockingMode) === NoMode) {
    return SyncLane;
  } else if ((mode & ConcurrentMode) === NoMode) {
    return getCurrentPriorityLevel() === ImmediatePriority$1 ? SyncLane : SyncBatchedLane;
  } // See `requestUpdateLane` for explanation of `currentEventWipLanes`


  if (currentEventWipLanes === NoLanes) {
    currentEventWipLanes = workInProgressRootIncludedLanes;
  }

  return findRetryLane(currentEventWipLanes);
}

function scheduleUpdateOnFiber(fiber, lane, eventTime) {
  checkForNestedUpdates();
  warnAboutRenderPhaseUpdatesInDEV(fiber);
  var root = markUpdateLaneFromFiberToRoot(fiber, lane);

  if (root === null) {
    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
    return null;
  } // Mark that the root has a pending update.


  markRootUpdated(root, lane, eventTime);

  if (root === workInProgressRoot) {
    // Received an update to a tree that's in the middle of rendering. Mark
    // that there was an interleaved update work on this root. Unless the
    // `deferRenderPhaseUpdateToNextBatch` flag is off and this is a render
    // phase update. In that case, we don't treat render phase updates as if
    // they were interleaved, for backwards compat reasons.
    {
      workInProgressRootUpdatedLanes = mergeLanes(workInProgressRootUpdatedLanes, lane);
    }

    if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
      // The root already suspended with a delay, which means this render
      // definitely won't finish. Since we have a new update, let's mark it as
      // suspended now, right before marking the incoming update. This has the
      // effect of interrupting the current render and switching to the update.
      // TODO: Make sure this doesn't override pings that happen while we've
      // already started rendering.
      markRootSuspended$1(root, workInProgressRootRenderLanes);
    }
  } // TODO: requestUpdateLanePriority also reads the priority. Pass the
  // priority as an argument to that function and this one.


  var priorityLevel = getCurrentPriorityLevel();

  if (lane === SyncLane) {
    if ( // Check if we're inside unbatchedUpdates
    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
    (executionContext & (RenderContext | CommitContext)) === NoContext) {
      // Register pending interactions on the root to avoid losing traced interaction data.
      schedulePendingInteractions(root, lane); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
      // root inside of batchedUpdates should be synchronous, but layout updates
      // should be deferred until the end of the batch.

      performSyncWorkOnRoot(root);
    } else {
      ensureRootIsScheduled(root, eventTime);
      schedulePendingInteractions(root, lane);

      if (executionContext === NoContext) {
        // Flush the synchronous work now, unless we're already working or inside
        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
        // scheduleCallbackForFiber to preserve the ability to schedule a callback
        // without immediately flushing it. We only do this for user-initiated
        // updates, to preserve historical behavior of legacy mode.
        resetRenderTimer();
        flushSyncCallbackQueue();
      }
    }
  } else {
    // Schedule a discrete update but only if it's not Sync.
    if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
    // discrete, even inside a discrete event.
    priorityLevel === UserBlockingPriority$2 || priorityLevel === ImmediatePriority$1)) {
      // This is the result of a discrete event. Track the lowest priority
      // discrete update per root so we can flush them early, if needed.
      if (rootsWithPendingDiscreteUpdates === null) {
        rootsWithPendingDiscreteUpdates = new Set([root]);
      } else {
        rootsWithPendingDiscreteUpdates.add(root);
      }
    } // Schedule other updates after in case the callback is sync.


    ensureRootIsScheduled(root, eventTime);
    schedulePendingInteractions(root, lane);
  } // We use this when assigning a lane for a transition inside
  // `requestUpdateLane`. We assume it's the same as the root being updated,
  // since in the common case of a single root app it probably is. If it's not
  // the same root, then it's not a huge deal, we just might batch more stuff
  // together more than necessary.


  mostRecentlyUpdatedRoot = root;
} // This is split into a separate function so we can mark a fiber with pending
// work without treating it as a typical update that originates from an event;
// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
// on a fiber.

function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
  // Update the source fiber's lanes
  sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
  var alternate = sourceFiber.alternate;

  if (alternate !== null) {
    alternate.lanes = mergeLanes(alternate.lanes, lane);
  }

  {
    if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
      warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
    }
  } // Walk the parent path to the root and update the child expiration time.


  var node = sourceFiber;
  var parent = sourceFiber.return;

  while (parent !== null) {
    parent.childLanes = mergeLanes(parent.childLanes, lane);
    alternate = parent.alternate;

    if (alternate !== null) {
      alternate.childLanes = mergeLanes(alternate.childLanes, lane);
    } else {
      {
        if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
          warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
        }
      }
    }

    node = parent;
    parent = parent.return;
  }

  if (node.tag === HostRoot) {
    var root = node.stateNode;
    return root;
  } else {
    return null;
  }
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the priority
// of the existing task is the same as the priority of the next level that the
// root has work on. This function is called on every update, and right before
// exiting a task.


function ensureRootIsScheduled(root, currentTime) {
  var existingCallbackNode = root.callbackNode; // Check if any lanes are being starved by other work. If so, mark them as
  // expired so we know to work on those next.

  markStarvedLanesAsExpired(root, currentTime); // Determine the next lanes to work on, and their priority.

  var nextLanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes); // This returns the priority level computed during the `getNextLanes` call.

  var newCallbackPriority = returnNextLanesPriority();

  if (nextLanes === NoLanes) {
    // Special case: There's nothing to work on.
    if (existingCallbackNode !== null) {
      cancelCallback(existingCallbackNode);
      root.callbackNode = null;
      root.callbackPriority = NoLanePriority;
    }

    return;
  } // Check if there's an existing task. We may be able to reuse it.


  if (existingCallbackNode !== null) {
    var existingCallbackPriority = root.callbackPriority;

    if (existingCallbackPriority === newCallbackPriority) {
      // The priority hasn't changed. We can reuse the existing task. Exit.
      return;
    } // The priority changed. Cancel the existing callback. We'll schedule a new
    // one below.


    cancelCallback(existingCallbackNode);
  } // Schedule a new callback.


  var newCallbackNode;

  if (newCallbackPriority === SyncLanePriority) {
    // Special case: Sync React callbacks are scheduled on a special
    // internal queue
    newCallbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
  } else if (newCallbackPriority === SyncBatchedLanePriority) {
    newCallbackNode = scheduleCallback(ImmediatePriority$1, performSyncWorkOnRoot.bind(null, root));
  } else {
    var schedulerPriorityLevel = lanePriorityToSchedulerPriority(newCallbackPriority);
    newCallbackNode = scheduleCallback(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root));
  }

  root.callbackPriority = newCallbackPriority;
  root.callbackNode = newCallbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root) {
  // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.
  currentEventTime = NoTimestamp;
  currentEventWipLanes = NoLanes;
  currentEventPendingLanes = NoLanes;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  } // Flush any pending passive effects before deciding which lanes to work on,
  // in case they schedule additional work.


  var originalCallbackNode = root.callbackNode;
  var didFlushPassiveEffects = flushPassiveEffects();

  if (didFlushPassiveEffects) {
    // Something in the passive effect phase may have canceled the current task.
    // Check if the task node for this root was changed.
    if (root.callbackNode !== originalCallbackNode) {
      // The current task was canceled. Exit. We don't need to call
      // `ensureRootIsScheduled` because the check above implies either that
      // there's a new task, or that there's no remaining work on this root.
      return null;
    }
  } // Determine the next expiration time to work on, using the fields stored
  // on the root.


  var lanes = getNextLanes(root, root === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);

  if (lanes === NoLanes) {
    // Defensive coding. This is never expected to happen.
    return null;
  }

  var exitStatus = renderRootConcurrent(root, lanes);

  if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
    // The render included lanes that were updated during the render phase.
    // For example, when unhiding a hidden tree, we include all the lanes
    // that were previously skipped when the tree was hidden. That set of
    // lanes is a superset of the lanes we started rendering with.
    //
    // So we'll throw out the current work and restart.
    prepareFreshStack(root, NoLanes);
  } else if (exitStatus !== RootIncomplete) {
    if (exitStatus === RootErrored) {
      executionContext |= RetryAfterError; // If an error occurred during hydration,
      // discard server response and fall back to client side render.

      if (root.hydrate) {
        root.hydrate = false;
        clearContainer(root.containerInfo);
      } // If something threw an error, try rendering one more time. We'll render
      // synchronously to block concurrent data mutations, and we'll includes
      // all pending updates are included. If it still fails after the second
      // attempt, we'll give up and commit the resulting tree.


      lanes = getLanesToRetrySynchronouslyOnError(root);

      if (lanes !== NoLanes) {
        exitStatus = renderRootSync(root, lanes);
      }
    }

    if (exitStatus === RootFatalErrored) {
      var fatalError = workInProgressRootFatalError;
      prepareFreshStack(root, NoLanes);
      markRootSuspended$1(root, lanes);
      ensureRootIsScheduled(root, now());
      throw fatalError;
    } // We now have a consistent tree. The next step is either to commit it,
    // or, if something suspended, wait to commit it after a timeout.


    var finishedWork = root.current.alternate;
    root.finishedWork = finishedWork;
    root.finishedLanes = lanes;
    finishConcurrentRender(root, exitStatus, lanes);
  }

  ensureRootIsScheduled(root, now());

  if (root.callbackNode === originalCallbackNode) {
    // The task node scheduled for this root is the same one that's
    // currently executed. Need to return a continuation.
    return performConcurrentWorkOnRoot.bind(null, root);
  }

  return null;
}

function finishConcurrentRender(root, exitStatus, lanes) {
  switch (exitStatus) {
    case RootIncomplete:
    case RootFatalErrored:
      {
        {
          {
            throw Error( "Root did not complete. This is a bug in React." );
          }
        }
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // We should have already attempted to retry this tree. If we reached
        // this point, it errored again. Commit it.
        commitRoot(root);
        break;
      }

    case RootSuspended:
      {
        markRootSuspended$1(root, lanes); // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.

        if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
        !shouldForceFlushFallbacksInDEV()) {
          // This render only included retries, no updates. Throttle committing
          // retries so that we don't show too many loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            var nextLanes = getNextLanes(root, NoLanes);

            if (nextLanes !== NoLanes) {
              // There's additional work on this root.
              break;
            }

            var suspendedLanes = root.suspendedLanes;

            if (!isSubsetOfLanes(suspendedLanes, lanes)) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              // FIXME: What if the suspended lanes are Idle? Should not restart.
              var eventTime = requestEventTime();
              markRootPinged(root, suspendedLanes);
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspended$1(root, lanes);

        if (includesOnlyTransitions(lanes)) {
          // This is a transition, so we should exit without committing a
          // placeholder and without scheduling a timeout. Delay indefinitely
          // until we receive more data.
          break;
        }

        if (!shouldForceFlushFallbacksInDEV()) {
          // This is not a transition, but we did trigger an avoided state.
          // Schedule a placeholder to display after a short delay, using the Just
          // Noticeable Difference.
          // TODO: Is the JND optimization worth the added complexity? If this is
          // the only reason we track the event time, then probably not.
          // Consider removing.
          var mostRecentEventTime = getMostRecentEventTime(root, lanes);
          var eventTimeMs = mostRecentEventTime;
          var timeElapsedMs = now() - eventTimeMs;

          var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs; // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // Instead of committing the fallback immediately, wait for more data
            // to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
            break;
          }
        } // Commit the placeholder.


        commitRoot(root);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        commitRoot(root);
        break;
      }

    default:
      {
        {
          {
            throw Error( "Unknown root exit status." );
          }
        }
      }
  }
}

function markRootSuspended$1(root, suspendedLanes) {
  // When suspending, we should always exclude lanes that were pinged or (more
  // rarely, since we try to avoid it) updated during the render phase.
  // TODO: Lol maybe there's a better way to factor this besides this
  // obnoxiously named function :)
  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
  suspendedLanes = removeLanes(suspendedLanes, workInProgressRootUpdatedLanes);
  markRootSuspended(root, suspendedLanes);
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  flushPassiveEffects();
  var lanes;
  var exitStatus;

  if (root === workInProgressRoot && includesSomeLane(root.expiredLanes, workInProgressRootRenderLanes)) {
    // There's a partial tree, and at least one of its lanes has expired. Finish
    // rendering it before rendering the rest of the expired work.
    lanes = workInProgressRootRenderLanes;
    exitStatus = renderRootSync(root, lanes);

    if (includesSomeLane(workInProgressRootIncludedLanes, workInProgressRootUpdatedLanes)) {
      // The render included lanes that were updated during the render phase.
      // For example, when unhiding a hidden tree, we include all the lanes
      // that were previously skipped when the tree was hidden. That set of
      // lanes is a superset of the lanes we started rendering with.
      //
      // Note that this only happens when part of the tree is rendered
      // concurrently. If the whole tree is rendered synchronously, then there
      // are no interleaved events.
      lanes = getNextLanes(root, lanes);
      exitStatus = renderRootSync(root, lanes);
    }
  } else {
    lanes = getNextLanes(root, NoLanes);
    exitStatus = renderRootSync(root, lanes);
  }

  if (root.tag !== LegacyRoot && exitStatus === RootErrored) {
    executionContext |= RetryAfterError; // If an error occurred during hydration,
    // discard server response and fall back to client side render.

    if (root.hydrate) {
      root.hydrate = false;
      clearContainer(root.containerInfo);
    } // If something threw an error, try rendering one more time. We'll render
    // synchronously to block concurrent data mutations, and we'll includes
    // all pending updates are included. If it still fails after the second
    // attempt, we'll give up and commit the resulting tree.


    lanes = getLanesToRetrySynchronouslyOnError(root);

    if (lanes !== NoLanes) {
      exitStatus = renderRootSync(root, lanes);
    }
  }

  if (exitStatus === RootFatalErrored) {
    var fatalError = workInProgressRootFatalError;
    prepareFreshStack(root, NoLanes);
    markRootSuspended$1(root, lanes);
    ensureRootIsScheduled(root, now());
    throw fatalError;
  } // We now have a consistent tree. Because this is a sync render, we
  // will commit it even if something suspended.


  var finishedWork = root.current.alternate;
  root.finishedWork = finishedWork;
  root.finishedLanes = lanes;
  commitRoot(root); // Before exiting, make sure there's a callback scheduled for the next
  // pending level.

  ensureRootIsScheduled(root, now());
  return null;
}
function flushDiscreteUpdates() {
  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
  // those two cases. Need to fix this before exposing flushDiscreteUpdates
  // as a public API.
  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
    {
      if ((executionContext & RenderContext) !== NoContext) {
        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
      }
    } // We're already rendering, so we can't synchronously flush pending work.
    // This is probably a nested event dispatch triggered by a lifecycle/effect,
    // like `el.focus()`. Exit.


    return;
  }

  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
  // they fire before the next serial event.

  flushPassiveEffects();
}

function flushPendingDiscreteUpdates() {
  if (rootsWithPendingDiscreteUpdates !== null) {
    // For each root with pending discrete updates, schedule a callback to
    // immediately flush them.
    var roots = rootsWithPendingDiscreteUpdates;
    rootsWithPendingDiscreteUpdates = null;
    roots.forEach(function (root) {
      markDiscreteUpdatesExpired(root);
      ensureRootIsScheduled(root, now());
    });
  } // Now flush the immediate queue.


  flushSyncCallbackQueue();
}

function batchedUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      resetRenderTimer();
      flushSyncCallbackQueue();
    }
  }
}
function batchedEventUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= EventContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      resetRenderTimer();
      flushSyncCallbackQueue();
    }
  }
}
function discreteUpdates$1(fn, a, b, c, d) {
  var prevExecutionContext = executionContext;
  executionContext |= DiscreteEventContext;

  {
    try {
      return runWithPriority$1(UserBlockingPriority$2, fn.bind(null, a, b, c, d));
    } finally {
      executionContext = prevExecutionContext;

      if (executionContext === NoContext) {
        // Flush the immediate callbacks that were scheduled during this batch
        resetRenderTimer();
        flushSyncCallbackQueue();
      }
    }
  }
}
function unbatchedUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext &= ~BatchedContext;
  executionContext |= LegacyUnbatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      resetRenderTimer();
      flushSyncCallbackQueue();
    }
  }
}
function flushSync(fn, a) {
  var prevExecutionContext = executionContext;

  if ((prevExecutionContext & (RenderContext | CommitContext)) !== NoContext) {
    {
      error('flushSync was called from inside a lifecycle method. React cannot ' + 'flush when React is already rendering. Consider moving this call to ' + 'a scheduler task or micro task.');
    }

    return fn(a);
  }

  executionContext |= BatchedContext;

  {
    try {
      if (fn) {
        return runWithPriority$1(ImmediatePriority$1, fn.bind(null, a));
      } else {
        return undefined;
      }
    } finally {
      executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
      // Note that this will happen even if batchedUpdates is higher up
      // the stack.

      flushSyncCallbackQueue();
    }
  }
}
function pushRenderLanes(fiber, lanes) {
  push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
  subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
  workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
}
function popRenderLanes(fiber) {
  subtreeRenderLanes = subtreeRenderLanesCursor.current;
  pop(subtreeRenderLanesCursor, fiber);
}

function prepareFreshStack(root, lanes) {
  root.finishedWork = null;
  root.finishedLanes = NoLanes;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  workInProgress = createWorkInProgress(root.current, null);
  workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
  workInProgressRootExitStatus = RootIncomplete;
  workInProgressRootFatalError = null;
  workInProgressRootSkippedLanes = NoLanes;
  workInProgressRootUpdatedLanes = NoLanes;
  workInProgressRootPingedLanes = NoLanes;

  {
    spawnedWorkDuringRender = null;
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
  }
}

function handleError(root, thrownValue) {
  do {
    var erroredWork = workInProgress;

    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooksAfterThrow();
      resetCurrentFiber(); // TODO: I found and added this missing line while investigating a
      // separate issue. Write a regression test using string refs.

      ReactCurrentOwner$2.current = null;

      if (erroredWork === null || erroredWork.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
        // sibling, or the parent if there are no siblings. But since the root
        // has no siblings nor a parent, we set it to null. Usually this is
        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
        // intentionally not calling those, we need set it here.
        // TODO: Consider calling `unwindWork` to pop the contexts.

        workInProgress = null;
        return;
      }

      if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
      }

      throwException(root, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
      completeUnitOfWork(erroredWork);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;

      if (workInProgress === erroredWork && erroredWork !== null) {
        // If this boundary has already errored, then we had trouble processing
        // the error. Bubble it to the next boundary.
        erroredWork = erroredWork.return;
        workInProgress = erroredWork;
      } else {
        erroredWork = workInProgress;
      }

      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher() {
  var prevDispatcher = ReactCurrentDispatcher$2.current;
  ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher$2.current = prevDispatcher;
}

function pushInteractions(root) {
  {
    var prevInteractions = tracing.__interactionsRef.current;
    tracing.__interactionsRef.current = root.memoizedInteractions;
    return prevInteractions;
  }
}

function popInteractions(prevInteractions) {
  {
    tracing.__interactionsRef.current = prevInteractions;
  }
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now();
}
function markSkippedUpdateLanes(lane) {
  workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there are updates that we skipped tree that might have unblocked
  // this render.


  if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootUpdatedLanes))) {
    // Mark the current render as suspended so that we switch to working on
    // the updates that were skipped. Usually we only suspend at the end of
    // the render phase.
    // TODO: We should probably always mark the root as suspended immediately
    // (inside this function), since by suspending at the end of the render
    // phase introduces a potential mistake where we suspend lanes that were
    // pinged or updated while we were rendering.
    markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
  }
}
function renderDidError() {
  if (workInProgressRootExitStatus !== RootCompleted) {
    workInProgressRootExitStatus = RootErrored;
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootIncomplete;
}

function renderRootSync(root, lanes) {
  var prevExecutionContext = executionContext;
  executionContext |= RenderContext;
  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
    prepareFreshStack(root, lanes);
    startWorkOnPendingInteractions(root, lanes);
  }

  var prevInteractions = pushInteractions(root);

  do {
    try {
      workLoopSync();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    }
  } while (true);

  resetContextDependencies();

  {
    popInteractions(prevInteractions);
  }

  executionContext = prevExecutionContext;
  popDispatcher(prevDispatcher);

  if (workInProgress !== null) {
    // This is a sync render, so we should have finished the whole tree.
    {
      {
        throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }


  workInProgressRoot = null;
  workInProgressRootRenderLanes = NoLanes;
  return workInProgressRootExitStatus;
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    performUnitOfWork(workInProgress);
  }
}

function renderRootConcurrent(root, lanes) {
  var prevExecutionContext = executionContext;
  executionContext |= RenderContext;
  var prevDispatcher = pushDispatcher(); // If the root or lanes have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (workInProgressRoot !== root || workInProgressRootRenderLanes !== lanes) {
    resetRenderTimer();
    prepareFreshStack(root, lanes);
    startWorkOnPendingInteractions(root, lanes);
  }

  var prevInteractions = pushInteractions(root);

  do {
    try {
      workLoopConcurrent();
      break;
    } catch (thrownValue) {
      handleError(root, thrownValue);
    }
  } while (true);

  resetContextDependencies();

  {
    popInteractions(prevInteractions);
  }

  popDispatcher(prevDispatcher);
  executionContext = prevExecutionContext;


  if (workInProgress !== null) {

    return RootIncomplete;
  } else {


    workInProgressRoot = null;
    workInProgressRootRenderLanes = NoLanes; // Return the final exit status.

    return workInProgressRootExitStatus;
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current = unitOfWork.alternate;
  setCurrentFiber(unitOfWork);
  var next;

  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$1(current, unitOfWork, subtreeRenderLanes);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    completeUnitOfWork(unitOfWork);
  } else {
    workInProgress = next;
  }

  ReactCurrentOwner$2.current = null;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  var completedWork = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current = completedWork.alternate;
    var returnFiber = completedWork.return; // Check if the work completed or if something threw.

    if ((completedWork.flags & Incomplete) === NoFlags) {
      setCurrentFiber(completedWork);
      var next = void 0;

      if ( (completedWork.mode & ProfileMode) === NoMode) {
        next = completeWork(current, completedWork, subtreeRenderLanes);
      } else {
        startProfilerTimer(completedWork);
        next = completeWork(current, completedWork, subtreeRenderLanes); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
      }

      resetCurrentFiber();

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        workInProgress = next;
        return;
      }

      resetChildLanes(completedWork);

      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
      (returnFiber.flags & Incomplete) === NoFlags) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = completedWork.firstEffect;
        }

        if (completedWork.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = completedWork.firstEffect;
          }

          returnFiber.lastEffect = completedWork.lastEffect;
        } // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if needed,
        // by doing multiple passes over the effect list. We don't want to
        // schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.


        var flags = completedWork.flags; // Skip both NoWork and PerformedWork tags when creating the effect
        // list. PerformedWork effect is read by React DevTools but shouldn't be
        // committed.

        if (flags > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = completedWork;
          } else {
            returnFiber.firstEffect = completedWork;
          }

          returnFiber.lastEffect = completedWork;
        }
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(completedWork); // Because this fiber did not complete, don't reset its expiration time.


      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        _next.flags &= HostEffectMask;
        workInProgress = _next;
        return;
      }

      if ( (completedWork.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(completedWork, false); // Include the time spent working on failed children before continuing.

        var actualDuration = completedWork.actualDuration;
        var child = completedWork.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        completedWork.actualDuration = actualDuration;
      }

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.flags |= Incomplete;
      }
    }

    var siblingFiber = completedWork.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      workInProgress = siblingFiber;
      return;
    } // Otherwise, return to the parent


    completedWork = returnFiber; // Update the next thing we're working on in case something throws.

    workInProgress = completedWork;
  } while (completedWork !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootCompleted;
  }
}

function resetChildLanes(completedWork) {
  if ( // TODO: Move this check out of the hot path by moving `resetChildLanes`
  // to switch statement in `completeWork`.
  (completedWork.tag === LegacyHiddenComponent || completedWork.tag === OffscreenComponent) && completedWork.memoizedState !== null && !includesSomeLane(subtreeRenderLanes, OffscreenLane) && (completedWork.mode & ConcurrentMode) !== NoLanes) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildLanes = NoLanes; // Bubble up the earliest expiration time.

  if ( (completedWork.mode & ProfileMode) !== NoMode) {
    // In profiling mode, resetChildExpirationTime is also used to reset
    // profiler durations.
    var actualDuration = completedWork.actualDuration;
    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration. If
    // the fiber has not been cloned though, (meaning no work was done), then
    // this value will reflect the amount of time spent working on a previous
    // render. In that case it should not bubble. We determine whether it was
    // cloned by comparing the child pointer.

    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
    var child = completedWork.child;

    while (child !== null) {
      newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));

      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }

      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }

    var isTimedOutSuspense = completedWork.tag === SuspenseComponent && completedWork.memoizedState !== null;

    if (isTimedOutSuspense) {
      // Don't count time spent in a timed out Suspense subtree as part of the base duration.
      var primaryChildFragment = completedWork.child;

      if (primaryChildFragment !== null) {
        treeBaseDuration -= primaryChildFragment.treeBaseDuration;
      }
    }

    completedWork.actualDuration = actualDuration;
    completedWork.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = completedWork.child;

    while (_child !== null) {
      newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
      _child = _child.sibling;
    }
  }

  completedWork.childLanes = newChildLanes;
}

function commitRoot(root) {
  var renderPriorityLevel = getCurrentPriorityLevel();
  runWithPriority$1(ImmediatePriority$1, commitRootImpl.bind(null, root, renderPriorityLevel));
  return null;
}

function commitRootImpl(root, renderPriorityLevel) {
  do {
    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
    // means `flushPassiveEffects` will sometimes result in additional
    // passive effects. So we need to keep flushing in a loop until there are
    // no more pending effects.
    // TODO: Might be better if `flushPassiveEffects` did not automatically
    // flush synchronous work at the end, to avoid factoring hazards like this.
    flushPassiveEffects();
  } while (rootWithPendingPassiveEffects !== null);

  flushRenderPhaseStrictModeWarningsInDEV();

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  var finishedWork = root.finishedWork;
  var lanes = root.finishedLanes;

  if (finishedWork === null) {

    return null;
  }

  root.finishedWork = null;
  root.finishedLanes = NoLanes;

  if (!(finishedWork !== root.current)) {
    {
      throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
    }
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null; // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
  markRootFinished(root, remainingLanes); // Clear already finished discrete updates in case that a later call of
  // `flushDiscreteUpdates` starts a useless render pass which may cancels
  // a scheduled timeout.

  if (rootsWithPendingDiscreteUpdates !== null) {
    if (!hasDiscreteLanes(remainingLanes) && rootsWithPendingDiscreteUpdates.has(root)) {
      rootsWithPendingDiscreteUpdates.delete(root);
    }
  }

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    workInProgressRootRenderLanes = NoLanes;
  } // Get the list of effects.


  var firstEffect;

  if (finishedWork.flags > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if it
    // had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  if (firstEffect !== null) {

    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;
    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    focusedInstanceHandle = prepareForCommit(root.containerInfo);
    shouldFireAfterActiveInstanceBlur = false;
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var error = clearCaughtError();
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null); // We no longer need to track the active instance fiber


    focusedInstanceHandle = null;

    {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    } // The next phase is the mutation phase, where we mutate the host tree.


    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
    // the host tree after it's been mutated. The idiomatic use case for this is
    // layout, but class component lifecycles also fire here for legacy reasons.

    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitLayoutEffects, null, root, lanes);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error2 = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error2);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
    // opportunity to paint.

    requestPaint();

    {
      popInteractions(prevInteractions);
    }

    executionContext = prevExecutionContext;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    {
      recordCommitTime();
    }
  }

  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsLanes = lanes;
    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
  } else {
    // We are done with the effect chain at this point so let's clear the
    // nextEffect pointers to assist with GC. If we have passive effects, we'll
    // clear this in flushPassiveEffects.
    nextEffect = firstEffect;

    while (nextEffect !== null) {
      var nextNextEffect = nextEffect.nextEffect;
      nextEffect.nextEffect = null;

      if (nextEffect.flags & Deletion) {
        detachFiberAfterEffects(nextEffect);
      }

      nextEffect = nextNextEffect;
    }
  } // Read this again, since an effect might have updated it


  remainingLanes = root.pendingLanes; // Check if there's remaining work on this root

  if (remainingLanes !== NoLanes) {
    {
      if (spawnedWorkDuringRender !== null) {
        var expirationTimes = spawnedWorkDuringRender;
        spawnedWorkDuringRender = null;

        for (var i = 0; i < expirationTimes.length; i++) {
          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
        }
      }

      schedulePendingInteractions(root, remainingLanes);
    }
  } else {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  {
    if (!rootDidHavePassiveEffects) {
      // If there are no passive effects, then we can complete the pending interactions.
      // Otherwise, we'll wait until after the passive effects are flushed.
      // Wait to do this until after remaining work has been scheduled,
      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
      finishPendingInteractions(root, lanes);
    }
  }

  if (remainingLanes === SyncLane) {
    // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.
    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  }

  onCommitRoot(finishedWork.stateNode, renderPriorityLevel);

  {
    onCommitRoot$1();
  } // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.


  ensureRootIsScheduled(root, now());

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var _error3 = firstUncaughtError;
    firstUncaughtError = null;
    throw _error3;
  }

  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
    // synchronously, but layout updates should be deferred until the end
    // of the batch.


    return null;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbackQueue();

  return null;
}

function commitBeforeMutationEffects() {
  while (nextEffect !== null) {
    var current = nextEffect.alternate;

    if (!shouldFireAfterActiveInstanceBlur && focusedInstanceHandle !== null) {
      if ((nextEffect.flags & Deletion) !== NoFlags) {
        if (doesFiberContain(nextEffect, focusedInstanceHandle)) {
          shouldFireAfterActiveInstanceBlur = true;
        }
      } else {
        // TODO: Move this out of the hot path using a dedicated effect tag.
        if (nextEffect.tag === SuspenseComponent && isSuspenseBoundaryBeingHidden(current, nextEffect) && doesFiberContain(nextEffect, focusedInstanceHandle)) {
          shouldFireAfterActiveInstanceBlur = true;
        }
      }
    }

    var flags = nextEffect.flags;

    if ((flags & Snapshot) !== NoFlags) {
      setCurrentFiber(nextEffect);
      commitBeforeMutationLifeCycles(current, nextEffect);
      resetCurrentFiber();
    }

    if ((flags & Passive) !== NoFlags) {
      // If there are passive effects, schedule a callback to flush at
      // the earliest opportunity.
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority$1, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }

    nextEffect = nextEffect.nextEffect;
  }
}

function commitMutationEffects(root, renderPriorityLevel) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var flags = nextEffect.flags;

    if (flags & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (flags & Ref) {
      var current = nextEffect.alternate;

      if (current !== null) {
        commitDetachRef(current);
      }
    } // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every possible
    // bitmap value, we remove the secondary effects from the effect tag and
    // switch on that value.


    var primaryFlags = flags & (Placement | Update | Deletion | Hydrating);

    switch (primaryFlags) {
      case Placement:
        {
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted does
          // and isMounted is deprecated anyway so we should be able to kill this.

          nextEffect.flags &= ~Placement;
          break;
        }

      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.

          nextEffect.flags &= ~Placement; // Update

          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }

      case Hydrating:
        {
          nextEffect.flags &= ~Hydrating;
          break;
        }

      case HydratingAndUpdate:
        {
          nextEffect.flags &= ~Hydrating; // Update

          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }

      case Update:
        {
          var _current3 = nextEffect.alternate;
          commitWork(_current3, nextEffect);
          break;
        }

      case Deletion:
        {
          commitDeletion(root, nextEffect);
          break;
        }
    }

    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function commitLayoutEffects(root, committedLanes) {


  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var flags = nextEffect.flags;

    if (flags & (Update | Callback)) {
      var current = nextEffect.alternate;
      commitLifeCycles(root, current, nextEffect);
    }

    {
      if (flags & Ref) {
        commitAttachRef(nextEffect);
      }
    }

    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function flushPassiveEffects() {
  // Returns whether passive effects were flushed.
  if (pendingPassiveEffectsRenderPriority !== NoPriority$1) {
    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority$1 ? NormalPriority$1 : pendingPassiveEffectsRenderPriority;
    pendingPassiveEffectsRenderPriority = NoPriority$1;

    {
      return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
    }
  }

  return false;
}
function enqueuePendingPassiveHookEffectMount(fiber, effect) {
  pendingPassiveHookEffectsMount.push(effect, fiber);

  if (!rootDoesHavePassiveEffects) {
    rootDoesHavePassiveEffects = true;
    scheduleCallback(NormalPriority$1, function () {
      flushPassiveEffects();
      return null;
    });
  }
}
function enqueuePendingPassiveHookEffectUnmount(fiber, effect) {
  pendingPassiveHookEffectsUnmount.push(effect, fiber);

  {
    fiber.flags |= PassiveUnmountPendingDev;
    var alternate = fiber.alternate;

    if (alternate !== null) {
      alternate.flags |= PassiveUnmountPendingDev;
    }
  }

  if (!rootDoesHavePassiveEffects) {
    rootDoesHavePassiveEffects = true;
    scheduleCallback(NormalPriority$1, function () {
      flushPassiveEffects();
      return null;
    });
  }
}

function invokePassiveEffectCreate(effect) {
  var create = effect.create;
  effect.destroy = create();
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  }

  var root = rootWithPendingPassiveEffects;
  var lanes = pendingPassiveEffectsLanes;
  rootWithPendingPassiveEffects = null;
  pendingPassiveEffectsLanes = NoLanes;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Cannot flush passive effects while already rendering." );
    }
  }

  {
    isFlushingPassiveEffects = true;
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  var prevInteractions = pushInteractions(root); // It's important that ALL pending passive effect destroy functions are called
  // before ANY passive effect create functions are called.
  // Otherwise effects in sibling components might interfere with each other.
  // e.g. a destroy function in one component may unintentionally override a ref
  // value set by a create function in another component.
  // Layout effects have the same constraint.
  // First pass: Destroy stale passive effects.

  var unmountEffects = pendingPassiveHookEffectsUnmount;
  pendingPassiveHookEffectsUnmount = [];

  for (var i = 0; i < unmountEffects.length; i += 2) {
    var _effect = unmountEffects[i];
    var fiber = unmountEffects[i + 1];
    var destroy = _effect.destroy;
    _effect.destroy = undefined;

    {
      fiber.flags &= ~PassiveUnmountPendingDev;
      var alternate = fiber.alternate;

      if (alternate !== null) {
        alternate.flags &= ~PassiveUnmountPendingDev;
      }
    }

    if (typeof destroy === 'function') {
      {
        setCurrentFiber(fiber);

        {
          invokeGuardedCallback(null, destroy, null);
        }

        if (hasCaughtError()) {
          if (!(fiber !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var error = clearCaughtError();
          captureCommitPhaseError(fiber, error);
        }

        resetCurrentFiber();
      }
    }
  } // Second pass: Create new passive effects.


  var mountEffects = pendingPassiveHookEffectsMount;
  pendingPassiveHookEffectsMount = [];

  for (var _i = 0; _i < mountEffects.length; _i += 2) {
    var _effect2 = mountEffects[_i];
    var _fiber = mountEffects[_i + 1];

    {
      setCurrentFiber(_fiber);

      {
        invokeGuardedCallback(null, invokePassiveEffectCreate, null, _effect2);
      }

      if (hasCaughtError()) {
        if (!(_fiber !== null)) {
          {
            throw Error( "Should be working on an effect." );
          }
        }

        var _error4 = clearCaughtError();

        captureCommitPhaseError(_fiber, _error4);
      }

      resetCurrentFiber();
    }
  } // Note: This currently assumes there are no passive effects on the root fiber
  // because the root is not part of its own effect list.
  // This could change in the future.


  var effect = root.current.firstEffect;

  while (effect !== null) {
    var nextNextEffect = effect.nextEffect; // Remove nextEffect pointer to assist GC

    effect.nextEffect = null;

    if (effect.flags & Deletion) {
      detachFiberAfterEffects(effect);
    }

    effect = nextNextEffect;
  }

  {
    popInteractions(prevInteractions);
    finishPendingInteractions(root, lanes);
  }

  {
    isFlushingPassiveEffects = false;
  }

  executionContext = prevExecutionContext;
  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
  // exceeds the limit, we'll fire a warning.

  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValue(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
  enqueueUpdate(rootFiber, update);
  var eventTime = requestEventTime();
  var root = markUpdateLaneFromFiberToRoot(rootFiber, SyncLane);

  if (root !== null) {
    markRootUpdated(root, SyncLane, eventTime);
    ensureRootIsScheduled(root, eventTime);
    schedulePendingInteractions(root, SyncLane);
  }
}

function captureCommitPhaseError(sourceFiber, error) {
  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    return;
  }

  var fiber = sourceFiber.return;

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
        enqueueUpdate(fiber, update);
        var eventTime = requestEventTime();
        var root = markUpdateLaneFromFiberToRoot(fiber, SyncLane);

        if (root !== null) {
          markRootUpdated(root, SyncLane, eventTime);
          ensureRootIsScheduled(root, eventTime);
          schedulePendingInteractions(root, SyncLane);
        } else {
          // This component has already been unmounted.
          // We can't schedule any follow up work for the root because the fiber is already unmounted,
          // but we can still call the log-only boundary so the error isn't swallowed.
          //
          // TODO This is only a temporary bandaid for the old reconciler fork.
          // We can delete this special case once the new fork is merged.
          if (typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
            try {
              instance.componentDidCatch(error, errorInfo);
            } catch (errorToIgnore) {// TODO Ignore this error? Rethrow it?
              // This is kind of an edge case.
            }
          }
        }

        return;
      }
    }

    fiber = fiber.return;
  }
}
function pingSuspendedRoot(root, wakeable, pingedLanes) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The wakeable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(wakeable);
  }

  var eventTime = requestEventTime();
  markRootPinged(root, pingedLanes);

  if (workInProgressRoot === root && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, or if it's a retry, we'll always suspend
    // so we can always restart.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root.
      prepareFreshStack(root, NoLanes);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
    }
  }

  ensureRootIsScheduled(root, eventTime);
  schedulePendingInteractions(root, pingedLanes);
}

function retryTimedOutBoundary(boundaryFiber, retryLane) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new expiration time.
  if (retryLane === NoLane) {
    retryLane = requestRetryLane(boundaryFiber);
  } // TODO: Special case idle priority?


  var eventTime = requestEventTime();
  var root = markUpdateLaneFromFiberToRoot(boundaryFiber, retryLane);

  if (root !== null) {
    markRootUpdated(root, retryLane, eventTime);
    ensureRootIsScheduled(root, eventTime);
    schedulePendingInteractions(root, retryLane);
  }
}
function resolveRetryWakeable(boundaryFiber, wakeable) {
  var retryLane = NoLane; // Default

  var retryCache;

  {
    retryCache = boundaryFiber.stateNode;
  }

  if (retryCache !== null) {
    // The wakeable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(wakeable);
  }

  retryTimedOutBoundary(boundaryFiber, retryLane);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;

    {
      {
        throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
      }
    }
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;

      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

var didWarnStateUpdateForNotYetMountedComponent = null;

function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
  {
    if ((executionContext & RenderContext) !== NoContext) {
      // We let the other warning about render phase updates deal with this one.
      return;
    }

    if (!(fiber.mode & (BlockingMode | ConcurrentMode))) {
      return;
    }

    var tag = fiber.tag;

    if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    } // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.


    var componentName = getComponentName(fiber.type) || 'ReactComponent';

    if (didWarnStateUpdateForNotYetMountedComponent !== null) {
      if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForNotYetMountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForNotYetMountedComponent = new Set([componentName]);
    }

    var previousFiber = current;

    try {
      setCurrentFiber(fiber);

      error("Can't perform a React state update on a component that hasn't mounted yet. " + 'This indicates that you have a side-effect in your render function that ' + 'asynchronously later calls tries to update the component. Move this work to ' + 'useEffect instead.');
    } finally {
      if (previousFiber) {
        setCurrentFiber(fiber);
      } else {
        resetCurrentFiber();
      }
    }
  }
}

var didWarnStateUpdateForUnmountedComponent = null;

function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
  {
    var tag = fiber.tag;

    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    } // If there are pending passive effects unmounts for this Fiber,
    // we can assume that they would have prevented this update.


    if ((fiber.flags & PassiveUnmountPendingDev) !== NoFlags) {
      return;
    } // We show the whole stack but dedupe on the top component's name because
    // the problematic code almost always lies inside that component.


    var componentName = getComponentName(fiber.type) || 'ReactComponent';

    if (didWarnStateUpdateForUnmountedComponent !== null) {
      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForUnmountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
    }

    if (isFlushingPassiveEffects) ; else {
      var previousFiber = current;

      try {
        setCurrentFiber(fiber);

        error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function');
      } finally {
        if (previousFiber) {
          setCurrentFiber(fiber);
        } else {
          resetCurrentFiber();
        }
      }
    }
  }
}

var beginWork$1;

{
  var dummyFiber = null;

  beginWork$1 = function (current, unitOfWork, lanes) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork(current, unitOfWork, lanes);
    } catch (originalError) {
      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises. Treat everything else like an error.
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if ( unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, lanes);

      if (hasCaughtError()) {
        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
        // Rethrow this error instead of the original one.

        throw replayError;
      } else {
        // This branch is reachable if the render phase is impure.
        throw originalError;
      }
    }
  };
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInRenderForAnotherComponent;

{
  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
}

function warnAboutRenderPhaseUpdatesInDEV(fiber) {
  {
    if (isRendering && (executionContext & RenderContext) !== NoContext && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

            var dedupeKey = renderingComponentName;

            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://reactjs.org/link/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
            }

            break;
          }

        case ClassComponent:
          {
            if (!didWarnAboutUpdateInRender) {
              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

              didWarnAboutUpdateInRender = true;
            }

            break;
          }
      }
    }
  }
} // a 'shared' variable that changes when act() opens/closes in tests.


var IsThisRendererActing = {
  current: false
};
function warnIfNotScopedWithMatchingAct(fiber) {
  {
    if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
      var previousFiber = current;

      try {
        setCurrentFiber(fiber);

        error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
        'import {act} fr' + "om 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + // Break up imports to avoid accidentally parsing them as dependencies.
        'import TestRenderer fr' + "om react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);');
      } finally {
        if (previousFiber) {
          setCurrentFiber(fiber);
        } else {
          resetCurrentFiber();
        }
      }
    }
  }
}
function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
  {
    if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
    }
  }
}

function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
  {
    if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      var previousFiber = current;

      try {
        setCurrentFiber(fiber);

        error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://reactjs.org/link/wrap-tests-with-act', getComponentName(fiber.type));
      } finally {
        if (previousFiber) {
          setCurrentFiber(fiber);
        } else {
          resetCurrentFiber();
        }
      }
    }
  }
}

var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
// scheduler is the actual recommendation. The alternative could be a testing build,
// a new lib, or whatever; we dunno just yet. This message is for early adopters
// to get their tests right.

function warnIfUnmockedScheduler(fiber) {
  {
    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
        didWarnAboutUnmockedScheduler = true;

        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + // Break up requires to avoid accidentally parsing them as dependencies.
        "jest.mock('scheduler', () => require" + "('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://reactjs.org/link/mock-scheduler');
      }
    }
  }
}

function computeThreadID(root, lane) {
  // Interaction threads are unique per root and expiration time.
  // NOTE: Intentionally unsound cast. All that matters is that it's a number
  // and it represents a batch of work. Could make a helper function instead,
  // but meh this is fine for now.
  return lane * 1000 + root.interactionThreadID;
}

function markSpawnedWork(lane) {

  if (spawnedWorkDuringRender === null) {
    spawnedWorkDuringRender = [lane];
  } else {
    spawnedWorkDuringRender.push(lane);
  }
}

function scheduleInteractions(root, lane, interactions) {

  if (interactions.size > 0) {
    var pendingInteractionMap = root.pendingInteractionMap;
    var pendingInteractions = pendingInteractionMap.get(lane);

    if (pendingInteractions != null) {
      interactions.forEach(function (interaction) {
        if (!pendingInteractions.has(interaction)) {
          // Update the pending async work count for previously unscheduled interaction.
          interaction.__count++;
        }

        pendingInteractions.add(interaction);
      });
    } else {
      pendingInteractionMap.set(lane, new Set(interactions)); // Update the pending async work count for the current interactions.

      interactions.forEach(function (interaction) {
        interaction.__count++;
      });
    }

    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, lane);
      subscriber.onWorkScheduled(interactions, threadID);
    }
  }
}

function schedulePendingInteractions(root, lane) {

  scheduleInteractions(root, lane, tracing.__interactionsRef.current);
}

function startWorkOnPendingInteractions(root, lanes) {
  // we can accurately attribute time spent working on it, And so that cascading
  // work triggered during the render phase will be associated with it.


  var interactions = new Set();
  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledLane) {
    if (includesSomeLane(lanes, scheduledLane)) {
      scheduledInteractions.forEach(function (interaction) {
        return interactions.add(interaction);
      });
    }
  }); // Store the current set of interactions on the FiberRoot for a few reasons:
  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
  // without having to recalculate it. We will also use it in commitWork() to
  // pass to any Profiler onRender() hooks. This also provides DevTools with a
  // way to access it when the onCommitRoot() hook is called.

  root.memoizedInteractions = interactions;

  if (interactions.size > 0) {
    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, lanes);

      try {
        subscriber.onWorkStarted(interactions, threadID);
      } catch (error) {
        // If the subscriber throws, rethrow it in a separate task
        scheduleCallback(ImmediatePriority$1, function () {
          throw error;
        });
      }
    }
  }
}

function finishPendingInteractions(root, committedLanes) {

  var remainingLanesAfterCommit = root.pendingLanes;
  var subscriber;

  try {
    subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null && root.memoizedInteractions.size > 0) {
      // FIXME: More than one lane can finish in a single commit.
      var threadID = computeThreadID(root, committedLanes);
      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
    }
  } catch (error) {
    // If the subscriber throws, rethrow it in a separate task
    scheduleCallback(ImmediatePriority$1, function () {
      throw error;
    });
  } finally {
    // Clear completed interactions from the pending Map.
    // Unless the render was suspended or cascading work was scheduled,
    // In which case– leave pending interactions until the subsequent render.
    var pendingInteractionMap = root.pendingInteractionMap;
    pendingInteractionMap.forEach(function (scheduledInteractions, lane) {
      // Only decrement the pending interaction count if we're done.
      // If there's still work at the current priority,
      // That indicates that we are waiting for suspense data.
      if (!includesSomeLane(remainingLanesAfterCommit, lane)) {
        pendingInteractionMap.delete(lane);
        scheduledInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              // If the subscriber throws, rethrow it in a separate task
              scheduleCallback(ImmediatePriority$1, function () {
                throw error;
              });
            }
          }
        });
      }
    });
  }
} // `act` testing API

function shouldForceFlushFallbacksInDEV() {
  // Never force flush in production. This function should get stripped out.
  return  actingUpdatesScopeDepth > 0;
}
// so we can tell if any async act() calls try to run in parallel.


var actingUpdatesScopeDepth = 0;

function detachFiberAfterEffects(fiber) {
  fiber.sibling = null;
  fiber.stateNode = null;
}

var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    flushSync(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    /* eslint-disable no-new */

    new Map([[nonExtensibleObject, null]]);
    new Set([nonExtensibleObject]);
    /* eslint-enable no-new */
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

var debugCounter = 1;

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.flags = NoFlags;
  this.nextEffect = null;
  this.firstEffect = null;
  this.lastEffect = null;
  this.lanes = NoLanes;
  this.childLanes = NoLanes;
  this.alternate = null;

  {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  }

  {
    // This isn't directly used but is handy for debugging internals:
    this._debugID = debugCounter++;
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct$1(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct$1(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      workInProgress._debugID = current._debugID;
      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // Needed because Blocks store data on type.

    workInProgress.type = current.type; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.flags = NoFlags; // The effect list is no longer valid.

    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  workInProgress.childLanes = current.childLanes;
  workInProgress.lanes = current.lanes;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    lanes: currentDependencies.lanes,
    firstContext: currentDependencies.firstContext
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderLanes) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect tag but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.flags &= Placement; // The effect list is no longer valid.

  workInProgress.nextEffect = null;
  workInProgress.firstEffect = null;
  workInProgress.lastEffect = null;
  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childLanes = NoLanes;
    workInProgress.lanes = renderLanes;
    workInProgress.child = null;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;
    workInProgress.stateNode = null;

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childLanes = current.childLanes;
    workInProgress.lanes = current.lanes;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Needed because Blocks store data on type.

    workInProgress.type = current.type; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      lanes: currentDependencies.lanes,
      firstContext: currentDependencies.firstContext
    };

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode | BlockingMode | StrictMode;
  } else if (tag === BlockingRoot) {
    mode = BlockingMode | StrictMode;
  } else {
    mode = NoMode;
  }

  if ( isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, lanes) {
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct$1(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, lanes, key);

      case REACT_DEBUG_TRACING_MODE_TYPE:
        fiberTag = Mode;
        mode |= DebugTracingMode;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, lanes, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, lanes, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, lanes, key);

      case REACT_OFFSCREEN_TYPE:
        return createFiberFromOffscreen(pendingProps, mode, lanes, key);

      case REACT_LEGACY_HIDDEN_TYPE:
        return createFiberFromLegacyHidden(pendingProps, mode, lanes, key);

      case REACT_SCOPE_TYPE:

      // eslint-disable-next-line no-fallthrough

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;

              case REACT_BLOCK_TYPE:
                fiberTag = Block;
                break getTag;
            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentName(owner.type) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          {
            {
              throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
            }
          }
        }
    }
  }

  var fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.lanes = lanes;

  {
    fiber._debugOwner = owner;
  }

  return fiber;
}
function createFiberFromElement(element, mode, lanes) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, lanes, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.lanes = lanes;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, lanes, key) {
  {
    if (typeof pendingProps.id !== 'string') {
      error('Profiler must specify an "id" as a prop');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.type = REACT_PROFILER_TYPE;
  fiber.lanes = lanes;

  {
    fiber.stateNode = {
      effectDuration: 0,
      passiveEffectDuration: 0
    };
  }

  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, lanes, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  fiber.type = REACT_SUSPENSE_TYPE;
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

  {
    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.
    fiber.type = REACT_SUSPENSE_LIST_TYPE;
  }

  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
  var fiber = createFiber(OffscreenComponent, pendingProps, key, mode); // TODO: The OffscreenComponent fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  {
    fiber.type = REACT_OFFSCREEN_TYPE;
  }

  fiber.elementType = REACT_OFFSCREEN_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromLegacyHidden(pendingProps, mode, lanes, key) {
  var fiber = createFiber(LegacyHiddenComponent, pendingProps, key, mode); // TODO: The LegacyHidden fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  {
    fiber.type = REACT_LEGACY_HIDDEN_TYPE;
  }

  fiber.elementType = REACT_LEGACY_HIDDEN_TYPE;
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromText(content, mode, lanes) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.lanes = lanes;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

  fiber.elementType = 'DELETED';
  fiber.type = 'DELETED';
  return fiber;
}
function createFiberFromPortal(portal, mode, lanes) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.lanes = lanes;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.flags = source.flags;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.lanes = source.lanes;
  target.childLanes = source.childLanes;
  target.alternate = source.alternate;

  {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  target._debugID = source._debugID;
  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate) {
  this.tag = tag;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.current = null;
  this.pingCache = null;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.hydrate = hydrate;
  this.callbackNode = null;
  this.callbackPriority = NoLanePriority;
  this.eventTimes = createLaneMap(NoLanes);
  this.expirationTimes = createLaneMap(NoTimestamp);
  this.pendingLanes = NoLanes;
  this.suspendedLanes = NoLanes;
  this.pingedLanes = NoLanes;
  this.expiredLanes = NoLanes;
  this.mutableReadLanes = NoLanes;
  this.finishedLanes = NoLanes;
  this.entangledLanes = NoLanes;
  this.entanglements = createLaneMap(NoLanes);

  {
    this.mutableSourceEagerHydrationData = null;
  }

  {
    this.interactionThreadID = tracing.unstable_getThreadID();
    this.memoizedInteractions = new Set();
    this.pendingInteractionMap = new Map();
  }

  {
    switch (tag) {
      case BlockingRoot:
        this._debugRootType = 'createBlockingRoot()';
        break;

      case ConcurrentRoot:
        this._debugRootType = 'createRoot()';
        break;

      case LegacyRoot:
        this._debugRootType = 'createLegacyRoot()';
        break;
    }
  }
}

function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate);
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;
  initializeUpdateQueue(uninitializedFiber);
  return root;
}

// This ensures that the version used for server rendering matches the one
// that is eventually read during hydration.
// If they don't match there's a potential tear and a full deopt render is required.

function registerMutableSourceForHydration(root, mutableSource) {
  var getVersion = mutableSource._getVersion;
  var version = getVersion(mutableSource._source); // TODO Clear this data once all pending hydration work is finished.
  // Retaining it forever may interfere with GC.

  if (root.mutableSourceEagerHydrationData == null) {
    root.mutableSourceEagerHydrationData = [mutableSource, version];
  } else {
    root.mutableSourceEagerHydrationData.push(mutableSource, version);
  }
}

function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        {
          {
            throw Error( "Unable to find node on an unmounted component." );
          }
        }
      } else {
        {
          {
            throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
          }
        }
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictMode) {
      var componentName = getComponentName(fiber.type) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;
        var previousFiber = current;

        try {
          setCurrentFiber(hostFiber);

          if (fiber.mode & StrictMode) {
            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
          } else {
            error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-find-node', methodName, methodName, componentName);
          }
        } finally {
          // Ideally this should reset to previous but this shouldn't be called in
          // render and there's another warning for that anyway.
          if (previousFiber) {
            setCurrentFiber(previousFiber);
          } else {
            resetCurrentFiber();
          }
        }
      }
    }

    return hostFiber.stateNode;
  }
}

function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
  return createFiberRoot(containerInfo, tag, hydrate);
}
function updateContainer(element, container, parentComponent, callback) {
  {
    onScheduleRoot(container, element);
  }

  var current$1 = container.current;
  var eventTime = requestEventTime();

  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfUnmockedScheduler(current$1);
      warnIfNotScopedWithMatchingAct(current$1);
    }
  }

  var lane = requestUpdateLane(current$1);

  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;

      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(eventTime, lane); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    {
      if (typeof callback !== 'function') {
        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
      }
    }

    update.callback = callback;
  }

  enqueueUpdate(current$1, update);
  scheduleUpdateOnFiber(current$1, lane, eventTime);
  return lane;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}

function markRetryLaneImpl(fiber, retryLane) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
  }
} // Increases the priority of thennables when they resolve within this boundary.


function markRetryLaneIfNotHydrated(fiber, retryLane) {
  markRetryLaneImpl(fiber, retryLane);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryLaneImpl(alternate, retryLane);
  }
}

function attemptUserBlockingHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var eventTime = requestEventTime();
  var lane = InputDiscreteHydrationLane;
  scheduleUpdateOnFiber(fiber, lane, eventTime);
  markRetryLaneIfNotHydrated(fiber, lane);
}
function attemptContinuousHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var eventTime = requestEventTime();
  var lane = SelectiveHydrationLane;
  scheduleUpdateOnFiber(fiber, lane, eventTime);
  markRetryLaneIfNotHydrated(fiber, lane);
}
function attemptHydrationAtCurrentPriority$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var eventTime = requestEventTime();
  var lane = requestUpdateLane(fiber);
  scheduleUpdateOnFiber(fiber, lane, eventTime);
  markRetryLaneIfNotHydrated(fiber, lane);
}
function runWithPriority$2(priority, fn) {

  try {
    setCurrentUpdateLanePriority(priority);
    return fn();
  } finally {
  }
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  if (hostFiber.tag === FundamentalComponent) {
    return hostFiber.stateNode.instance;
  }

  return hostFiber.stateNode;
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideHookStateDeletePath = null;
var overrideHookStateRenamePath = null;
var overrideProps = null;
var overridePropsDeletePath = null;
var overridePropsRenamePath = null;
var scheduleUpdate = null;
var setSuspenseHandler = null;

{
  var copyWithDeleteImpl = function (obj, path, index) {
    var key = path[index];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

    if (index + 1 === path.length) {
      if (Array.isArray(updated)) {
        updated.splice(key, 1);
      } else {
        delete updated[key];
      }

      return updated;
    } // $FlowFixMe number or string is fine here


    updated[key] = copyWithDeleteImpl(obj[key], path, index + 1);
    return updated;
  };

  var copyWithDelete = function (obj, path) {
    return copyWithDeleteImpl(obj, path, 0);
  };

  var copyWithRenameImpl = function (obj, oldPath, newPath, index) {
    var oldKey = oldPath[index];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj);

    if (index + 1 === oldPath.length) {
      var newKey = newPath[index]; // $FlowFixMe number or string is fine here

      updated[newKey] = updated[oldKey];

      if (Array.isArray(updated)) {
        updated.splice(oldKey, 1);
      } else {
        delete updated[oldKey];
      }
    } else {
      // $FlowFixMe number or string is fine here
      updated[oldKey] = copyWithRenameImpl( // $FlowFixMe number or string is fine here
      obj[oldKey], oldPath, newPath, index + 1);
    }

    return updated;
  };

  var copyWithRename = function (obj, oldPath, newPath) {
    if (oldPath.length !== newPath.length) {
      warn('copyWithRename() expects paths of the same length');

      return;
    } else {
      for (var i = 0; i < newPath.length - 1; i++) {
        if (oldPath[i] !== newPath[i]) {
          warn('copyWithRename() expects paths to be the same except for the deepest key');

          return;
        }
      }
    }

    return copyWithRenameImpl(obj, oldPath, newPath, 0);
  };

  var copyWithSetImpl = function (obj, path, index, value) {
    if (index >= path.length) {
      return value;
    }

    var key = path[index];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, index + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  };

  var findHook = function (fiber, id) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    return currentHook;
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithSet(hook.memoizedState, path, value);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    }
  };

  overrideHookStateDeletePath = function (fiber, id, path) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithDelete(hook.memoizedState, path);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    }
  };

  overrideHookStateRenamePath = function (fiber, id, oldPath, newPath) {
    var hook = findHook(fiber, id);

    if (hook !== null) {
      var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
      hook.memoizedState = newState;
      hook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
  };

  overridePropsDeletePath = function (fiber, path) {
    fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
  };

  overridePropsRenamePath = function (fiber, oldPath, newPath) {
    fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
  };

  scheduleUpdate = function (fiber) {
    scheduleUpdateOnFiber(fiber, SyncLane, NoTimestamp);
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function findHostInstanceByFiber(fiber) {
  var hostFiber = findCurrentHostFiber(fiber);

  if (hostFiber === null) {
    return null;
  }

  return hostFiber.stateNode;
}

function emptyFindFiberByHostInstance(instance) {
  return null;
}

function getCurrentFiberForDevTools() {
  return current;
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals({
    bundleType: devToolsConfig.bundleType,
    version: devToolsConfig.version,
    rendererPackageName: devToolsConfig.rendererPackageName,
    rendererConfig: devToolsConfig.rendererConfig,
    overrideHookState: overrideHookState,
    overrideHookStateDeletePath: overrideHookStateDeletePath,
    overrideHookStateRenamePath: overrideHookStateRenamePath,
    overrideProps: overrideProps,
    overridePropsDeletePath: overridePropsDeletePath,
    overridePropsRenamePath: overridePropsRenamePath,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: findHostInstanceByFiber,
    findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
    // React Refresh
    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
    scheduleRefresh:  scheduleRefresh ,
    scheduleRoot:  scheduleRoot ,
    setRefreshHandler:  setRefreshHandler ,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber:  getCurrentFiberForDevTools 
  });
}

function ReactDOMRoot(container, options) {
  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
}

function ReactDOMBlockingRoot(container, tag, options) {
  this._internalRoot = createRootImpl(container, tag, options);
}

ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
  var root = this._internalRoot;

  {
    if (typeof arguments[1] === 'function') {
      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }

    var container = root.containerInfo;

    if (container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(root.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
        }
      }
    }
  }

  updateContainer(children, root, null, null);
};

ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
  {
    if (typeof arguments[0] === 'function') {
      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }
  }

  var root = this._internalRoot;
  var container = root.containerInfo;
  updateContainer(null, root, null, function () {
    unmarkContainerAsRoot(container);
  });
};

function createRootImpl(container, tag, options) {
  // Tag is either LegacyRoot or Concurrent Root
  var hydrate = options != null && options.hydrate === true;
  var hydrationCallbacks = options != null && options.hydrationOptions || null;
  var mutableSources = options != null && options.hydrationOptions != null && options.hydrationOptions.mutableSources || null;
  var root = createContainer(container, tag, hydrate);
  markContainerAsRoot(root.current, container);
  var containerNodeType = container.nodeType;

  {
    var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
    listenToAllSupportedEvents(rootContainerElement);
  }

  if (mutableSources) {
    for (var i = 0; i < mutableSources.length; i++) {
      var mutableSource = mutableSources[i];
      registerMutableSourceForHydration(root, mutableSource);
    }
  }

  return root;
}
function createLegacyRoot(container, options) {
  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
}
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
var topLevelUpdateWarnings;
var warnedAboutHydrateAPI = false;

{
  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
        }
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));

    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
    }

    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
    }
  };
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

function legacyCreateRootFromDOMContainer(container, forceHydrate) {
  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

  if (!shouldHydrate) {
    var warned = false;
    var rootSibling;

    while (rootSibling = container.lastChild) {
      {
        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
          warned = true;

          error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
        }
      }

      container.removeChild(rootSibling);
    }
  }

  {
    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
      warnedAboutHydrateAPI = true;

      warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v18. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
    }
  }

  return createLegacyRoot(container, shouldHydrate ? {
    hydrate: true
  } : undefined);
}

function warnOnInvalidCallback$1(callback, callerName) {
  {
    if (callback !== null && typeof callback !== 'function') {
      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  }
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  {
    topLevelUpdateWarnings(container);
    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
  // member of intersection type." Whyyyyyy.


  var root = container._reactRootContainer;
  var fiberRoot;

  if (!root) {
    // Initial mount
    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);
        originalCallback.call(instance);
      };
    } // Initial mount should not be batched.


    unbatchedUpdates(function () {
      updateContainer(children, fiberRoot, parentComponent, callback);
    });
  } else {
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var _originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);

        _originalCallback.call(instance);
      };
    } // Update


    updateContainer(children, fiberRoot, parentComponent, callback);
  }

  return getPublicRootInstance(fiberRoot);
}

function findDOMNode(componentOrElement) {
  {
    var owner = ReactCurrentOwner$3.current;

    if (owner !== null && owner.stateNode !== null) {
      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

      if (!warnedAboutRefsInRender) {
        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
      }

      owner.stateNode._warnedAboutRefsInRender = true;
    }
  }

  if (componentOrElement == null) {
    return null;
  }

  if (componentOrElement.nodeType === ELEMENT_NODE) {
    return componentOrElement;
  }

  {
    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
  }
}
function hydrate(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
    }
  } // TODO: throw or warn if we couldn't hydrate?


  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
}
function render(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
    }
  }

  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
}
function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  if (!isValidContainer(containerNode)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  if (!(parentComponent != null && has(parentComponent))) {
    {
      throw Error( "parentComponent must be a valid React Component" );
    }
  }

  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
}
function unmountComponentAtNode(container) {
  if (!isValidContainer(container)) {
    {
      throw Error( "unmountComponentAtNode(...): Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
    }
  }

  if (container._reactRootContainer) {
    {
      var rootEl = getReactRootElementInContainer(container);
      var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);

      if (renderedByDifferentReact) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }
    } // Unmount should not be batched.


    unbatchedUpdates(function () {
      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
        // $FlowFixMe This should probably use `delete container._reactRootContainer`
        container._reactRootContainer = null;
        unmarkContainerAsRoot(container);
      });
    }); // If you call unmountComponentAtNode twice in quick succession, you'll
    // get `true` twice. That's probably fine?

    return true;
  } else {
    {
      var _rootEl = getReactRootElementInContainer(container);

      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl)); // Check if the container itself is a React root node.

      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

      if (hasNonRootReactChild) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
      }
    }

    return false;
  }
}

setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
setAttemptContinuousHydration(attemptContinuousHydration$1);
setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
setAttemptHydrationAtPriority(runWithPriority$2);
var didWarnAboutUnstableCreatePortal = false;

{
  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
  }
}

setRestoreImplementation(restoreControlledState$3);
setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

function createPortal$1(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  } // TODO: pass ReactDOM portal implementation as third argument
  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


  return createPortal(children, container, null, key);
}

function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
}

function unstable_createPortal(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  {
    if (!didWarnAboutUnstableCreatePortal) {
      didWarnAboutUnstableCreatePortal = true;

      warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 18+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
    }
  }

  return createPortal$1(children, container, key);
}

var Internals = {
  // Keep in sync with ReactTestUtils.js, and ReactTestUtilsAct.js.
  // This is an array for better minification.
  Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, flushPassiveEffects, // TODO: This is related to `act`, not events. Move to separate key?
  IsThisRendererActing]
};
var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType:  1 ,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

      if (/^(https?|file):$/.test(protocol)) {
        // eslint-disable-next-line react-internal/no-production-logging
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://reactjs.org/link/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://reactjs.org/link/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}

exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
exports.createPortal = createPortal$1;
exports.findDOMNode = findDOMNode;
exports.flushSync = flushSync;
exports.hydrate = hydrate;
exports.render = render;
exports.unmountComponentAtNode = unmountComponentAtNode;
exports.unstable_batchedUpdates = batchedUpdates$1;
exports.unstable_createPortal = unstable_createPortal;
exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
exports.version = ReactVersion;
  })();
}


/***/ }),

/***/ "./node_modules/_react-dom@17.0.2@react-dom/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/_react-dom@17.0.2@react-dom/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (true) {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react-dom.development.js */ "./node_modules/_react-dom@17.0.2@react-dom/cjs/react-dom.development.js");
}


/***/ }),

/***/ "./node_modules/_react@17.0.2@react/cjs/react.development.js":
/*!*******************************************************************!*\
  !*** ./node_modules/_react@17.0.2@react/cjs/react.development.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
/** @license React v17.0.2
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var _assign = __webpack_require__(/*! object-assign */ "./node_modules/_object-assign@4.1.1@object-assign/index.js");

// TODO: this is special because it gets imported during build.
var ReactVersion = '17.0.2';

// ATTENTION
// When adding new symbols to this file,
// Please consider also adding to 'react-devtools-shared/src/backend/ReactSymbols'
// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var REACT_ELEMENT_TYPE = 0xeac7;
var REACT_PORTAL_TYPE = 0xeaca;
exports.Fragment = 0xeacb;
exports.StrictMode = 0xeacc;
exports.Profiler = 0xead2;
var REACT_PROVIDER_TYPE = 0xeacd;
var REACT_CONTEXT_TYPE = 0xeace;
var REACT_FORWARD_REF_TYPE = 0xead0;
exports.Suspense = 0xead1;
var REACT_SUSPENSE_LIST_TYPE = 0xead8;
var REACT_MEMO_TYPE = 0xead3;
var REACT_LAZY_TYPE = 0xead4;
var REACT_BLOCK_TYPE = 0xead9;
var REACT_SERVER_BLOCK_TYPE = 0xeada;
var REACT_FUNDAMENTAL_TYPE = 0xead5;
var REACT_SCOPE_TYPE = 0xead7;
var REACT_OPAQUE_ID_TYPE = 0xeae0;
var REACT_DEBUG_TRACING_MODE_TYPE = 0xeae1;
var REACT_OFFSCREEN_TYPE = 0xeae2;
var REACT_LEGACY_HIDDEN_TYPE = 0xeae3;

if (typeof Symbol === 'function' && Symbol.for) {
  var symbolFor = Symbol.for;
  REACT_ELEMENT_TYPE = symbolFor('react.element');
  REACT_PORTAL_TYPE = symbolFor('react.portal');
  exports.Fragment = symbolFor('react.fragment');
  exports.StrictMode = symbolFor('react.strict_mode');
  exports.Profiler = symbolFor('react.profiler');
  REACT_PROVIDER_TYPE = symbolFor('react.provider');
  REACT_CONTEXT_TYPE = symbolFor('react.context');
  REACT_FORWARD_REF_TYPE = symbolFor('react.forward_ref');
  exports.Suspense = symbolFor('react.suspense');
  REACT_SUSPENSE_LIST_TYPE = symbolFor('react.suspense_list');
  REACT_MEMO_TYPE = symbolFor('react.memo');
  REACT_LAZY_TYPE = symbolFor('react.lazy');
  REACT_BLOCK_TYPE = symbolFor('react.block');
  REACT_SERVER_BLOCK_TYPE = symbolFor('react.server.block');
  REACT_FUNDAMENTAL_TYPE = symbolFor('react.fundamental');
  REACT_SCOPE_TYPE = symbolFor('react.scope');
  REACT_OPAQUE_ID_TYPE = symbolFor('react.opaque.id');
  REACT_DEBUG_TRACING_MODE_TYPE = symbolFor('react.debug_trace_mode');
  REACT_OFFSCREEN_TYPE = symbolFor('react.offscreen');
  REACT_LEGACY_HIDDEN_TYPE = symbolFor('react.legacy_hidden');
}

var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  transition: 0
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var ReactDebugCurrentFrame = {};
var currentExtraStackFrame = null;
function setExtraStackFrame(stack) {
  {
    currentExtraStackFrame = stack;
  }
}

{
  ReactDebugCurrentFrame.setExtraStackFrame = function (stack) {
    {
      currentExtraStackFrame = stack;
    }
  }; // Stack implementation injected by the current renderer.


  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentExtraStackFrame) {
      stack += currentExtraStackFrame;
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

/**
 * Used by act() to track whether you're inside an act() scope.
 */
var IsSomeRendererActing = {
  current: false
};

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner,
  IsSomeRendererActing: IsSomeRendererActing,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: _assign
};

{
  ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
    var stack = ReactDebugCurrentFrame.getStackAddendum();

    if (stack !== '') {
      format += '%s';
      args = args.concat([stack]);
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);
  }
}

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
    {
      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
    }
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

_assign(pureComponentPrototype, Component.prototype);

pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getContextName(type) {
  return type.displayName || 'Context';
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case exports.Fragment:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case exports.Profiler:
      return 'Profiler';

    case exports.StrictMode:
      return 'StrictMode';

    case exports.Suspense:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        var context = type;
        return getContextName(context) + '.Consumer';

      case REACT_PROVIDER_TYPE:
        var provider = type;
        return getContextName(provider._context) + '.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            return getComponentName(init(payload));
          } catch (x) {
            return null;
          }
        }
    }
  }

  return null;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://reactjs.org/link/special-props)', displayName);
      }
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

function warnIfStringRefCannotBeAutoConverted(config) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;

      {
        warnIfStringRefCannotBeAutoConverted(config);
      }
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (!!(element === null || element === undefined)) {
    {
      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
    }
  }

  var propName; // Original props are copied

  var props = _assign({}, element.props); // Reserved names are extracted


  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = key.replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return text.replace(userProvidedKeyEscapeRegex, '$&/');
}
/**
 * Generate a key string that identifies a element within a set.
 *
 * @param {*} element A element that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getElementKey(element, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof element === 'object' && element !== null && element.key != null) {
    // Explicit key
    return escape('' + element.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    var _child = children;
    var mappedChild = callback(_child); // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows:

    var childKey = nameSoFar === '' ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;

    if (Array.isArray(mappedChild)) {
      var escapedChildKey = '';

      if (childKey != null) {
        escapedChildKey = escapeUserProvidedKey(childKey) + '/';
      }

      mapIntoArray(mappedChild, array, escapedChildKey, '', function (c) {
        return c;
      });
    } else if (mappedChild != null) {
      if (isValidElement(mappedChild)) {
        mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
        // traverseAllChildren used to do for objects as children
        escapedPrefix + ( // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
        mappedChild.key && (!_child || _child.key !== mappedChild.key) ? // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
        escapeUserProvidedKey('' + mappedChild.key) + '/' : '') + childKey);
      }

      array.push(mappedChild);
    }

    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getElementKey(child, i);
      subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {
      var iterableChildren = children;

      {
        // Warn about using Maps as children
        if (iteratorFn === iterableChildren.entries) {
          if (!didWarnAboutMaps) {
            warn('Using Maps as children is not supported. ' + 'Use an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(iterableChildren);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getElementKey(child, ii++);
        subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
      }
    } else if (type === 'object') {
      var childrenString = '' + children;

      {
        {
          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + "). If you meant to render a collection of children, use an array instead." );
        }
      }
    }
  }

  return subtreeCount;
}

/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */
function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  var count = 0;
  mapIntoArray(children, result, '', '', function (child) {
    return func.call(context, child, count++);
  });
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  var n = 0;
  mapChildren(children, function () {
    n++; // Don't return anything
  });
  return n;
}

/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */
function forEachChildren(children, forEachFunc, forEachContext) {
  mapChildren(children, function () {
    forEachFunc.apply(this, arguments); // Don't return anything.
  }, forEachContext);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  return mapChildren(children, function (child) {
    return child;
  }) || [];
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    {
      throw Error( "React.Children.only expected to receive a single React element child." );
    }
  }

  return children;
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
      }
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;
  var hasWarnedAboutDisplayNameOnConsumer = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context,
      _calculateChangedBits: context._calculateChangedBits
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;

            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;

            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      },
      displayName: {
        get: function () {
          return context.displayName;
        },
        set: function (displayName) {
          if (!hasWarnedAboutDisplayNameOnConsumer) {
            warn('Setting `displayName` on Context.Consumer has no effect. ' + "You should set it directly on the context with Context.displayName = '%s'.", displayName);

            hasWarnedAboutDisplayNameOnConsumer = true;
          }
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;

function lazyInitializer(payload) {
  if (payload._status === Uninitialized) {
    var ctor = payload._result;
    var thenable = ctor(); // Transition to the next state.

    var pending = payload;
    pending._status = Pending;
    pending._result = thenable;
    thenable.then(function (moduleObject) {
      if (payload._status === Pending) {
        var defaultExport = moduleObject.default;

        {
          if (defaultExport === undefined) {
            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + // Break up imports to avoid accidentally parsing them as dependencies.
            'const MyComponent = lazy(() => imp' + "ort('./MyComponent'))", moduleObject);
          }
        } // Transition to the next state.


        var resolved = payload;
        resolved._status = Resolved;
        resolved._result = defaultExport;
      }
    }, function (error) {
      if (payload._status === Pending) {
        // Transition to the next state.
        var rejected = payload;
        rejected._status = Rejected;
        rejected._result = error;
      }
    });
  }

  if (payload._status === Resolved) {
    return payload._result;
  } else {
    throw payload._result;
  }
}

function lazy(ctor) {
  var payload = {
    // We use these fields to store the result.
    _status: -1,
    _result: ctor
  };
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _payload: payload,
    _init: lazyInitializer
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes; // $FlowFixMe

    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          defaultProps = newDefaultProps; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          propTypes = newPropTypes; // Match production behavior more closely:
          // $FlowFixMe

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      if (render.length !== 0 && render.length !== 2) {
        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
      }
    }

    if (render != null) {
      if (render.defaultProps != null || render.propTypes != null) {
        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
      }
    }
  }

  var elementType = {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name;

        if (render.displayName == null) {
          render.displayName = name;
        }
      }
    });
  }

  return elementType;
}

// Filter certain DOM attributes (e.g. src, href) if their values are empty strings.

var enableScopeAPI = false; // Experimental Create Event Handle API.

function isValidElementType(type) {
  if (typeof type === 'string' || typeof type === 'function') {
    return true;
  } // Note: typeof might be other than 'symbol' or 'number' (e.g. if it's a polyfill).


  if (type === exports.Fragment || type === exports.Profiler || type === REACT_DEBUG_TRACING_MODE_TYPE || type === exports.StrictMode || type === exports.Suspense || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_LEGACY_HIDDEN_TYPE || enableScopeAPI ) {
    return true;
  }

  if (typeof type === 'object' && type !== null) {
    if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_BLOCK_TYPE || type[0] === REACT_SERVER_BLOCK_TYPE) {
      return true;
    }
  }

  return false;
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  var elementType = {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };

  {
    var ownName;
    Object.defineProperty(elementType, 'displayName', {
      enumerable: false,
      configurable: true,
      get: function () {
        return ownName;
      },
      set: function (name) {
        ownName = name;

        if (type.displayName == null) {
          type.displayName = name;
        }
      }
    });
  }

  return elementType;
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  if (!(dispatcher !== null)) {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }

  return dispatcher;
}

function useContext(Context, unstable_observedBits) {
  var dispatcher = resolveDispatcher();

  {
    if (unstable_observedBits !== undefined) {
      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://reactjs.org/link/rules-of-hooks' : '');
    } // TODO: add a more generic warning for invalid values.


    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context, unstable_observedBits);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, deps);
}
function useLayoutEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, deps);
}
function useCallback(callback, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, deps);
}
function useMemo(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, deps);
}
function useImperativeHandle(ref, create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, deps);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}

// Helpers to patch console.logs to avoid logging during side-effect free
// replaying on render function. This currently only patches the object
// lazily which won't cover if the log function was extracted eagerly.
// We could also eagerly patch the method.
var disabledDepth = 0;
var prevLog;
var prevInfo;
var prevWarn;
var prevError;
var prevGroup;
var prevGroupCollapsed;
var prevGroupEnd;

function disabledLog() {}

disabledLog.__reactDisabledLog = true;
function disableLogs() {
  {
    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      prevLog = console.log;
      prevInfo = console.info;
      prevWarn = console.warn;
      prevError = console.error;
      prevGroup = console.group;
      prevGroupCollapsed = console.groupCollapsed;
      prevGroupEnd = console.groupEnd; // https://github.com/facebook/react/issues/19099

      var props = {
        configurable: true,
        enumerable: true,
        value: disabledLog,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        info: props,
        log: props,
        warn: props,
        error: props,
        group: props,
        groupCollapsed: props,
        groupEnd: props
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    disabledDepth++;
  }
}
function reenableLogs() {
  {
    disabledDepth--;

    if (disabledDepth === 0) {
      /* eslint-disable react-internal/no-production-logging */
      var props = {
        configurable: true,
        enumerable: true,
        writable: true
      }; // $FlowFixMe Flow thinks console is immutable.

      Object.defineProperties(console, {
        log: _assign({}, props, {
          value: prevLog
        }),
        info: _assign({}, props, {
          value: prevInfo
        }),
        warn: _assign({}, props, {
          value: prevWarn
        }),
        error: _assign({}, props, {
          value: prevError
        }),
        group: _assign({}, props, {
          value: prevGroup
        }),
        groupCollapsed: _assign({}, props, {
          value: prevGroupCollapsed
        }),
        groupEnd: _assign({}, props, {
          value: prevGroupEnd
        })
      });
      /* eslint-enable react-internal/no-production-logging */
    }

    if (disabledDepth < 0) {
      error('disabledDepth fell below zero. ' + 'This is a bug in React. Please file an issue.');
    }
  }
}

var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
var prefix;
function describeBuiltInComponentFrame(name, source, ownerFn) {
  {
    if (prefix === undefined) {
      // Extract the VM specific prefix used by each line.
      try {
        throw Error();
      } catch (x) {
        var match = x.stack.trim().match(/\n( *(at )?)/);
        prefix = match && match[1] || '';
      }
    } // We use the prefix to ensure our stacks line up with native stack frames.


    return '\n' + prefix + name;
  }
}
var reentry = false;
var componentFrameCache;

{
  var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map;
  componentFrameCache = new PossiblyWeakMap();
}

function describeNativeComponentFrame(fn, construct) {
  // If something asked for a stack inside a fake render, it should get ignored.
  if (!fn || reentry) {
    return '';
  }

  {
    var frame = componentFrameCache.get(fn);

    if (frame !== undefined) {
      return frame;
    }
  }

  var control;
  reentry = true;
  var previousPrepareStackTrace = Error.prepareStackTrace; // $FlowFixMe It does accept undefined.

  Error.prepareStackTrace = undefined;
  var previousDispatcher;

  {
    previousDispatcher = ReactCurrentDispatcher$1.current; // Set the dispatcher in DEV because this might be call in the render function
    // for warnings.

    ReactCurrentDispatcher$1.current = null;
    disableLogs();
  }

  try {
    // This should throw.
    if (construct) {
      // Something should be setting the props in the constructor.
      var Fake = function () {
        throw Error();
      }; // $FlowFixMe


      Object.defineProperty(Fake.prototype, 'props', {
        set: function () {
          // We use a throwing setter instead of frozen or non-writable props
          // because that won't throw in a non-strict mode function.
          throw Error();
        }
      });

      if (typeof Reflect === 'object' && Reflect.construct) {
        // We construct a different control for this case to include any extra
        // frames added by the construct call.
        try {
          Reflect.construct(Fake, []);
        } catch (x) {
          control = x;
        }

        Reflect.construct(fn, [], Fake);
      } else {
        try {
          Fake.call();
        } catch (x) {
          control = x;
        }

        fn.call(Fake.prototype);
      }
    } else {
      try {
        throw Error();
      } catch (x) {
        control = x;
      }

      fn();
    }
  } catch (sample) {
    // This is inlined manually because closure doesn't do it for us.
    if (sample && control && typeof sample.stack === 'string') {
      // This extracts the first frame from the sample that isn't also in the control.
      // Skipping one frame that we assume is the frame that calls the two.
      var sampleLines = sample.stack.split('\n');
      var controlLines = control.stack.split('\n');
      var s = sampleLines.length - 1;
      var c = controlLines.length - 1;

      while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
        // We expect at least one stack frame to be shared.
        // Typically this will be the root most one. However, stack frames may be
        // cut off due to maximum stack limits. In this case, one maybe cut off
        // earlier than the other. We assume that the sample is longer or the same
        // and there for cut off earlier. So we should find the root most frame in
        // the sample somewhere in the control.
        c--;
      }

      for (; s >= 1 && c >= 0; s--, c--) {
        // Next we find the first one that isn't the same which should be the
        // frame that called our sample function and the control.
        if (sampleLines[s] !== controlLines[c]) {
          // In V8, the first line is describing the message but other VMs don't.
          // If we're about to return the first line, and the control is also on the same
          // line, that's a pretty good indicator that our sample threw at same line as
          // the control. I.e. before we entered the sample frame. So we ignore this result.
          // This can happen if you passed a class to function component, or non-function.
          if (s !== 1 || c !== 1) {
            do {
              s--;
              c--; // We may still have similar intermediate frames from the construct call.
              // The next one that isn't the same should be our match though.

              if (c < 0 || sampleLines[s] !== controlLines[c]) {
                // V8 adds a "new" prefix for native classes. Let's remove it to make it prettier.
                var _frame = '\n' + sampleLines[s].replace(' at new ', ' at ');

                {
                  if (typeof fn === 'function') {
                    componentFrameCache.set(fn, _frame);
                  }
                } // Return the line we found.


                return _frame;
              }
            } while (s >= 1 && c >= 0);
          }

          break;
        }
      }
    }
  } finally {
    reentry = false;

    {
      ReactCurrentDispatcher$1.current = previousDispatcher;
      reenableLogs();
    }

    Error.prepareStackTrace = previousPrepareStackTrace;
  } // Fallback to just using the name if we couldn't make it throw.


  var name = fn ? fn.displayName || fn.name : '';
  var syntheticFrame = name ? describeBuiltInComponentFrame(name) : '';

  {
    if (typeof fn === 'function') {
      componentFrameCache.set(fn, syntheticFrame);
    }
  }

  return syntheticFrame;
}
function describeFunctionComponentFrame(fn, source, ownerFn) {
  {
    return describeNativeComponentFrame(fn, false);
  }
}

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {

  if (type == null) {
    return '';
  }

  if (typeof type === 'function') {
    {
      return describeNativeComponentFrame(type, shouldConstruct(type));
    }
  }

  if (typeof type === 'string') {
    return describeBuiltInComponentFrame(type);
  }

  switch (type) {
    case exports.Suspense:
      return describeBuiltInComponentFrame('Suspense');

    case REACT_SUSPENSE_LIST_TYPE:
      return describeBuiltInComponentFrame('SuspenseList');
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_FORWARD_REF_TYPE:
        return describeFunctionComponentFrame(type.render);

      case REACT_MEMO_TYPE:
        // Memo may contain any component type so we recursively resolve it.
        return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);

      case REACT_BLOCK_TYPE:
        return describeFunctionComponentFrame(type._render);

      case REACT_LAZY_TYPE:
        {
          var lazyComponent = type;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;

          try {
            // Lazy may contain any component type so we recursively resolve it.
            return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
          } catch (x) {}
        }
    }
  }

  return '';
}

var loggedTypeFailures = {};
var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function setCurrentlyValidatingElement(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
    } else {
      ReactDebugCurrentFrame$1.setExtraStackFrame(null);
    }
  }
}

function checkPropTypes(typeSpecs, values, location, componentName, element) {
  {
    // $FlowFixMe This is okay but Flow doesn't know it.
    var has = Function.call.bind(Object.prototype.hasOwnProperty);

    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error$1 = void 0; // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.

        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error((componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' + 'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' + 'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.');
            err.name = 'Invariant Violation';
            throw err;
          }

          error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED');
        } catch (ex) {
          error$1 = ex;
        }

        if (error$1 && !(error$1 instanceof Error)) {
          setCurrentlyValidatingElement(element);

          error('%s: type specification of %s' + ' `%s` is invalid; the type checker ' + 'function must return `null` or an `Error` but returned a %s. ' + 'You may have forgotten to pass an argument to the type checker ' + 'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' + 'shape all require an argument).', componentName || 'React class', location, typeSpecName, typeof error$1);

          setCurrentlyValidatingElement(null);
        }

        if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error$1.message] = true;
          setCurrentlyValidatingElement(element);

          error('Failed %s type: %s', location, error$1.message);

          setCurrentlyValidatingElement(null);
        }
      }
    }
  }
}

function setCurrentlyValidatingElement$1(element) {
  {
    if (element) {
      var owner = element._owner;
      var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
      setExtraStackFrame(stack);
    } else {
      setExtraStackFrame(null);
    }
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
  }

  {
    setCurrentlyValidatingElement$1(element);

    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);

    setCurrentlyValidatingElement$1(null);
  }
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      // Intentionally inside to avoid triggering lazy initializers:
      var name = getComponentName(type);
      checkPropTypes(propTypes, element.props, 'prop', name, element);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true; // Intentionally inside to avoid triggering lazy initializers:

      var _name = getComponentName(type);

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', _name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        setCurrentlyValidatingElement$1(fragment);

        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        setCurrentlyValidatingElement$1(null);
        break;
      }
    }

    if (fragment.ref !== null) {
      setCurrentlyValidatingElement$1(fragment);

      error('Invalid attribute `ref` supplied to `React.Fragment`.');

      setCurrentlyValidatingElement$1(null);
    }
  }
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    {
      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === exports.Fragment) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
var didWarnAboutDeprecatedCreateFactory = false;
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;

  {
    if (!didWarnAboutDeprecatedCreateFactory) {
      didWarnAboutDeprecatedCreateFactory = true;

      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
    } // Legacy hook: remove it


    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

{

  try {
    var frozenObject = Object.freeze({});
    /* eslint-disable no-new */

    new Map([[frozenObject, null]]);
    new Set([frozenObject]);
    /* eslint-enable no-new */
  } catch (e) {
  }
}

var createElement$1 =  createElementWithValidation ;
var cloneElement$1 =  cloneElementWithValidation ;
var createFactory =  createFactoryWithValidation ;
var Children = {
  map: mapChildren,
  forEach: forEachChildren,
  count: countChildren,
  toArray: toArray,
  only: onlyChild
};

exports.Children = Children;
exports.Component = Component;
exports.PureComponent = PureComponent;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
exports.cloneElement = cloneElement$1;
exports.createContext = createContext;
exports.createElement = createElement$1;
exports.createFactory = createFactory;
exports.createRef = createRef;
exports.forwardRef = forwardRef;
exports.isValidElement = isValidElement;
exports.lazy = lazy;
exports.memo = memo;
exports.useCallback = useCallback;
exports.useContext = useContext;
exports.useDebugValue = useDebugValue;
exports.useEffect = useEffect;
exports.useImperativeHandle = useImperativeHandle;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useReducer = useReducer;
exports.useRef = useRef;
exports.useState = useState;
exports.version = ReactVersion;
  })();
}


/***/ }),

/***/ "./node_modules/_react@17.0.2@react/index.js":
/*!***************************************************!*\
  !*** ./node_modules/_react@17.0.2@react/index.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/react.development.js */ "./node_modules/_react@17.0.2@react/cjs/react.development.js");
}


/***/ }),

/***/ "./node_modules/_scheduler@0.20.2@scheduler/cjs/scheduler-tracing.development.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/_scheduler@0.20.2@scheduler/cjs/scheduler-tracing.development.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.20.2
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

var interactionIDCounter = 0;
var threadIDCounter = 0; // Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.

exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

exports.__subscriberRef = null;

{
  exports.__interactionsRef = {
    current: new Set()
  };
  exports.__subscriberRef = {
    current: null
  };
}
function unstable_clear(callback) {

  var prevInteractions = exports.__interactionsRef.current;
  exports.__interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    exports.__interactionsRef.current = prevInteractions;
  }
}
function unstable_getCurrent() {
  {
    return exports.__interactionsRef.current;
  }
}
function unstable_getThreadID() {
  return ++threadIDCounter;
}
function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };
  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.

  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  exports.__interactionsRef.current = interactions;
  var subscriber = exports.__subscriberRef.current;
  var returnValue;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--; // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}
function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  var wrappedInteractions = exports.__interactionsRef.current;
  var subscriber = exports.__subscriberRef.current;

  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  } // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.


  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });
  var hasRun = false;

  function wrapped() {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = wrappedInteractions;
    subscriber = exports.__subscriberRef.current;

    try {
      var returnValue;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true; // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = exports.__subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;

{
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      exports.__subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}
function unstable_unsubscribe(subscriber) {
  {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      exports.__subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

exports.unstable_clear = unstable_clear;
exports.unstable_getCurrent = unstable_getCurrent;
exports.unstable_getThreadID = unstable_getThreadID;
exports.unstable_subscribe = unstable_subscribe;
exports.unstable_trace = unstable_trace;
exports.unstable_unsubscribe = unstable_unsubscribe;
exports.unstable_wrap = unstable_wrap;
  })();
}


/***/ }),

/***/ "./node_modules/_scheduler@0.20.2@scheduler/cjs/scheduler.development.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/_scheduler@0.20.2@scheduler/cjs/scheduler.development.js ***!
  \*******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
/** @license React v0.20.2
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



if (true) {
  (function() {
'use strict';

var enableSchedulerDebugging = false;
var enableProfiling = false;

var requestHostCallback;
var requestHostTimeout;
var cancelHostTimeout;
var requestPaint;
var hasPerformanceNow = typeof performance === 'object' && typeof performance.now === 'function';

if (hasPerformanceNow) {
  var localPerformance = performance;

  exports.unstable_now = function () {
    return localPerformance.now();
  };
} else {
  var localDate = Date;
  var initialTime = localDate.now();

  exports.unstable_now = function () {
    return localDate.now() - initialTime;
  };
}

if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
// implementation using setTimeout.
typeof window === 'undefined' || // Check if MessageChannel is supported, too.
typeof MessageChannel !== 'function') {
  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
  // fallback to a naive implementation.
  var _callback = null;
  var _timeoutID = null;

  var _flushCallback = function () {
    if (_callback !== null) {
      try {
        var currentTime = exports.unstable_now();
        var hasRemainingTime = true;

        _callback(hasRemainingTime, currentTime);

        _callback = null;
      } catch (e) {
        setTimeout(_flushCallback, 0);
        throw e;
      }
    }
  };

  requestHostCallback = function (cb) {
    if (_callback !== null) {
      // Protect against re-entrancy.
      setTimeout(requestHostCallback, 0, cb);
    } else {
      _callback = cb;
      setTimeout(_flushCallback, 0);
    }
  };

  requestHostTimeout = function (cb, ms) {
    _timeoutID = setTimeout(cb, ms);
  };

  cancelHostTimeout = function () {
    clearTimeout(_timeoutID);
  };

  exports.unstable_shouldYield = function () {
    return false;
  };

  requestPaint = exports.unstable_forceFrameRate = function () {};
} else {
  // Capture local references to native APIs, in case a polyfill overrides them.
  var _setTimeout = window.setTimeout;
  var _clearTimeout = window.clearTimeout;

  if (typeof console !== 'undefined') {
    // TODO: Scheduler no longer requires these methods to be polyfilled. But
    // maybe we want to continue warning if they don't exist, to preserve the
    // option to rely on it in the future?
    var requestAnimationFrame = window.requestAnimationFrame;
    var cancelAnimationFrame = window.cancelAnimationFrame;

    if (typeof requestAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
    }

    if (typeof cancelAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://reactjs.org/link/react-polyfills');
    }
  }

  var isMessageLoopRunning = false;
  var scheduledHostCallback = null;
  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
  // thread, like user events. By default, it yields multiple times per frame.
  // It does not attempt to align with frame boundaries, since most tasks don't
  // need to be frame aligned; for those that do, use requestAnimationFrame.

  var yieldInterval = 5;
  var deadline = 0; // TODO: Make this configurable

  {
    // `isInputPending` is not available. Since we have no way of knowing if
    // there's pending input, always yield at the end of the frame.
    exports.unstable_shouldYield = function () {
      return exports.unstable_now() >= deadline;
    }; // Since we yield every frame regardless, `requestPaint` has no effect.


    requestPaint = function () {};
  }

  exports.unstable_forceFrameRate = function (fps) {
    if (fps < 0 || fps > 125) {
      // Using console['error'] to evade Babel and ESLint
      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing frame rates higher than 125 fps is not supported');
      return;
    }

    if (fps > 0) {
      yieldInterval = Math.floor(1000 / fps);
    } else {
      // reset the framerate
      yieldInterval = 5;
    }
  };

  var performWorkUntilDeadline = function () {
    if (scheduledHostCallback !== null) {
      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
      // cycle. This means there's always time remaining at the beginning of
      // the message event.

      deadline = currentTime + yieldInterval;
      var hasTimeRemaining = true;

      try {
        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

        if (!hasMoreWork) {
          isMessageLoopRunning = false;
          scheduledHostCallback = null;
        } else {
          // If there's more work, schedule the next message event at the end
          // of the preceding one.
          port.postMessage(null);
        }
      } catch (error) {
        // If a scheduler task throws, exit the current browser task so the
        // error can be observed.
        port.postMessage(null);
        throw error;
      }
    } else {
      isMessageLoopRunning = false;
    } // Yielding to the browser will give it a chance to paint, so we can
  };

  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  requestHostCallback = function (callback) {
    scheduledHostCallback = callback;

    if (!isMessageLoopRunning) {
      isMessageLoopRunning = true;
      port.postMessage(null);
    }
  };

  requestHostTimeout = function (callback, ms) {
    taskTimeoutID = _setTimeout(function () {
      callback(exports.unstable_now());
    }, ms);
  };

  cancelHostTimeout = function () {
    _clearTimeout(taskTimeoutID);

    taskTimeoutID = -1;
  };
}

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  var first = heap[0];
  return first === undefined ? null : first;
}
function pop(heap) {
  var first = heap[0];

  if (first !== undefined) {
    var last = heap.pop();

    if (last !== first) {
      heap[0] = last;
      siftDown(heap, last, 0);
    }

    return first;
  } else {
    return null;
  }
}

function siftUp(heap, node, i) {
  var index = i;

  while (true) {
    var parentIndex = index - 1 >>> 1;
    var parent = heap[parentIndex];

    if (parent !== undefined && compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;

  while (index < length) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (left !== undefined && compare(left, node) < 0) {
      if (right !== undefined && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (right !== undefined && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

function markTaskErrored(task, ms) {
}

/* eslint-disable no-var */
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111

var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod code path.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging )) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || exports.unstable_shouldYield())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (typeof callback === 'function') {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;

      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
      } else {

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }
  } else {
    startTime = currentTime;
  }

  var timeout;

  switch (priorityLevel) {
    case ImmediatePriority:
      timeout = IMMEDIATE_PRIORITY_TIMEOUT;
      break;

    case UserBlockingPriority:
      timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
      break;

    case IdlePriority:
      timeout = IDLE_PRIORITY_TIMEOUT;
      break;

    case LowPriority:
      timeout = LOW_PRIORITY_TIMEOUT;
      break;

    case NormalPriority:
    default:
      timeout = NORMAL_PRIORITY_TIMEOUT;
      break;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
}

function unstable_continueExecution() {

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling =  null;

exports.unstable_IdlePriority = IdlePriority;
exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_Profiling = unstable_Profiling;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_next = unstable_next;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_wrapCallback = unstable_wrapCallback;
  })();
}


/***/ }),

/***/ "./node_modules/_scheduler@0.20.2@scheduler/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/_scheduler@0.20.2@scheduler/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ "./node_modules/_scheduler@0.20.2@scheduler/cjs/scheduler.development.js");
}


/***/ }),

/***/ "./node_modules/_scheduler@0.20.2@scheduler/tracing.js":
/*!*************************************************************!*\
  !*** ./node_modules/_scheduler@0.20.2@scheduler/tracing.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";


if (false) {} else {
  module.exports = __webpack_require__(/*! ./cjs/scheduler-tracing.development.js */ "./node_modules/_scheduler@0.20.2@scheduler/cjs/scheduler-tracing.development.js");
}


/***/ }),

/***/ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/assertThisInitialized.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/assertThisInitialized.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _assertThisInitialized)
/* harmony export */ });
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),

/***/ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/classCallCheck.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/classCallCheck.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _classCallCheck)
/* harmony export */ });
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),

/***/ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/createClass.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/createClass.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _createClass)
/* harmony export */ });
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

/***/ }),

/***/ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/defineProperty.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/defineProperty.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _defineProperty)
/* harmony export */ });
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),

/***/ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/getPrototypeOf.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/getPrototypeOf.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _getPrototypeOf)
/* harmony export */ });
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

/***/ }),

/***/ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/inherits.js":
/*!************************************************************************************!*\
  !*** ./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/inherits.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _inherits)
/* harmony export */ });
/* harmony import */ var _setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./setPrototypeOf.js */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/setPrototypeOf.js");

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) (0,_setPrototypeOf_js__WEBPACK_IMPORTED_MODULE_0__["default"])(subClass, superClass);
}

/***/ }),

/***/ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/possibleConstructorReturn.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/possibleConstructorReturn.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _possibleConstructorReturn)
/* harmony export */ });
/* harmony import */ var _babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/typeof */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/typeof.js");
/* harmony import */ var _assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./assertThisInitialized.js */ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/assertThisInitialized.js");


function _possibleConstructorReturn(self, call) {
  if (call && ((0,_babel_runtime_helpers_typeof__WEBPACK_IMPORTED_MODULE_0__["default"])(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return (0,_assertThisInitialized_js__WEBPACK_IMPORTED_MODULE_1__["default"])(self);
}

/***/ }),

/***/ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/setPrototypeOf.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/setPrototypeOf.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _setPrototypeOf)
/* harmony export */ });
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

/***/ }),

/***/ "./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/typeof.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/_@babel_runtime@7.15.4@@babel/runtime/helpers/esm/typeof.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ _typeof)
/* harmony export */ });
function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

/***/ }),

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"ae-karas","version":"0.4.0","description":"An AfterEffects plugin for karas.","maintainers":[{"name":"army8735","email":"army8735@qq.com"}],"scripts":{"build":"npm run build:es && npm run build:web","build:es":"rollup -c rollup.config.js","build:web":"webpack --mode=production","dev":"npm run dev:es & npm run dev:web","dev:es":"rollup -c rollup.dev.config.js --watch","dev:web":"webpack --mode=development --watch"},"repository":{"type":"git","url":"git://github.com/karasjs/ae-karas.git"},"dependencies":{"classnames":"^2.3.1","karas":"~0.66.10","mobx":"^6.3.2","mobx-react":"^7.2.0","react":"^17.0.2","react-dom":"^17.0.2"},"devDependencies":{"@babel/core":"^7.8.7","@babel/plugin-proposal-class-properties":"^7.8.3","@babel/plugin-proposal-decorators":"^7.14.5","@babel/plugin-transform-runtime":"^7.15.0","@babel/preset-env":"^7.8.7","@babel/preset-react":"^7.14.5","@babel/runtime":"^7.15.3","@rollup/plugin-babel":"^5.3.0","@rollup/plugin-json":"^4.1.0","babel-loader":"^8.2.2","css-loader":"^5.2.6","css-minimizer-webpack-plugin":"^3.0.2","file-loader":"^6.2.0","less":"^4.1.1","less-loader":"^10.0.1","mini-css-extract-plugin":"^2.1.0","postcss-loader":"^6.1.1","postcss-preset-env":"^6.7.0","rollup":"^2.52.3","rollup-plugin-babel":"^4.4.0","rollup-plugin-sourcemaps":"^0.5.0","style-loader":"^3.1.0","url-loader":"^4.1.1","webpack":"^5.53.0","webpack-cli":"^4.8.0","webstorm-disable-index":"^1.2.0"},"main":"./index.js","engines":{"node":">=10.0.0"},"license":"MIT","readmeFilename":"README.md","author":"army8735 <army8735@qq.com>"}');

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ "./node_modules/_react@17.0.2@react/index.js");
/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ "./node_modules/_react-dom@17.0.2@react-dom/index.js");
/* harmony import */ var mobx__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! mobx */ "./node_modules/_mobx@6.3.3@mobx/dist/mobx.esm.js");
/* harmony import */ var mobx_react__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! mobx-react */ "./node_modules/_mobx-react@7.2.0@mobx-react/dist/mobxreact.esm.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./store */ "./src/store/index.js");
/* harmony import */ var _component_List__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./component/List */ "./src/component/List/index.js");
/* harmony import */ var _component_Preview__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./component/Preview */ "./src/component/Preview/index.js");
/* harmony import */ var _component_Loading__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./component/Loading */ "./src/component/Loading/index.js");
/* harmony import */ var _component_Alert__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./component/Alert */ "./src/component/Alert/index.js");
/* harmony import */ var _util_CSInterface__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./util/CSInterface */ "./src/util/CSInterface.js");
/* harmony import */ var _es_enums__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../es/enums */ "./es/enums.js");
/* harmony import */ var _package_json__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../package.json */ "./package.json");
/* harmony import */ var _index_html__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./index.html */ "./src/index.html");
/* harmony import */ var _index_less__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./index.less */ "./src/index.less");














react_dom__WEBPACK_IMPORTED_MODULE_1__.render( /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(mobx_react__WEBPACK_IMPORTED_MODULE_12__.Provider, _store__WEBPACK_IMPORTED_MODULE_2__["default"], /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_List__WEBPACK_IMPORTED_MODULE_3__["default"], null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_Preview__WEBPACK_IMPORTED_MODULE_4__["default"], null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_Loading__WEBPACK_IMPORTED_MODULE_5__["default"], null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement(_component_Alert__WEBPACK_IMPORTED_MODULE_6__["default"], null), /*#__PURE__*/react__WEBPACK_IMPORTED_MODULE_0__.createElement("div", {
  className: "version"
}, _package_json__WEBPACK_IMPORTED_MODULE_9__.version)), document.querySelector('#root'));
_util_CSInterface__WEBPACK_IMPORTED_MODULE_7__.csInterface.addEventListener(_es_enums__WEBPACK_IMPORTED_MODULE_8__["default"].EVENT.INIT, function (event) {
  _store__WEBPACK_IMPORTED_MODULE_2__["default"].composition.update(event.data);
});
_util_CSInterface__WEBPACK_IMPORTED_MODULE_7__.csInterface.addEventListener(_es_enums__WEBPACK_IMPORTED_MODULE_8__["default"].EVENT.LOG, function (event) {
  console.log(event.data);
});
_util_CSInterface__WEBPACK_IMPORTED_MODULE_7__.csInterface.addEventListener(_es_enums__WEBPACK_IMPORTED_MODULE_8__["default"].EVENT.WARN, function (event) {
  console.warn(event.data);
});
_util_CSInterface__WEBPACK_IMPORTED_MODULE_7__.csInterface.addEventListener(_es_enums__WEBPACK_IMPORTED_MODULE_8__["default"].EVENT.ERROR, function (event) {
  console.error(event.data);
});
_util_CSInterface__WEBPACK_IMPORTED_MODULE_7__.csInterface.addEventListener(_es_enums__WEBPACK_IMPORTED_MODULE_8__["default"].EVENT.FINISH, function (event) {
  console.warn(event.data);
  console.warn(JSON.stringify(event.data));
  (0,mobx__WEBPACK_IMPORTED_MODULE_13__.transaction)(function () {
    _store__WEBPACK_IMPORTED_MODULE_2__["default"].global.setLoading(false);
    _store__WEBPACK_IMPORTED_MODULE_2__["default"].preview.setData(event.data);
    _store__WEBPACK_IMPORTED_MODULE_2__["default"].global.setPreview(true);
  });
});
_util_CSInterface__WEBPACK_IMPORTED_MODULE_7__.csInterface.addEventListener(_es_enums__WEBPACK_IMPORTED_MODULE_8__["default"].EVENT.CANCEL, function () {
  (0,mobx__WEBPACK_IMPORTED_MODULE_13__.transaction)(function () {
    _store__WEBPACK_IMPORTED_MODULE_2__["default"].global.setLoading(false);
    _store__WEBPACK_IMPORTED_MODULE_2__["default"].global.setPreview(false);
  });
}); // 通知es初始化获取展示合成列表，不发送的话es那边不执行任何代码很神奇

_util_CSInterface__WEBPACK_IMPORTED_MODULE_7__.csInterface.evalScript('$.ae2karas.getCompositions();');
})();

/******/ })()
;
//# sourceMappingURL=index.js.map